// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    /// <summary>
    /// Allows management of [trail](https://yandex.cloud/docs/audit-trails/concepts/trail).
    /// 
    /// ## Migration from deprecated filter field
    /// 
    /// In order to migrate from using `filter` to the `filtering_policy`, you will have to:
    /// * Remove the `filter.event_filters.categories` blocks. With the introduction of `included_events`/`excluded_events` you can configure filtering per each event type.
    /// * Replace the `filter.event_filters.path_filter` with the appropriate `resource_scope` blocks. You have to account that `resource_scope` does not support specifying relations between resources, so your configuration will simplify to only the actual resources, that will be monitored.
    /// 
    /// * Replace the `filter.path_filter` block with the `filtering_policy.management_events_filter`. New API states management events filtration in a more clear way. The resources, that were specified, must migrate into the `filtering_policy.management_events_filter.resource_scope`.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //
    ///     // Create a new basic Audit Trails Trail
    ///     //
    ///     var basic_trail = new Yandex.AuditTrailsTrail("basic-trail", new()
    ///     {
    ///         Description = "Some trail description",
    ///         FilteringPolicy = new Yandex.Inputs.AuditTrailsTrailFilteringPolicyArgs
    ///         {
    ///             DataEventsFilters = new[]
    ///             {
    ///                 new Yandex.Inputs.AuditTrailsTrailFilteringPolicyDataEventsFilterArgs
    ///                 {
    ///                     ResourceScope = new[]
    ///                     {
    ///                         
    ///                         {
    ///                             { "resourceId", "home-folder" },
    ///                             { "resourceType", "resource-manager.folder" },
    ///                         },
    ///                     },
    ///                     Service = "storage",
    ///                 },
    ///                 new Yandex.Inputs.AuditTrailsTrailFilteringPolicyDataEventsFilterArgs
    ///                 {
    ///                     DnsFilter = new Yandex.Inputs.AuditTrailsTrailFilteringPolicyDataEventsFilterDnsFilterArgs
    ///                     {
    ///                         IncludeNonrecursiveQueries = true,
    ///                     },
    ///                     ResourceScope = new[]
    ///                     {
    ///                         
    ///                         {
    ///                             { "resourceId", "vpc-net-id-1" },
    ///                             { "resourceType", "vpc.network" },
    ///                         },
    ///                         
    ///                         {
    ///                             { "resourceId", "vpc-net-id-2" },
    ///                             { "resourceType", "vpc.network" },
    ///                         },
    ///                     },
    ///                     Service = "dns",
    ///                 },
    ///             },
    ///             ManagementEventsFilter = new Yandex.Inputs.AuditTrailsTrailFilteringPolicyManagementEventsFilterArgs
    ///             {
    ///                 ResourceScope = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "resourceId", "home-folder" },
    ///                         { "resourceType", "resource-manager.folder" },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         FolderId = "home-folder",
    ///         Labels = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///         LoggingDestination = new Yandex.Inputs.AuditTrailsTrailLoggingDestinationArgs
    ///         {
    ///             LogGroupId = "some-log-group",
    ///         },
    ///         ServiceAccountId = "trail-service-account",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //
    ///     // Create Trail for delivering events to YDS and gathering such events:
    ///     // * Management events from the 'some-organization' organization.
    ///     // * DNS data events with only recursive queries from the 'some-organization' organization.
    ///     // * Object Storage data events from the 'some-organization' organization.
    ///     //
    ///     var basicTrail = new Yandex.AuditTrailsTrail("basicTrail", new()
    ///     {
    ///         DataStreamDestination = new Yandex.Inputs.AuditTrailsTrailDataStreamDestinationArgs
    ///         {
    ///             DatabaseId = "some-database",
    ///             StreamName = "some-stream",
    ///         },
    ///         Description = "Some trail description",
    ///         FilteringPolicy = new Yandex.Inputs.AuditTrailsTrailFilteringPolicyArgs
    ///         {
    ///             DataEventsFilters = new[]
    ///             {
    ///                 new Yandex.Inputs.AuditTrailsTrailFilteringPolicyDataEventsFilterArgs
    ///                 {
    ///                     ResourceScope = new[]
    ///                     {
    ///                         
    ///                         {
    ///                             { "resourceId", "some-organization" },
    ///                             { "resourceType", "organization-manager.organization" },
    ///                         },
    ///                     },
    ///                     Service = "storage",
    ///                 },
    ///                 new Yandex.Inputs.AuditTrailsTrailFilteringPolicyDataEventsFilterArgs
    ///                 {
    ///                     DnsFilter = new Yandex.Inputs.AuditTrailsTrailFilteringPolicyDataEventsFilterDnsFilterArgs
    ///                     {
    ///                         IncludeNonrecursiveQueries = true,
    ///                     },
    ///                     ResourceScope = new[]
    ///                     {
    ///                         
    ///                         {
    ///                             { "resourceId", "some-organization" },
    ///                             { "resourceType", "organization-manager.organization" },
    ///                         },
    ///                     },
    ///                     Service = "dns",
    ///                 },
    ///             },
    ///             ManagementEventsFilter = new Yandex.Inputs.AuditTrailsTrailFilteringPolicyManagementEventsFilterArgs
    ///             {
    ///                 ResourceScope = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "resourceId", "some-organization" },
    ///                         { "resourceType", "organization-manager.organization" },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         FolderId = "home-folder",
    ///         Labels = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///         ServiceAccountId = "trail-service-account",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import yandex:index/auditTrailsTrail:AuditTrailsTrail &lt;resource Name&gt; &lt;resource Id&gt;
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import yandex:index/auditTrailsTrail:AuditTrailsTrail basic-trail cnpqe**********sh835
    /// ```
    /// </summary>
    [YandexResourceType("yandex:index/auditTrailsTrail:AuditTrailsTrail")]
    public partial class AuditTrailsTrail : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Structure describing destination data stream of the trail. Mutually exclusive with `logging_destination` and `storage_destination`.
        /// </summary>
        [Output("dataStreamDestination")]
        public Output<Outputs.AuditTrailsTrailDataStreamDestination?> DataStreamDestination { get; private set; } = null!;

        /// <summary>
        /// The resource description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Structure is deprecated. Use `filtering_policy` instead.
        /// </summary>
        [Output("filter")]
        public Output<Outputs.AuditTrailsTrailFilter?> Filter { get; private set; } = null!;

        /// <summary>
        /// Structure describing event filtering process for the trail. Mutually exclusive with `filter`. At least one of the `management_events_filter` or `data_events_filter` fields will be filled.
        /// </summary>
        [Output("filteringPolicy")]
        public Output<Outputs.AuditTrailsTrailFilteringPolicy?> FilteringPolicy { get; private set; } = null!;

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Structure describing destination log group of the trail. Mutually exclusive with `storage_destination` and `data_stream_destination`.
        /// </summary>
        [Output("loggingDestination")]
        public Output<Outputs.AuditTrailsTrailLoggingDestination?> LoggingDestination { get; private set; } = null!;

        /// <summary>
        /// The resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
        /// </summary>
        [Output("serviceAccountId")]
        public Output<string> ServiceAccountId { get; private set; } = null!;

        /// <summary>
        /// Status of this trail.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Structure describing destination bucket of the trail. Mutually exclusive with `logging_destination` and `data_stream_destination`.
        /// </summary>
        [Output("storageDestination")]
        public Output<Outputs.AuditTrailsTrailStorageDestination?> StorageDestination { get; private set; } = null!;

        /// <summary>
        /// ID of the trail resource.
        /// </summary>
        [Output("trailId")]
        public Output<string> TrailId { get; private set; } = null!;


        /// <summary>
        /// Create a AuditTrailsTrail resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuditTrailsTrail(string name, AuditTrailsTrailArgs args, CustomResourceOptions? options = null)
            : base("yandex:index/auditTrailsTrail:AuditTrailsTrail", name, args ?? new AuditTrailsTrailArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuditTrailsTrail(string name, Input<string> id, AuditTrailsTrailState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/auditTrailsTrail:AuditTrailsTrail", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuditTrailsTrail resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuditTrailsTrail Get(string name, Input<string> id, AuditTrailsTrailState? state = null, CustomResourceOptions? options = null)
        {
            return new AuditTrailsTrail(name, id, state, options);
        }
    }

    public sealed class AuditTrailsTrailArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Structure describing destination data stream of the trail. Mutually exclusive with `logging_destination` and `storage_destination`.
        /// </summary>
        [Input("dataStreamDestination")]
        public Input<Inputs.AuditTrailsTrailDataStreamDestinationArgs>? DataStreamDestination { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Structure is deprecated. Use `filtering_policy` instead.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.AuditTrailsTrailFilterArgs>? Filter { get; set; }

        /// <summary>
        /// Structure describing event filtering process for the trail. Mutually exclusive with `filter`. At least one of the `management_events_filter` or `data_events_filter` fields will be filled.
        /// </summary>
        [Input("filteringPolicy")]
        public Input<Inputs.AuditTrailsTrailFilteringPolicyArgs>? FilteringPolicy { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId", required: true)]
        public Input<string> FolderId { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Structure describing destination log group of the trail. Mutually exclusive with `storage_destination` and `data_stream_destination`.
        /// </summary>
        [Input("loggingDestination")]
        public Input<Inputs.AuditTrailsTrailLoggingDestinationArgs>? LoggingDestination { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
        /// </summary>
        [Input("serviceAccountId", required: true)]
        public Input<string> ServiceAccountId { get; set; } = null!;

        /// <summary>
        /// Structure describing destination bucket of the trail. Mutually exclusive with `logging_destination` and `data_stream_destination`.
        /// </summary>
        [Input("storageDestination")]
        public Input<Inputs.AuditTrailsTrailStorageDestinationArgs>? StorageDestination { get; set; }

        public AuditTrailsTrailArgs()
        {
        }
        public static new AuditTrailsTrailArgs Empty => new AuditTrailsTrailArgs();
    }

    public sealed class AuditTrailsTrailState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Structure describing destination data stream of the trail. Mutually exclusive with `logging_destination` and `storage_destination`.
        /// </summary>
        [Input("dataStreamDestination")]
        public Input<Inputs.AuditTrailsTrailDataStreamDestinationGetArgs>? DataStreamDestination { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Structure is deprecated. Use `filtering_policy` instead.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.AuditTrailsTrailFilterGetArgs>? Filter { get; set; }

        /// <summary>
        /// Structure describing event filtering process for the trail. Mutually exclusive with `filter`. At least one of the `management_events_filter` or `data_events_filter` fields will be filled.
        /// </summary>
        [Input("filteringPolicy")]
        public Input<Inputs.AuditTrailsTrailFilteringPolicyGetArgs>? FilteringPolicy { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Structure describing destination log group of the trail. Mutually exclusive with `storage_destination` and `data_stream_destination`.
        /// </summary>
        [Input("loggingDestination")]
        public Input<Inputs.AuditTrailsTrailLoggingDestinationGetArgs>? LoggingDestination { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
        /// </summary>
        [Input("serviceAccountId")]
        public Input<string>? ServiceAccountId { get; set; }

        /// <summary>
        /// Status of this trail.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Structure describing destination bucket of the trail. Mutually exclusive with `logging_destination` and `data_stream_destination`.
        /// </summary>
        [Input("storageDestination")]
        public Input<Inputs.AuditTrailsTrailStorageDestinationGetArgs>? StorageDestination { get; set; }

        /// <summary>
        /// ID of the trail resource.
        /// </summary>
        [Input("trailId")]
        public Input<string>? TrailId { get; set; }

        public AuditTrailsTrailState()
        {
        }
        public static new AuditTrailsTrailState Empty => new AuditTrailsTrailState();
    }
}
