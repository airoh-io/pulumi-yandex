// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    /// <summary>
    /// Manages a Data Transfer transfer. For more information, see [the official documentation](https://yandex.cloud/docs/data-transfer/).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //
    ///     // Create a new pair of Data Transfer Endpoints Source &amp; Target and Data Transfer.
    ///     //
    ///     // Create Data Transfer Endpoint "Source"
    ///     var pgSource = new Yandex.DatatransferEndpoint("pgSource", new()
    ///     {
    ///         Settings = new Yandex.Inputs.DatatransferEndpointSettingsArgs
    ///         {
    ///             PostgresSource = new Yandex.Inputs.DatatransferEndpointSettingsPostgresSourceArgs
    ///             {
    ///                 Connection = new Yandex.Inputs.DatatransferEndpointSettingsPostgresSourceConnectionArgs
    ///                 {
    ///                     OnPremise = new Yandex.Inputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs
    ///                     {
    ///                         Hosts = new[]
    ///                         {
    ///                             "example.org",
    ///                         },
    ///                         Port = 5432,
    ///                     },
    ///                 },
    ///                 SlotGigabyteLagLimit = 100,
    ///                 Database = "db1",
    ///                 User = "user1",
    ///                 Password = new Yandex.Inputs.DatatransferEndpointSettingsPostgresSourcePasswordArgs
    ///                 {
    ///                     Raw = "123",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Create Data Transfer Endpoint "Target"
    ///     var pgTarget = new Yandex.DatatransferEndpoint("pgTarget", new()
    ///     {
    ///         FolderId = "some_folder_id",
    ///         Settings = new Yandex.Inputs.DatatransferEndpointSettingsArgs
    ///         {
    ///             PostgresTarget = new Yandex.Inputs.DatatransferEndpointSettingsPostgresTargetArgs
    ///             {
    ///                 Connection = new Yandex.Inputs.DatatransferEndpointSettingsPostgresTargetConnectionArgs
    ///                 {
    ///                     MdbClusterId = "some_cluster_id",
    ///                 },
    ///                 Database = "db2",
    ///                 User = "user2",
    ///                 Password = new Yandex.Inputs.DatatransferEndpointSettingsPostgresTargetPasswordArgs
    ///                 {
    ///                     Raw = "321",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Create Data Transfer from "Source" to "Target"
    ///     var pgpgTransfer = new Yandex.DatatransferTransfer("pgpgTransfer", new()
    ///     {
    ///         FolderId = "some_folder_id",
    ///         SourceId = pgSource.Id,
    ///         TargetId = pgTarget.Id,
    ///         Type = "SNAPSHOT_AND_INCREMENT",
    ///         Runtime = new Yandex.Inputs.DatatransferTransferRuntimeArgs
    ///         {
    ///             YcRuntime = new Yandex.Inputs.DatatransferTransferRuntimeYcRuntimeArgs
    ///             {
    ///                 JobCount = 1,
    ///                 UploadShardParams = new Yandex.Inputs.DatatransferTransferRuntimeYcRuntimeUploadShardParamsArgs
    ///                 {
    ///                     JobCount = 4,
    ///                     ProcessCount = 1,
    ///                 },
    ///             },
    ///         },
    ///         Transformation = new Yandex.Inputs.DatatransferTransferTransformationArgs
    ///         {
    ///             Transformers = new[]
    ///             {
    ///                 null,
    ///                 null,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import yandex:index/datatransferTransfer:DatatransferTransfer &lt;resource Name&gt; &lt;resource Id&gt;
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import yandex:index/datatransferTransfer:DatatransferTransfer my_dt_transfer dttnc**********r3bkg
    /// ```
    /// </summary>
    [YandexResourceType("yandex:index/datatransferTransfer:DatatransferTransfer")]
    public partial class DatatransferTransfer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The resource description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Activation action on create a new incremental transfer. It is not part of the transfer parameter and is used only on create. One of `sync_activate`, `async_activate`, `dont_activate`. The default is `sync_activate`.
        /// </summary>
        [Output("onCreateActivateMode")]
        public Output<string?> OnCreateActivateMode { get; private set; } = null!;

        /// <summary>
        /// Runtime parameters for the transfer.
        /// </summary>
        [Output("runtime")]
        public Output<Outputs.DatatransferTransferRuntime> Runtime { get; private set; } = null!;

        /// <summary>
        /// ID of the source endpoint for the transfer.
        /// </summary>
        [Output("sourceId")]
        public Output<string> SourceId { get; private set; } = null!;

        /// <summary>
        /// ID of the target endpoint for the transfer.
        /// </summary>
        [Output("targetId")]
        public Output<string> TargetId { get; private set; } = null!;

        /// <summary>
        /// Transformation for the transfer.
        /// </summary>
        [Output("transformation")]
        public Output<Outputs.DatatransferTransferTransformation?> Transformation { get; private set; } = null!;

        /// <summary>
        /// Type of the transfer. One of `SNAPSHOT_ONLY`, `INCREMENT_ONLY`, `SNAPSHOT_AND_INCREMENT`
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Error description if transfer has any errors.
        /// </summary>
        [Output("warning")]
        public Output<string> Warning { get; private set; } = null!;


        /// <summary>
        /// Create a DatatransferTransfer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatatransferTransfer(string name, DatatransferTransferArgs? args = null, CustomResourceOptions? options = null)
            : base("yandex:index/datatransferTransfer:DatatransferTransfer", name, args ?? new DatatransferTransferArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatatransferTransfer(string name, Input<string> id, DatatransferTransferState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/datatransferTransfer:DatatransferTransfer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatatransferTransfer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatatransferTransfer Get(string name, Input<string> id, DatatransferTransferState? state = null, CustomResourceOptions? options = null)
        {
            return new DatatransferTransfer(name, id, state, options);
        }
    }

    public sealed class DatatransferTransferArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Activation action on create a new incremental transfer. It is not part of the transfer parameter and is used only on create. One of `sync_activate`, `async_activate`, `dont_activate`. The default is `sync_activate`.
        /// </summary>
        [Input("onCreateActivateMode")]
        public Input<string>? OnCreateActivateMode { get; set; }

        /// <summary>
        /// Runtime parameters for the transfer.
        /// </summary>
        [Input("runtime")]
        public Input<Inputs.DatatransferTransferRuntimeArgs>? Runtime { get; set; }

        /// <summary>
        /// ID of the source endpoint for the transfer.
        /// </summary>
        [Input("sourceId")]
        public Input<string>? SourceId { get; set; }

        /// <summary>
        /// ID of the target endpoint for the transfer.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        /// <summary>
        /// Transformation for the transfer.
        /// </summary>
        [Input("transformation")]
        public Input<Inputs.DatatransferTransferTransformationArgs>? Transformation { get; set; }

        /// <summary>
        /// Type of the transfer. One of `SNAPSHOT_ONLY`, `INCREMENT_ONLY`, `SNAPSHOT_AND_INCREMENT`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DatatransferTransferArgs()
        {
        }
        public static new DatatransferTransferArgs Empty => new DatatransferTransferArgs();
    }

    public sealed class DatatransferTransferState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Activation action on create a new incremental transfer. It is not part of the transfer parameter and is used only on create. One of `sync_activate`, `async_activate`, `dont_activate`. The default is `sync_activate`.
        /// </summary>
        [Input("onCreateActivateMode")]
        public Input<string>? OnCreateActivateMode { get; set; }

        /// <summary>
        /// Runtime parameters for the transfer.
        /// </summary>
        [Input("runtime")]
        public Input<Inputs.DatatransferTransferRuntimeGetArgs>? Runtime { get; set; }

        /// <summary>
        /// ID of the source endpoint for the transfer.
        /// </summary>
        [Input("sourceId")]
        public Input<string>? SourceId { get; set; }

        /// <summary>
        /// ID of the target endpoint for the transfer.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        /// <summary>
        /// Transformation for the transfer.
        /// </summary>
        [Input("transformation")]
        public Input<Inputs.DatatransferTransferTransformationGetArgs>? Transformation { get; set; }

        /// <summary>
        /// Type of the transfer. One of `SNAPSHOT_ONLY`, `INCREMENT_ONLY`, `SNAPSHOT_AND_INCREMENT`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Error description if transfer has any errors.
        /// </summary>
        [Input("warning")]
        public Input<string>? Warning { get; set; }

        public DatatransferTransferState()
        {
        }
        public static new DatatransferTransferState Empty => new DatatransferTransferState();
    }
}
