// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetAuditTrailsTrail
    {
        /// <summary>
        /// Get information about a trail. For information about the trail concept, see [official documentation](https://yandex.cloud/docs/audit-trails/concepts/trail).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var basic_trail = Yandex.GetAuditTrailsTrail.Invoke(new()
        ///     {
        ///         TrailId = "cnpqe**********sh835",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAuditTrailsTrailResult> InvokeAsync(GetAuditTrailsTrailArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuditTrailsTrailResult>("yandex:index/getAuditTrailsTrail:getAuditTrailsTrail", args ?? new GetAuditTrailsTrailArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a trail. For information about the trail concept, see [official documentation](https://yandex.cloud/docs/audit-trails/concepts/trail).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var basic_trail = Yandex.GetAuditTrailsTrail.Invoke(new()
        ///     {
        ///         TrailId = "cnpqe**********sh835",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAuditTrailsTrailResult> Invoke(GetAuditTrailsTrailInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuditTrailsTrailResult>("yandex:index/getAuditTrailsTrail:getAuditTrailsTrail", args ?? new GetAuditTrailsTrailInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a trail. For information about the trail concept, see [official documentation](https://yandex.cloud/docs/audit-trails/concepts/trail).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var basic_trail = Yandex.GetAuditTrailsTrail.Invoke(new()
        ///     {
        ///         TrailId = "cnpqe**********sh835",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAuditTrailsTrailResult> Invoke(GetAuditTrailsTrailInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuditTrailsTrailResult>("yandex:index/getAuditTrailsTrail:getAuditTrailsTrail", args ?? new GetAuditTrailsTrailInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuditTrailsTrailArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Trail ID.
        /// </summary>
        [Input("trailId", required: true)]
        public string TrailId { get; set; } = null!;

        public GetAuditTrailsTrailArgs()
        {
        }
        public static new GetAuditTrailsTrailArgs Empty => new GetAuditTrailsTrailArgs();
    }

    public sealed class GetAuditTrailsTrailInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Trail ID.
        /// </summary>
        [Input("trailId", required: true)]
        public Input<string> TrailId { get; set; } = null!;

        public GetAuditTrailsTrailInvokeArgs()
        {
        }
        public static new GetAuditTrailsTrailInvokeArgs Empty => new GetAuditTrailsTrailInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuditTrailsTrailResult
    {
        /// <summary>
        /// Structure describing destination data stream of the trail. Mutually exclusive with `logging_destination` and `storage_destination`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAuditTrailsTrailDataStreamDestinationResult> DataStreamDestinations;
        /// <summary>
        /// The resource description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Structure describing event filtering process for the trail. Mutually exclusive with `filter`. At least one of the `management_events_filter` or `data_events_filter` fields will be filled.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAuditTrailsTrailFilteringPolicyResult> FilteringPolicies;
        /// <summary>
        /// Structure is deprecated. Use `filtering_policy` instead.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAuditTrailsTrailFilterResult> Filters;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string FolderId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Structure describing destination log group of the trail. Mutually exclusive with `storage_destination` and `data_stream_destination`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAuditTrailsTrailLoggingDestinationResult> LoggingDestinations;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
        /// </summary>
        public readonly string ServiceAccountId;
        /// <summary>
        /// Status of this trail.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Structure describing destination bucket of the trail. Mutually exclusive with `logging_destination` and `data_stream_destination`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAuditTrailsTrailStorageDestinationResult> StorageDestinations;
        /// <summary>
        /// Trail ID.
        /// </summary>
        public readonly string TrailId;

        [OutputConstructor]
        private GetAuditTrailsTrailResult(
            ImmutableArray<Outputs.GetAuditTrailsTrailDataStreamDestinationResult> dataStreamDestinations,

            string description,

            ImmutableArray<Outputs.GetAuditTrailsTrailFilteringPolicyResult> filteringPolicies,

            ImmutableArray<Outputs.GetAuditTrailsTrailFilterResult> filters,

            string folderId,

            string id,

            ImmutableDictionary<string, string> labels,

            ImmutableArray<Outputs.GetAuditTrailsTrailLoggingDestinationResult> loggingDestinations,

            string name,

            string serviceAccountId,

            string status,

            ImmutableArray<Outputs.GetAuditTrailsTrailStorageDestinationResult> storageDestinations,

            string trailId)
        {
            DataStreamDestinations = dataStreamDestinations;
            Description = description;
            FilteringPolicies = filteringPolicies;
            Filters = filters;
            FolderId = folderId;
            Id = id;
            Labels = labels;
            LoggingDestinations = loggingDestinations;
            Name = name;
            ServiceAccountId = serviceAccountId;
            Status = status;
            StorageDestinations = storageDestinations;
            TrailId = trailId;
        }
    }
}
