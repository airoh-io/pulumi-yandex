// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetBackupPolicy
    {
        /// <summary>
        /// Get information about a Yandex Backup Policy. For more information, see [the official documentation](https://yandex.cloud/docs/backup/concepts/policy).
        /// 
        /// &gt; One of `policy_id` or `name` should be specified.
        /// 
        /// &gt; In case you use `name`, an error will occur if two policies with the same name exist. In this case, rename the policy or use the `policy_id`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myPolicy = Yandex.GetBackupPolicy.Invoke(new()
        ///     {
        ///         Name = "some_policy_name",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myPolicyName"] = myPolicy.Apply(getBackupPolicyResult =&gt; getBackupPolicyResult.Name),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetBackupPolicyResult> InvokeAsync(GetBackupPolicyArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackupPolicyResult>("yandex:index/getBackupPolicy:getBackupPolicy", args ?? new GetBackupPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Backup Policy. For more information, see [the official documentation](https://yandex.cloud/docs/backup/concepts/policy).
        /// 
        /// &gt; One of `policy_id` or `name` should be specified.
        /// 
        /// &gt; In case you use `name`, an error will occur if two policies with the same name exist. In this case, rename the policy or use the `policy_id`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myPolicy = Yandex.GetBackupPolicy.Invoke(new()
        ///     {
        ///         Name = "some_policy_name",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myPolicyName"] = myPolicy.Apply(getBackupPolicyResult =&gt; getBackupPolicyResult.Name),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetBackupPolicyResult> Invoke(GetBackupPolicyInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupPolicyResult>("yandex:index/getBackupPolicy:getBackupPolicy", args ?? new GetBackupPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Backup Policy. For more information, see [the official documentation](https://yandex.cloud/docs/backup/concepts/policy).
        /// 
        /// &gt; One of `policy_id` or `name` should be specified.
        /// 
        /// &gt; In case you use `name`, an error will occur if two policies with the same name exist. In this case, rename the policy or use the `policy_id`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myPolicy = Yandex.GetBackupPolicy.Invoke(new()
        ///     {
        ///         Name = "some_policy_name",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myPolicyName"] = myPolicy.Apply(getBackupPolicyResult =&gt; getBackupPolicyResult.Name),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetBackupPolicyResult> Invoke(GetBackupPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupPolicyResult>("yandex:index/getBackupPolicy:getBackupPolicy", args ?? new GetBackupPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// ID of the policy.
        /// </summary>
        [Input("policyId")]
        public string? PolicyId { get; set; }

        public GetBackupPolicyArgs()
        {
        }
        public static new GetBackupPolicyArgs Empty => new GetBackupPolicyArgs();
    }

    public sealed class GetBackupPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the policy.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        public GetBackupPolicyInvokeArgs()
        {
        }
        public static new GetBackupPolicyInvokeArgs Empty => new GetBackupPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackupPolicyResult
    {
        /// <summary>
        /// The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
        /// </summary>
        public readonly string ArchiveName;
        /// <summary>
        /// Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`. Default `DO_NOT_USE`.
        /// </summary>
        public readonly string Cbt;
        /// <summary>
        /// Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
        /// </summary>
        public readonly string Compression;
        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// If this field is true, it means that the policy is enabled.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are compared to those stored in the backup.
        /// </summary>
        public readonly bool FastBackupEnabled;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string FolderId;
        /// <summary>
        /// Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`, `VERSION_11`, `VERSION_12`.
        /// </summary>
        public readonly string Format;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
        /// </summary>
        public readonly bool MultiVolumeSnapshottingEnabled;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Time windows for performance limitations of backup. Default `false`.
        /// </summary>
        public readonly bool PerformanceWindowEnabled;
        /// <summary>
        /// ID of the policy.
        /// </summary>
        public readonly string PolicyId;
        /// <summary>
        /// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
        /// </summary>
        public readonly bool PreserveFileSecuritySettings;
        /// <summary>
        /// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
        /// </summary>
        public readonly bool QuiesceSnapshottingEnabled;
        public readonly ImmutableArray<Outputs.GetBackupPolicyReattemptResult> Reattempts;
        public readonly ImmutableArray<Outputs.GetBackupPolicyRetentionResult> Retentions;
        public readonly ImmutableArray<Outputs.GetBackupPolicySchedulingResult> Schedulings;
        /// <summary>
        /// If true, a user interaction will be avoided when possible. Default `true`.
        /// </summary>
        public readonly bool SilentModeEnabled;
        /// <summary>
        /// Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
        /// </summary>
        public readonly string SplittingBytes;
        /// <summary>
        /// The update timestamp of the resource.
        /// </summary>
        public readonly string UpdatedAt;
        public readonly ImmutableArray<Outputs.GetBackupPolicyVmSnapshotReattemptResult> VmSnapshotReattempts;
        /// <summary>
        /// Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
        /// </summary>
        public readonly string VssProvider;

        [OutputConstructor]
        private GetBackupPolicyResult(
            string archiveName,

            string cbt,

            string compression,

            string createdAt,

            bool enabled,

            bool fastBackupEnabled,

            string folderId,

            string format,

            string id,

            bool multiVolumeSnapshottingEnabled,

            string name,

            bool performanceWindowEnabled,

            string policyId,

            bool preserveFileSecuritySettings,

            bool quiesceSnapshottingEnabled,

            ImmutableArray<Outputs.GetBackupPolicyReattemptResult> reattempts,

            ImmutableArray<Outputs.GetBackupPolicyRetentionResult> retentions,

            ImmutableArray<Outputs.GetBackupPolicySchedulingResult> schedulings,

            bool silentModeEnabled,

            string splittingBytes,

            string updatedAt,

            ImmutableArray<Outputs.GetBackupPolicyVmSnapshotReattemptResult> vmSnapshotReattempts,

            string vssProvider)
        {
            ArchiveName = archiveName;
            Cbt = cbt;
            Compression = compression;
            CreatedAt = createdAt;
            Enabled = enabled;
            FastBackupEnabled = fastBackupEnabled;
            FolderId = folderId;
            Format = format;
            Id = id;
            MultiVolumeSnapshottingEnabled = multiVolumeSnapshottingEnabled;
            Name = name;
            PerformanceWindowEnabled = performanceWindowEnabled;
            PolicyId = policyId;
            PreserveFileSecuritySettings = preserveFileSecuritySettings;
            QuiesceSnapshottingEnabled = quiesceSnapshottingEnabled;
            Reattempts = reattempts;
            Retentions = retentions;
            Schedulings = schedulings;
            SilentModeEnabled = silentModeEnabled;
            SplittingBytes = splittingBytes;
            UpdatedAt = updatedAt;
            VmSnapshotReattempts = vmSnapshotReattempts;
            VssProvider = vssProvider;
        }
    }
}
