// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetCdnResource
    {
        /// <summary>
        /// Allows management of [Yandex Cloud CDN Resource](https://yandex.cloud/docs/cdn/concepts/resource).
        /// 
        /// &gt; CDN provider must be activated prior usage of CDN resources, either via UI console or via yc cli command: `yc cdn provider activate --folder-id &lt;folder-id&gt; --type gcore`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myResource = Yandex.GetCdnResource.Invoke(new()
        ///     {
        ///         ResourceId = "some resource id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["resourceCname"] = myResource.Apply(getCdnResourceResult =&gt; getCdnResourceResult.Cname),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetCdnResourceResult> InvokeAsync(GetCdnResourceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCdnResourceResult>("yandex:index/getCdnResource:getCdnResource", args ?? new GetCdnResourceArgs(), options.WithDefaults());

        /// <summary>
        /// Allows management of [Yandex Cloud CDN Resource](https://yandex.cloud/docs/cdn/concepts/resource).
        /// 
        /// &gt; CDN provider must be activated prior usage of CDN resources, either via UI console or via yc cli command: `yc cdn provider activate --folder-id &lt;folder-id&gt; --type gcore`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myResource = Yandex.GetCdnResource.Invoke(new()
        ///     {
        ///         ResourceId = "some resource id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["resourceCname"] = myResource.Apply(getCdnResourceResult =&gt; getCdnResourceResult.Cname),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetCdnResourceResult> Invoke(GetCdnResourceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCdnResourceResult>("yandex:index/getCdnResource:getCdnResource", args ?? new GetCdnResourceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Allows management of [Yandex Cloud CDN Resource](https://yandex.cloud/docs/cdn/concepts/resource).
        /// 
        /// &gt; CDN provider must be activated prior usage of CDN resources, either via UI console or via yc cli command: `yc cdn provider activate --folder-id &lt;folder-id&gt; --type gcore`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myResource = Yandex.GetCdnResource.Invoke(new()
        ///     {
        ///         ResourceId = "some resource id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["resourceCname"] = myResource.Apply(getCdnResourceResult =&gt; getCdnResourceResult.Cname),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetCdnResourceResult> Invoke(GetCdnResourceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCdnResourceResult>("yandex:index/getCdnResource:getCdnResource", args ?? new GetCdnResourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCdnResourceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Flag to create Resource either in active or disabled state. `True` - the content from CDN is available to clients.
        /// </summary>
        [Input("active")]
        public bool? Active { get; set; }

        /// <summary>
        /// CDN endpoint CNAME, must be unique among resources.
        /// </summary>
        [Input("cname")]
        public string? Cname { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        [Input("labels")]
        private Dictionary<string, string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public Dictionary<string, string> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, string>());
            set => _labels = value;
        }

        /// <summary>
        /// CDN Resource settings and options to tune CDN edge behavior.
        /// </summary>
        [Input("options")]
        public Inputs.GetCdnResourceOptionsArgs? Options { get; set; }

        /// <summary>
        /// The ID of a specific origin group.
        /// </summary>
        [Input("originGroupId")]
        public int? OriginGroupId { get; set; }

        /// <summary>
        /// The name of a specific origin group.
        /// </summary>
        [Input("originGroupName")]
        public string? OriginGroupName { get; set; }

        /// <summary>
        /// Protocol of origin resource. `http` or `https`.
        /// </summary>
        [Input("originProtocol")]
        public string? OriginProtocol { get; set; }

        [Input("resourceId")]
        public string? ResourceId { get; set; }

        [Input("secondaryHostnames")]
        private List<string>? _secondaryHostnames;

        /// <summary>
        /// List of secondary hostname strings.
        /// </summary>
        public List<string> SecondaryHostnames
        {
            get => _secondaryHostnames ?? (_secondaryHostnames = new List<string>());
            set => _secondaryHostnames = value;
        }

        /// <summary>
        /// SSL certificate of CDN resource.
        /// </summary>
        [Input("sslCertificate")]
        public Inputs.GetCdnResourceSslCertificateArgs? SslCertificate { get; set; }

        /// <summary>
        /// Last update timestamp. Computed value for read and update operations.
        /// </summary>
        [Input("updatedAt")]
        public string? UpdatedAt { get; set; }

        public GetCdnResourceArgs()
        {
        }
        public static new GetCdnResourceArgs Empty => new GetCdnResourceArgs();
    }

    public sealed class GetCdnResourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Flag to create Resource either in active or disabled state. `True` - the content from CDN is available to clients.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// CDN endpoint CNAME, must be unique among resources.
        /// </summary>
        [Input("cname")]
        public Input<string>? Cname { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// CDN Resource settings and options to tune CDN edge behavior.
        /// </summary>
        [Input("options")]
        public Input<Inputs.GetCdnResourceOptionsInputArgs>? Options { get; set; }

        /// <summary>
        /// The ID of a specific origin group.
        /// </summary>
        [Input("originGroupId")]
        public Input<int>? OriginGroupId { get; set; }

        /// <summary>
        /// The name of a specific origin group.
        /// </summary>
        [Input("originGroupName")]
        public Input<string>? OriginGroupName { get; set; }

        /// <summary>
        /// Protocol of origin resource. `http` or `https`.
        /// </summary>
        [Input("originProtocol")]
        public Input<string>? OriginProtocol { get; set; }

        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        [Input("secondaryHostnames")]
        private InputList<string>? _secondaryHostnames;

        /// <summary>
        /// List of secondary hostname strings.
        /// </summary>
        public InputList<string> SecondaryHostnames
        {
            get => _secondaryHostnames ?? (_secondaryHostnames = new InputList<string>());
            set => _secondaryHostnames = value;
        }

        /// <summary>
        /// SSL certificate of CDN resource.
        /// </summary>
        [Input("sslCertificate")]
        public Input<Inputs.GetCdnResourceSslCertificateInputArgs>? SslCertificate { get; set; }

        /// <summary>
        /// Last update timestamp. Computed value for read and update operations.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public GetCdnResourceInvokeArgs()
        {
        }
        public static new GetCdnResourceInvokeArgs Empty => new GetCdnResourceInvokeArgs();
    }


    [OutputType]
    public sealed class GetCdnResourceResult
    {
        /// <summary>
        /// Flag to create Resource either in active or disabled state. `True` - the content from CDN is available to clients.
        /// </summary>
        public readonly bool? Active;
        /// <summary>
        /// CDN endpoint CNAME, must be unique among resources.
        /// </summary>
        public readonly string Cname;
        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string FolderId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Labels;
        /// <summary>
        /// CDN Resource settings and options to tune CDN edge behavior.
        /// </summary>
        public readonly Outputs.GetCdnResourceOptionsResult Options;
        /// <summary>
        /// The ID of a specific origin group.
        /// </summary>
        public readonly int? OriginGroupId;
        /// <summary>
        /// The name of a specific origin group.
        /// </summary>
        public readonly string? OriginGroupName;
        /// <summary>
        /// Protocol of origin resource. `http` or `https`.
        /// </summary>
        public readonly string? OriginProtocol;
        /// <summary>
        /// Provider CNAME of CDN resource, computed value for read and update operations.
        /// </summary>
        public readonly string ProviderCname;
        public readonly string ResourceId;
        /// <summary>
        /// List of secondary hostname strings.
        /// </summary>
        public readonly ImmutableArray<string> SecondaryHostnames;
        /// <summary>
        /// SSL certificate of CDN resource.
        /// </summary>
        public readonly Outputs.GetCdnResourceSslCertificateResult SslCertificate;
        /// <summary>
        /// Last update timestamp. Computed value for read and update operations.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetCdnResourceResult(
            bool? active,

            string cname,

            string createdAt,

            string folderId,

            string id,

            ImmutableDictionary<string, string>? labels,

            Outputs.GetCdnResourceOptionsResult options,

            int? originGroupId,

            string? originGroupName,

            string? originProtocol,

            string providerCname,

            string resourceId,

            ImmutableArray<string> secondaryHostnames,

            Outputs.GetCdnResourceSslCertificateResult sslCertificate,

            string updatedAt)
        {
            Active = active;
            Cname = cname;
            CreatedAt = createdAt;
            FolderId = folderId;
            Id = id;
            Labels = labels;
            Options = options;
            OriginGroupId = originGroupId;
            OriginGroupName = originGroupName;
            OriginProtocol = originProtocol;
            ProviderCname = providerCname;
            ResourceId = resourceId;
            SecondaryHostnames = secondaryHostnames;
            SslCertificate = sslCertificate;
            UpdatedAt = updatedAt;
        }
    }
}
