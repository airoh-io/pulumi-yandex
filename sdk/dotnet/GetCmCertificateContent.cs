// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetCmCertificateContent
    {
        /// <summary>
        /// Get content (certificate, private key) from a Yandex Certificate Manager Certificate. For more information, see [the official documentation](https://yandex.cloud/docs/certificate-manager/concepts/).
        /// 
        /// &gt; One of `certificate_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleById = Yandex.GetCmCertificateContent.Invoke(new()
        ///     {
        ///         CertificateId = "certificate-id",
        ///     });
        /// 
        ///     var exampleByName = Yandex.GetCmCertificateContent.Invoke(new()
        ///     {
        ///         FolderId = "folder-id",
        ///         Name = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCmCertificateContentResult> InvokeAsync(GetCmCertificateContentArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCmCertificateContentResult>("yandex:index/getCmCertificateContent:getCmCertificateContent", args ?? new GetCmCertificateContentArgs(), options.WithDefaults());

        /// <summary>
        /// Get content (certificate, private key) from a Yandex Certificate Manager Certificate. For more information, see [the official documentation](https://yandex.cloud/docs/certificate-manager/concepts/).
        /// 
        /// &gt; One of `certificate_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleById = Yandex.GetCmCertificateContent.Invoke(new()
        ///     {
        ///         CertificateId = "certificate-id",
        ///     });
        /// 
        ///     var exampleByName = Yandex.GetCmCertificateContent.Invoke(new()
        ///     {
        ///         FolderId = "folder-id",
        ///         Name = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCmCertificateContentResult> Invoke(GetCmCertificateContentInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCmCertificateContentResult>("yandex:index/getCmCertificateContent:getCmCertificateContent", args ?? new GetCmCertificateContentInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get content (certificate, private key) from a Yandex Certificate Manager Certificate. For more information, see [the official documentation](https://yandex.cloud/docs/certificate-manager/concepts/).
        /// 
        /// &gt; One of `certificate_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleById = Yandex.GetCmCertificateContent.Invoke(new()
        ///     {
        ///         CertificateId = "certificate-id",
        ///     });
        /// 
        ///     var exampleByName = Yandex.GetCmCertificateContent.Invoke(new()
        ///     {
        ///         FolderId = "folder-id",
        ///         Name = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCmCertificateContentResult> Invoke(GetCmCertificateContentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCmCertificateContentResult>("yandex:index/getCmCertificateContent:getCmCertificateContent", args ?? new GetCmCertificateContentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCmCertificateContentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Certificate Id.
        /// </summary>
        [Input("certificateId")]
        public string? CertificateId { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        /// <summary>
        /// Certificate name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Format in which you want to export the private_key: `"PKCS1"` or `"PKCS8"`.
        /// </summary>
        [Input("privateKeyFormat")]
        public string? PrivateKeyFormat { get; set; }

        /// <summary>
        /// If `true`, the operation won't be completed while the certificate is in `VALIDATING`. Default is `false`.
        /// </summary>
        [Input("waitValidation")]
        public bool? WaitValidation { get; set; }

        public GetCmCertificateContentArgs()
        {
        }
        public static new GetCmCertificateContentArgs Empty => new GetCmCertificateContentArgs();
    }

    public sealed class GetCmCertificateContentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Certificate Id.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// Certificate name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Format in which you want to export the private_key: `"PKCS1"` or `"PKCS8"`.
        /// </summary>
        [Input("privateKeyFormat")]
        public Input<string>? PrivateKeyFormat { get; set; }

        /// <summary>
        /// If `true`, the operation won't be completed while the certificate is in `VALIDATING`. Default is `false`.
        /// </summary>
        [Input("waitValidation")]
        public Input<bool>? WaitValidation { get; set; }

        public GetCmCertificateContentInvokeArgs()
        {
        }
        public static new GetCmCertificateContentInvokeArgs Empty => new GetCmCertificateContentInvokeArgs();
    }


    [OutputType]
    public sealed class GetCmCertificateContentResult
    {
        /// <summary>
        /// Certificate Id.
        /// </summary>
        public readonly string? CertificateId;
        /// <summary>
        /// List of certificates in chain.
        /// </summary>
        public readonly ImmutableArray<string> Certificates;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string? FolderId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Certificate name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Private key in specified format.
        /// </summary>
        public readonly string PrivateKey;
        /// <summary>
        /// Format in which you want to export the private_key: `"PKCS1"` or `"PKCS8"`.
        /// </summary>
        public readonly string? PrivateKeyFormat;
        /// <summary>
        /// If `true`, the operation won't be completed while the certificate is in `VALIDATING`. Default is `false`.
        /// </summary>
        public readonly bool? WaitValidation;

        [OutputConstructor]
        private GetCmCertificateContentResult(
            string? certificateId,

            ImmutableArray<string> certificates,

            string? folderId,

            string id,

            string? name,

            string privateKey,

            string? privateKeyFormat,

            bool? waitValidation)
        {
            CertificateId = certificateId;
            Certificates = certificates;
            FolderId = folderId;
            Id = id;
            Name = name;
            PrivateKey = privateKey;
            PrivateKeyFormat = privateKeyFormat;
            WaitValidation = waitValidation;
        }
    }
}
