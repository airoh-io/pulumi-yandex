// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetComputeDisk
    {
        /// <summary>
        /// Get information about a Yandex Compute disk. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/disk).
        /// 
        /// &gt; One of `disk_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myDisk = Yandex.GetComputeDisk.Invoke(new()
        ///     {
        ///         DiskId = "some_disk_id",
        ///     });
        /// 
        ///     // You can use "data.yandex_compute_disk.my_disk.id" identifier 
        ///     // as reference to the existing resource.
        ///     // ...
        ///     var @default = new Yandex.ComputeInstance("default", new()
        ///     {
        ///         SecondaryDisks = new[]
        ///         {
        ///             new Yandex.Inputs.ComputeInstanceSecondaryDiskArgs
        ///             {
        ///                 DiskId = myDisk.Apply(getComputeDiskResult =&gt; getComputeDiskResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetComputeDiskResult> InvokeAsync(GetComputeDiskArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetComputeDiskResult>("yandex:index/getComputeDisk:getComputeDisk", args ?? new GetComputeDiskArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Compute disk. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/disk).
        /// 
        /// &gt; One of `disk_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myDisk = Yandex.GetComputeDisk.Invoke(new()
        ///     {
        ///         DiskId = "some_disk_id",
        ///     });
        /// 
        ///     // You can use "data.yandex_compute_disk.my_disk.id" identifier 
        ///     // as reference to the existing resource.
        ///     // ...
        ///     var @default = new Yandex.ComputeInstance("default", new()
        ///     {
        ///         SecondaryDisks = new[]
        ///         {
        ///             new Yandex.Inputs.ComputeInstanceSecondaryDiskArgs
        ///             {
        ///                 DiskId = myDisk.Apply(getComputeDiskResult =&gt; getComputeDiskResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetComputeDiskResult> Invoke(GetComputeDiskInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeDiskResult>("yandex:index/getComputeDisk:getComputeDisk", args ?? new GetComputeDiskInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Compute disk. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/disk).
        /// 
        /// &gt; One of `disk_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myDisk = Yandex.GetComputeDisk.Invoke(new()
        ///     {
        ///         DiskId = "some_disk_id",
        ///     });
        /// 
        ///     // You can use "data.yandex_compute_disk.my_disk.id" identifier 
        ///     // as reference to the existing resource.
        ///     // ...
        ///     var @default = new Yandex.ComputeInstance("default", new()
        ///     {
        ///         SecondaryDisks = new[]
        ///         {
        ///             new Yandex.Inputs.ComputeInstanceSecondaryDiskArgs
        ///             {
        ///                 DiskId = myDisk.Apply(getComputeDiskResult =&gt; getComputeDiskResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetComputeDiskResult> Invoke(GetComputeDiskInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeDiskResult>("yandex:index/getComputeDisk:getComputeDisk", args ?? new GetComputeDiskInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetComputeDiskArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of a specific disk.
        /// </summary>
        [Input("diskId")]
        public string? DiskId { get; set; }

        [Input("diskPlacementPolicy")]
        public Inputs.GetComputeDiskDiskPlacementPolicyArgs? DiskPlacementPolicy { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetComputeDiskArgs()
        {
        }
        public static new GetComputeDiskArgs Empty => new GetComputeDiskArgs();
    }

    public sealed class GetComputeDiskInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of a specific disk.
        /// </summary>
        [Input("diskId")]
        public Input<string>? DiskId { get; set; }

        [Input("diskPlacementPolicy")]
        public Input<Inputs.GetComputeDiskDiskPlacementPolicyInputArgs>? DiskPlacementPolicy { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetComputeDiskInvokeArgs()
        {
        }
        public static new GetComputeDiskInvokeArgs Empty => new GetComputeDiskInvokeArgs();
    }


    [OutputType]
    public sealed class GetComputeDiskResult
    {
        /// <summary>
        /// Block size of the disk, specified in bytes.
        /// </summary>
        public readonly int BlockSize;
        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The resource description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The ID of a specific disk.
        /// </summary>
        public readonly string DiskId;
        public readonly Outputs.GetComputeDiskDiskPlacementPolicyResult? DiskPlacementPolicy;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string FolderId;
        public readonly ImmutableArray<Outputs.GetComputeDiskHardwareGenerationResult> HardwareGenerations;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The source image to use for disk creation.
        /// </summary>
        public readonly string ImageId;
        public readonly ImmutableArray<string> InstanceIds;
        /// <summary>
        /// ID of KMS symmetric key used to encrypt disk.
        /// </summary>
        public readonly string KmsKeyId;
        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<string> ProductIds;
        /// <summary>
        /// Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the `image_id` or `snapshot_id` parameter, or specify it alone to create an empty persistent disk. If you specify this field along with `image_id` or `snapshot_id`, the size value must not be less than the size of the source image or the size of the snapshot.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// The source snapshot to use for disk creation.
        /// </summary>
        public readonly string SnapshotId;
        /// <summary>
        /// The status of the disk.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Type of disk to create. Provide this when creating a disk.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetComputeDiskResult(
            int blockSize,

            string createdAt,

            string description,

            string diskId,

            Outputs.GetComputeDiskDiskPlacementPolicyResult? diskPlacementPolicy,

            string folderId,

            ImmutableArray<Outputs.GetComputeDiskHardwareGenerationResult> hardwareGenerations,

            string id,

            string imageId,

            ImmutableArray<string> instanceIds,

            string kmsKeyId,

            ImmutableDictionary<string, string> labels,

            string name,

            ImmutableArray<string> productIds,

            int size,

            string snapshotId,

            string status,

            string type,

            string zone)
        {
            BlockSize = blockSize;
            CreatedAt = createdAt;
            Description = description;
            DiskId = diskId;
            DiskPlacementPolicy = diskPlacementPolicy;
            FolderId = folderId;
            HardwareGenerations = hardwareGenerations;
            Id = id;
            ImageId = imageId;
            InstanceIds = instanceIds;
            KmsKeyId = kmsKeyId;
            Labels = labels;
            Name = name;
            ProductIds = productIds;
            Size = size;
            SnapshotId = snapshotId;
            Status = status;
            Type = type;
            Zone = zone;
        }
    }
}
