// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetComputeFilesystem
    {
        /// <summary>
        /// Get information about a Yandex Compute filesystem. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/filesystem).
        /// 
        /// &gt; One of `filesystem_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myFs = Yandex.GetComputeFilesystem.Invoke(new()
        ///     {
        ///         FilesystemId = "some_fs_id",
        ///     });
        /// 
        ///     // You can use "data.yandex_compute_filesystem.my_fs.id" identifier 
        ///     // as reference to the existing resource.
        ///     // ...
        ///     var @default = new Yandex.ComputeInstance("default", new()
        ///     {
        ///         Filesystems = new[]
        ///         {
        ///             new Yandex.Inputs.ComputeInstanceFilesystemArgs
        ///             {
        ///                 FilesystemId = myFs.Apply(getComputeFilesystemResult =&gt; getComputeFilesystemResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetComputeFilesystemResult> InvokeAsync(GetComputeFilesystemArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetComputeFilesystemResult>("yandex:index/getComputeFilesystem:getComputeFilesystem", args ?? new GetComputeFilesystemArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Compute filesystem. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/filesystem).
        /// 
        /// &gt; One of `filesystem_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myFs = Yandex.GetComputeFilesystem.Invoke(new()
        ///     {
        ///         FilesystemId = "some_fs_id",
        ///     });
        /// 
        ///     // You can use "data.yandex_compute_filesystem.my_fs.id" identifier 
        ///     // as reference to the existing resource.
        ///     // ...
        ///     var @default = new Yandex.ComputeInstance("default", new()
        ///     {
        ///         Filesystems = new[]
        ///         {
        ///             new Yandex.Inputs.ComputeInstanceFilesystemArgs
        ///             {
        ///                 FilesystemId = myFs.Apply(getComputeFilesystemResult =&gt; getComputeFilesystemResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetComputeFilesystemResult> Invoke(GetComputeFilesystemInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeFilesystemResult>("yandex:index/getComputeFilesystem:getComputeFilesystem", args ?? new GetComputeFilesystemInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Compute filesystem. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/filesystem).
        /// 
        /// &gt; One of `filesystem_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myFs = Yandex.GetComputeFilesystem.Invoke(new()
        ///     {
        ///         FilesystemId = "some_fs_id",
        ///     });
        /// 
        ///     // You can use "data.yandex_compute_filesystem.my_fs.id" identifier 
        ///     // as reference to the existing resource.
        ///     // ...
        ///     var @default = new Yandex.ComputeInstance("default", new()
        ///     {
        ///         Filesystems = new[]
        ///         {
        ///             new Yandex.Inputs.ComputeInstanceFilesystemArgs
        ///             {
        ///                 FilesystemId = myFs.Apply(getComputeFilesystemResult =&gt; getComputeFilesystemResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetComputeFilesystemResult> Invoke(GetComputeFilesystemInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeFilesystemResult>("yandex:index/getComputeFilesystem:getComputeFilesystem", args ?? new GetComputeFilesystemInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetComputeFilesystemArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the filesystem.
        /// </summary>
        [Input("filesystemId")]
        public string? FilesystemId { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetComputeFilesystemArgs()
        {
        }
        public static new GetComputeFilesystemArgs Empty => new GetComputeFilesystemArgs();
    }

    public sealed class GetComputeFilesystemInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the filesystem.
        /// </summary>
        [Input("filesystemId")]
        public Input<string>? FilesystemId { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetComputeFilesystemInvokeArgs()
        {
        }
        public static new GetComputeFilesystemInvokeArgs Empty => new GetComputeFilesystemInvokeArgs();
    }


    [OutputType]
    public sealed class GetComputeFilesystemResult
    {
        /// <summary>
        /// Block size of the filesystem, specified in bytes.
        /// </summary>
        public readonly int BlockSize;
        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The resource description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// ID of the filesystem.
        /// </summary>
        public readonly string FilesystemId;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string FolderId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Size of the filesystem, specified in GB.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// The status of the filesystem.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Type of filesystem to create. Type `network-hdd` is set by default.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetComputeFilesystemResult(
            int blockSize,

            string createdAt,

            string description,

            string filesystemId,

            string folderId,

            string id,

            ImmutableDictionary<string, string> labels,

            string name,

            int size,

            string status,

            string type,

            string zone)
        {
            BlockSize = blockSize;
            CreatedAt = createdAt;
            Description = description;
            FilesystemId = filesystemId;
            FolderId = folderId;
            Id = id;
            Labels = labels;
            Name = name;
            Size = size;
            Status = status;
            Type = type;
            Zone = zone;
        }
    }
}
