// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetComputeImage
    {
        /// <summary>
        /// Get information about a Yandex Compute image. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/image).
        /// 
        /// &gt; Either `image_id`, `family` or `name` must be specified.
        /// 
        /// &gt; If you specify `family` without `folder_id` then lookup takes place in the 'standard-images' folder.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myImage = Yandex.GetComputeImage.Invoke(new()
        ///     {
        ///         Family = "ubuntu-1804-lts",
        ///     });
        /// 
        ///     // You can use "data.yandex_compute_image.my_image.id" identifier 
        ///     // as reference to existing resource.
        ///     var @default = new Yandex.ComputeInstance("default", new()
        ///     {
        ///         BootDisk = new Yandex.Inputs.ComputeInstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Yandex.Inputs.ComputeInstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 ImageId = myImage.Apply(getComputeImageResult =&gt; getComputeImageResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetComputeImageResult> InvokeAsync(GetComputeImageArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetComputeImageResult>("yandex:index/getComputeImage:getComputeImage", args ?? new GetComputeImageArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Compute image. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/image).
        /// 
        /// &gt; Either `image_id`, `family` or `name` must be specified.
        /// 
        /// &gt; If you specify `family` without `folder_id` then lookup takes place in the 'standard-images' folder.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myImage = Yandex.GetComputeImage.Invoke(new()
        ///     {
        ///         Family = "ubuntu-1804-lts",
        ///     });
        /// 
        ///     // You can use "data.yandex_compute_image.my_image.id" identifier 
        ///     // as reference to existing resource.
        ///     var @default = new Yandex.ComputeInstance("default", new()
        ///     {
        ///         BootDisk = new Yandex.Inputs.ComputeInstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Yandex.Inputs.ComputeInstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 ImageId = myImage.Apply(getComputeImageResult =&gt; getComputeImageResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetComputeImageResult> Invoke(GetComputeImageInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeImageResult>("yandex:index/getComputeImage:getComputeImage", args ?? new GetComputeImageInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Compute image. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/image).
        /// 
        /// &gt; Either `image_id`, `family` or `name` must be specified.
        /// 
        /// &gt; If you specify `family` without `folder_id` then lookup takes place in the 'standard-images' folder.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myImage = Yandex.GetComputeImage.Invoke(new()
        ///     {
        ///         Family = "ubuntu-1804-lts",
        ///     });
        /// 
        ///     // You can use "data.yandex_compute_image.my_image.id" identifier 
        ///     // as reference to existing resource.
        ///     var @default = new Yandex.ComputeInstance("default", new()
        ///     {
        ///         BootDisk = new Yandex.Inputs.ComputeInstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Yandex.Inputs.ComputeInstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 ImageId = myImage.Apply(getComputeImageResult =&gt; getComputeImageResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetComputeImageResult> Invoke(GetComputeImageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeImageResult>("yandex:index/getComputeImage:getComputeImage", args ?? new GetComputeImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetComputeImageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the image family to which this image belongs.
        /// </summary>
        [Input("family")]
        public string? Family { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        /// <summary>
        /// The ID of a specific image.
        /// </summary>
        [Input("imageId")]
        public string? ImageId { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetComputeImageArgs()
        {
        }
        public static new GetComputeImageArgs Empty => new GetComputeImageArgs();
    }

    public sealed class GetComputeImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the image family to which this image belongs.
        /// </summary>
        [Input("family")]
        public Input<string>? Family { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// The ID of a specific image.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetComputeImageInvokeArgs()
        {
        }
        public static new GetComputeImageInvokeArgs Empty => new GetComputeImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetComputeImageResult
    {
        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The resource description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The name of the image family to which this image belongs.
        /// </summary>
        public readonly string Family;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string FolderId;
        public readonly ImmutableArray<Outputs.GetComputeImageHardwareGenerationResult> HardwareGenerations;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of a specific image.
        /// </summary>
        public readonly string ImageId;
        /// <summary>
        /// ID of KMS symmetric key used to encrypt image.
        /// </summary>
        public readonly string KmsKeyId;
        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Minimum size in GB of the disk that will be created from this image.
        /// </summary>
        public readonly int MinDiskSize;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Operating system type that is contained in the image. Possible values: `LINUX`, `WINDOWS`.
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// Optimize the image to create a disk.
        /// </summary>
        public readonly bool Pooled;
        /// <summary>
        /// License IDs that indicate which licenses are attached to this image.
        /// </summary>
        public readonly ImmutableArray<string> ProductIds;
        /// <summary>
        /// The size of the image, specified in GB.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// The status of the image.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetComputeImageResult(
            string createdAt,

            string description,

            string family,

            string folderId,

            ImmutableArray<Outputs.GetComputeImageHardwareGenerationResult> hardwareGenerations,

            string id,

            string imageId,

            string kmsKeyId,

            ImmutableDictionary<string, string> labels,

            int minDiskSize,

            string name,

            string osType,

            bool pooled,

            ImmutableArray<string> productIds,

            int size,

            string status)
        {
            CreatedAt = createdAt;
            Description = description;
            Family = family;
            FolderId = folderId;
            HardwareGenerations = hardwareGenerations;
            Id = id;
            ImageId = imageId;
            KmsKeyId = kmsKeyId;
            Labels = labels;
            MinDiskSize = minDiskSize;
            Name = name;
            OsType = osType;
            Pooled = pooled;
            ProductIds = productIds;
            Size = size;
            Status = status;
        }
    }
}
