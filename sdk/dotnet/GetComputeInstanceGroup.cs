// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Yandex
{
    public static class GetComputeInstanceGroup
    {
        /// <summary>
        /// Get information about a Yandex Compute instance group.
        /// </summary>
        public static Task<GetComputeInstanceGroupResult> InvokeAsync(GetComputeInstanceGroupArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetComputeInstanceGroupResult>("yandex:index/getComputeInstanceGroup:getComputeInstanceGroup", args ?? new GetComputeInstanceGroupArgs(), options.WithVersion());

        /// <summary>
        /// Get information about a Yandex Compute instance group.
        /// </summary>
        public static Output<GetComputeInstanceGroupResult> Invoke(GetComputeInstanceGroupInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetComputeInstanceGroupResult>("yandex:index/getComputeInstanceGroup:getComputeInstanceGroup", args ?? new GetComputeInstanceGroupInvokeArgs(), options.WithVersion());
    }


    public sealed class GetComputeInstanceGroupArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of a specific instance group.
        /// </summary>
        [Input("instanceGroupId", required: true)]
        public string InstanceGroupId { get; set; } = null!;

        public GetComputeInstanceGroupArgs()
        {
        }
    }

    public sealed class GetComputeInstanceGroupInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of a specific instance group.
        /// </summary>
        [Input("instanceGroupId", required: true)]
        public Input<string> InstanceGroupId { get; set; } = null!;

        public GetComputeInstanceGroupInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetComputeInstanceGroupResult
    {
        /// <summary>
        /// The allocation policy of the instance group by zone and region. The structure is documented below.
        /// </summary>
        public readonly Outputs.GetComputeInstanceGroupAllocationPolicyResult AllocationPolicy;
        public readonly Outputs.GetComputeInstanceGroupApplicationBalancerStateResult ApplicationBalancerState;
        /// <summary>
        /// Application Load balancing (L7) specifications. The structure is documented below.
        /// </summary>
        public readonly Outputs.GetComputeInstanceGroupApplicationLoadBalancerResult ApplicationLoadBalancer;
        /// <summary>
        /// The instance group creation timestamp.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Flag that protects the instance group from accidental deletion.
        /// </summary>
        public readonly bool DeletionProtection;
        /// <summary>
        /// The deployment policy of the instance group. The structure is documented below.
        /// </summary>
        public readonly Outputs.GetComputeInstanceGroupDeployPolicyResult DeployPolicy;
        /// <summary>
        /// A description of the boot disk.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Folder ID of custom metric in Yandex Monitoring that should be used for scaling.
        /// </summary>
        public readonly string FolderId;
        /// <summary>
        /// Health check specification. The structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputeInstanceGroupHealthCheckResult> HealthChecks;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceGroupId;
        /// <summary>
        /// The instance template that the instance group belongs to. The structure is documented below.
        /// </summary>
        public readonly Outputs.GetComputeInstanceGroupInstanceTemplateResult InstanceTemplate;
        /// <summary>
        /// A list of instances in the specified instance group. The structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputeInstanceGroupInstanceResult> Instances;
        /// <summary>
        /// A map of labels applied to this instance.
        /// * `resources.0.memory` - The memory size allocated to the instance.
        /// * `resources.0.cores` - Number of CPU cores allocated to the instance.
        /// * `resources.0.core_fraction` - Baseline core performance as a percent.
        /// * `resources.0.gpus` - Number of GPU cores allocated to the instance.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Load balancing specification. The structure is documented below.
        /// </summary>
        public readonly Outputs.GetComputeInstanceGroupLoadBalancerResult LoadBalancer;
        /// <summary>
        /// Information about which entities can be attached to this load balancer. The structure is documented below.
        /// </summary>
        public readonly Outputs.GetComputeInstanceGroupLoadBalancerStateResult LoadBalancerState;
        /// <summary>
        /// Timeout for waiting for the VM to become healthy. If the timeout is exceeded, the VM will be turned off based on the deployment policy. Specified in seconds.
        /// </summary>
        public readonly int MaxCheckingHealthDuration;
        /// <summary>
        /// The name of the managed instance.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The scaling policy of the instance group. The structure is documented below.
        /// </summary>
        public readonly Outputs.GetComputeInstanceGroupScalePolicyResult ScalePolicy;
        /// <summary>
        /// The service account ID for the instance.
        /// </summary>
        public readonly string ServiceAccountId;
        /// <summary>
        /// The status of the instance.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A set of key/value  variables pairs to assign to the instance group.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Variables;

        [OutputConstructor]
        private GetComputeInstanceGroupResult(
            Outputs.GetComputeInstanceGroupAllocationPolicyResult allocationPolicy,

            Outputs.GetComputeInstanceGroupApplicationBalancerStateResult applicationBalancerState,

            Outputs.GetComputeInstanceGroupApplicationLoadBalancerResult applicationLoadBalancer,

            string createdAt,

            bool deletionProtection,

            Outputs.GetComputeInstanceGroupDeployPolicyResult deployPolicy,

            string description,

            string folderId,

            ImmutableArray<Outputs.GetComputeInstanceGroupHealthCheckResult> healthChecks,

            string id,

            string instanceGroupId,

            Outputs.GetComputeInstanceGroupInstanceTemplateResult instanceTemplate,

            ImmutableArray<Outputs.GetComputeInstanceGroupInstanceResult> instances,

            ImmutableDictionary<string, string> labels,

            Outputs.GetComputeInstanceGroupLoadBalancerResult loadBalancer,

            Outputs.GetComputeInstanceGroupLoadBalancerStateResult loadBalancerState,

            int maxCheckingHealthDuration,

            string name,

            Outputs.GetComputeInstanceGroupScalePolicyResult scalePolicy,

            string serviceAccountId,

            string status,

            ImmutableDictionary<string, string> variables)
        {
            AllocationPolicy = allocationPolicy;
            ApplicationBalancerState = applicationBalancerState;
            ApplicationLoadBalancer = applicationLoadBalancer;
            CreatedAt = createdAt;
            DeletionProtection = deletionProtection;
            DeployPolicy = deployPolicy;
            Description = description;
            FolderId = folderId;
            HealthChecks = healthChecks;
            Id = id;
            InstanceGroupId = instanceGroupId;
            InstanceTemplate = instanceTemplate;
            Instances = instances;
            Labels = labels;
            LoadBalancer = loadBalancer;
            LoadBalancerState = loadBalancerState;
            MaxCheckingHealthDuration = maxCheckingHealthDuration;
            Name = name;
            ScalePolicy = scalePolicy;
            ServiceAccountId = serviceAccountId;
            Status = status;
            Variables = variables;
        }
    }
}
