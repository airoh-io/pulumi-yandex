// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetComputeSnapshot
    {
        /// <summary>
        /// Get information about a Yandex Compute snapshot. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/snapshot).
        /// 
        /// &gt; One of `snapshot_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mySnapshot = Yandex.GetComputeSnapshot.Invoke(new()
        ///     {
        ///         SnapshotId = "some_snapshot_id",
        ///     });
        /// 
        ///     // You can use "data.yandex_compute_snapshot.my_snapshot.id" identifier 
        ///     // as reference to existing resource.
        ///     // ...
        ///     var @default = new Yandex.ComputeInstance("default", new()
        ///     {
        ///         BootDisk = new Yandex.Inputs.ComputeInstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Yandex.Inputs.ComputeInstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 SnapshotId = mySnapshot.Apply(getComputeSnapshotResult =&gt; getComputeSnapshotResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetComputeSnapshotResult> InvokeAsync(GetComputeSnapshotArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetComputeSnapshotResult>("yandex:index/getComputeSnapshot:getComputeSnapshot", args ?? new GetComputeSnapshotArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Compute snapshot. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/snapshot).
        /// 
        /// &gt; One of `snapshot_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mySnapshot = Yandex.GetComputeSnapshot.Invoke(new()
        ///     {
        ///         SnapshotId = "some_snapshot_id",
        ///     });
        /// 
        ///     // You can use "data.yandex_compute_snapshot.my_snapshot.id" identifier 
        ///     // as reference to existing resource.
        ///     // ...
        ///     var @default = new Yandex.ComputeInstance("default", new()
        ///     {
        ///         BootDisk = new Yandex.Inputs.ComputeInstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Yandex.Inputs.ComputeInstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 SnapshotId = mySnapshot.Apply(getComputeSnapshotResult =&gt; getComputeSnapshotResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetComputeSnapshotResult> Invoke(GetComputeSnapshotInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeSnapshotResult>("yandex:index/getComputeSnapshot:getComputeSnapshot", args ?? new GetComputeSnapshotInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Compute snapshot. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/snapshot).
        /// 
        /// &gt; One of `snapshot_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mySnapshot = Yandex.GetComputeSnapshot.Invoke(new()
        ///     {
        ///         SnapshotId = "some_snapshot_id",
        ///     });
        /// 
        ///     // You can use "data.yandex_compute_snapshot.my_snapshot.id" identifier 
        ///     // as reference to existing resource.
        ///     // ...
        ///     var @default = new Yandex.ComputeInstance("default", new()
        ///     {
        ///         BootDisk = new Yandex.Inputs.ComputeInstanceBootDiskArgs
        ///         {
        ///             InitializeParams = new Yandex.Inputs.ComputeInstanceBootDiskInitializeParamsArgs
        ///             {
        ///                 SnapshotId = mySnapshot.Apply(getComputeSnapshotResult =&gt; getComputeSnapshotResult.Id),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetComputeSnapshotResult> Invoke(GetComputeSnapshotInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeSnapshotResult>("yandex:index/getComputeSnapshot:getComputeSnapshot", args ?? new GetComputeSnapshotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetComputeSnapshotArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of a specific snapshot.
        /// </summary>
        [Input("snapshotId")]
        public string? SnapshotId { get; set; }

        public GetComputeSnapshotArgs()
        {
        }
        public static new GetComputeSnapshotArgs Empty => new GetComputeSnapshotArgs();
    }

    public sealed class GetComputeSnapshotInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of a specific snapshot.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        public GetComputeSnapshotInvokeArgs()
        {
        }
        public static new GetComputeSnapshotInvokeArgs Empty => new GetComputeSnapshotInvokeArgs();
    }


    [OutputType]
    public sealed class GetComputeSnapshotResult
    {
        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The resource description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Size of the disk when the snapshot was created, specified in GB.
        /// </summary>
        public readonly int DiskSize;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string FolderId;
        public readonly ImmutableArray<Outputs.GetComputeSnapshotHardwareGenerationResult> HardwareGenerations;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ID of KMS symmetric key used to encrypt snapshot.
        /// </summary>
        public readonly string KmsKeyId;
        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// License IDs that indicate which licenses are attached to this snapshot.
        /// </summary>
        public readonly ImmutableArray<string> ProductIds;
        /// <summary>
        /// The ID of a specific snapshot.
        /// </summary>
        public readonly string SnapshotId;
        /// <summary>
        /// ID of the disk to create a snapshot from.
        /// </summary>
        public readonly string SourceDiskId;
        /// <summary>
        /// The status of the snapshot.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Size of the snapshot, specified in GB.
        /// </summary>
        public readonly int StorageSize;

        [OutputConstructor]
        private GetComputeSnapshotResult(
            string createdAt,

            string description,

            int diskSize,

            string folderId,

            ImmutableArray<Outputs.GetComputeSnapshotHardwareGenerationResult> hardwareGenerations,

            string id,

            string kmsKeyId,

            ImmutableDictionary<string, string> labels,

            string name,

            ImmutableArray<string> productIds,

            string snapshotId,

            string sourceDiskId,

            string status,

            int storageSize)
        {
            CreatedAt = createdAt;
            Description = description;
            DiskSize = diskSize;
            FolderId = folderId;
            HardwareGenerations = hardwareGenerations;
            Id = id;
            KmsKeyId = kmsKeyId;
            Labels = labels;
            Name = name;
            ProductIds = productIds;
            SnapshotId = snapshotId;
            SourceDiskId = sourceDiskId;
            Status = status;
            StorageSize = storageSize;
        }
    }
}
