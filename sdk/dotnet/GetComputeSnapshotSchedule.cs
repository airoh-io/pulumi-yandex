// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetComputeSnapshotSchedule
    {
        /// <summary>
        /// Get information about a Yandex Compute snapshot schedule. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/snapshot-schedule).
        /// 
        /// &gt; One of `snapshot_schedule_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mySnapshotSchedule = Yandex.GetComputeSnapshotSchedule.Invoke(new()
        ///     {
        ///         SnapshotScheduleId = "some_snapshot_schedule_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetComputeSnapshotScheduleResult> InvokeAsync(GetComputeSnapshotScheduleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetComputeSnapshotScheduleResult>("yandex:index/getComputeSnapshotSchedule:getComputeSnapshotSchedule", args ?? new GetComputeSnapshotScheduleArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Compute snapshot schedule. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/snapshot-schedule).
        /// 
        /// &gt; One of `snapshot_schedule_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mySnapshotSchedule = Yandex.GetComputeSnapshotSchedule.Invoke(new()
        ///     {
        ///         SnapshotScheduleId = "some_snapshot_schedule_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetComputeSnapshotScheduleResult> Invoke(GetComputeSnapshotScheduleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeSnapshotScheduleResult>("yandex:index/getComputeSnapshotSchedule:getComputeSnapshotSchedule", args ?? new GetComputeSnapshotScheduleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Compute snapshot schedule. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/snapshot-schedule).
        /// 
        /// &gt; One of `snapshot_schedule_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mySnapshotSchedule = Yandex.GetComputeSnapshotSchedule.Invoke(new()
        ///     {
        ///         SnapshotScheduleId = "some_snapshot_schedule_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetComputeSnapshotScheduleResult> Invoke(GetComputeSnapshotScheduleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeSnapshotScheduleResult>("yandex:index/getComputeSnapshotSchedule:getComputeSnapshotSchedule", args ?? new GetComputeSnapshotScheduleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetComputeSnapshotScheduleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        [Input("diskIds")]
        private List<string>? _diskIds;

        /// <summary>
        /// IDs of the disk for snapshot schedule.
        /// </summary>
        public List<string> DiskIds
        {
            get => _diskIds ?? (_diskIds = new List<string>());
            set => _diskIds = value;
        }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        [Input("labels")]
        private Dictionary<string, string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public Dictionary<string, string> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, string>());
            set => _labels = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Examples: `300ms`, `1.5h` or `2h45m`.
        /// </summary>
        [Input("retentionPeriod")]
        public string? RetentionPeriod { get; set; }

        [Input("schedulePolicies")]
        private List<Inputs.GetComputeSnapshotScheduleSchedulePolicyArgs>? _schedulePolicies;
        public List<Inputs.GetComputeSnapshotScheduleSchedulePolicyArgs> SchedulePolicies
        {
            get => _schedulePolicies ?? (_schedulePolicies = new List<Inputs.GetComputeSnapshotScheduleSchedulePolicyArgs>());
            set => _schedulePolicies = value;
        }

        /// <summary>
        /// Maximum number of snapshots for every disk of the snapshot schedule.
        /// </summary>
        [Input("snapshotCount")]
        public int? SnapshotCount { get; set; }

        /// <summary>
        /// The ID of a specific snapshot schedule.
        /// </summary>
        [Input("snapshotScheduleId")]
        public string? SnapshotScheduleId { get; set; }

        [Input("snapshotSpecs")]
        private List<Inputs.GetComputeSnapshotScheduleSnapshotSpecArgs>? _snapshotSpecs;

        /// <summary>
        /// Additional attributes for snapshots created by this snapshot schedule.
        /// </summary>
        public List<Inputs.GetComputeSnapshotScheduleSnapshotSpecArgs> SnapshotSpecs
        {
            get => _snapshotSpecs ?? (_snapshotSpecs = new List<Inputs.GetComputeSnapshotScheduleSnapshotSpecArgs>());
            set => _snapshotSpecs = value;
        }

        public GetComputeSnapshotScheduleArgs()
        {
        }
        public static new GetComputeSnapshotScheduleArgs Empty => new GetComputeSnapshotScheduleArgs();
    }

    public sealed class GetComputeSnapshotScheduleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("diskIds")]
        private InputList<string>? _diskIds;

        /// <summary>
        /// IDs of the disk for snapshot schedule.
        /// </summary>
        public InputList<string> DiskIds
        {
            get => _diskIds ?? (_diskIds = new InputList<string>());
            set => _diskIds = value;
        }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Examples: `300ms`, `1.5h` or `2h45m`.
        /// </summary>
        [Input("retentionPeriod")]
        public Input<string>? RetentionPeriod { get; set; }

        [Input("schedulePolicies")]
        private InputList<Inputs.GetComputeSnapshotScheduleSchedulePolicyInputArgs>? _schedulePolicies;
        public InputList<Inputs.GetComputeSnapshotScheduleSchedulePolicyInputArgs> SchedulePolicies
        {
            get => _schedulePolicies ?? (_schedulePolicies = new InputList<Inputs.GetComputeSnapshotScheduleSchedulePolicyInputArgs>());
            set => _schedulePolicies = value;
        }

        /// <summary>
        /// Maximum number of snapshots for every disk of the snapshot schedule.
        /// </summary>
        [Input("snapshotCount")]
        public Input<int>? SnapshotCount { get; set; }

        /// <summary>
        /// The ID of a specific snapshot schedule.
        /// </summary>
        [Input("snapshotScheduleId")]
        public Input<string>? SnapshotScheduleId { get; set; }

        [Input("snapshotSpecs")]
        private InputList<Inputs.GetComputeSnapshotScheduleSnapshotSpecInputArgs>? _snapshotSpecs;

        /// <summary>
        /// Additional attributes for snapshots created by this snapshot schedule.
        /// </summary>
        public InputList<Inputs.GetComputeSnapshotScheduleSnapshotSpecInputArgs> SnapshotSpecs
        {
            get => _snapshotSpecs ?? (_snapshotSpecs = new InputList<Inputs.GetComputeSnapshotScheduleSnapshotSpecInputArgs>());
            set => _snapshotSpecs = value;
        }

        public GetComputeSnapshotScheduleInvokeArgs()
        {
        }
        public static new GetComputeSnapshotScheduleInvokeArgs Empty => new GetComputeSnapshotScheduleInvokeArgs();
    }


    [OutputType]
    public sealed class GetComputeSnapshotScheduleResult
    {
        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The resource description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// IDs of the disk for snapshot schedule.
        /// </summary>
        public readonly ImmutableArray<string> DiskIds;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string FolderId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Examples: `300ms`, `1.5h` or `2h45m`.
        /// </summary>
        public readonly string RetentionPeriod;
        public readonly ImmutableArray<Outputs.GetComputeSnapshotScheduleSchedulePolicyResult> SchedulePolicies;
        /// <summary>
        /// Maximum number of snapshots for every disk of the snapshot schedule.
        /// </summary>
        public readonly int SnapshotCount;
        /// <summary>
        /// The ID of a specific snapshot schedule.
        /// </summary>
        public readonly string SnapshotScheduleId;
        /// <summary>
        /// Additional attributes for snapshots created by this snapshot schedule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputeSnapshotScheduleSnapshotSpecResult> SnapshotSpecs;
        /// <summary>
        /// The status of the snapshot schedule.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetComputeSnapshotScheduleResult(
            string createdAt,

            string description,

            ImmutableArray<string> diskIds,

            string folderId,

            string id,

            ImmutableDictionary<string, string> labels,

            string name,

            string retentionPeriod,

            ImmutableArray<Outputs.GetComputeSnapshotScheduleSchedulePolicyResult> schedulePolicies,

            int snapshotCount,

            string snapshotScheduleId,

            ImmutableArray<Outputs.GetComputeSnapshotScheduleSnapshotSpecResult> snapshotSpecs,

            string status)
        {
            CreatedAt = createdAt;
            Description = description;
            DiskIds = diskIds;
            FolderId = folderId;
            Id = id;
            Labels = labels;
            Name = name;
            RetentionPeriod = retentionPeriod;
            SchedulePolicies = schedulePolicies;
            SnapshotCount = snapshotCount;
            SnapshotScheduleId = snapshotScheduleId;
            SnapshotSpecs = snapshotSpecs;
            Status = status;
        }
    }
}
