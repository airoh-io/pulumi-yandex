// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetLoggingGroup
    {
        /// <summary>
        /// Get information about a Yandex Cloud Logging group. For more information, see [the official documentation](https://yandex.cloud/docs/logging/concepts/log-group).
        /// 
        /// &gt; If `group_id` is not specified `name` and `folder_id` will be used to designate Yandex Cloud Logging group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myGroup = Yandex.GetLoggingGroup.Invoke(new()
        ///     {
        ///         GroupId = "some_yandex_logging_group_id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["logGroupRetentionPeriod"] = myGroup.Apply(getLoggingGroupResult =&gt; getLoggingGroupResult.RetentionPeriod),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetLoggingGroupResult> InvokeAsync(GetLoggingGroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLoggingGroupResult>("yandex:index/getLoggingGroup:getLoggingGroup", args ?? new GetLoggingGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Cloud Logging group. For more information, see [the official documentation](https://yandex.cloud/docs/logging/concepts/log-group).
        /// 
        /// &gt; If `group_id` is not specified `name` and `folder_id` will be used to designate Yandex Cloud Logging group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myGroup = Yandex.GetLoggingGroup.Invoke(new()
        ///     {
        ///         GroupId = "some_yandex_logging_group_id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["logGroupRetentionPeriod"] = myGroup.Apply(getLoggingGroupResult =&gt; getLoggingGroupResult.RetentionPeriod),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetLoggingGroupResult> Invoke(GetLoggingGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoggingGroupResult>("yandex:index/getLoggingGroup:getLoggingGroup", args ?? new GetLoggingGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Cloud Logging group. For more information, see [the official documentation](https://yandex.cloud/docs/logging/concepts/log-group).
        /// 
        /// &gt; If `group_id` is not specified `name` and `folder_id` will be used to designate Yandex Cloud Logging group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myGroup = Yandex.GetLoggingGroup.Invoke(new()
        ///     {
        ///         GroupId = "some_yandex_logging_group_id",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["logGroupRetentionPeriod"] = myGroup.Apply(getLoggingGroupResult =&gt; getLoggingGroupResult.RetentionPeriod),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetLoggingGroupResult> Invoke(GetLoggingGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoggingGroupResult>("yandex:index/getLoggingGroup:getLoggingGroup", args ?? new GetLoggingGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoggingGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        /// <summary>
        /// The Yandex Cloud Logging group ID.
        /// </summary>
        [Input("groupId")]
        public string? GroupId { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetLoggingGroupArgs()
        {
        }
        public static new GetLoggingGroupArgs Empty => new GetLoggingGroupArgs();
    }

    public sealed class GetLoggingGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// The Yandex Cloud Logging group ID.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetLoggingGroupInvokeArgs()
        {
        }
        public static new GetLoggingGroupInvokeArgs Empty => new GetLoggingGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetLoggingGroupResult
    {
        /// <summary>
        /// The `Cloud ID` which resource belongs to. If it is not provided, the default provider `cloud-id` is used.
        /// </summary>
        public readonly string CloudId;
        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Data Stream.
        /// </summary>
        public readonly string DataStream;
        /// <summary>
        /// The resource description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string FolderId;
        /// <summary>
        /// The Yandex Cloud Logging group ID.
        /// </summary>
        public readonly string GroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Log entries retention period for the Yandex Cloud Logging group.
        /// </summary>
        public readonly string RetentionPeriod;
        /// <summary>
        /// The Yandex Cloud Logging group status.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetLoggingGroupResult(
            string cloudId,

            string createdAt,

            string dataStream,

            string description,

            string folderId,

            string groupId,

            string id,

            ImmutableDictionary<string, string> labels,

            string name,

            string retentionPeriod,

            string status)
        {
            CloudId = cloudId;
            CreatedAt = createdAt;
            DataStream = dataStream;
            Description = description;
            FolderId = folderId;
            GroupId = groupId;
            Id = id;
            Labels = labels;
            Name = name;
            RetentionPeriod = retentionPeriod;
            Status = status;
        }
    }
}
