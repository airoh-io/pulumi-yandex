// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetMdbGreenplumCluster
    {
        /// <summary>
        /// Get information about a Yandex Managed Greenplum cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-greenplum/).
        /// 
        /// &gt; Either `cluster_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Yandex.GetMdbGreenplumCluster.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["networkId"] = foo.Apply(getMdbGreenplumClusterResult =&gt; getMdbGreenplumClusterResult.NetworkId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetMdbGreenplumClusterResult> InvokeAsync(GetMdbGreenplumClusterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMdbGreenplumClusterResult>("yandex:index/getMdbGreenplumCluster:getMdbGreenplumCluster", args ?? new GetMdbGreenplumClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Managed Greenplum cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-greenplum/).
        /// 
        /// &gt; Either `cluster_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Yandex.GetMdbGreenplumCluster.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["networkId"] = foo.Apply(getMdbGreenplumClusterResult =&gt; getMdbGreenplumClusterResult.NetworkId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetMdbGreenplumClusterResult> Invoke(GetMdbGreenplumClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMdbGreenplumClusterResult>("yandex:index/getMdbGreenplumCluster:getMdbGreenplumCluster", args ?? new GetMdbGreenplumClusterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Managed Greenplum cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-greenplum/).
        /// 
        /// &gt; Either `cluster_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Yandex.GetMdbGreenplumCluster.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["networkId"] = foo.Apply(getMdbGreenplumClusterResult =&gt; getMdbGreenplumClusterResult.NetworkId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetMdbGreenplumClusterResult> Invoke(GetMdbGreenplumClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMdbGreenplumClusterResult>("yandex:index/getMdbGreenplumCluster:getMdbGreenplumCluster", args ?? new GetMdbGreenplumClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMdbGreenplumClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("backgroundActivities")]
        private List<Inputs.GetMdbGreenplumClusterBackgroundActivityArgs>? _backgroundActivities;
        public List<Inputs.GetMdbGreenplumClusterBackgroundActivityArgs> BackgroundActivities
        {
            get => _backgroundActivities ?? (_backgroundActivities = new List<Inputs.GetMdbGreenplumClusterBackgroundActivityArgs>());
            set => _backgroundActivities = value;
        }

        /// <summary>
        /// The ID of the Greenplum cluster.
        /// </summary>
        [Input("clusterId")]
        public string? ClusterId { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        [Input("greenplumConfig")]
        private Dictionary<string, string>? _greenplumConfig;
        public Dictionary<string, string> GreenplumConfig
        {
            get => _greenplumConfig ?? (_greenplumConfig = new Dictionary<string, string>());
            set => _greenplumConfig = value;
        }

        [Input("masterHostGroupIds")]
        private List<string>? _masterHostGroupIds;

        /// <summary>
        /// A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
        /// </summary>
        public List<string> MasterHostGroupIds
        {
            get => _masterHostGroupIds ?? (_masterHostGroupIds = new List<string>());
            set => _masterHostGroupIds = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("poolerConfig")]
        public Inputs.GetMdbGreenplumClusterPoolerConfigArgs? PoolerConfig { get; set; }

        [Input("pxfConfigs")]
        private List<Inputs.GetMdbGreenplumClusterPxfConfigArgs>? _pxfConfigs;
        public List<Inputs.GetMdbGreenplumClusterPxfConfigArgs> PxfConfigs
        {
            get => _pxfConfigs ?? (_pxfConfigs = new List<Inputs.GetMdbGreenplumClusterPxfConfigArgs>());
            set => _pxfConfigs = value;
        }

        [Input("segmentHostGroupIds")]
        private List<string>? _segmentHostGroupIds;

        /// <summary>
        /// A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
        /// </summary>
        public List<string> SegmentHostGroupIds
        {
            get => _segmentHostGroupIds ?? (_segmentHostGroupIds = new List<string>());
            set => _segmentHostGroupIds = value;
        }

        public GetMdbGreenplumClusterArgs()
        {
        }
        public static new GetMdbGreenplumClusterArgs Empty => new GetMdbGreenplumClusterArgs();
    }

    public sealed class GetMdbGreenplumClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("backgroundActivities")]
        private InputList<Inputs.GetMdbGreenplumClusterBackgroundActivityInputArgs>? _backgroundActivities;
        public InputList<Inputs.GetMdbGreenplumClusterBackgroundActivityInputArgs> BackgroundActivities
        {
            get => _backgroundActivities ?? (_backgroundActivities = new InputList<Inputs.GetMdbGreenplumClusterBackgroundActivityInputArgs>());
            set => _backgroundActivities = value;
        }

        /// <summary>
        /// The ID of the Greenplum cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("greenplumConfig")]
        private InputMap<string>? _greenplumConfig;
        public InputMap<string> GreenplumConfig
        {
            get => _greenplumConfig ?? (_greenplumConfig = new InputMap<string>());
            set => _greenplumConfig = value;
        }

        [Input("masterHostGroupIds")]
        private InputList<string>? _masterHostGroupIds;

        /// <summary>
        /// A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
        /// </summary>
        public InputList<string> MasterHostGroupIds
        {
            get => _masterHostGroupIds ?? (_masterHostGroupIds = new InputList<string>());
            set => _masterHostGroupIds = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("poolerConfig")]
        public Input<Inputs.GetMdbGreenplumClusterPoolerConfigInputArgs>? PoolerConfig { get; set; }

        [Input("pxfConfigs")]
        private InputList<Inputs.GetMdbGreenplumClusterPxfConfigInputArgs>? _pxfConfigs;
        public InputList<Inputs.GetMdbGreenplumClusterPxfConfigInputArgs> PxfConfigs
        {
            get => _pxfConfigs ?? (_pxfConfigs = new InputList<Inputs.GetMdbGreenplumClusterPxfConfigInputArgs>());
            set => _pxfConfigs = value;
        }

        [Input("segmentHostGroupIds")]
        private InputList<string>? _segmentHostGroupIds;

        /// <summary>
        /// A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
        /// </summary>
        public InputList<string> SegmentHostGroupIds
        {
            get => _segmentHostGroupIds ?? (_segmentHostGroupIds = new InputList<string>());
            set => _segmentHostGroupIds = value;
        }

        public GetMdbGreenplumClusterInvokeArgs()
        {
        }
        public static new GetMdbGreenplumClusterInvokeArgs Empty => new GetMdbGreenplumClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetMdbGreenplumClusterResult
    {
        public readonly ImmutableArray<Outputs.GetMdbGreenplumClusterAccessResult> Accesses;
        /// <summary>
        /// Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.
        /// </summary>
        public readonly bool AssignPublicIp;
        public readonly ImmutableArray<Outputs.GetMdbGreenplumClusterBackgroundActivityResult> BackgroundActivities;
        public readonly ImmutableArray<Outputs.GetMdbGreenplumClusterBackupWindowStartResult> BackupWindowStarts;
        public readonly ImmutableArray<Outputs.GetMdbGreenplumClusterCloudStorageResult> CloudStorages;
        /// <summary>
        /// The ID of the Greenplum cluster.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The `true` value means that resource is protected from accidental deletion.
        /// </summary>
        public readonly bool DeletionProtection;
        /// <summary>
        /// The resource description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)
        /// </summary>
        public readonly string Environment;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string FolderId;
        public readonly ImmutableDictionary<string, string> GreenplumConfig;
        /// <summary>
        /// Aggregated health of the cluster.
        /// </summary>
        public readonly string Health;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly ImmutableArray<Outputs.GetMdbGreenplumClusterLoggingResult> Loggings;
        public readonly ImmutableArray<Outputs.GetMdbGreenplumClusterMaintenanceWindowResult> MaintenanceWindows;
        /// <summary>
        /// Number of hosts in master subcluster (1 or 2).
        /// </summary>
        public readonly int MasterHostCount;
        /// <summary>
        /// A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
        /// </summary>
        public readonly ImmutableArray<string> MasterHostGroupIds;
        public readonly ImmutableArray<Outputs.GetMdbGreenplumClusterMasterHostResult> MasterHosts;
        public readonly ImmutableArray<Outputs.GetMdbGreenplumClusterMasterSubclusterResult> MasterSubclusters;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The `VPC Network ID` of subnets which resource attached to.
        /// </summary>
        public readonly string NetworkId;
        public readonly Outputs.GetMdbGreenplumClusterPoolerConfigResult? PoolerConfig;
        public readonly ImmutableArray<Outputs.GetMdbGreenplumClusterPxfConfigResult> PxfConfigs;
        /// <summary>
        /// The list of security groups applied to resource or their components.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// Number of hosts in segment subcluster (from 1 to 32).
        /// </summary>
        public readonly int SegmentHostCount;
        /// <summary>
        /// A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
        /// </summary>
        public readonly ImmutableArray<string> SegmentHostGroupIds;
        public readonly ImmutableArray<Outputs.GetMdbGreenplumClusterSegmentHostResult> SegmentHosts;
        /// <summary>
        /// Number of segments on segment host (not more then 1 + RAM/8).
        /// </summary>
        public readonly int SegmentInHost;
        public readonly ImmutableArray<Outputs.GetMdbGreenplumClusterSegmentSubclusterResult> SegmentSubclusters;
        /// <summary>
        /// ID of service account to use with Yandex Cloud resources (e.g. S3, Cloud Logging).
        /// </summary>
        public readonly string ServiceAccountId;
        /// <summary>
        /// Status of the cluster.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// Greenplum cluster admin user name.
        /// </summary>
        public readonly string UserName;
        /// <summary>
        /// Version of the Greenplum cluster. (`6.25`)
        /// </summary>
        public readonly string Version;
        /// <summary>
        /// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetMdbGreenplumClusterResult(
            ImmutableArray<Outputs.GetMdbGreenplumClusterAccessResult> accesses,

            bool assignPublicIp,

            ImmutableArray<Outputs.GetMdbGreenplumClusterBackgroundActivityResult> backgroundActivities,

            ImmutableArray<Outputs.GetMdbGreenplumClusterBackupWindowStartResult> backupWindowStarts,

            ImmutableArray<Outputs.GetMdbGreenplumClusterCloudStorageResult> cloudStorages,

            string clusterId,

            string createdAt,

            bool deletionProtection,

            string description,

            string environment,

            string folderId,

            ImmutableDictionary<string, string> greenplumConfig,

            string health,

            string id,

            ImmutableDictionary<string, string> labels,

            ImmutableArray<Outputs.GetMdbGreenplumClusterLoggingResult> loggings,

            ImmutableArray<Outputs.GetMdbGreenplumClusterMaintenanceWindowResult> maintenanceWindows,

            int masterHostCount,

            ImmutableArray<string> masterHostGroupIds,

            ImmutableArray<Outputs.GetMdbGreenplumClusterMasterHostResult> masterHosts,

            ImmutableArray<Outputs.GetMdbGreenplumClusterMasterSubclusterResult> masterSubclusters,

            string name,

            string networkId,

            Outputs.GetMdbGreenplumClusterPoolerConfigResult? poolerConfig,

            ImmutableArray<Outputs.GetMdbGreenplumClusterPxfConfigResult> pxfConfigs,

            ImmutableArray<string> securityGroupIds,

            int segmentHostCount,

            ImmutableArray<string> segmentHostGroupIds,

            ImmutableArray<Outputs.GetMdbGreenplumClusterSegmentHostResult> segmentHosts,

            int segmentInHost,

            ImmutableArray<Outputs.GetMdbGreenplumClusterSegmentSubclusterResult> segmentSubclusters,

            string serviceAccountId,

            string status,

            string subnetId,

            string userName,

            string version,

            string zone)
        {
            Accesses = accesses;
            AssignPublicIp = assignPublicIp;
            BackgroundActivities = backgroundActivities;
            BackupWindowStarts = backupWindowStarts;
            CloudStorages = cloudStorages;
            ClusterId = clusterId;
            CreatedAt = createdAt;
            DeletionProtection = deletionProtection;
            Description = description;
            Environment = environment;
            FolderId = folderId;
            GreenplumConfig = greenplumConfig;
            Health = health;
            Id = id;
            Labels = labels;
            Loggings = loggings;
            MaintenanceWindows = maintenanceWindows;
            MasterHostCount = masterHostCount;
            MasterHostGroupIds = masterHostGroupIds;
            MasterHosts = masterHosts;
            MasterSubclusters = masterSubclusters;
            Name = name;
            NetworkId = networkId;
            PoolerConfig = poolerConfig;
            PxfConfigs = pxfConfigs;
            SecurityGroupIds = securityGroupIds;
            SegmentHostCount = segmentHostCount;
            SegmentHostGroupIds = segmentHostGroupIds;
            SegmentHosts = segmentHosts;
            SegmentInHost = segmentInHost;
            SegmentSubclusters = segmentSubclusters;
            ServiceAccountId = serviceAccountId;
            Status = status;
            SubnetId = subnetId;
            UserName = userName;
            Version = version;
            Zone = zone;
        }
    }
}
