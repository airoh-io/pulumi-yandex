// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetMdbMysqlCluster
    {
        /// <summary>
        /// Get information about a Yandex Managed MySQL cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-mysql/).
        /// 
        /// &gt; Either `cluster_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myCluster = Yandex.GetMdbMysqlCluster.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["networkId"] = myCluster.Apply(getMdbMysqlClusterResult =&gt; getMdbMysqlClusterResult.NetworkId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetMdbMysqlClusterResult> InvokeAsync(GetMdbMysqlClusterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMdbMysqlClusterResult>("yandex:index/getMdbMysqlCluster:getMdbMysqlCluster", args ?? new GetMdbMysqlClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Managed MySQL cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-mysql/).
        /// 
        /// &gt; Either `cluster_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myCluster = Yandex.GetMdbMysqlCluster.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["networkId"] = myCluster.Apply(getMdbMysqlClusterResult =&gt; getMdbMysqlClusterResult.NetworkId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetMdbMysqlClusterResult> Invoke(GetMdbMysqlClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMdbMysqlClusterResult>("yandex:index/getMdbMysqlCluster:getMdbMysqlCluster", args ?? new GetMdbMysqlClusterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Managed MySQL cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-mysql/).
        /// 
        /// &gt; Either `cluster_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myCluster = Yandex.GetMdbMysqlCluster.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["networkId"] = myCluster.Apply(getMdbMysqlClusterResult =&gt; getMdbMysqlClusterResult.NetworkId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetMdbMysqlClusterResult> Invoke(GetMdbMysqlClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMdbMysqlClusterResult>("yandex:index/getMdbMysqlCluster:getMdbMysqlCluster", args ?? new GetMdbMysqlClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMdbMysqlClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Access policy to the MySQL cluster.
        /// </summary>
        [Input("access")]
        public Inputs.GetMdbMysqlClusterAccessArgs? Access { get; set; }

        /// <summary>
        /// The ID of the MySQL cluster.
        /// </summary>
        [Input("clusterId")]
        public string? ClusterId { get; set; }

        /// <summary>
        /// The `true` value means that resource is protected from accidental deletion.
        /// </summary>
        [Input("deletionProtection")]
        public bool? DeletionProtection { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// ID of the KMS key for cluster disk encryption. Restoring without an encryption key will disable encryption if any exists.
        /// </summary>
        [Input("diskEncryptionKeyId")]
        public string? DiskEncryptionKeyId { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        [Input("labels")]
        private Dictionary<string, string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public Dictionary<string, string> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, string>());
            set => _labels = value;
        }

        [Input("mysqlConfig")]
        private Dictionary<string, string>? _mysqlConfig;

        /// <summary>
        /// MySQL cluster config block.
        /// </summary>
        public Dictionary<string, string> MysqlConfig
        {
            get => _mysqlConfig ?? (_mysqlConfig = new Dictionary<string, string>());
            set => _mysqlConfig = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetMdbMysqlClusterArgs()
        {
        }
        public static new GetMdbMysqlClusterArgs Empty => new GetMdbMysqlClusterArgs();
    }

    public sealed class GetMdbMysqlClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Access policy to the MySQL cluster.
        /// </summary>
        [Input("access")]
        public Input<Inputs.GetMdbMysqlClusterAccessInputArgs>? Access { get; set; }

        /// <summary>
        /// The ID of the MySQL cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The `true` value means that resource is protected from accidental deletion.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// ID of the KMS key for cluster disk encryption. Restoring without an encryption key will disable encryption if any exists.
        /// </summary>
        [Input("diskEncryptionKeyId")]
        public Input<string>? DiskEncryptionKeyId { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("mysqlConfig")]
        private InputMap<string>? _mysqlConfig;

        /// <summary>
        /// MySQL cluster config block.
        /// </summary>
        public InputMap<string> MysqlConfig
        {
            get => _mysqlConfig ?? (_mysqlConfig = new InputMap<string>());
            set => _mysqlConfig = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetMdbMysqlClusterInvokeArgs()
        {
        }
        public static new GetMdbMysqlClusterInvokeArgs Empty => new GetMdbMysqlClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetMdbMysqlClusterResult
    {
        /// <summary>
        /// Access policy to the MySQL cluster.
        /// </summary>
        public readonly Outputs.GetMdbMysqlClusterAccessResult Access;
        /// <summary>
        /// The period in days during which backups are stored.
        /// </summary>
        public readonly int BackupRetainPeriodDays;
        /// <summary>
        /// Time to start the daily backup, in the UTC.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbMysqlClusterBackupWindowStartResult> BackupWindowStarts;
        /// <summary>
        /// The ID of the MySQL cluster.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// To manage databases, please switch to using a separate resource type `yandex_mdb_mysql_databases`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbMysqlClusterDatabaseResult> Databases;
        /// <summary>
        /// The `true` value means that resource is protected from accidental deletion.
        /// </summary>
        public readonly bool DeletionProtection;
        /// <summary>
        /// The resource description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// ID of the KMS key for cluster disk encryption. Restoring without an encryption key will disable encryption if any exists.
        /// </summary>
        public readonly string DiskEncryptionKeyId;
        /// <summary>
        /// Cluster disk size autoscaling settings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbMysqlClusterDiskSizeAutoscalingResult> DiskSizeAutoscalings;
        /// <summary>
        /// Deployment environment of the MySQL cluster.
        /// </summary>
        public readonly string Environment;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string FolderId;
        /// <summary>
        /// Aggregated health of the cluster.
        /// </summary>
        public readonly string Health;
        /// <summary>
        /// A list of host group IDs to place VMs of the cluster on.
        /// </summary>
        public readonly ImmutableArray<string> HostGroupIds;
        /// <summary>
        /// A host of the MySQL cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbMysqlClusterHostResult> Hosts;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Labels;
        /// <summary>
        /// Maintenance policy of the MySQL cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbMysqlClusterMaintenanceWindowResult> MaintenanceWindows;
        /// <summary>
        /// MySQL cluster config block.
        /// </summary>
        public readonly ImmutableDictionary<string, string> MysqlConfig;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The `VPC Network ID` of subnets which resource attached to.
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// Cluster performance diagnostics settings. [YC Documentation](https://yandex.cloud/docs/managed-mysql/api-ref/grpc/cluster_service#PerformanceDiagnostics).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbMysqlClusterPerformanceDiagnosticResult> PerformanceDiagnostics;
        /// <summary>
        /// Resources allocated to hosts of the MySQL cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbMysqlClusterResourceResult> Resources;
        /// <summary>
        /// The list of security groups applied to resource or their components.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// Status of the cluster.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// To manage users, please switch to using a separate resource type `yandex.MdbMysqlUser`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbMysqlClusterUserResult> Users;
        /// <summary>
        /// Version of the MySQL cluster. (allowed versions are: 5.7, 8.0).
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetMdbMysqlClusterResult(
            Outputs.GetMdbMysqlClusterAccessResult access,

            int backupRetainPeriodDays,

            ImmutableArray<Outputs.GetMdbMysqlClusterBackupWindowStartResult> backupWindowStarts,

            string clusterId,

            string createdAt,

            ImmutableArray<Outputs.GetMdbMysqlClusterDatabaseResult> databases,

            bool deletionProtection,

            string? description,

            string diskEncryptionKeyId,

            ImmutableArray<Outputs.GetMdbMysqlClusterDiskSizeAutoscalingResult> diskSizeAutoscalings,

            string environment,

            string folderId,

            string health,

            ImmutableArray<string> hostGroupIds,

            ImmutableArray<Outputs.GetMdbMysqlClusterHostResult> hosts,

            string id,

            ImmutableDictionary<string, string>? labels,

            ImmutableArray<Outputs.GetMdbMysqlClusterMaintenanceWindowResult> maintenanceWindows,

            ImmutableDictionary<string, string> mysqlConfig,

            string name,

            string networkId,

            ImmutableArray<Outputs.GetMdbMysqlClusterPerformanceDiagnosticResult> performanceDiagnostics,

            ImmutableArray<Outputs.GetMdbMysqlClusterResourceResult> resources,

            ImmutableArray<string> securityGroupIds,

            string status,

            ImmutableArray<Outputs.GetMdbMysqlClusterUserResult> users,

            string version)
        {
            Access = access;
            BackupRetainPeriodDays = backupRetainPeriodDays;
            BackupWindowStarts = backupWindowStarts;
            ClusterId = clusterId;
            CreatedAt = createdAt;
            Databases = databases;
            DeletionProtection = deletionProtection;
            Description = description;
            DiskEncryptionKeyId = diskEncryptionKeyId;
            DiskSizeAutoscalings = diskSizeAutoscalings;
            Environment = environment;
            FolderId = folderId;
            Health = health;
            HostGroupIds = hostGroupIds;
            Hosts = hosts;
            Id = id;
            Labels = labels;
            MaintenanceWindows = maintenanceWindows;
            MysqlConfig = mysqlConfig;
            Name = name;
            NetworkId = networkId;
            PerformanceDiagnostics = performanceDiagnostics;
            Resources = resources;
            SecurityGroupIds = securityGroupIds;
            Status = status;
            Users = users;
            Version = version;
        }
    }
}
