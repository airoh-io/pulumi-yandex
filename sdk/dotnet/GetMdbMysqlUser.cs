// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetMdbMysqlUser
    {
        /// <summary>
        /// Get information about a Yandex Managed MySQL user. For more information, see [the official documentation](https://yandex.cloud/docs/managed-mysql/).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myUser = Yandex.GetMdbMysqlUser.Invoke(new()
        ///     {
        ///         ClusterId = "some_cluster_id",
        ///         Name = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["permission"] = data.Yandex_mdb_mysql_user.Foo.Permission,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetMdbMysqlUserResult> InvokeAsync(GetMdbMysqlUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMdbMysqlUserResult>("yandex:index/getMdbMysqlUser:getMdbMysqlUser", args ?? new GetMdbMysqlUserArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Managed MySQL user. For more information, see [the official documentation](https://yandex.cloud/docs/managed-mysql/).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myUser = Yandex.GetMdbMysqlUser.Invoke(new()
        ///     {
        ///         ClusterId = "some_cluster_id",
        ///         Name = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["permission"] = data.Yandex_mdb_mysql_user.Foo.Permission,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetMdbMysqlUserResult> Invoke(GetMdbMysqlUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMdbMysqlUserResult>("yandex:index/getMdbMysqlUser:getMdbMysqlUser", args ?? new GetMdbMysqlUserInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Managed MySQL user. For more information, see [the official documentation](https://yandex.cloud/docs/managed-mysql/).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myUser = Yandex.GetMdbMysqlUser.Invoke(new()
        ///     {
        ///         ClusterId = "some_cluster_id",
        ///         Name = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["permission"] = data.Yandex_mdb_mysql_user.Foo.Permission,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetMdbMysqlUserResult> Invoke(GetMdbMysqlUserInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMdbMysqlUserResult>("yandex:index/getMdbMysqlUser:getMdbMysqlUser", args ?? new GetMdbMysqlUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMdbMysqlUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the MySQL cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// The name of the MySQL user.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("permissions")]
        private List<Inputs.GetMdbMysqlUserPermissionArgs>? _permissions;
        public List<Inputs.GetMdbMysqlUserPermissionArgs> Permissions
        {
            get => _permissions ?? (_permissions = new List<Inputs.GetMdbMysqlUserPermissionArgs>());
            set => _permissions = value;
        }

        public GetMdbMysqlUserArgs()
        {
        }
        public static new GetMdbMysqlUserArgs Empty => new GetMdbMysqlUserArgs();
    }

    public sealed class GetMdbMysqlUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the MySQL cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The name of the MySQL user.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("permissions")]
        private InputList<Inputs.GetMdbMysqlUserPermissionInputArgs>? _permissions;
        public InputList<Inputs.GetMdbMysqlUserPermissionInputArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.GetMdbMysqlUserPermissionInputArgs>());
            set => _permissions = value;
        }

        public GetMdbMysqlUserInvokeArgs()
        {
        }
        public static new GetMdbMysqlUserInvokeArgs Empty => new GetMdbMysqlUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetMdbMysqlUserResult
    {
        /// <summary>
        /// Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD` (for version 5.7 `MYSQL_NATIVE_PASSWORD`, `SHA256_PASSWORD`)
        /// </summary>
        public readonly string AuthenticationPlugin;
        /// <summary>
        /// The ID of the MySQL cluster.
        /// </summary>
        public readonly string ClusterId;
        public readonly ImmutableArray<Outputs.GetMdbMysqlUserConnectionLimitResult> ConnectionLimits;
        /// <summary>
        /// Connection Manager connection configuration. Filled in by the server automatically.
        /// </summary>
        public readonly ImmutableDictionary<string, string> ConnectionManager;
        /// <summary>
        /// List user's global permissions. Allowed permissions: `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS`, `FLUSH_OPTIMIZER_COSTS`, `SHOW_ROUTINE`, `MDB_ADMIN` for clear list use empty list. If the attribute is not specified there will be no changes.
        /// </summary>
        public readonly ImmutableArray<string> GlobalPermissions;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the MySQL user.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetMdbMysqlUserPermissionResult> Permissions;

        [OutputConstructor]
        private GetMdbMysqlUserResult(
            string authenticationPlugin,

            string clusterId,

            ImmutableArray<Outputs.GetMdbMysqlUserConnectionLimitResult> connectionLimits,

            ImmutableDictionary<string, string> connectionManager,

            ImmutableArray<string> globalPermissions,

            string id,

            string name,

            ImmutableArray<Outputs.GetMdbMysqlUserPermissionResult> permissions)
        {
            AuthenticationPlugin = authenticationPlugin;
            ClusterId = clusterId;
            ConnectionLimits = connectionLimits;
            ConnectionManager = connectionManager;
            GlobalPermissions = globalPermissions;
            Id = id;
            Name = name;
            Permissions = permissions;
        }
    }
}
