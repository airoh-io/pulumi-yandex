// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetMonitoringDashboard
    {
        /// <summary>
        /// Get information about a Yandex Monitoring dashboard.
        /// 
        /// &gt; One of `dashboard_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myDashboard = Yandex.GetMonitoringDashboard.Invoke(new()
        ///     {
        ///         DashboardId = "some_instance_dashboard_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMonitoringDashboardResult> InvokeAsync(GetMonitoringDashboardArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMonitoringDashboardResult>("yandex:index/getMonitoringDashboard:getMonitoringDashboard", args ?? new GetMonitoringDashboardArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Monitoring dashboard.
        /// 
        /// &gt; One of `dashboard_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myDashboard = Yandex.GetMonitoringDashboard.Invoke(new()
        ///     {
        ///         DashboardId = "some_instance_dashboard_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMonitoringDashboardResult> Invoke(GetMonitoringDashboardInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMonitoringDashboardResult>("yandex:index/getMonitoringDashboard:getMonitoringDashboard", args ?? new GetMonitoringDashboardInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Monitoring dashboard.
        /// 
        /// &gt; One of `dashboard_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myDashboard = Yandex.GetMonitoringDashboard.Invoke(new()
        ///     {
        ///         DashboardId = "some_instance_dashboard_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMonitoringDashboardResult> Invoke(GetMonitoringDashboardInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMonitoringDashboardResult>("yandex:index/getMonitoringDashboard:getMonitoringDashboard", args ?? new GetMonitoringDashboardInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMonitoringDashboardArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Dashboard ID.
        /// </summary>
        [Input("dashboardId")]
        public string? DashboardId { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetMonitoringDashboardArgs()
        {
        }
        public static new GetMonitoringDashboardArgs Empty => new GetMonitoringDashboardArgs();
    }

    public sealed class GetMonitoringDashboardInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Dashboard ID.
        /// </summary>
        [Input("dashboardId")]
        public Input<string>? DashboardId { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetMonitoringDashboardInvokeArgs()
        {
        }
        public static new GetMonitoringDashboardInvokeArgs Empty => new GetMonitoringDashboardInvokeArgs();
    }


    [OutputType]
    public sealed class GetMonitoringDashboardResult
    {
        /// <summary>
        /// Dashboard ID.
        /// </summary>
        public readonly string? DashboardId;
        /// <summary>
        /// The resource description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string FolderId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Dashboard parametrization
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitoringDashboardParametrizationResult> Parametrizations;
        /// <summary>
        /// Dashboard title.
        /// </summary>
        public readonly string Title;
        /// <summary>
        /// Widgets
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitoringDashboardWidgetResult> Widgets;

        [OutputConstructor]
        private GetMonitoringDashboardResult(
            string? dashboardId,

            string? description,

            string folderId,

            string id,

            ImmutableDictionary<string, string> labels,

            string? name,

            ImmutableArray<Outputs.GetMonitoringDashboardParametrizationResult> parametrizations,

            string title,

            ImmutableArray<Outputs.GetMonitoringDashboardWidgetResult> widgets)
        {
            DashboardId = dashboardId;
            Description = description;
            FolderId = folderId;
            Id = id;
            Labels = labels;
            Name = name;
            Parametrizations = parametrizations;
            Title = title;
            Widgets = widgets;
        }
    }
}
