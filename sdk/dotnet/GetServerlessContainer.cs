// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetServerlessContainer
    {
        /// <summary>
        /// Get information about a Yandex Cloud Serverless Container. This data source is used to define Yandex Cloud Container that can be used by other resources.
        /// 
        /// &gt; Either `container_id` or `name` must be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_container = Yandex.GetServerlessContainer.Invoke(new()
        ///     {
        ///         ContainerId = "are1samplecontainer11",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServerlessContainerResult> InvokeAsync(GetServerlessContainerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerlessContainerResult>("yandex:index/getServerlessContainer:getServerlessContainer", args ?? new GetServerlessContainerArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Cloud Serverless Container. This data source is used to define Yandex Cloud Container that can be used by other resources.
        /// 
        /// &gt; Either `container_id` or `name` must be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_container = Yandex.GetServerlessContainer.Invoke(new()
        ///     {
        ///         ContainerId = "are1samplecontainer11",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerlessContainerResult> Invoke(GetServerlessContainerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerlessContainerResult>("yandex:index/getServerlessContainer:getServerlessContainer", args ?? new GetServerlessContainerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Cloud Serverless Container. This data source is used to define Yandex Cloud Container that can be used by other resources.
        /// 
        /// &gt; Either `container_id` or `name` must be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_container = Yandex.GetServerlessContainer.Invoke(new()
        ///     {
        ///         ContainerId = "are1samplecontainer11",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerlessContainerResult> Invoke(GetServerlessContainerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerlessContainerResult>("yandex:index/getServerlessContainer:getServerlessContainer", args ?? new GetServerlessContainerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerlessContainerArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectivity")]
        public Inputs.GetServerlessContainerConnectivityArgs? Connectivity { get; set; }

        /// <summary>
        /// Yandex Cloud Serverless Container ID used to define container.
        /// </summary>
        [Input("containerId")]
        public string? ContainerId { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        [Input("metadataOptions")]
        public Inputs.GetServerlessContainerMetadataOptionsArgs? MetadataOptions { get; set; }

        [Input("mounts")]
        private List<Inputs.GetServerlessContainerMountArgs>? _mounts;
        public List<Inputs.GetServerlessContainerMountArgs> Mounts
        {
            get => _mounts ?? (_mounts = new List<Inputs.GetServerlessContainerMountArgs>());
            set => _mounts = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("runtime")]
        public Inputs.GetServerlessContainerRuntimeArgs? Runtime { get; set; }

        [Input("secrets")]
        private List<Inputs.GetServerlessContainerSecretArgs>? _secrets;
        public List<Inputs.GetServerlessContainerSecretArgs> Secrets
        {
            get => _secrets ?? (_secrets = new List<Inputs.GetServerlessContainerSecretArgs>());
            set => _secrets = value;
        }

        [Input("storageMounts")]
        private List<Inputs.GetServerlessContainerStorageMountArgs>? _storageMounts;
        [Obsolete(@"to manage storage_mountss, please switch to using a separate resource type mounts")]
        public List<Inputs.GetServerlessContainerStorageMountArgs> StorageMounts
        {
            get => _storageMounts ?? (_storageMounts = new List<Inputs.GetServerlessContainerStorageMountArgs>());
            set => _storageMounts = value;
        }

        public GetServerlessContainerArgs()
        {
        }
        public static new GetServerlessContainerArgs Empty => new GetServerlessContainerArgs();
    }

    public sealed class GetServerlessContainerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectivity")]
        public Input<Inputs.GetServerlessContainerConnectivityInputArgs>? Connectivity { get; set; }

        /// <summary>
        /// Yandex Cloud Serverless Container ID used to define container.
        /// </summary>
        [Input("containerId")]
        public Input<string>? ContainerId { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("metadataOptions")]
        public Input<Inputs.GetServerlessContainerMetadataOptionsInputArgs>? MetadataOptions { get; set; }

        [Input("mounts")]
        private InputList<Inputs.GetServerlessContainerMountInputArgs>? _mounts;
        public InputList<Inputs.GetServerlessContainerMountInputArgs> Mounts
        {
            get => _mounts ?? (_mounts = new InputList<Inputs.GetServerlessContainerMountInputArgs>());
            set => _mounts = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("runtime")]
        public Input<Inputs.GetServerlessContainerRuntimeInputArgs>? Runtime { get; set; }

        [Input("secrets")]
        private InputList<Inputs.GetServerlessContainerSecretInputArgs>? _secrets;
        public InputList<Inputs.GetServerlessContainerSecretInputArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.GetServerlessContainerSecretInputArgs>());
            set => _secrets = value;
        }

        [Input("storageMounts")]
        private InputList<Inputs.GetServerlessContainerStorageMountInputArgs>? _storageMounts;
        [Obsolete(@"to manage storage_mountss, please switch to using a separate resource type mounts")]
        public InputList<Inputs.GetServerlessContainerStorageMountInputArgs> StorageMounts
        {
            get => _storageMounts ?? (_storageMounts = new InputList<Inputs.GetServerlessContainerStorageMountInputArgs>());
            set => _storageMounts = value;
        }

        public GetServerlessContainerInvokeArgs()
        {
        }
        public static new GetServerlessContainerInvokeArgs Empty => new GetServerlessContainerInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerlessContainerResult
    {
        public readonly ImmutableArray<Outputs.GetServerlessContainerAsyncInvocationResult> AsyncInvocations;
        /// <summary>
        /// Concurrency of Yandex Cloud Serverless Container.
        /// </summary>
        public readonly int Concurrency;
        public readonly Outputs.GetServerlessContainerConnectivityResult? Connectivity;
        /// <summary>
        /// Yandex Cloud Serverless Container ID used to define container.
        /// </summary>
        public readonly string? ContainerId;
        /// <summary>
        /// Core fraction (**0...100**) of the Yandex Cloud Serverless Container.
        /// </summary>
        public readonly int CoreFraction;
        /// <summary>
        /// Cores (**1+**) of the Yandex Cloud Serverless Container.
        /// </summary>
        public readonly int Cores;
        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The resource description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Execution timeout in seconds (**duration format**) for Yandex Cloud Serverless Container.
        /// </summary>
        public readonly string ExecutionTimeout;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string? FolderId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetServerlessContainerImageResult> Images;
        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly ImmutableArray<Outputs.GetServerlessContainerLogOptionResult> LogOptions;
        /// <summary>
        /// Memory in megabytes (**aligned to 128 MB**).
        /// </summary>
        public readonly int Memory;
        public readonly Outputs.GetServerlessContainerMetadataOptionsResult MetadataOptions;
        public readonly ImmutableArray<Outputs.GetServerlessContainerMountResult> Mounts;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Last revision ID of the Yandex Cloud Serverless Container.
        /// </summary>
        public readonly string RevisionId;
        public readonly Outputs.GetServerlessContainerRuntimeResult Runtime;
        public readonly ImmutableArray<Outputs.GetServerlessContainerSecretResult> Secrets;
        /// <summary>
        /// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
        /// </summary>
        public readonly string ServiceAccountId;
        public readonly ImmutableArray<Outputs.GetServerlessContainerStorageMountResult> StorageMounts;
        /// <summary>
        /// Invoke URL for the Yandex Cloud Serverless Container.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetServerlessContainerResult(
            ImmutableArray<Outputs.GetServerlessContainerAsyncInvocationResult> asyncInvocations,

            int concurrency,

            Outputs.GetServerlessContainerConnectivityResult? connectivity,

            string? containerId,

            int coreFraction,

            int cores,

            string createdAt,

            string description,

            string executionTimeout,

            string? folderId,

            string id,

            ImmutableArray<Outputs.GetServerlessContainerImageResult> images,

            ImmutableDictionary<string, string> labels,

            ImmutableArray<Outputs.GetServerlessContainerLogOptionResult> logOptions,

            int memory,

            Outputs.GetServerlessContainerMetadataOptionsResult metadataOptions,

            ImmutableArray<Outputs.GetServerlessContainerMountResult> mounts,

            string? name,

            string revisionId,

            Outputs.GetServerlessContainerRuntimeResult runtime,

            ImmutableArray<Outputs.GetServerlessContainerSecretResult> secrets,

            string serviceAccountId,

            ImmutableArray<Outputs.GetServerlessContainerStorageMountResult> storageMounts,

            string url)
        {
            AsyncInvocations = asyncInvocations;
            Concurrency = concurrency;
            Connectivity = connectivity;
            ContainerId = containerId;
            CoreFraction = coreFraction;
            Cores = cores;
            CreatedAt = createdAt;
            Description = description;
            ExecutionTimeout = executionTimeout;
            FolderId = folderId;
            Id = id;
            Images = images;
            Labels = labels;
            LogOptions = logOptions;
            Memory = memory;
            MetadataOptions = metadataOptions;
            Mounts = mounts;
            Name = name;
            RevisionId = revisionId;
            Runtime = runtime;
            Secrets = secrets;
            ServiceAccountId = serviceAccountId;
            StorageMounts = storageMounts;
            Url = url;
        }
    }
}
