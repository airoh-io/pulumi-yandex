// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetVpcAddress
    {
        /// <summary>
        /// Get information about a Yandex VPC address. For more information, see [the official documentation](https://yandex.cloud/docs/vpc/concepts/address).
        /// 
        /// This data source is used to define [VPC Address](https://yandex.cloud/docs/vpc/concepts/address) that can be used by other resources.
        /// 
        /// &gt; One of `address_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var addr = Yandex.GetVpcAddress.Invoke(new()
        ///     {
        ///         AddressId = "my-address-id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVpcAddressResult> InvokeAsync(GetVpcAddressArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcAddressResult>("yandex:index/getVpcAddress:getVpcAddress", args ?? new GetVpcAddressArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex VPC address. For more information, see [the official documentation](https://yandex.cloud/docs/vpc/concepts/address).
        /// 
        /// This data source is used to define [VPC Address](https://yandex.cloud/docs/vpc/concepts/address) that can be used by other resources.
        /// 
        /// &gt; One of `address_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var addr = Yandex.GetVpcAddress.Invoke(new()
        ///     {
        ///         AddressId = "my-address-id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpcAddressResult> Invoke(GetVpcAddressInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcAddressResult>("yandex:index/getVpcAddress:getVpcAddress", args ?? new GetVpcAddressInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex VPC address. For more information, see [the official documentation](https://yandex.cloud/docs/vpc/concepts/address).
        /// 
        /// This data source is used to define [VPC Address](https://yandex.cloud/docs/vpc/concepts/address) that can be used by other resources.
        /// 
        /// &gt; One of `address_id` or `name` should be specified.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Yandex = Pulumi.Yandex;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var addr = Yandex.GetVpcAddress.Invoke(new()
        ///     {
        ///         AddressId = "my-address-id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpcAddressResult> Invoke(GetVpcAddressInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcAddressResult>("yandex:index/getVpcAddress:getVpcAddress", args ?? new GetVpcAddressInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcAddressArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the address.
        /// </summary>
        [Input("addressId")]
        public string? AddressId { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetVpcAddressArgs()
        {
        }
        public static new GetVpcAddressArgs Empty => new GetVpcAddressArgs();
    }

    public sealed class GetVpcAddressInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the address.
        /// </summary>
        [Input("addressId")]
        public Input<string>? AddressId { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetVpcAddressInvokeArgs()
        {
        }
        public static new GetVpcAddressInvokeArgs Empty => new GetVpcAddressInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcAddressResult
    {
        /// <summary>
        /// ID of the address.
        /// </summary>
        public readonly string AddressId;
        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The `true` value means that resource is protected from accidental deletion.
        /// </summary>
        public readonly bool DeletionProtection;
        /// <summary>
        /// The resource description.
        /// </summary>
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetVpcAddressDnsRecordResult> DnsRecords;
        public readonly ImmutableArray<Outputs.GetVpcAddressExternalIpv4AddressResult> ExternalIpv4Addresses;
        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        public readonly string FolderId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// `false` means that address is ephemeral.
        /// </summary>
        public readonly bool Reserved;
        /// <summary>
        /// `true` if address is used.
        /// </summary>
        public readonly bool Used;

        [OutputConstructor]
        private GetVpcAddressResult(
            string addressId,

            string createdAt,

            bool deletionProtection,

            string description,

            ImmutableArray<Outputs.GetVpcAddressDnsRecordResult> dnsRecords,

            ImmutableArray<Outputs.GetVpcAddressExternalIpv4AddressResult> externalIpv4Addresses,

            string folderId,

            string id,

            ImmutableDictionary<string, string> labels,

            string name,

            bool reserved,

            bool used)
        {
            AddressId = addressId;
            CreatedAt = createdAt;
            DeletionProtection = deletionProtection;
            Description = description;
            DnsRecords = dnsRecords;
            ExternalIpv4Addresses = externalIpv4Addresses;
            FolderId = folderId;
            Id = id;
            Labels = labels;
            Name = name;
            Reserved = reserved;
            Used = used;
        }
    }
}
