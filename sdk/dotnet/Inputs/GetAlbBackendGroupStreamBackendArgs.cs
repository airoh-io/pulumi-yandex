// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Inputs
{

    public sealed class GetAlbBackendGroupStreamBackendInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("enableProxyProtocol", required: true)]
        public Input<bool> EnableProxyProtocol { get; set; } = null!;

        /// <summary>
        /// Healthcheck specification that will be used by this backend.
        /// </summary>
        [Input("healthcheck", required: true)]
        public Input<Inputs.GetAlbBackendGroupStreamBackendHealthcheckInputArgs> Healthcheck { get; set; } = null!;

        /// <summary>
        /// If set, when a backend host becomes unhealthy (as determined by the configured health checks), keep connections to the failed host.
        /// </summary>
        [Input("keepConnectionsOnHostHealthFailure")]
        public Input<bool>? KeepConnectionsOnHostHealthFailure { get; set; }

        /// <summary>
        /// Load Balancing Config specification that will be used by this backend.
        /// </summary>
        [Input("loadBalancingConfig", required: true)]
        public Input<Inputs.GetAlbBackendGroupStreamBackendLoadBalancingConfigInputArgs> LoadBalancingConfig { get; set; } = null!;

        /// <summary>
        /// Name of the backend.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Port for incoming traffic.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        [Input("targetGroupIds", required: true)]
        private InputList<string>? _targetGroupIds;

        /// <summary>
        /// References target groups for the backend.
        /// </summary>
        public InputList<string> TargetGroupIds
        {
            get => _targetGroupIds ?? (_targetGroupIds = new InputList<string>());
            set => _targetGroupIds = value;
        }

        /// <summary>
        /// TLS specification that will be used by this backend.
        /// </summary>
        [Input("tls", required: true)]
        public Input<Inputs.GetAlbBackendGroupStreamBackendTlsInputArgs> Tls { get; set; } = null!;

        /// <summary>
        /// Weight of the backend. Traffic will be split between backends of the same BackendGroup according to their weights.
        /// </summary>
        [Input("weight", required: true)]
        public Input<int> Weight { get; set; } = null!;

        public GetAlbBackendGroupStreamBackendInputArgs()
        {
        }
        public static new GetAlbBackendGroupStreamBackendInputArgs Empty => new GetAlbBackendGroupStreamBackendInputArgs();
    }
}
