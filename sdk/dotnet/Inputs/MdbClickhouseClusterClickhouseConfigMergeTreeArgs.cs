// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Inputs
{

    public sealed class MdbClickhouseClusterClickhouseConfigMergeTreeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Max bytes to merge at min space in pool: Maximum total size of a data part to merge when the number of free threads in the background pool is minimum.
        /// </summary>
        [Input("maxBytesToMergeAtMinSpaceInPool")]
        public Input<int>? MaxBytesToMergeAtMinSpaceInPool { get; set; }

        /// <summary>
        /// Max replicated merges in queue: Maximum number of merge tasks that can be in the ReplicatedMergeTree queue at the same time.
        /// </summary>
        [Input("maxReplicatedMergesInQueue")]
        public Input<int>? MaxReplicatedMergesInQueue { get; set; }

        /// <summary>
        /// Number of free entries in pool to lower max size of merge: Threshold value of free entries in the pool. If the number of entries in the pool falls below this value, ClickHouse reduces the maximum size of a data part to merge. This helps handle small merges faster, rather than filling the pool with lengthy merges.
        /// </summary>
        [Input("numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge")]
        public Input<int>? NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge { get; set; }

        /// <summary>
        /// Parts to delay insert: Number of active data parts in a table, on exceeding which ClickHouse starts artificially reduce the rate of inserting data into the table.
        /// </summary>
        [Input("partsToDelayInsert")]
        public Input<int>? PartsToDelayInsert { get; set; }

        /// <summary>
        /// Parts to throw insert: Threshold value of active data parts in a table, on exceeding which ClickHouse throws the 'Too many parts ...' exception.
        /// </summary>
        [Input("partsToThrowInsert")]
        public Input<int>? PartsToThrowInsert { get; set; }

        /// <summary>
        /// Replicated deduplication window: Number of recent hash blocks that ZooKeeper will store (the old ones will be deleted).
        /// </summary>
        [Input("replicatedDeduplicationWindow")]
        public Input<int>? ReplicatedDeduplicationWindow { get; set; }

        /// <summary>
        /// Replicated deduplication window seconds: Time during which ZooKeeper stores the hash blocks (the old ones wil be deleted).
        /// </summary>
        [Input("replicatedDeduplicationWindowSeconds")]
        public Input<int>? ReplicatedDeduplicationWindowSeconds { get; set; }

        public MdbClickhouseClusterClickhouseConfigMergeTreeArgs()
        {
        }
    }
}
