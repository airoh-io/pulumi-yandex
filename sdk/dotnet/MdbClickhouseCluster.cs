// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    /// <summary>
    /// Manages a ClickHouse cluster within the Yandex Cloud. For more information, see [the official documentation](https://yandex.cloud/docs/managed-clickhouse/concepts).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork");
    /// 
    ///     var fooVpcSubnet = new Yandex.VpcSubnet("fooVpcSubnet", new()
    ///     {
    ///         Zone = "ru-central1-a",
    ///         NetworkId = fooVpcNetwork.Id,
    ///         V4CidrBlocks = new[]
    ///         {
    ///             "10.5.0.0/24",
    ///         },
    ///     });
    /// 
    ///     //
    ///     // Create a new MDB Clickhouse Cluster.
    ///     //
    ///     var myCluster = new Yandex.MdbClickhouseCluster("myCluster", new()
    ///     {
    ///         Environment = "PRESTABLE",
    ///         NetworkId = fooVpcNetwork.Id,
    ///         Clickhouse = new Yandex.Inputs.MdbClickhouseClusterClickhouseArgs
    ///         {
    ///             Resources = new Yandex.Inputs.MdbClickhouseClusterClickhouseResourcesArgs
    ///             {
    ///                 ResourcePresetId = "s2.micro",
    ///                 DiskTypeId = "network-ssd",
    ///                 DiskSize = 32,
    ///             },
    ///             Config = new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigArgs
    ///             {
    ///                 LogLevel = "TRACE",
    ///                 MaxConnections = 100,
    ///                 MaxConcurrentQueries = 50,
    ///                 KeepAliveTimeout = 3000,
    ///                 UncompressedCacheSize = 8589934592,
    ///                 MarkCacheSize = 5368709120,
    ///                 MaxTableSizeToDrop = 53687091200,
    ///                 MaxPartitionSizeToDrop = 53687091200,
    ///                 Timezone = "UTC",
    ///                 GeobaseUri = "",
    ///                 QueryLogRetentionSize = 1073741824,
    ///                 QueryLogRetentionTime = 2592000,
    ///                 QueryThreadLogEnabled = true,
    ///                 QueryThreadLogRetentionSize = 536870912,
    ///                 QueryThreadLogRetentionTime = 2592000,
    ///                 PartLogRetentionSize = 536870912,
    ///                 PartLogRetentionTime = 2592000,
    ///                 MetricLogEnabled = true,
    ///                 MetricLogRetentionSize = 536870912,
    ///                 MetricLogRetentionTime = 2592000,
    ///                 TraceLogEnabled = true,
    ///                 TraceLogRetentionSize = 536870912,
    ///                 TraceLogRetentionTime = 2592000,
    ///                 TextLogEnabled = true,
    ///                 TextLogRetentionSize = 536870912,
    ///                 TextLogRetentionTime = 2592000,
    ///                 TextLogLevel = "TRACE",
    ///                 BackgroundPoolSize = 16,
    ///                 BackgroundSchedulePoolSize = 16,
    ///                 MergeTree = new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigMergeTreeArgs
    ///                 {
    ///                     ReplicatedDeduplicationWindow = 100,
    ///                     ReplicatedDeduplicationWindowSeconds = 604800,
    ///                     PartsToDelayInsert = 150,
    ///                     PartsToThrowInsert = 300,
    ///                     MaxReplicatedMergesInQueue = 16,
    ///                     NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge = 8,
    ///                     MaxBytesToMergeAtMinSpaceInPool = 1048576,
    ///                     MaxBytesToMergeAtMaxSpaceInPool = 161061273600,
    ///                 },
    ///                 Kafka = new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigKafkaArgs
    ///                 {
    ///                     SecurityProtocol = "SECURITY_PROTOCOL_PLAINTEXT",
    ///                     SaslMechanism = "SASL_MECHANISM_GSSAPI",
    ///                     SaslUsername = "user1",
    ///                     SaslPassword = "pass1",
    ///                 },
    ///                 KafkaTopics = new[]
    ///                 {
    ///                     new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigKafkaTopicArgs
    ///                     {
    ///                         Name = "topic1",
    ///                         Settings = new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigKafkaTopicSettingsArgs
    ///                         {
    ///                             SecurityProtocol = "SECURITY_PROTOCOL_SSL",
    ///                             SaslMechanism = "SASL_MECHANISM_SCRAM_SHA_256",
    ///                             SaslUsername = "user2",
    ///                             SaslPassword = "pass2",
    ///                         },
    ///                     },
    ///                     new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigKafkaTopicArgs
    ///                     {
    ///                         Name = "topic2",
    ///                         Settings = new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigKafkaTopicSettingsArgs
    ///                         {
    ///                             SecurityProtocol = "SECURITY_PROTOCOL_SASL_PLAINTEXT",
    ///                             SaslMechanism = "SASL_MECHANISM_PLAIN",
    ///                         },
    ///                     },
    ///                 },
    ///                 Rabbitmq = new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigRabbitmqArgs
    ///                 {
    ///                     Username = "rabbit_user",
    ///                     Password = "rabbit_pass",
    ///                 },
    ///                 Compressions = new[]
    ///                 {
    ///                     new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigCompressionArgs
    ///                     {
    ///                         Method = "LZ4",
    ///                         MinPartSize = 1024,
    ///                         MinPartSizeRatio = 0.5,
    ///                     },
    ///                     new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigCompressionArgs
    ///                     {
    ///                         Method = "ZSTD",
    ///                         MinPartSize = 2048,
    ///                         MinPartSizeRatio = 0.7,
    ///                     },
    ///                 },
    ///                 GraphiteRollups = new[]
    ///                 {
    ///                     new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigGraphiteRollupArgs
    ///                     {
    ///                         Name = "rollup1",
    ///                         Patterns = new[]
    ///                         {
    ///                             new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternArgs
    ///                             {
    ///                                 Regexp = "abc",
    ///                                 Function = "func1",
    ///                                 Retentions = new[]
    ///                                 {
    ///                                     new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionArgs
    ///                                     {
    ///                                         Age = 1000,
    ///                                         Precision = 3,
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigGraphiteRollupArgs
    ///                     {
    ///                         Name = "rollup2",
    ///                         Patterns = new[]
    ///                         {
    ///                             new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternArgs
    ///                             {
    ///                                 Function = "func2",
    ///                                 Retentions = new[]
    ///                                 {
    ///                                     new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionArgs
    ///                                     {
    ///                                         Age = 2000,
    ///                                         Precision = 5,
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Databases = new[]
    ///         {
    ///             new Yandex.Inputs.MdbClickhouseClusterDatabaseArgs
    ///             {
    ///                 Name = "db_name",
    ///             },
    ///         },
    ///         Users = new[]
    ///         {
    ///             new Yandex.Inputs.MdbClickhouseClusterUserArgs
    ///             {
    ///                 Name = "user",
    ///                 Password = "your_password",
    ///                 Permissions = new[]
    ///                 {
    ///                     new Yandex.Inputs.MdbClickhouseClusterUserPermissionArgs
    ///                     {
    ///                         DatabaseName = "db_name",
    ///                     },
    ///                 },
    ///                 Settings = new Yandex.Inputs.MdbClickhouseClusterUserSettingsArgs
    ///                 {
    ///                     MaxMemoryUsageForUser = 1000000000,
    ///                     ReadOverflowMode = "throw",
    ///                     OutputFormatJsonQuote64bitIntegers = true,
    ///                 },
    ///                 Quotas = new[]
    ///                 {
    ///                     new Yandex.Inputs.MdbClickhouseClusterUserQuotaArgs
    ///                     {
    ///                         IntervalDuration = 3600000,
    ///                         Queries = 10000,
    ///                         Errors = 1000,
    ///                     },
    ///                     new Yandex.Inputs.MdbClickhouseClusterUserQuotaArgs
    ///                     {
    ///                         IntervalDuration = 79800000,
    ///                         Queries = 50000,
    ///                         Errors = 5000,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Hosts = new[]
    ///         {
    ///             new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///             {
    ///                 Type = "CLICKHOUSE",
    ///                 Zone = "ru-central1-a",
    ///                 SubnetId = fooVpcSubnet.Id,
    ///             },
    ///         },
    ///         FormatSchemas = new[]
    ///         {
    ///             new Yandex.Inputs.MdbClickhouseClusterFormatSchemaArgs
    ///             {
    ///                 Name = "test_schema",
    ///                 Type = "FORMAT_SCHEMA_TYPE_CAPNPROTO",
    ///                 Uri = "https://storage.yandexcloud.net/ch-data/schema.proto",
    ///             },
    ///         },
    ///         MlModels = new[]
    ///         {
    ///             new Yandex.Inputs.MdbClickhouseClusterMlModelArgs
    ///             {
    ///                 Name = "test_model",
    ///                 Type = "ML_MODEL_TYPE_CATBOOST",
    ///                 Uri = "https://storage.yandexcloud.net/ch-data/train.csv",
    ///             },
    ///         },
    ///         ServiceAccountId = "your_service_account_id",
    ///         CloudStorage = new Yandex.Inputs.MdbClickhouseClusterCloudStorageArgs
    ///         {
    ///             Enabled = false,
    ///         },
    ///         MaintenanceWindow = new Yandex.Inputs.MdbClickhouseClusterMaintenanceWindowArgs
    ///         {
    ///             Type = "ANYTIME",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Auxiliary resources
    ///     var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork");
    /// 
    ///     var fooVpcSubnet = new Yandex.VpcSubnet("fooVpcSubnet", new()
    ///     {
    ///         Zone = "ru-central1-a",
    ///         NetworkId = fooVpcNetwork.Id,
    ///         V4CidrBlocks = new[]
    ///         {
    ///             "10.1.0.0/24",
    ///         },
    ///     });
    /// 
    ///     var bar = new Yandex.VpcSubnet("bar", new()
    ///     {
    ///         Zone = "ru-central1-b",
    ///         NetworkId = fooVpcNetwork.Id,
    ///         V4CidrBlocks = new[]
    ///         {
    ///             "10.2.0.0/24",
    ///         },
    ///     });
    /// 
    ///     var baz = new Yandex.VpcSubnet("baz", new()
    ///     {
    ///         Zone = "ru-central1-d",
    ///         NetworkId = fooVpcNetwork.Id,
    ///         V4CidrBlocks = new[]
    ///         {
    ///             "10.3.0.0/24",
    ///         },
    ///     });
    /// 
    ///     //
    ///     // Create a new MDB High Availability Clickhouse Cluster.
    ///     //
    ///     var myCluster = new Yandex.MdbClickhouseCluster("myCluster", new()
    ///     {
    ///         Environment = "PRESTABLE",
    ///         NetworkId = fooVpcNetwork.Id,
    ///         Clickhouse = new Yandex.Inputs.MdbClickhouseClusterClickhouseArgs
    ///         {
    ///             Resources = new Yandex.Inputs.MdbClickhouseClusterClickhouseResourcesArgs
    ///             {
    ///                 ResourcePresetId = "s2.micro",
    ///                 DiskTypeId = "network-ssd",
    ///                 DiskSize = 16,
    ///             },
    ///         },
    ///         Zookeeper = new Yandex.Inputs.MdbClickhouseClusterZookeeperArgs
    ///         {
    ///             Resources = new Yandex.Inputs.MdbClickhouseClusterZookeeperResourcesArgs
    ///             {
    ///                 ResourcePresetId = "s2.micro",
    ///                 DiskTypeId = "network-ssd",
    ///                 DiskSize = 10,
    ///             },
    ///         },
    ///         Databases = new[]
    ///         {
    ///             new Yandex.Inputs.MdbClickhouseClusterDatabaseArgs
    ///             {
    ///                 Name = "db_name",
    ///             },
    ///         },
    ///         Users = new[]
    ///         {
    ///             new Yandex.Inputs.MdbClickhouseClusterUserArgs
    ///             {
    ///                 Name = "user",
    ///                 Password = "password",
    ///                 Permissions = new[]
    ///                 {
    ///                     new Yandex.Inputs.MdbClickhouseClusterUserPermissionArgs
    ///                     {
    ///                         DatabaseName = "db_name",
    ///                     },
    ///                 },
    ///                 Settings = new Yandex.Inputs.MdbClickhouseClusterUserSettingsArgs
    ///                 {
    ///                     MaxMemoryUsageForUser = 1000000000,
    ///                     ReadOverflowMode = "throw",
    ///                     OutputFormatJsonQuote64bitIntegers = true,
    ///                 },
    ///                 Quotas = new[]
    ///                 {
    ///                     new Yandex.Inputs.MdbClickhouseClusterUserQuotaArgs
    ///                     {
    ///                         IntervalDuration = 3600000,
    ///                         Queries = 10000,
    ///                         Errors = 1000,
    ///                     },
    ///                     new Yandex.Inputs.MdbClickhouseClusterUserQuotaArgs
    ///                     {
    ///                         IntervalDuration = 79800000,
    ///                         Queries = 50000,
    ///                         Errors = 5000,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Hosts = new[]
    ///         {
    ///             new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///             {
    ///                 Type = "CLICKHOUSE",
    ///                 Zone = "ru-central1-a",
    ///                 SubnetId = fooVpcSubnet.Id,
    ///             },
    ///             new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///             {
    ///                 Type = "CLICKHOUSE",
    ///                 Zone = "ru-central1-b",
    ///                 SubnetId = bar.Id,
    ///             },
    ///             new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///             {
    ///                 Type = "ZOOKEEPER",
    ///                 Zone = "ru-central1-a",
    ///                 SubnetId = fooVpcSubnet.Id,
    ///             },
    ///             new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///             {
    ///                 Type = "ZOOKEEPER",
    ///                 Zone = "ru-central1-b",
    ///                 SubnetId = bar.Id,
    ///             },
    ///             new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///             {
    ///                 Type = "ZOOKEEPER",
    ///                 Zone = "ru-central1-d",
    ///                 SubnetId = baz.Id,
    ///             },
    ///         },
    ///         CloudStorage = new Yandex.Inputs.MdbClickhouseClusterCloudStorageArgs
    ///         {
    ///             Enabled = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Auxiliary resources
    ///     var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork");
    /// 
    ///     var fooVpcSubnet = new Yandex.VpcSubnet("fooVpcSubnet", new()
    ///     {
    ///         Zone = "ru-central1-a",
    ///         NetworkId = fooVpcNetwork.Id,
    ///         V4CidrBlocks = new[]
    ///         {
    ///             "10.1.0.0/24",
    ///         },
    ///     });
    /// 
    ///     var bar = new Yandex.VpcSubnet("bar", new()
    ///     {
    ///         Zone = "ru-central1-b",
    ///         NetworkId = fooVpcNetwork.Id,
    ///         V4CidrBlocks = new[]
    ///         {
    ///             "10.2.0.0/24",
    ///         },
    ///     });
    /// 
    ///     var baz = new Yandex.VpcSubnet("baz", new()
    ///     {
    ///         Zone = "ru-central1-d",
    ///         NetworkId = fooVpcNetwork.Id,
    ///         V4CidrBlocks = new[]
    ///         {
    ///             "10.3.0.0/24",
    ///         },
    ///     });
    /// 
    ///     //
    ///     // Create a new MDB Sharded Clickhouse Cluster.
    ///     //
    ///     var myCluster = new Yandex.MdbClickhouseCluster("myCluster", new()
    ///     {
    ///         Environment = "PRODUCTION",
    ///         NetworkId = fooVpcNetwork.Id,
    ///         Clickhouse = new Yandex.Inputs.MdbClickhouseClusterClickhouseArgs
    ///         {
    ///             Resources = new Yandex.Inputs.MdbClickhouseClusterClickhouseResourcesArgs
    ///             {
    ///                 ResourcePresetId = "s2.micro",
    ///                 DiskTypeId = "network-ssd",
    ///                 DiskSize = 16,
    ///             },
    ///         },
    ///         Zookeeper = new Yandex.Inputs.MdbClickhouseClusterZookeeperArgs
    ///         {
    ///             Resources = new Yandex.Inputs.MdbClickhouseClusterZookeeperResourcesArgs
    ///             {
    ///                 ResourcePresetId = "s2.micro",
    ///                 DiskTypeId = "network-ssd",
    ///                 DiskSize = 10,
    ///             },
    ///         },
    ///         Databases = new[]
    ///         {
    ///             new Yandex.Inputs.MdbClickhouseClusterDatabaseArgs
    ///             {
    ///                 Name = "db_name",
    ///             },
    ///         },
    ///         Users = new[]
    ///         {
    ///             new Yandex.Inputs.MdbClickhouseClusterUserArgs
    ///             {
    ///                 Name = "user",
    ///                 Password = "password",
    ///                 Permissions = new[]
    ///                 {
    ///                     new Yandex.Inputs.MdbClickhouseClusterUserPermissionArgs
    ///                     {
    ///                         DatabaseName = "db_name",
    ///                     },
    ///                 },
    ///                 Settings = new Yandex.Inputs.MdbClickhouseClusterUserSettingsArgs
    ///                 {
    ///                     MaxMemoryUsageForUser = 1000000000,
    ///                     ReadOverflowMode = "throw",
    ///                     OutputFormatJsonQuote64bitIntegers = true,
    ///                 },
    ///                 Quotas = new[]
    ///                 {
    ///                     new Yandex.Inputs.MdbClickhouseClusterUserQuotaArgs
    ///                     {
    ///                         IntervalDuration = 3600000,
    ///                         Queries = 10000,
    ///                         Errors = 1000,
    ///                     },
    ///                     new Yandex.Inputs.MdbClickhouseClusterUserQuotaArgs
    ///                     {
    ///                         IntervalDuration = 79800000,
    ///                         Queries = 50000,
    ///                         Errors = 5000,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Shards = new[]
    ///         {
    ///             new Yandex.Inputs.MdbClickhouseClusterShardArgs
    ///             {
    ///                 Name = "shard1",
    ///                 Weight = 110,
    ///             },
    ///             new Yandex.Inputs.MdbClickhouseClusterShardArgs
    ///             {
    ///                 Name = "shard2",
    ///                 Weight = 300,
    ///             },
    ///         },
    ///         Hosts = new[]
    ///         {
    ///             new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///             {
    ///                 Type = "CLICKHOUSE",
    ///                 Zone = "ru-central1-a",
    ///                 SubnetId = fooVpcSubnet.Id,
    ///                 ShardName = "shard1",
    ///             },
    ///             new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///             {
    ///                 Type = "CLICKHOUSE",
    ///                 Zone = "ru-central1-b",
    ///                 SubnetId = bar.Id,
    ///                 ShardName = "shard1",
    ///             },
    ///             new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///             {
    ///                 Type = "CLICKHOUSE",
    ///                 Zone = "ru-central1-b",
    ///                 SubnetId = bar.Id,
    ///                 ShardName = "shard2",
    ///             },
    ///             new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///             {
    ///                 Type = "CLICKHOUSE",
    ///                 Zone = "ru-central1-d",
    ///                 SubnetId = baz.Id,
    ///                 ShardName = "shard2",
    ///             },
    ///         },
    ///         ShardGroups = new[]
    ///         {
    ///             new Yandex.Inputs.MdbClickhouseClusterShardGroupArgs
    ///             {
    ///                 Name = "single_shard_group",
    ///                 Description = "Cluster configuration that contain only shard1",
    ///                 ShardNames = new[]
    ///                 {
    ///                     "shard1",
    ///                 },
    ///             },
    ///         },
    ///         CloudStorage = new Yandex.Inputs.MdbClickhouseClusterCloudStorageArgs
    ///         {
    ///             Enabled = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
    /// 
    /// ```sh
    /// $ pulumi import yandex:index/mdbClickhouseCluster:MdbClickhouseCluster &lt;resource Name&gt; &lt;resource Id&gt;
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import yandex:index/mdbClickhouseCluster:MdbClickhouseCluster my_cluster ...
    /// ```
    /// </summary>
    [YandexResourceType("yandex:index/mdbClickhouseCluster:MdbClickhouseCluster")]
    public partial class MdbClickhouseCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Access policy to the ClickHouse cluster.
        /// </summary>
        [Output("access")]
        public Output<Outputs.MdbClickhouseClusterAccess> Access { get; private set; } = null!;

        /// <summary>
        /// A password used to authorize as user `admin` when `sql_user_management` enabled.
        /// </summary>
        [Output("adminPassword")]
        public Output<string?> AdminPassword { get; private set; } = null!;

        /// <summary>
        /// The period in days during which backups are stored.
        /// </summary>
        [Output("backupRetainPeriodDays")]
        public Output<int?> BackupRetainPeriodDays { get; private set; } = null!;

        /// <summary>
        /// Time to start the daily backup, in the UTC timezone.
        /// </summary>
        [Output("backupWindowStart")]
        public Output<Outputs.MdbClickhouseClusterBackupWindowStart> BackupWindowStart { get; private set; } = null!;

        /// <summary>
        /// Configuration of the ClickHouse subcluster.
        /// </summary>
        [Output("clickhouse")]
        public Output<Outputs.MdbClickhouseClusterClickhouse> Clickhouse { get; private set; } = null!;

        /// <summary>
        /// Cloud Storage settings.
        /// </summary>
        [Output("cloudStorage")]
        public Output<Outputs.MdbClickhouseClusterCloudStorage> CloudStorage { get; private set; } = null!;

        /// <summary>
        /// The cluster identifier.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Whether to copy schema on new ClickHouse hosts.
        /// </summary>
        [Output("copySchemaOnNewHosts")]
        public Output<bool?> CopySchemaOnNewHosts { get; private set; } = null!;

        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A database of the ClickHouse cluster.
        /// </summary>
        [Output("databases")]
        public Output<ImmutableArray<Outputs.MdbClickhouseClusterDatabase>> Databases { get; private set; } = null!;

        /// <summary>
        /// The `true` value means that resource is protected from accidental deletion.
        /// </summary>
        [Output("deletionProtection")]
        public Output<bool> DeletionProtection { get; private set; } = null!;

        /// <summary>
        /// The resource description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// ID of the KMS key for cluster disk encryption.
        /// </summary>
        [Output("diskEncryptionKeyId")]
        public Output<string> DiskEncryptionKeyId { get; private set; } = null!;

        /// <summary>
        /// Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.
        /// </summary>
        [Output("embeddedKeeper")]
        public Output<bool> EmbeddedKeeper { get; private set; } = null!;

        /// <summary>
        /// Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// A set of `protobuf` or `capnproto` format schemas.
        /// </summary>
        [Output("formatSchemas")]
        public Output<ImmutableArray<Outputs.MdbClickhouseClusterFormatSchema>> FormatSchemas { get; private set; } = null!;

        /// <summary>
        /// Aggregated health of the cluster. Can be `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
        /// </summary>
        [Output("health")]
        public Output<string> Health { get; private set; } = null!;

        /// <summary>
        /// A host of the ClickHouse cluster.
        /// </summary>
        [Output("hosts")]
        public Output<ImmutableArray<Outputs.MdbClickhouseClusterHost>> Hosts { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        [Output("maintenanceWindow")]
        public Output<Outputs.MdbClickhouseClusterMaintenanceWindow> MaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// A group of machine learning models.
        /// </summary>
        [Output("mlModels")]
        public Output<ImmutableArray<Outputs.MdbClickhouseClusterMlModel>> MlModels { get; private set; } = null!;

        /// <summary>
        /// The resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The `VPC Network ID` of subnets which resource attached to.
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The list of security groups applied to resource or their components.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
        /// </summary>
        [Output("serviceAccountId")]
        public Output<string?> ServiceAccountId { get; private set; } = null!;

        /// <summary>
        /// A group of clickhouse shards.
        /// </summary>
        [Output("shardGroups")]
        public Output<ImmutableArray<Outputs.MdbClickhouseClusterShardGroup>> ShardGroups { get; private set; } = null!;

        /// <summary>
        /// A shard of the ClickHouse cluster.
        /// </summary>
        [Output("shards")]
        public Output<ImmutableArray<Outputs.MdbClickhouseClusterShard>> Shards { get; private set; } = null!;

        /// <summary>
        /// Grants `admin` user database management permission.
        /// </summary>
        [Output("sqlDatabaseManagement")]
        public Output<bool> SqlDatabaseManagement { get; private set; } = null!;

        /// <summary>
        /// Enables `admin` user with user management permission.
        /// </summary>
        [Output("sqlUserManagement")]
        public Output<bool> SqlUserManagement { get; private set; } = null!;

        /// <summary>
        /// Status of the cluster. Can be `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A user of the ClickHouse cluster.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.MdbClickhouseClusterUser>> Users { get; private set; } = null!;

        /// <summary>
        /// Version of the ClickHouse server software.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// Configuration of the ZooKeeper subcluster.
        /// </summary>
        [Output("zookeeper")]
        public Output<Outputs.MdbClickhouseClusterZookeeper> Zookeeper { get; private set; } = null!;


        /// <summary>
        /// Create a MdbClickhouseCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MdbClickhouseCluster(string name, MdbClickhouseClusterArgs args, CustomResourceOptions? options = null)
            : base("yandex:index/mdbClickhouseCluster:MdbClickhouseCluster", name, args ?? new MdbClickhouseClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MdbClickhouseCluster(string name, Input<string> id, MdbClickhouseClusterState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/mdbClickhouseCluster:MdbClickhouseCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "adminPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MdbClickhouseCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MdbClickhouseCluster Get(string name, Input<string> id, MdbClickhouseClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new MdbClickhouseCluster(name, id, state, options);
        }
    }

    public sealed class MdbClickhouseClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access policy to the ClickHouse cluster.
        /// </summary>
        [Input("access")]
        public Input<Inputs.MdbClickhouseClusterAccessArgs>? Access { get; set; }

        [Input("adminPassword")]
        private Input<string>? _adminPassword;

        /// <summary>
        /// A password used to authorize as user `admin` when `sql_user_management` enabled.
        /// </summary>
        public Input<string>? AdminPassword
        {
            get => _adminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The period in days during which backups are stored.
        /// </summary>
        [Input("backupRetainPeriodDays")]
        public Input<int>? BackupRetainPeriodDays { get; set; }

        /// <summary>
        /// Time to start the daily backup, in the UTC timezone.
        /// </summary>
        [Input("backupWindowStart")]
        public Input<Inputs.MdbClickhouseClusterBackupWindowStartArgs>? BackupWindowStart { get; set; }

        /// <summary>
        /// Configuration of the ClickHouse subcluster.
        /// </summary>
        [Input("clickhouse")]
        public Input<Inputs.MdbClickhouseClusterClickhouseArgs>? Clickhouse { get; set; }

        /// <summary>
        /// Cloud Storage settings.
        /// </summary>
        [Input("cloudStorage")]
        public Input<Inputs.MdbClickhouseClusterCloudStorageArgs>? CloudStorage { get; set; }

        /// <summary>
        /// The cluster identifier.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Whether to copy schema on new ClickHouse hosts.
        /// </summary>
        [Input("copySchemaOnNewHosts")]
        public Input<bool>? CopySchemaOnNewHosts { get; set; }

        [Input("databases")]
        private InputList<Inputs.MdbClickhouseClusterDatabaseArgs>? _databases;

        /// <summary>
        /// A database of the ClickHouse cluster.
        /// </summary>
        [Obsolete(@"to manage databases, please switch to using a separate resource type yandex_mdb_clickhouse_database")]
        public InputList<Inputs.MdbClickhouseClusterDatabaseArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.MdbClickhouseClusterDatabaseArgs>());
            set => _databases = value;
        }

        /// <summary>
        /// The `true` value means that resource is protected from accidental deletion.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// ID of the KMS key for cluster disk encryption.
        /// </summary>
        [Input("diskEncryptionKeyId")]
        public Input<string>? DiskEncryptionKeyId { get; set; }

        /// <summary>
        /// Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.
        /// </summary>
        [Input("embeddedKeeper")]
        public Input<bool>? EmbeddedKeeper { get; set; }

        /// <summary>
        /// Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("formatSchemas")]
        private InputList<Inputs.MdbClickhouseClusterFormatSchemaArgs>? _formatSchemas;

        /// <summary>
        /// A set of `protobuf` or `capnproto` format schemas.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterFormatSchemaArgs> FormatSchemas
        {
            get => _formatSchemas ?? (_formatSchemas = new InputList<Inputs.MdbClickhouseClusterFormatSchemaArgs>());
            set => _formatSchemas = value;
        }

        [Input("hosts", required: true)]
        private InputList<Inputs.MdbClickhouseClusterHostArgs>? _hosts;

        /// <summary>
        /// A host of the ClickHouse cluster.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterHostArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.MdbClickhouseClusterHostArgs>());
            set => _hosts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("maintenanceWindow")]
        public Input<Inputs.MdbClickhouseClusterMaintenanceWindowArgs>? MaintenanceWindow { get; set; }

        [Input("mlModels")]
        private InputList<Inputs.MdbClickhouseClusterMlModelArgs>? _mlModels;

        /// <summary>
        /// A group of machine learning models.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterMlModelArgs> MlModels
        {
            get => _mlModels ?? (_mlModels = new InputList<Inputs.MdbClickhouseClusterMlModelArgs>());
            set => _mlModels = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The `VPC Network ID` of subnets which resource attached to.
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The list of security groups applied to resource or their components.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
        /// </summary>
        [Input("serviceAccountId")]
        public Input<string>? ServiceAccountId { get; set; }

        [Input("shardGroups")]
        private InputList<Inputs.MdbClickhouseClusterShardGroupArgs>? _shardGroups;

        /// <summary>
        /// A group of clickhouse shards.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterShardGroupArgs> ShardGroups
        {
            get => _shardGroups ?? (_shardGroups = new InputList<Inputs.MdbClickhouseClusterShardGroupArgs>());
            set => _shardGroups = value;
        }

        [Input("shards")]
        private InputList<Inputs.MdbClickhouseClusterShardArgs>? _shards;

        /// <summary>
        /// A shard of the ClickHouse cluster.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterShardArgs> Shards
        {
            get => _shards ?? (_shards = new InputList<Inputs.MdbClickhouseClusterShardArgs>());
            set => _shards = value;
        }

        /// <summary>
        /// Grants `admin` user database management permission.
        /// </summary>
        [Input("sqlDatabaseManagement")]
        public Input<bool>? SqlDatabaseManagement { get; set; }

        /// <summary>
        /// Enables `admin` user with user management permission.
        /// </summary>
        [Input("sqlUserManagement")]
        public Input<bool>? SqlUserManagement { get; set; }

        [Input("users")]
        private InputList<Inputs.MdbClickhouseClusterUserArgs>? _users;

        /// <summary>
        /// A user of the ClickHouse cluster.
        /// </summary>
        [Obsolete(@"to manage users, please switch to using a separate resource type yandex_mdb_clickhouse_user")]
        public InputList<Inputs.MdbClickhouseClusterUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.MdbClickhouseClusterUserArgs>());
            set => _users = value;
        }

        /// <summary>
        /// Version of the ClickHouse server software.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// Configuration of the ZooKeeper subcluster.
        /// </summary>
        [Input("zookeeper")]
        public Input<Inputs.MdbClickhouseClusterZookeeperArgs>? Zookeeper { get; set; }

        public MdbClickhouseClusterArgs()
        {
        }
        public static new MdbClickhouseClusterArgs Empty => new MdbClickhouseClusterArgs();
    }

    public sealed class MdbClickhouseClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access policy to the ClickHouse cluster.
        /// </summary>
        [Input("access")]
        public Input<Inputs.MdbClickhouseClusterAccessGetArgs>? Access { get; set; }

        [Input("adminPassword")]
        private Input<string>? _adminPassword;

        /// <summary>
        /// A password used to authorize as user `admin` when `sql_user_management` enabled.
        /// </summary>
        public Input<string>? AdminPassword
        {
            get => _adminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The period in days during which backups are stored.
        /// </summary>
        [Input("backupRetainPeriodDays")]
        public Input<int>? BackupRetainPeriodDays { get; set; }

        /// <summary>
        /// Time to start the daily backup, in the UTC timezone.
        /// </summary>
        [Input("backupWindowStart")]
        public Input<Inputs.MdbClickhouseClusterBackupWindowStartGetArgs>? BackupWindowStart { get; set; }

        /// <summary>
        /// Configuration of the ClickHouse subcluster.
        /// </summary>
        [Input("clickhouse")]
        public Input<Inputs.MdbClickhouseClusterClickhouseGetArgs>? Clickhouse { get; set; }

        /// <summary>
        /// Cloud Storage settings.
        /// </summary>
        [Input("cloudStorage")]
        public Input<Inputs.MdbClickhouseClusterCloudStorageGetArgs>? CloudStorage { get; set; }

        /// <summary>
        /// The cluster identifier.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Whether to copy schema on new ClickHouse hosts.
        /// </summary>
        [Input("copySchemaOnNewHosts")]
        public Input<bool>? CopySchemaOnNewHosts { get; set; }

        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("databases")]
        private InputList<Inputs.MdbClickhouseClusterDatabaseGetArgs>? _databases;

        /// <summary>
        /// A database of the ClickHouse cluster.
        /// </summary>
        [Obsolete(@"to manage databases, please switch to using a separate resource type yandex_mdb_clickhouse_database")]
        public InputList<Inputs.MdbClickhouseClusterDatabaseGetArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.MdbClickhouseClusterDatabaseGetArgs>());
            set => _databases = value;
        }

        /// <summary>
        /// The `true` value means that resource is protected from accidental deletion.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// ID of the KMS key for cluster disk encryption.
        /// </summary>
        [Input("diskEncryptionKeyId")]
        public Input<string>? DiskEncryptionKeyId { get; set; }

        /// <summary>
        /// Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.
        /// </summary>
        [Input("embeddedKeeper")]
        public Input<bool>? EmbeddedKeeper { get; set; }

        /// <summary>
        /// Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("formatSchemas")]
        private InputList<Inputs.MdbClickhouseClusterFormatSchemaGetArgs>? _formatSchemas;

        /// <summary>
        /// A set of `protobuf` or `capnproto` format schemas.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterFormatSchemaGetArgs> FormatSchemas
        {
            get => _formatSchemas ?? (_formatSchemas = new InputList<Inputs.MdbClickhouseClusterFormatSchemaGetArgs>());
            set => _formatSchemas = value;
        }

        /// <summary>
        /// Aggregated health of the cluster. Can be `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
        /// </summary>
        [Input("health")]
        public Input<string>? Health { get; set; }

        [Input("hosts")]
        private InputList<Inputs.MdbClickhouseClusterHostGetArgs>? _hosts;

        /// <summary>
        /// A host of the ClickHouse cluster.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterHostGetArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.MdbClickhouseClusterHostGetArgs>());
            set => _hosts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("maintenanceWindow")]
        public Input<Inputs.MdbClickhouseClusterMaintenanceWindowGetArgs>? MaintenanceWindow { get; set; }

        [Input("mlModels")]
        private InputList<Inputs.MdbClickhouseClusterMlModelGetArgs>? _mlModels;

        /// <summary>
        /// A group of machine learning models.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterMlModelGetArgs> MlModels
        {
            get => _mlModels ?? (_mlModels = new InputList<Inputs.MdbClickhouseClusterMlModelGetArgs>());
            set => _mlModels = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The `VPC Network ID` of subnets which resource attached to.
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The list of security groups applied to resource or their components.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
        /// </summary>
        [Input("serviceAccountId")]
        public Input<string>? ServiceAccountId { get; set; }

        [Input("shardGroups")]
        private InputList<Inputs.MdbClickhouseClusterShardGroupGetArgs>? _shardGroups;

        /// <summary>
        /// A group of clickhouse shards.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterShardGroupGetArgs> ShardGroups
        {
            get => _shardGroups ?? (_shardGroups = new InputList<Inputs.MdbClickhouseClusterShardGroupGetArgs>());
            set => _shardGroups = value;
        }

        [Input("shards")]
        private InputList<Inputs.MdbClickhouseClusterShardGetArgs>? _shards;

        /// <summary>
        /// A shard of the ClickHouse cluster.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterShardGetArgs> Shards
        {
            get => _shards ?? (_shards = new InputList<Inputs.MdbClickhouseClusterShardGetArgs>());
            set => _shards = value;
        }

        /// <summary>
        /// Grants `admin` user database management permission.
        /// </summary>
        [Input("sqlDatabaseManagement")]
        public Input<bool>? SqlDatabaseManagement { get; set; }

        /// <summary>
        /// Enables `admin` user with user management permission.
        /// </summary>
        [Input("sqlUserManagement")]
        public Input<bool>? SqlUserManagement { get; set; }

        /// <summary>
        /// Status of the cluster. Can be `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("users")]
        private InputList<Inputs.MdbClickhouseClusterUserGetArgs>? _users;

        /// <summary>
        /// A user of the ClickHouse cluster.
        /// </summary>
        [Obsolete(@"to manage users, please switch to using a separate resource type yandex_mdb_clickhouse_user")]
        public InputList<Inputs.MdbClickhouseClusterUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.MdbClickhouseClusterUserGetArgs>());
            set => _users = value;
        }

        /// <summary>
        /// Version of the ClickHouse server software.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// Configuration of the ZooKeeper subcluster.
        /// </summary>
        [Input("zookeeper")]
        public Input<Inputs.MdbClickhouseClusterZookeeperGetArgs>? Zookeeper { get; set; }

        public MdbClickhouseClusterState()
        {
        }
        public static new MdbClickhouseClusterState Empty => new MdbClickhouseClusterState();
    }
}
