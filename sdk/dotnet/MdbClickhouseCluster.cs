// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    /// <summary>
    /// Manages a ClickHouse cluster within the Yandex.Cloud. For more information, see
    /// [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts).
    /// 
    /// ## Example Usage
    /// 
    /// Example of creating a Single Node ClickHouse.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork", new Yandex.VpcNetworkArgs
    ///         {
    ///         });
    ///         var fooVpcSubnet = new Yandex.VpcSubnet("fooVpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.5.0.0/24",
    ///             },
    ///             Zone = "ru-central1-a",
    ///         });
    ///         var fooMdbClickhouseCluster = new Yandex.MdbClickhouseCluster("fooMdbClickhouseCluster", new Yandex.MdbClickhouseClusterArgs
    ///         {
    ///             Clickhouse = new Yandex.Inputs.MdbClickhouseClusterClickhouseArgs
    ///             {
    ///                 Config = new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigArgs
    ///                 {
    ///                     BackgroundPoolSize = 16,
    ///                     BackgroundSchedulePoolSize = 16,
    ///                     Compression = 
    ///                     {
    ///                         
    ///                         {
    ///                             { "method", "LZ4" },
    ///                             { "minPartSize", 1024 },
    ///                             { "minPartSizeRatio", 0.5 },
    ///                         },
    ///                         
    ///                         {
    ///                             { "method", "ZSTD" },
    ///                             { "minPartSize", 2048 },
    ///                             { "minPartSizeRatio", 0.7 },
    ///                         },
    ///                     },
    ///                     GeobaseUri = "",
    ///                     GraphiteRollup = 
    ///                     {
    ///                         
    ///                         {
    ///                             { "name", "rollup1" },
    ///                             { "pattern", 
    ///                             {
    ///                                 
    ///                                 {
    ///                                     { "function", "func1" },
    ///                                     { "regexp", "abc" },
    ///                                     { "retention", 
    ///                                     {
    ///                                         
    ///                                         {
    ///                                             { "age", 1000 },
    ///                                             { "precision", 3 },
    ///                                         },
    ///                                     } },
    ///                                 },
    ///                             } },
    ///                         },
    ///                         
    ///                         {
    ///                             { "name", "rollup2" },
    ///                             { "pattern", 
    ///                             {
    ///                                 
    ///                                 {
    ///                                     { "function", "func2" },
    ///                                     { "retention", 
    ///                                     {
    ///                                         
    ///                                         {
    ///                                             { "age", 2000 },
    ///                                             { "precision", 5 },
    ///                                         },
    ///                                     } },
    ///                                 },
    ///                             } },
    ///                         },
    ///                     },
    ///                     Kafka = new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigKafkaArgs
    ///                     {
    ///                         SaslMechanism = "SASL_MECHANISM_GSSAPI",
    ///                         SaslPassword = "pass1",
    ///                         SaslUsername = "user1",
    ///                         SecurityProtocol = "SECURITY_PROTOCOL_PLAINTEXT",
    ///                     },
    ///                     KafkaTopic = 
    ///                     {
    ///                         
    ///                         {
    ///                             { "name", "topic1" },
    ///                             { "settings", 
    ///                             {
    ///                                 { "saslMechanism", "SASL_MECHANISM_SCRAM_SHA_256" },
    ///                                 { "saslPassword", "pass2" },
    ///                                 { "saslUsername", "user2" },
    ///                                 { "securityProtocol", "SECURITY_PROTOCOL_SSL" },
    ///                             } },
    ///                         },
    ///                         
    ///                         {
    ///                             { "name", "topic2" },
    ///                             { "settings", 
    ///                             {
    ///                                 { "saslMechanism", "SASL_MECHANISM_PLAIN" },
    ///                                 { "securityProtocol", "SECURITY_PROTOCOL_SASL_PLAINTEXT" },
    ///                             } },
    ///                         },
    ///                     },
    ///                     KeepAliveTimeout = 3000,
    ///                     LogLevel = "TRACE",
    ///                     MarkCacheSize = 5368709120,
    ///                     MaxConcurrentQueries = 50,
    ///                     MaxConnections = 100,
    ///                     MaxPartitionSizeToDrop = 53687091200,
    ///                     MaxTableSizeToDrop = 53687091200,
    ///                     MergeTree = new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigMergeTreeArgs
    ///                     {
    ///                         MaxBytesToMergeAtMinSpaceInPool = 1048576,
    ///                         MaxReplicatedMergesInQueue = 16,
    ///                         NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge = 8,
    ///                         PartsToDelayInsert = 150,
    ///                         PartsToThrowInsert = 300,
    ///                         ReplicatedDeduplicationWindow = 100,
    ///                         ReplicatedDeduplicationWindowSeconds = 604800,
    ///                     },
    ///                     MetricLogEnabled = true,
    ///                     MetricLogRetentionSize = 536870912,
    ///                     MetricLogRetentionTime = 2592000,
    ///                     PartLogRetentionSize = 536870912,
    ///                     PartLogRetentionTime = 2592000,
    ///                     QueryLogRetentionSize = 1073741824,
    ///                     QueryLogRetentionTime = 2592000,
    ///                     QueryThreadLogEnabled = true,
    ///                     QueryThreadLogRetentionSize = 536870912,
    ///                     QueryThreadLogRetentionTime = 2592000,
    ///                     Rabbitmq = new Yandex.Inputs.MdbClickhouseClusterClickhouseConfigRabbitmqArgs
    ///                     {
    ///                         Password = "rabbit_pass",
    ///                         Username = "rabbit_user",
    ///                     },
    ///                     TextLogEnabled = true,
    ///                     TextLogLevel = "TRACE",
    ///                     TextLogRetentionSize = 536870912,
    ///                     TextLogRetentionTime = 2592000,
    ///                     Timezone = "UTC",
    ///                     TraceLogEnabled = true,
    ///                     TraceLogRetentionSize = 536870912,
    ///                     TraceLogRetentionTime = 2592000,
    ///                     UncompressedCacheSize = 8589934592,
    ///                 },
    ///                 Resources = new Yandex.Inputs.MdbClickhouseClusterClickhouseResourcesArgs
    ///                 {
    ///                     DiskSize = 32,
    ///                     DiskTypeId = "network-ssd",
    ///                     ResourcePresetId = "s2.micro",
    ///                 },
    ///             },
    ///             CloudStorage = new Yandex.Inputs.MdbClickhouseClusterCloudStorageArgs
    ///             {
    ///                 Enabled = false,
    ///             },
    ///             Databases = 
    ///             {
    ///                 new Yandex.Inputs.MdbClickhouseClusterDatabaseArgs
    ///                 {
    ///                     Name = "db_name",
    ///                 },
    ///             },
    ///             Environment = "PRESTABLE",
    ///             FormatSchemas = 
    ///             {
    ///                 new Yandex.Inputs.MdbClickhouseClusterFormatSchemaArgs
    ///                 {
    ///                     Name = "test_schema",
    ///                     Type = "FORMAT_SCHEMA_TYPE_CAPNPROTO",
    ///                     Uri = "https://storage.yandexcloud.net/ch-data/schema.proto",
    ///                 },
    ///             },
    ///             Hosts = 
    ///             {
    ///                 new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///                 {
    ///                     SubnetId = fooVpcSubnet.Id,
    ///                     Type = "CLICKHOUSE",
    ///                     Zone = "ru-central1-a",
    ///                 },
    ///             },
    ///             MlModels = 
    ///             {
    ///                 new Yandex.Inputs.MdbClickhouseClusterMlModelArgs
    ///                 {
    ///                     Name = "test_model",
    ///                     Type = "ML_MODEL_TYPE_CATBOOST",
    ///                     Uri = "https://storage.yandexcloud.net/ch-data/train.csv",
    ///                 },
    ///             },
    ///             NetworkId = fooVpcNetwork.Id,
    ///             ServiceAccountId = "your_service_account_id",
    ///             Users = 
    ///             {
    ///                 new Yandex.Inputs.MdbClickhouseClusterUserArgs
    ///                 {
    ///                     Name = "user",
    ///                     Password = "your_password",
    ///                     Permissions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbClickhouseClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "db_name",
    ///                         },
    ///                     },
    ///                     Quotas = 
    ///                     {
    ///                         new Yandex.Inputs.MdbClickhouseClusterUserQuotaArgs
    ///                         {
    ///                             Errors = 1000,
    ///                             IntervalDuration = 3600000,
    ///                             Queries = 10000,
    ///                         },
    ///                         new Yandex.Inputs.MdbClickhouseClusterUserQuotaArgs
    ///                         {
    ///                             Error = 5000,
    ///                             IntervalDuration = 79800000,
    ///                             Queries = 50000,
    ///                         },
    ///                     },
    ///                     Settings = new Yandex.Inputs.MdbClickhouseClusterUserSettingsArgs
    ///                     {
    ///                         MaxMemoryUsageForUser = 1000000000,
    ///                         OutputFormatJsonQuote64bitIntegers = true,
    ///                         ReadOverflowMode = "throw",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Example of creating a HA ClickHouse Cluster.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork", new Yandex.VpcNetworkArgs
    ///         {
    ///         });
    ///         var fooVpcSubnet = new Yandex.VpcSubnet("fooVpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.1.0.0/24",
    ///             },
    ///             Zone = "ru-central1-a",
    ///         });
    ///         var bar = new Yandex.VpcSubnet("bar", new Yandex.VpcSubnetArgs
    ///         {
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.2.0.0/24",
    ///             },
    ///             Zone = "ru-central1-b",
    ///         });
    ///         var baz = new Yandex.VpcSubnet("baz", new Yandex.VpcSubnetArgs
    ///         {
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.3.0.0/24",
    ///             },
    ///             Zone = "ru-central1-c",
    ///         });
    ///         var fooMdbClickhouseCluster = new Yandex.MdbClickhouseCluster("fooMdbClickhouseCluster", new Yandex.MdbClickhouseClusterArgs
    ///         {
    ///             Clickhouse = new Yandex.Inputs.MdbClickhouseClusterClickhouseArgs
    ///             {
    ///                 Resources = new Yandex.Inputs.MdbClickhouseClusterClickhouseResourcesArgs
    ///                 {
    ///                     DiskSize = 16,
    ///                     DiskTypeId = "network-ssd",
    ///                     ResourcePresetId = "s2.micro",
    ///                 },
    ///             },
    ///             CloudStorage = new Yandex.Inputs.MdbClickhouseClusterCloudStorageArgs
    ///             {
    ///                 Enabled = false,
    ///             },
    ///             Databases = 
    ///             {
    ///                 new Yandex.Inputs.MdbClickhouseClusterDatabaseArgs
    ///                 {
    ///                     Name = "db_name",
    ///                 },
    ///             },
    ///             Environment = "PRESTABLE",
    ///             Hosts = 
    ///             {
    ///                 new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///                 {
    ///                     SubnetId = fooVpcSubnet.Id,
    ///                     Type = "CLICKHOUSE",
    ///                     Zone = "ru-central1-a",
    ///                 },
    ///                 new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///                 {
    ///                     SubnetId = bar.Id,
    ///                     Type = "CLICKHOUSE",
    ///                     Zone = "ru-central1-b",
    ///                 },
    ///                 new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///                 {
    ///                     SubnetId = fooVpcSubnet.Id,
    ///                     Type = "ZOOKEEPER",
    ///                     Zone = "ru-central1-a",
    ///                 },
    ///                 new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///                 {
    ///                     SubnetId = bar.Id,
    ///                     Type = "ZOOKEEPER",
    ///                     Zone = "ru-central1-b",
    ///                 },
    ///                 new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///                 {
    ///                     SubnetId = baz.Id,
    ///                     Type = "ZOOKEEPER",
    ///                     Zone = "ru-central1-c",
    ///                 },
    ///             },
    ///             NetworkId = fooVpcNetwork.Id,
    ///             Users = 
    ///             {
    ///                 new Yandex.Inputs.MdbClickhouseClusterUserArgs
    ///                 {
    ///                     Name = "user",
    ///                     Password = "password",
    ///                     Permissions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbClickhouseClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "db_name",
    ///                         },
    ///                     },
    ///                     Quotas = 
    ///                     {
    ///                         new Yandex.Inputs.MdbClickhouseClusterUserQuotaArgs
    ///                         {
    ///                             Errors = 1000,
    ///                             IntervalDuration = 3600000,
    ///                             Queries = 10000,
    ///                         },
    ///                         new Yandex.Inputs.MdbClickhouseClusterUserQuotaArgs
    ///                         {
    ///                             Error = 5000,
    ///                             IntervalDuration = 79800000,
    ///                             Queries = 50000,
    ///                         },
    ///                     },
    ///                     Settings = new Yandex.Inputs.MdbClickhouseClusterUserSettingsArgs
    ///                     {
    ///                         MaxMemoryUsageForUser = 1000000000,
    ///                         OutputFormatJsonQuote64bitIntegers = true,
    ///                         ReadOverflowMode = "throw",
    ///                     },
    ///                 },
    ///             },
    ///             Zookeeper = new Yandex.Inputs.MdbClickhouseClusterZookeeperArgs
    ///             {
    ///                 Resources = new Yandex.Inputs.MdbClickhouseClusterZookeeperResourcesArgs
    ///                 {
    ///                     DiskSize = 10,
    ///                     DiskTypeId = "network-ssd",
    ///                     ResourcePresetId = "s2.micro",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Example of creating a sharded ClickHouse Cluster.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork", new Yandex.VpcNetworkArgs
    ///         {
    ///         });
    ///         var fooVpcSubnet = new Yandex.VpcSubnet("fooVpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.1.0.0/24",
    ///             },
    ///             Zone = "ru-central1-a",
    ///         });
    ///         var bar = new Yandex.VpcSubnet("bar", new Yandex.VpcSubnetArgs
    ///         {
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.2.0.0/24",
    ///             },
    ///             Zone = "ru-central1-b",
    ///         });
    ///         var baz = new Yandex.VpcSubnet("baz", new Yandex.VpcSubnetArgs
    ///         {
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.3.0.0/24",
    ///             },
    ///             Zone = "ru-central1-c",
    ///         });
    ///         var fooMdbClickhouseCluster = new Yandex.MdbClickhouseCluster("fooMdbClickhouseCluster", new Yandex.MdbClickhouseClusterArgs
    ///         {
    ///             Clickhouse = new Yandex.Inputs.MdbClickhouseClusterClickhouseArgs
    ///             {
    ///                 Resources = new Yandex.Inputs.MdbClickhouseClusterClickhouseResourcesArgs
    ///                 {
    ///                     DiskSize = 16,
    ///                     DiskTypeId = "network-ssd",
    ///                     ResourcePresetId = "s2.micro",
    ///                 },
    ///             },
    ///             CloudStorage = new Yandex.Inputs.MdbClickhouseClusterCloudStorageArgs
    ///             {
    ///                 Enabled = false,
    ///             },
    ///             Databases = 
    ///             {
    ///                 new Yandex.Inputs.MdbClickhouseClusterDatabaseArgs
    ///                 {
    ///                     Name = "db_name",
    ///                 },
    ///             },
    ///             Environment = "PRODUCTION",
    ///             Hosts = 
    ///             {
    ///                 new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///                 {
    ///                     ShardName = "shard1",
    ///                     SubnetId = fooVpcSubnet.Id,
    ///                     Type = "CLICKHOUSE",
    ///                     Zone = "ru-central1-a",
    ///                 },
    ///                 new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///                 {
    ///                     ShardName = "shard1",
    ///                     SubnetId = bar.Id,
    ///                     Type = "CLICKHOUSE",
    ///                     Zone = "ru-central1-b",
    ///                 },
    ///                 new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///                 {
    ///                     ShardName = "shard2",
    ///                     SubnetId = bar.Id,
    ///                     Type = "CLICKHOUSE",
    ///                     Zone = "ru-central1-b",
    ///                 },
    ///                 new Yandex.Inputs.MdbClickhouseClusterHostArgs
    ///                 {
    ///                     ShardName = "shard2",
    ///                     SubnetId = baz.Id,
    ///                     Type = "CLICKHOUSE",
    ///                     Zone = "ru-central1-c",
    ///                 },
    ///             },
    ///             NetworkId = fooVpcNetwork.Id,
    ///             ShardGroups = 
    ///             {
    ///                 new Yandex.Inputs.MdbClickhouseClusterShardGroupArgs
    ///                 {
    ///                     Description = "Cluster configuration that contain only shard1",
    ///                     Name = "single_shard_group",
    ///                     ShardNames = 
    ///                     {
    ///                         "shard1",
    ///                     },
    ///                 },
    ///             },
    ///             Users = 
    ///             {
    ///                 new Yandex.Inputs.MdbClickhouseClusterUserArgs
    ///                 {
    ///                     Name = "user",
    ///                     Password = "password",
    ///                     Permissions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbClickhouseClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "db_name",
    ///                         },
    ///                     },
    ///                     Quotas = 
    ///                     {
    ///                         new Yandex.Inputs.MdbClickhouseClusterUserQuotaArgs
    ///                         {
    ///                             Errors = 1000,
    ///                             IntervalDuration = 3600000,
    ///                             Queries = 10000,
    ///                         },
    ///                         new Yandex.Inputs.MdbClickhouseClusterUserQuotaArgs
    ///                         {
    ///                             Error = 5000,
    ///                             IntervalDuration = 79800000,
    ///                             Queries = 50000,
    ///                         },
    ///                     },
    ///                     Settings = new Yandex.Inputs.MdbClickhouseClusterUserSettingsArgs
    ///                     {
    ///                         MaxMemoryUsageForUser = 1000000000,
    ///                         OutputFormatJsonQuote64bitIntegers = true,
    ///                         ReadOverflowMode = "throw",
    ///                     },
    ///                 },
    ///             },
    ///             Zookeeper = new Yandex.Inputs.MdbClickhouseClusterZookeeperArgs
    ///             {
    ///                 Resources = new Yandex.Inputs.MdbClickhouseClusterZookeeperResourcesArgs
    ///                 {
    ///                     DiskSize = 10,
    ///                     DiskTypeId = "network-ssd",
    ///                     ResourcePresetId = "s2.micro",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// A cluster can be imported using the `id` of the resource, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import yandex:index/mdbClickhouseCluster:MdbClickhouseCluster foo cluster_id
    /// ```
    /// </summary>
    [YandexResourceType("yandex:index/mdbClickhouseCluster:MdbClickhouseCluster")]
    public partial class MdbClickhouseCluster : Pulumi.CustomResource
    {
        /// <summary>
        /// Access policy to the ClickHouse cluster. The structure is documented below.
        /// </summary>
        [Output("access")]
        public Output<Outputs.MdbClickhouseClusterAccess> Access { get; private set; } = null!;

        /// <summary>
        /// A password used to authorize as user `admin` when `sql_user_management` enabled.
        /// </summary>
        [Output("adminPassword")]
        public Output<string?> AdminPassword { get; private set; } = null!;

        /// <summary>
        /// Time to start the daily backup, in the UTC timezone. The structure is documented below.
        /// </summary>
        [Output("backupWindowStart")]
        public Output<Outputs.MdbClickhouseClusterBackupWindowStart> BackupWindowStart { get; private set; } = null!;

        /// <summary>
        /// Configuration of the ClickHouse subcluster. The structure is documented below.
        /// </summary>
        [Output("clickhouse")]
        public Output<Outputs.MdbClickhouseClusterClickhouse> Clickhouse { get; private set; } = null!;

        [Output("cloudStorage")]
        public Output<Outputs.MdbClickhouseClusterCloudStorage?> CloudStorage { get; private set; } = null!;

        /// <summary>
        /// Whether to copy schema on new ClickHouse hosts.
        /// </summary>
        [Output("copySchemaOnNewHosts")]
        public Output<bool?> CopySchemaOnNewHosts { get; private set; } = null!;

        /// <summary>
        /// Timestamp of cluster creation.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A database of the ClickHouse cluster. The structure is documented below.
        /// </summary>
        [Output("databases")]
        public Output<ImmutableArray<Outputs.MdbClickhouseClusterDatabase>> Databases { get; private set; } = null!;

        /// <summary>
        /// Description of the shard group.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// The ID of the folder that the resource belongs to. If it
        /// is not provided, the default provider folder is used.
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// A set of protobuf or capnproto format schemas. The structure is documented below.
        /// </summary>
        [Output("formatSchemas")]
        public Output<ImmutableArray<Outputs.MdbClickhouseClusterFormatSchema>> FormatSchemas { get; private set; } = null!;

        /// <summary>
        /// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`.
        /// For more information see `health` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/api-ref/Cluster/).
        /// </summary>
        [Output("health")]
        public Output<string> Health { get; private set; } = null!;

        /// <summary>
        /// A host of the ClickHouse cluster. The structure is documented below.
        /// </summary>
        [Output("hosts")]
        public Output<ImmutableArray<Outputs.MdbClickhouseClusterHost>> Hosts { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs to assign to the ClickHouse cluster.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// A group of machine learning models. The structure is documented below
        /// </summary>
        [Output("mlModels")]
        public Output<ImmutableArray<Outputs.MdbClickhouseClusterMlModel>> MlModels { get; private set; } = null!;

        /// <summary>
        /// Graphite rollup configuration name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the network, to which the ClickHouse cluster belongs.
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// A set of ids of security groups assigned to hosts of the cluster.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// ID of the service account used for access to Yandex Object Storage.
        /// </summary>
        [Output("serviceAccountId")]
        public Output<string> ServiceAccountId { get; private set; } = null!;

        /// <summary>
        /// A group of clickhouse shards. The structure is documented below.
        /// </summary>
        [Output("shardGroups")]
        public Output<ImmutableArray<Outputs.MdbClickhouseClusterShardGroup>> ShardGroups { get; private set; } = null!;

        /// <summary>
        /// Grants `admin` user database management permission.
        /// </summary>
        [Output("sqlDatabaseManagement")]
        public Output<bool> SqlDatabaseManagement { get; private set; } = null!;

        /// <summary>
        /// Enables `admin` user with user management permission.
        /// </summary>
        [Output("sqlUserManagement")]
        public Output<bool> SqlUserManagement { get; private set; } = null!;

        /// <summary>
        /// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.
        /// For more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/api-ref/Cluster/).
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A user of the ClickHouse cluster. The structure is documented below.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.MdbClickhouseClusterUser>> Users { get; private set; } = null!;

        /// <summary>
        /// Version of the ClickHouse server software.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// Configuration of the ZooKeeper subcluster. The structure is documented below.
        /// </summary>
        [Output("zookeeper")]
        public Output<Outputs.MdbClickhouseClusterZookeeper> Zookeeper { get; private set; } = null!;


        /// <summary>
        /// Create a MdbClickhouseCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MdbClickhouseCluster(string name, MdbClickhouseClusterArgs args, CustomResourceOptions? options = null)
            : base("yandex:index/mdbClickhouseCluster:MdbClickhouseCluster", name, args ?? new MdbClickhouseClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MdbClickhouseCluster(string name, Input<string> id, MdbClickhouseClusterState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/mdbClickhouseCluster:MdbClickhouseCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MdbClickhouseCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MdbClickhouseCluster Get(string name, Input<string> id, MdbClickhouseClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new MdbClickhouseCluster(name, id, state, options);
        }
    }

    public sealed class MdbClickhouseClusterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access policy to the ClickHouse cluster. The structure is documented below.
        /// </summary>
        [Input("access")]
        public Input<Inputs.MdbClickhouseClusterAccessArgs>? Access { get; set; }

        /// <summary>
        /// A password used to authorize as user `admin` when `sql_user_management` enabled.
        /// </summary>
        [Input("adminPassword")]
        public Input<string>? AdminPassword { get; set; }

        /// <summary>
        /// Time to start the daily backup, in the UTC timezone. The structure is documented below.
        /// </summary>
        [Input("backupWindowStart")]
        public Input<Inputs.MdbClickhouseClusterBackupWindowStartArgs>? BackupWindowStart { get; set; }

        /// <summary>
        /// Configuration of the ClickHouse subcluster. The structure is documented below.
        /// </summary>
        [Input("clickhouse", required: true)]
        public Input<Inputs.MdbClickhouseClusterClickhouseArgs> Clickhouse { get; set; } = null!;

        [Input("cloudStorage")]
        public Input<Inputs.MdbClickhouseClusterCloudStorageArgs>? CloudStorage { get; set; }

        /// <summary>
        /// Whether to copy schema on new ClickHouse hosts.
        /// </summary>
        [Input("copySchemaOnNewHosts")]
        public Input<bool>? CopySchemaOnNewHosts { get; set; }

        [Input("databases")]
        private InputList<Inputs.MdbClickhouseClusterDatabaseArgs>? _databases;

        /// <summary>
        /// A database of the ClickHouse cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterDatabaseArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.MdbClickhouseClusterDatabaseArgs>());
            set => _databases = value;
        }

        /// <summary>
        /// Description of the shard group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// The ID of the folder that the resource belongs to. If it
        /// is not provided, the default provider folder is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("formatSchemas")]
        private InputList<Inputs.MdbClickhouseClusterFormatSchemaArgs>? _formatSchemas;

        /// <summary>
        /// A set of protobuf or capnproto format schemas. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterFormatSchemaArgs> FormatSchemas
        {
            get => _formatSchemas ?? (_formatSchemas = new InputList<Inputs.MdbClickhouseClusterFormatSchemaArgs>());
            set => _formatSchemas = value;
        }

        [Input("hosts", required: true)]
        private InputList<Inputs.MdbClickhouseClusterHostArgs>? _hosts;

        /// <summary>
        /// A host of the ClickHouse cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterHostArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.MdbClickhouseClusterHostArgs>());
            set => _hosts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to the ClickHouse cluster.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("mlModels")]
        private InputList<Inputs.MdbClickhouseClusterMlModelArgs>? _mlModels;

        /// <summary>
        /// A group of machine learning models. The structure is documented below
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterMlModelArgs> MlModels
        {
            get => _mlModels ?? (_mlModels = new InputList<Inputs.MdbClickhouseClusterMlModelArgs>());
            set => _mlModels = value;
        }

        /// <summary>
        /// Graphite rollup configuration name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the network, to which the ClickHouse cluster belongs.
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// A set of ids of security groups assigned to hosts of the cluster.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// ID of the service account used for access to Yandex Object Storage.
        /// </summary>
        [Input("serviceAccountId")]
        public Input<string>? ServiceAccountId { get; set; }

        [Input("shardGroups")]
        private InputList<Inputs.MdbClickhouseClusterShardGroupArgs>? _shardGroups;

        /// <summary>
        /// A group of clickhouse shards. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterShardGroupArgs> ShardGroups
        {
            get => _shardGroups ?? (_shardGroups = new InputList<Inputs.MdbClickhouseClusterShardGroupArgs>());
            set => _shardGroups = value;
        }

        /// <summary>
        /// Grants `admin` user database management permission.
        /// </summary>
        [Input("sqlDatabaseManagement")]
        public Input<bool>? SqlDatabaseManagement { get; set; }

        /// <summary>
        /// Enables `admin` user with user management permission.
        /// </summary>
        [Input("sqlUserManagement")]
        public Input<bool>? SqlUserManagement { get; set; }

        [Input("users")]
        private InputList<Inputs.MdbClickhouseClusterUserArgs>? _users;

        /// <summary>
        /// A user of the ClickHouse cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.MdbClickhouseClusterUserArgs>());
            set => _users = value;
        }

        /// <summary>
        /// Version of the ClickHouse server software.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// Configuration of the ZooKeeper subcluster. The structure is documented below.
        /// </summary>
        [Input("zookeeper")]
        public Input<Inputs.MdbClickhouseClusterZookeeperArgs>? Zookeeper { get; set; }

        public MdbClickhouseClusterArgs()
        {
        }
    }

    public sealed class MdbClickhouseClusterState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access policy to the ClickHouse cluster. The structure is documented below.
        /// </summary>
        [Input("access")]
        public Input<Inputs.MdbClickhouseClusterAccessGetArgs>? Access { get; set; }

        /// <summary>
        /// A password used to authorize as user `admin` when `sql_user_management` enabled.
        /// </summary>
        [Input("adminPassword")]
        public Input<string>? AdminPassword { get; set; }

        /// <summary>
        /// Time to start the daily backup, in the UTC timezone. The structure is documented below.
        /// </summary>
        [Input("backupWindowStart")]
        public Input<Inputs.MdbClickhouseClusterBackupWindowStartGetArgs>? BackupWindowStart { get; set; }

        /// <summary>
        /// Configuration of the ClickHouse subcluster. The structure is documented below.
        /// </summary>
        [Input("clickhouse")]
        public Input<Inputs.MdbClickhouseClusterClickhouseGetArgs>? Clickhouse { get; set; }

        [Input("cloudStorage")]
        public Input<Inputs.MdbClickhouseClusterCloudStorageGetArgs>? CloudStorage { get; set; }

        /// <summary>
        /// Whether to copy schema on new ClickHouse hosts.
        /// </summary>
        [Input("copySchemaOnNewHosts")]
        public Input<bool>? CopySchemaOnNewHosts { get; set; }

        /// <summary>
        /// Timestamp of cluster creation.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("databases")]
        private InputList<Inputs.MdbClickhouseClusterDatabaseGetArgs>? _databases;

        /// <summary>
        /// A database of the ClickHouse cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterDatabaseGetArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.MdbClickhouseClusterDatabaseGetArgs>());
            set => _databases = value;
        }

        /// <summary>
        /// Description of the shard group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The ID of the folder that the resource belongs to. If it
        /// is not provided, the default provider folder is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("formatSchemas")]
        private InputList<Inputs.MdbClickhouseClusterFormatSchemaGetArgs>? _formatSchemas;

        /// <summary>
        /// A set of protobuf or capnproto format schemas. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterFormatSchemaGetArgs> FormatSchemas
        {
            get => _formatSchemas ?? (_formatSchemas = new InputList<Inputs.MdbClickhouseClusterFormatSchemaGetArgs>());
            set => _formatSchemas = value;
        }

        /// <summary>
        /// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`.
        /// For more information see `health` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/api-ref/Cluster/).
        /// </summary>
        [Input("health")]
        public Input<string>? Health { get; set; }

        [Input("hosts")]
        private InputList<Inputs.MdbClickhouseClusterHostGetArgs>? _hosts;

        /// <summary>
        /// A host of the ClickHouse cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterHostGetArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.MdbClickhouseClusterHostGetArgs>());
            set => _hosts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to the ClickHouse cluster.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("mlModels")]
        private InputList<Inputs.MdbClickhouseClusterMlModelGetArgs>? _mlModels;

        /// <summary>
        /// A group of machine learning models. The structure is documented below
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterMlModelGetArgs> MlModels
        {
            get => _mlModels ?? (_mlModels = new InputList<Inputs.MdbClickhouseClusterMlModelGetArgs>());
            set => _mlModels = value;
        }

        /// <summary>
        /// Graphite rollup configuration name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the network, to which the ClickHouse cluster belongs.
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// A set of ids of security groups assigned to hosts of the cluster.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// ID of the service account used for access to Yandex Object Storage.
        /// </summary>
        [Input("serviceAccountId")]
        public Input<string>? ServiceAccountId { get; set; }

        [Input("shardGroups")]
        private InputList<Inputs.MdbClickhouseClusterShardGroupGetArgs>? _shardGroups;

        /// <summary>
        /// A group of clickhouse shards. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterShardGroupGetArgs> ShardGroups
        {
            get => _shardGroups ?? (_shardGroups = new InputList<Inputs.MdbClickhouseClusterShardGroupGetArgs>());
            set => _shardGroups = value;
        }

        /// <summary>
        /// Grants `admin` user database management permission.
        /// </summary>
        [Input("sqlDatabaseManagement")]
        public Input<bool>? SqlDatabaseManagement { get; set; }

        /// <summary>
        /// Enables `admin` user with user management permission.
        /// </summary>
        [Input("sqlUserManagement")]
        public Input<bool>? SqlUserManagement { get; set; }

        /// <summary>
        /// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.
        /// For more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/api-ref/Cluster/).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("users")]
        private InputList<Inputs.MdbClickhouseClusterUserGetArgs>? _users;

        /// <summary>
        /// A user of the ClickHouse cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbClickhouseClusterUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.MdbClickhouseClusterUserGetArgs>());
            set => _users = value;
        }

        /// <summary>
        /// Version of the ClickHouse server software.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// Configuration of the ZooKeeper subcluster. The structure is documented below.
        /// </summary>
        [Input("zookeeper")]
        public Input<Inputs.MdbClickhouseClusterZookeeperGetArgs>? Zookeeper { get; set; }

        public MdbClickhouseClusterState()
        {
        }
    }
}
