// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    /// <summary>
    /// Manages a connector of a Kafka cluster within the Yandex Cloud. For more information, see [the official documentation](https://yandex.cloud/docs/managed-kafka/concepts).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myCluster = new Yandex.MdbKafkaCluster("myCluster", new()
    ///     {
    ///         NetworkId = "c64vs98keiqc7f24pvkd",
    ///         Config = new Yandex.Inputs.MdbKafkaClusterConfigArgs
    ///         {
    ///             Version = "2.8",
    ///             Zones = new[]
    ///             {
    ///                 "ru-central1-a",
    ///             },
    ///             Kafka = new Yandex.Inputs.MdbKafkaClusterConfigKafkaArgs
    ///             {
    ///                 Resources = new Yandex.Inputs.MdbKafkaClusterConfigKafkaResourcesArgs
    ///                 {
    ///                     ResourcePresetId = "s2.micro",
    ///                     DiskTypeId = "network-hdd",
    ///                     DiskSize = 16,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     //
    ///     // Create a new MDB Kafka Connector.
    ///     //
    ///     var myConn = new Yandex.MdbKafkaConnector("myConn", new()
    ///     {
    ///         ClusterId = myCluster.Id,
    ///         TasksMax = 3,
    ///         Properties = 
    ///         {
    ///             { refresh.Topics.Enabled, "true" },
    ///         },
    ///         ConnectorConfigMirrormakers = new[]
    ///         {
    ///             new Yandex.Inputs.MdbKafkaConnectorConnectorConfigMirrormakerArgs
    ///             {
    ///                 Topics = "data.*",
    ///                 ReplicationFactor = 1,
    ///                 SourceCluster = new Yandex.Inputs.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterArgs
    ///                 {
    ///                     Alias = "source",
    ///                     ExternalClusters = new[]
    ///                     {
    ///                         new Yandex.Inputs.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterArgs
    ///                         {
    ///                             BootstrapServers = "somebroker1:9091,somebroker2:9091",
    ///                             SaslUsername = "someuser",
    ///                             SaslPassword = "somepassword",
    ///                             SaslMechanism = "SCRAM-SHA-512",
    ///                             SecurityProtocol = "SASL_SSL",
    ///                         },
    ///                     },
    ///                 },
    ///                 TargetCluster = new Yandex.Inputs.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterArgs
    ///                 {
    ///                     Alias = "target",
    ///                     ThisClusters = new[]
    ///                     {
    ///                         null,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var connector = new Yandex.MdbKafkaConnector("connector", new()
    ///     {
    ///         ClusterId = myCluster.Id,
    ///         TasksMax = 3,
    ///         Properties = 
    ///         {
    ///             { "key.converter", "org.apache.kafka.connect.storage.StringConverter" },
    ///             { "value.converter", "org.apache.kafka.connect.json.JsonConverter" },
    ///             { "value.converter.schemas.enable", "false" },
    ///             { "format.output.type", "jsonl" },
    ///             { "file.name.template", "dir1/dir2/{{topic}}-{{partition:padding=true}}-{{start_offset:padding=true}}.gz" },
    ///             { "timestamp.timezone", "Europe/Moscow" },
    ///         },
    ///         ConnectorConfigS3Sinks = new[]
    ///         {
    ///             new Yandex.Inputs.MdbKafkaConnectorConnectorConfigS3SinkArgs
    ///             {
    ///                 Topics = "data.*",
    ///                 FileCompressionType = "gzip",
    ///                 FileMaxRecords = 100,
    ///                 S3Connection = new Yandex.Inputs.MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionArgs
    ///                 {
    ///                     BucketName = "somebucket",
    ///                     ExternalS3s = new[]
    ///                     {
    ///                         new Yandex.Inputs.MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3Args
    ///                         {
    ///                             Endpoint = "storage.yandexcloud.net",
    ///                             AccessKeyId = "some_access_key_id",
    ///                             SecretAccessKey = "some_secret_access_key",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
    /// 
    /// ```sh
    /// $ pulumi import yandex:index/mdbKafkaConnector:MdbKafkaConnector &lt;resource Name&gt; &lt;resource Id&gt;
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import yandex:index/mdbKafkaConnector:MdbKafkaConnector my_conn ...
    /// ```
    /// </summary>
    [YandexResourceType("yandex:index/mdbKafkaConnector:MdbKafkaConnector")]
    public partial class MdbKafkaConnector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Kafka cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Settings for MirrorMaker2 connector.
        /// </summary>
        [Output("connectorConfigMirrormakers")]
        public Output<ImmutableArray<Outputs.MdbKafkaConnectorConnectorConfigMirrormaker>> ConnectorConfigMirrormakers { get; private set; } = null!;

        /// <summary>
        /// Settings for S3 Sink connector.
        /// </summary>
        [Output("connectorConfigS3Sinks")]
        public Output<ImmutableArray<Outputs.MdbKafkaConnectorConnectorConfigS3Sink>> ConnectorConfigS3Sinks { get; private set; } = null!;

        /// <summary>
        /// The resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Additional properties for connector.
        /// </summary>
        [Output("properties")]
        public Output<ImmutableDictionary<string, string>> Properties { get; private set; } = null!;

        /// <summary>
        /// The number of the connector's parallel working tasks. Default is the number of brokers.
        /// </summary>
        [Output("tasksMax")]
        public Output<int?> TasksMax { get; private set; } = null!;


        /// <summary>
        /// Create a MdbKafkaConnector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MdbKafkaConnector(string name, MdbKafkaConnectorArgs args, CustomResourceOptions? options = null)
            : base("yandex:index/mdbKafkaConnector:MdbKafkaConnector", name, args ?? new MdbKafkaConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MdbKafkaConnector(string name, Input<string> id, MdbKafkaConnectorState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/mdbKafkaConnector:MdbKafkaConnector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MdbKafkaConnector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MdbKafkaConnector Get(string name, Input<string> id, MdbKafkaConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new MdbKafkaConnector(name, id, state, options);
        }
    }

    public sealed class MdbKafkaConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Kafka cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("connectorConfigMirrormakers")]
        private InputList<Inputs.MdbKafkaConnectorConnectorConfigMirrormakerArgs>? _connectorConfigMirrormakers;

        /// <summary>
        /// Settings for MirrorMaker2 connector.
        /// </summary>
        public InputList<Inputs.MdbKafkaConnectorConnectorConfigMirrormakerArgs> ConnectorConfigMirrormakers
        {
            get => _connectorConfigMirrormakers ?? (_connectorConfigMirrormakers = new InputList<Inputs.MdbKafkaConnectorConnectorConfigMirrormakerArgs>());
            set => _connectorConfigMirrormakers = value;
        }

        [Input("connectorConfigS3Sinks")]
        private InputList<Inputs.MdbKafkaConnectorConnectorConfigS3SinkArgs>? _connectorConfigS3Sinks;

        /// <summary>
        /// Settings for S3 Sink connector.
        /// </summary>
        public InputList<Inputs.MdbKafkaConnectorConnectorConfigS3SinkArgs> ConnectorConfigS3Sinks
        {
            get => _connectorConfigS3Sinks ?? (_connectorConfigS3Sinks = new InputList<Inputs.MdbKafkaConnectorConnectorConfigS3SinkArgs>());
            set => _connectorConfigS3Sinks = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("properties")]
        private InputMap<string>? _properties;

        /// <summary>
        /// Additional properties for connector.
        /// </summary>
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        /// <summary>
        /// The number of the connector's parallel working tasks. Default is the number of brokers.
        /// </summary>
        [Input("tasksMax")]
        public Input<int>? TasksMax { get; set; }

        public MdbKafkaConnectorArgs()
        {
        }
        public static new MdbKafkaConnectorArgs Empty => new MdbKafkaConnectorArgs();
    }

    public sealed class MdbKafkaConnectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Kafka cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("connectorConfigMirrormakers")]
        private InputList<Inputs.MdbKafkaConnectorConnectorConfigMirrormakerGetArgs>? _connectorConfigMirrormakers;

        /// <summary>
        /// Settings for MirrorMaker2 connector.
        /// </summary>
        public InputList<Inputs.MdbKafkaConnectorConnectorConfigMirrormakerGetArgs> ConnectorConfigMirrormakers
        {
            get => _connectorConfigMirrormakers ?? (_connectorConfigMirrormakers = new InputList<Inputs.MdbKafkaConnectorConnectorConfigMirrormakerGetArgs>());
            set => _connectorConfigMirrormakers = value;
        }

        [Input("connectorConfigS3Sinks")]
        private InputList<Inputs.MdbKafkaConnectorConnectorConfigS3SinkGetArgs>? _connectorConfigS3Sinks;

        /// <summary>
        /// Settings for S3 Sink connector.
        /// </summary>
        public InputList<Inputs.MdbKafkaConnectorConnectorConfigS3SinkGetArgs> ConnectorConfigS3Sinks
        {
            get => _connectorConfigS3Sinks ?? (_connectorConfigS3Sinks = new InputList<Inputs.MdbKafkaConnectorConnectorConfigS3SinkGetArgs>());
            set => _connectorConfigS3Sinks = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("properties")]
        private InputMap<string>? _properties;

        /// <summary>
        /// Additional properties for connector.
        /// </summary>
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        /// <summary>
        /// The number of the connector's parallel working tasks. Default is the number of brokers.
        /// </summary>
        [Input("tasksMax")]
        public Input<int>? TasksMax { get; set; }

        public MdbKafkaConnectorState()
        {
        }
        public static new MdbKafkaConnectorState Empty => new MdbKafkaConnectorState();
    }
}
