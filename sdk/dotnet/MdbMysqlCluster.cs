// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    /// <summary>
    /// Manages a MySQL cluster within the Yandex.Cloud. For more information, see
    /// [the official documentation](https://cloud.yandex.com/docs/managed-mysql/).
    /// 
    /// ## Example Usage
    /// 
    /// Example of creating a Single Node MySQL.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork", new Yandex.VpcNetworkArgs
    ///         {
    ///         });
    ///         var fooVpcSubnet = new Yandex.VpcSubnet("fooVpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-a",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.5.0.0/24",
    ///             },
    ///         });
    ///         var fooMdbMysqlCluster = new Yandex.MdbMysqlCluster("fooMdbMysqlCluster", new Yandex.MdbMysqlClusterArgs
    ///         {
    ///             Environment = "PRESTABLE",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             Version = "8.0",
    ///             Resources = new Yandex.Inputs.MdbMysqlClusterResourcesArgs
    ///             {
    ///                 ResourcePresetId = "s2.micro",
    ///                 DiskTypeId = "network-ssd",
    ///                 DiskSize = 16,
    ///             },
    ///             MysqlConfig = 
    ///             {
    ///                 { "sql_mode", "ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION" },
    ///                 { "max_connections", "100" },
    ///                 { "default_authentication_plugin", "MYSQL_NATIVE_PASSWORD" },
    ///                 { "innodb_print_all_deadlocks", "true" },
    ///             },
    ///             Access = new Yandex.Inputs.MdbMysqlClusterAccessArgs
    ///             {
    ///                 WebSql = true,
    ///             },
    ///             Databases = 
    ///             {
    ///                 new Yandex.Inputs.MdbMysqlClusterDatabaseArgs
    ///                 {
    ///                     Name = "db_name",
    ///                 },
    ///             },
    ///             Users = 
    ///             {
    ///                 new Yandex.Inputs.MdbMysqlClusterUserArgs
    ///                 {
    ///                     Name = "user_name",
    ///                     Password = "your_password",
    ///                     Permissions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbMysqlClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "db_name",
    ///                             Roles = 
    ///                             {
    ///                                 "ALL",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Hosts = 
    ///             {
    ///                 new Yandex.Inputs.MdbMysqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-a",
    ///                     SubnetId = fooVpcSubnet.Id,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Example of creating a High-Availability(HA) MySQL Cluster.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork", new Yandex.VpcNetworkArgs
    ///         {
    ///         });
    ///         var fooVpcSubnet = new Yandex.VpcSubnet("fooVpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-a",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.1.0.0/24",
    ///             },
    ///         });
    ///         var bar = new Yandex.VpcSubnet("bar", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-b",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.2.0.0/24",
    ///             },
    ///         });
    ///         var fooMdbMysqlCluster = new Yandex.MdbMysqlCluster("fooMdbMysqlCluster", new Yandex.MdbMysqlClusterArgs
    ///         {
    ///             Environment = "PRESTABLE",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             Version = "8.0",
    ///             Resources = new Yandex.Inputs.MdbMysqlClusterResourcesArgs
    ///             {
    ///                 ResourcePresetId = "s2.micro",
    ///                 DiskTypeId = "network-ssd",
    ///                 DiskSize = 16,
    ///             },
    ///             Databases = 
    ///             {
    ///                 new Yandex.Inputs.MdbMysqlClusterDatabaseArgs
    ///                 {
    ///                     Name = "db_name",
    ///                 },
    ///             },
    ///             MaintenanceWindow = new Yandex.Inputs.MdbMysqlClusterMaintenanceWindowArgs
    ///             {
    ///                 Type = "WEEKLY",
    ///                 Day = "SAT",
    ///                 Hour = 12,
    ///             },
    ///             Users = 
    ///             {
    ///                 new Yandex.Inputs.MdbMysqlClusterUserArgs
    ///                 {
    ///                     Name = "user_name",
    ///                     Password = "your_password",
    ///                     Permissions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbMysqlClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "db_name",
    ///                             Roles = 
    ///                             {
    ///                                 "ALL",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Hosts = 
    ///             {
    ///                 new Yandex.Inputs.MdbMysqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-a",
    ///                     SubnetId = fooVpcSubnet.Id,
    ///                 },
    ///                 new Yandex.Inputs.MdbMysqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-b",
    ///                     SubnetId = bar.Id,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Example of creating a Single Node MySQL with user params.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork", new Yandex.VpcNetworkArgs
    ///         {
    ///         });
    ///         var fooVpcSubnet = new Yandex.VpcSubnet("fooVpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-a",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.5.0.0/24",
    ///             },
    ///         });
    ///         var fooMdbMysqlCluster = new Yandex.MdbMysqlCluster("fooMdbMysqlCluster", new Yandex.MdbMysqlClusterArgs
    ///         {
    ///             Environment = "PRESTABLE",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             Version = "8.0",
    ///             Resources = new Yandex.Inputs.MdbMysqlClusterResourcesArgs
    ///             {
    ///                 ResourcePresetId = "s2.micro",
    ///                 DiskTypeId = "network-ssd",
    ///                 DiskSize = 16,
    ///             },
    ///             Databases = 
    ///             {
    ///                 new Yandex.Inputs.MdbMysqlClusterDatabaseArgs
    ///                 {
    ///                     Name = "db_name",
    ///                 },
    ///             },
    ///             MaintenanceWindow = new Yandex.Inputs.MdbMysqlClusterMaintenanceWindowArgs
    ///             {
    ///                 Type = "ANYTIME",
    ///             },
    ///             Users = 
    ///             {
    ///                 new Yandex.Inputs.MdbMysqlClusterUserArgs
    ///                 {
    ///                     Name = "user_name",
    ///                     Password = "your_password",
    ///                     Permissions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbMysqlClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "db_name",
    ///                             Roles = 
    ///                             {
    ///                                 "ALL",
    ///                             },
    ///                         },
    ///                     },
    ///                     ConnectionLimits = new Yandex.Inputs.MdbMysqlClusterUserConnectionLimitsArgs
    ///                     {
    ///                         MaxQuestionsPerHour = 10,
    ///                     },
    ///                     GlobalPermissions = 
    ///                     {
    ///                         "REPLICATION_SLAVE",
    ///                         "PROCESS",
    ///                     },
    ///                     AuthenticationPlugin = "CACHING_SHA2_PASSWORD",
    ///                 },
    ///             },
    ///             Hosts = 
    ///             {
    ///                 new Yandex.Inputs.MdbMysqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-a",
    ///                     SubnetId = fooVpcSubnet.Id,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Example of restoring MySQL cluster.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork", new Yandex.VpcNetworkArgs
    ///         {
    ///         });
    ///         var fooVpcSubnet = new Yandex.VpcSubnet("fooVpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-a",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.5.0.0/24",
    ///             },
    ///         });
    ///         var fooMdbMysqlCluster = new Yandex.MdbMysqlCluster("fooMdbMysqlCluster", new Yandex.MdbMysqlClusterArgs
    ///         {
    ///             Environment = "PRESTABLE",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             Version = "8.0",
    ///             Restore = new Yandex.Inputs.MdbMysqlClusterRestoreArgs
    ///             {
    ///                 BackupId = "c9qj2tns23432471d9qha:stream_20210122T141717Z",
    ///                 Time = "2021-01-23T15:04:05",
    ///             },
    ///             Resources = new Yandex.Inputs.MdbMysqlClusterResourcesArgs
    ///             {
    ///                 ResourcePresetId = "s2.micro",
    ///                 DiskTypeId = "network-ssd",
    ///                 DiskSize = 16,
    ///             },
    ///             Databases = 
    ///             {
    ///                 new Yandex.Inputs.MdbMysqlClusterDatabaseArgs
    ///                 {
    ///                     Name = "db_name",
    ///                 },
    ///             },
    ///             Users = 
    ///             {
    ///                 new Yandex.Inputs.MdbMysqlClusterUserArgs
    ///                 {
    ///                     Name = "user_name",
    ///                     Password = "your_password",
    ///                     Permissions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbMysqlClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "db_name",
    ///                             Roles = 
    ///                             {
    ///                                 "ALL",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Hosts = 
    ///             {
    ///                 new Yandex.Inputs.MdbMysqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-a",
    ///                     SubnetId = fooVpcSubnet.Id,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## MySQL config
    /// 
    /// If not specified `mysql_config` then does not make any changes.
    /// 
    /// * `sql_mode` default value: `ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION`
    /// 
    /// some of:\
    /// 	-	1: "ALLOW_INVALID_DATES"
    /// 	-	2: "ANSI_QUOTES"
    /// 	-	3: "ERROR_FOR_DIVISION_BY_ZERO"
    /// 	-	4: "HIGH_NOT_PRECEDENCE"
    /// 	-	5: "IGNORE_SPACE"
    /// 	-	6: "NO_AUTO_VALUE_ON_ZERO"
    /// 	-	7: "NO_BACKSLASH_ESCAPES"
    /// 	-	8: "NO_ENGINE_SUBSTITUTION"
    /// 	-	9: "NO_UNSIGNED_SUBTRACTION"
    /// 	-	10: "NO_ZERO_DATE"
    /// 	-	11: "NO_ZERO_IN_DATE"
    /// 	-	15: "ONLY_FULL_GROUP_BY"
    /// 	-	16: "PAD_CHAR_TO_FULL_LENGTH"
    /// 	-	17: "PIPES_AS_CONCAT"
    /// 	-	18: "REAL_AS_FLOAT"
    /// 	-	19: "STRICT_ALL_TABLES"
    /// 	-	20: "STRICT_TRANS_TABLES"
    /// 	-	21: "TIME_TRUNCATE_FRACTIONAL"
    /// 	-	22: "ANSI"
    /// 	-	23: "TRADITIONAL"
    /// 	-	24: "NO_DIR_IN_CREATE"
    /// or:
    ///   - 0: "SQLMODE_UNSPECIFIED"
    /// 
    /// ### MysqlConfig 8.0
    /// * `audit_log` boolean
    /// 
    /// * `auto_increment_increment` integer
    /// 
    /// * `auto_increment_offset` integer
    /// 
    /// * `binlog_cache_size` integer
    /// 
    /// * `binlog_group_commit_sync_delay` integer
    /// 
    /// * `binlog_row_image` one of:
    ///   - 0: "BINLOG_ROW_IMAGE_UNSPECIFIED"
    ///   - 1: "FULL"
    ///   - 2: "MINIMAL"
    ///   - 3: "NOBLOB"
    /// 
    /// * `binlog_rows_query_log_events` boolean
    /// 
    /// * `character_set_server` text
    /// 
    /// * `collation_server` text
    /// 
    /// * `default_authentication_plugin` one of:
    ///   - 0: "AUTH_PLUGIN_UNSPECIFIED"
    ///   - 1: "MYSQL_NATIVE_PASSWORD"
    ///   - 2: "CACHING_SHA2_PASSWORD"
    ///   - 3: "SHA256_PASSWORD"
    /// 
    /// * `default_time_zone` text
    /// 
    /// * `explicit_defaults_for_timestamp` boolean
    /// 
    /// * `general_log` boolean
    /// 
    /// * `group_concat_max_len` integer
    /// 
    /// * `innodb_adaptive_hash_index` boolean
    /// 
    /// * `innodb_buffer_pool_size` integer
    /// 
    /// * `innodb_flush_log_at_trx_commit` integer
    /// 
    /// * `innodb_io_capacity` integer
    /// 
    /// * `innodb_io_capacity_max` integer
    /// 
    /// * `innodb_lock_wait_timeout` integer
    /// 
    /// * `innodb_log_buffer_size` integer
    /// 
    /// * `innodb_log_file_size` integer
    /// 
    /// * `innodb_numa_interleave` boolean
    /// 
    /// * `innodb_print_all_deadlocks` boolean
    /// 
    /// * `innodb_purge_threads` integer
    /// 
    /// * `innodb_read_io_threads` integer
    /// 
    /// * `innodb_temp_data_file_max_size` integer
    /// 
    /// * `innodb_thread_concurrency` integer
    /// 
    /// * `innodb_write_io_threads` integer
    /// 
    /// * `join_buffer_size` integer
    /// 
    /// * `long_query_time` float
    /// 
    /// * `max_allowed_packet` integer
    /// 
    /// * `max_connections` integer
    /// 
    /// * `max_heap_table_size` integer
    /// 
    /// * `net_read_timeout` integer
    /// 
    /// * `net_write_timeout` integer
    /// 
    /// * `regexp_time_limit` integer
    /// 
    /// * `rpl_semi_sync_master_wait_for_slave_count` integer
    /// 
    /// * `slave_parallel_type` one of:
    ///   - 0: "SLAVE_PARALLEL_TYPE_UNSPECIFIED"
    ///   - 1: "DATABASE"
    ///   - 2: "LOGICAL_CLOCK"
    /// 
    /// * `slave_parallel_workers` integer
    /// 
    /// * `sort_buffer_size` integer
    /// 
    /// * `sync_binlog` integer
    /// 
    /// * `table_definition_cache` integer
    /// 
    /// * `table_open_cache` integer
    /// 
    /// * `table_open_cache_instances` integer
    /// 
    /// * `thread_cache_size` integer
    /// 
    /// * `thread_stack` integer
    /// 
    /// * `tmp_table_size` integer
    /// 
    /// * `transaction_isolation` one of:
    ///   - 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
    ///   - 1: "READ_COMMITTED"
    ///   - 2: "REPEATABLE_READ"
    ///   - 3: "SERIALIZABLE"
    /// 
    /// ### MysqlConfig 5.7
    /// * `audit_log` boolean
    /// 
    /// * `auto_increment_increment` integer
    /// 
    /// * `auto_increment_offset` integer
    /// 
    /// * `binlog_cache_size` integer
    /// 
    /// * `binlog_group_commit_sync_delay` integer
    /// 
    /// * `binlog_row_image` one of:
    ///   - 0: "BINLOG_ROW_IMAGE_UNSPECIFIED"
    ///   - 1: "FULL"
    ///   - 2: "MINIMAL"
    ///   - 3: "NOBLOB"
    /// 
    /// * `binlog_rows_query_log_events` boolean
    /// 
    /// * `character_set_server` text
    /// 
    /// * `collation_server` text
    /// 
    /// * `default_authentication_plugin` one of:
    ///   - 0: "AUTH_PLUGIN_UNSPECIFIED"
    ///   - 1: "MYSQL_NATIVE_PASSWORD"
    ///   - 2: "CACHING_SHA2_PASSWORD"
    ///   - 3: "SHA256_PASSWORD"
    /// 
    /// * `default_time_zone` text
    /// 
    /// * `explicit_defaults_for_timestamp` boolean
    /// 
    /// * `general_log` boolean
    /// 
    /// * `group_concat_max_len` integer
    /// 
    /// * `innodb_adaptive_hash_index` boolean
    /// 
    /// * `innodb_buffer_pool_size` integer
    /// 
    /// * `innodb_flush_log_at_trx_commit` integer
    /// 
    /// * `innodb_io_capacity` integer
    /// 
    /// * `innodb_io_capacity_max` integer
    /// 
    /// * `innodb_lock_wait_timeout` integer
    /// 
    /// * `innodb_log_buffer_size` integer
    /// 
    /// * `innodb_log_file_size` integer
    /// 
    /// * `innodb_numa_interleave` boolean
    /// 
    /// * `innodb_print_all_deadlocks` boolean
    /// 
    /// * `innodb_purge_threads` integer
    /// 
    /// * `innodb_read_io_threads` integer
    /// 
    /// * `innodb_temp_data_file_max_size` integer
    /// 
    /// * `innodb_thread_concurrency` integer
    /// 
    /// * `innodb_write_io_threads` integer
    /// 
    /// * `join_buffer_size` integer
    /// 
    /// * `long_query_time` float
    /// 
    /// * `max_allowed_packet` integer
    /// 
    /// * `max_connections` integer
    /// 
    /// * `max_heap_table_size` integer
    /// 
    /// * `net_read_timeout` integer
    /// 
    /// * `net_write_timeout` integer
    /// 
    /// * `rpl_semi_sync_master_wait_for_slave_count` integer
    /// 
    /// * `slave_parallel_type` one of:
    ///   - 0: "SLAVE_PARALLEL_TYPE_UNSPECIFIED"
    ///   - 1: "DATABASE"
    ///   - 2: "LOGICAL_CLOCK"
    /// 
    /// * `slave_parallel_workers` integer
    /// 
    /// * `sort_buffer_size` integer
    /// 
    /// * `sync_binlog` integer
    /// 
    /// * `table_definition_cache` integer
    /// 
    /// * `table_open_cache` integer
    /// 
    /// * `table_open_cache_instances` integer
    /// 
    /// * `thread_cache_size` integer
    /// 
    /// * `thread_stack` integer
    /// 
    /// * `tmp_table_size` integer
    /// 
    /// * `transaction_isolation` one of:
    ///   - 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
    ///   - 1: "READ_COMMITTED"
    ///   - 2: "REPEATABLE_READ"
    ///   - 3: "SERIALIZABLE"
    /// 
    /// ## Import
    /// 
    /// A cluster can be imported using the `id` of the resource, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import yandex:index/mdbMysqlCluster:MdbMysqlCluster foo cluster_id
    /// ```
    /// </summary>
    [YandexResourceType("yandex:index/mdbMysqlCluster:MdbMysqlCluster")]
    public partial class MdbMysqlCluster : Pulumi.CustomResource
    {
        /// <summary>
        /// Access policy to the MySQL cluster. The structure is documented below.
        /// </summary>
        [Output("access")]
        public Output<Outputs.MdbMysqlClusterAccess> Access { get; private set; } = null!;

        /// <summary>
        /// Allow drop and create host when `host.assign_public_ip` changed. The new host will be created (recreated) with a different FQDN.
        /// </summary>
        [Output("allowRegenerationHost")]
        public Output<bool?> AllowRegenerationHost { get; private set; } = null!;

        /// <summary>
        /// Time to start the daily backup, in the UTC. The structure is documented below.
        /// </summary>
        [Output("backupWindowStart")]
        public Output<Outputs.MdbMysqlClusterBackupWindowStart> BackupWindowStart { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp of the cluster.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A database of the MySQL cluster. The structure is documented below.
        /// </summary>
        [Output("databases")]
        public Output<ImmutableArray<Outputs.MdbMysqlClusterDatabase>> Databases { get; private set; } = null!;

        /// <summary>
        /// Description of the MySQL cluster.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Deployment environment of the MySQL cluster.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// The ID of the folder that the resource belongs to. If it
        /// is not provided, the default provider folder is used.
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// Aggregated health of the cluster.
        /// </summary>
        [Output("health")]
        public Output<string> Health { get; private set; } = null!;

        /// <summary>
        /// A host of the MySQL cluster. The structure is documented below.
        /// </summary>
        [Output("hosts")]
        public Output<ImmutableArray<Outputs.MdbMysqlClusterHost>> Hosts { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs to assign to the MySQL cluster.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Maintenance policy of the MySQL cluster. The structure is documented below.
        /// </summary>
        [Output("maintenanceWindow")]
        public Output<Outputs.MdbMysqlClusterMaintenanceWindow> MaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// MySQL cluster config. Detail info in "MySQL config" section (documented below).
        /// </summary>
        [Output("mysqlConfig")]
        public Output<ImmutableDictionary<string, string>> MysqlConfig { get; private set; } = null!;

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the network, to which the MySQL cluster uses.
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// Resources allocated to hosts of the MySQL cluster. The structure is documented below.
        /// </summary>
        [Output("resources")]
        public Output<Outputs.MdbMysqlClusterResources> Resources { get; private set; } = null!;

        /// <summary>
        /// The cluster will be created from the specified backup. The structure is documented below.
        /// </summary>
        [Output("restore")]
        public Output<Outputs.MdbMysqlClusterRestore?> Restore { get; private set; } = null!;

        /// <summary>
        /// A set of ids of security groups assigned to hosts of the cluster.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// Status of the cluster.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A user of the MySQL cluster. The structure is documented below.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.MdbMysqlClusterUser>> Users { get; private set; } = null!;

        /// <summary>
        /// Version of the MySQL cluster. (allowed versions are: 5.7, 8.0)
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a MdbMysqlCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MdbMysqlCluster(string name, MdbMysqlClusterArgs args, CustomResourceOptions? options = null)
            : base("yandex:index/mdbMysqlCluster:MdbMysqlCluster", name, args ?? new MdbMysqlClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MdbMysqlCluster(string name, Input<string> id, MdbMysqlClusterState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/mdbMysqlCluster:MdbMysqlCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MdbMysqlCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MdbMysqlCluster Get(string name, Input<string> id, MdbMysqlClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new MdbMysqlCluster(name, id, state, options);
        }
    }

    public sealed class MdbMysqlClusterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access policy to the MySQL cluster. The structure is documented below.
        /// </summary>
        [Input("access")]
        public Input<Inputs.MdbMysqlClusterAccessArgs>? Access { get; set; }

        /// <summary>
        /// Allow drop and create host when `host.assign_public_ip` changed. The new host will be created (recreated) with a different FQDN.
        /// </summary>
        [Input("allowRegenerationHost")]
        public Input<bool>? AllowRegenerationHost { get; set; }

        /// <summary>
        /// Time to start the daily backup, in the UTC. The structure is documented below.
        /// </summary>
        [Input("backupWindowStart")]
        public Input<Inputs.MdbMysqlClusterBackupWindowStartArgs>? BackupWindowStart { get; set; }

        [Input("databases", required: true)]
        private InputList<Inputs.MdbMysqlClusterDatabaseArgs>? _databases;

        /// <summary>
        /// A database of the MySQL cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbMysqlClusterDatabaseArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.MdbMysqlClusterDatabaseArgs>());
            set => _databases = value;
        }

        /// <summary>
        /// Description of the MySQL cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Deployment environment of the MySQL cluster.
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// The ID of the folder that the resource belongs to. If it
        /// is not provided, the default provider folder is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("hosts", required: true)]
        private InputList<Inputs.MdbMysqlClusterHostArgs>? _hosts;

        /// <summary>
        /// A host of the MySQL cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbMysqlClusterHostArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.MdbMysqlClusterHostArgs>());
            set => _hosts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to the MySQL cluster.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Maintenance policy of the MySQL cluster. The structure is documented below.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.MdbMysqlClusterMaintenanceWindowArgs>? MaintenanceWindow { get; set; }

        [Input("mysqlConfig")]
        private InputMap<string>? _mysqlConfig;

        /// <summary>
        /// MySQL cluster config. Detail info in "MySQL config" section (documented below).
        /// </summary>
        public InputMap<string> MysqlConfig
        {
            get => _mysqlConfig ?? (_mysqlConfig = new InputMap<string>());
            set => _mysqlConfig = value;
        }

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the network, to which the MySQL cluster uses.
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// Resources allocated to hosts of the MySQL cluster. The structure is documented below.
        /// </summary>
        [Input("resources", required: true)]
        public Input<Inputs.MdbMysqlClusterResourcesArgs> Resources { get; set; } = null!;

        /// <summary>
        /// The cluster will be created from the specified backup. The structure is documented below.
        /// </summary>
        [Input("restore")]
        public Input<Inputs.MdbMysqlClusterRestoreArgs>? Restore { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// A set of ids of security groups assigned to hosts of the cluster.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("users", required: true)]
        private InputList<Inputs.MdbMysqlClusterUserArgs>? _users;

        /// <summary>
        /// A user of the MySQL cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbMysqlClusterUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.MdbMysqlClusterUserArgs>());
            set => _users = value;
        }

        /// <summary>
        /// Version of the MySQL cluster. (allowed versions are: 5.7, 8.0)
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public MdbMysqlClusterArgs()
        {
        }
    }

    public sealed class MdbMysqlClusterState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access policy to the MySQL cluster. The structure is documented below.
        /// </summary>
        [Input("access")]
        public Input<Inputs.MdbMysqlClusterAccessGetArgs>? Access { get; set; }

        /// <summary>
        /// Allow drop and create host when `host.assign_public_ip` changed. The new host will be created (recreated) with a different FQDN.
        /// </summary>
        [Input("allowRegenerationHost")]
        public Input<bool>? AllowRegenerationHost { get; set; }

        /// <summary>
        /// Time to start the daily backup, in the UTC. The structure is documented below.
        /// </summary>
        [Input("backupWindowStart")]
        public Input<Inputs.MdbMysqlClusterBackupWindowStartGetArgs>? BackupWindowStart { get; set; }

        /// <summary>
        /// Creation timestamp of the cluster.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("databases")]
        private InputList<Inputs.MdbMysqlClusterDatabaseGetArgs>? _databases;

        /// <summary>
        /// A database of the MySQL cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbMysqlClusterDatabaseGetArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.MdbMysqlClusterDatabaseGetArgs>());
            set => _databases = value;
        }

        /// <summary>
        /// Description of the MySQL cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Deployment environment of the MySQL cluster.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The ID of the folder that the resource belongs to. If it
        /// is not provided, the default provider folder is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// Aggregated health of the cluster.
        /// </summary>
        [Input("health")]
        public Input<string>? Health { get; set; }

        [Input("hosts")]
        private InputList<Inputs.MdbMysqlClusterHostGetArgs>? _hosts;

        /// <summary>
        /// A host of the MySQL cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbMysqlClusterHostGetArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.MdbMysqlClusterHostGetArgs>());
            set => _hosts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to the MySQL cluster.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Maintenance policy of the MySQL cluster. The structure is documented below.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.MdbMysqlClusterMaintenanceWindowGetArgs>? MaintenanceWindow { get; set; }

        [Input("mysqlConfig")]
        private InputMap<string>? _mysqlConfig;

        /// <summary>
        /// MySQL cluster config. Detail info in "MySQL config" section (documented below).
        /// </summary>
        public InputMap<string> MysqlConfig
        {
            get => _mysqlConfig ?? (_mysqlConfig = new InputMap<string>());
            set => _mysqlConfig = value;
        }

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the network, to which the MySQL cluster uses.
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// Resources allocated to hosts of the MySQL cluster. The structure is documented below.
        /// </summary>
        [Input("resources")]
        public Input<Inputs.MdbMysqlClusterResourcesGetArgs>? Resources { get; set; }

        /// <summary>
        /// The cluster will be created from the specified backup. The structure is documented below.
        /// </summary>
        [Input("restore")]
        public Input<Inputs.MdbMysqlClusterRestoreGetArgs>? Restore { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// A set of ids of security groups assigned to hosts of the cluster.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// Status of the cluster.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("users")]
        private InputList<Inputs.MdbMysqlClusterUserGetArgs>? _users;

        /// <summary>
        /// A user of the MySQL cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbMysqlClusterUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.MdbMysqlClusterUserGetArgs>());
            set => _users = value;
        }

        /// <summary>
        /// Version of the MySQL cluster. (allowed versions are: 5.7, 8.0)
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public MdbMysqlClusterState()
        {
        }
    }
}
