// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    /// <summary>
    /// Manages a PostgreSQL cluster within the Yandex.Cloud. For more information, see
    /// [the official documentation](https://cloud.yandex.com/docs/managed-postgresql/).
    /// 
    /// ## Example Usage
    /// 
    /// Example of creating a Single Node PostgreSQL.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork", new Yandex.VpcNetworkArgs
    ///         {
    ///         });
    ///         var fooVpcSubnet = new Yandex.VpcSubnet("fooVpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-a",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.5.0.0/24",
    ///             },
    ///         });
    ///         var fooMdbPostgresqlCluster = new Yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster", new Yandex.MdbPostgresqlClusterArgs
    ///         {
    ///             Environment = "PRESTABLE",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             Config = new Yandex.Inputs.MdbPostgresqlClusterConfigArgs
    ///             {
    ///                 Version = "12",
    ///                 Resources = new Yandex.Inputs.MdbPostgresqlClusterConfigResourcesArgs
    ///                 {
    ///                     ResourcePresetId = "s2.micro",
    ///                     DiskTypeId = "network-ssd",
    ///                     DiskSize = 16,
    ///                 },
    ///                 PostgresqlConfig = 
    ///                 {
    ///                     { "max_connections", "395" },
    ///                     { "enable_parallel_hash", "true" },
    ///                     { "vacuum_cleanup_index_scale_factor", "0.2" },
    ///                     { "autovacuum_vacuum_scale_factor", "0.34" },
    ///                     { "default_transaction_isolation", "TRANSACTION_ISOLATION_READ_COMMITTED" },
    ///                     { "shared_preload_libraries", "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN" },
    ///                 },
    ///             },
    ///             Databases = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterDatabaseArgs
    ///                 {
    ///                     Name = "db_name",
    ///                     Owner = "user_name",
    ///                 },
    ///             },
    ///             Users = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterUserArgs
    ///                 {
    ///                     Name = "user_name",
    ///                     Password = "your_password",
    ///                     ConnLimit = 50,
    ///                     Permissions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbPostgresqlClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "db_name",
    ///                         },
    ///                     },
    ///                     Settings = 
    ///                     {
    ///                         { "default_transaction_isolation", "read committed" },
    ///                         { "log_min_duration_statement", "5000" },
    ///                     },
    ///                 },
    ///             },
    ///             Hosts = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-a",
    ///                     SubnetId = fooVpcSubnet.Id,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Example of creating a High-Availability (HA) PostgreSQL Cluster.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork", new Yandex.VpcNetworkArgs
    ///         {
    ///         });
    ///         var fooVpcSubnet = new Yandex.VpcSubnet("fooVpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-a",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.1.0.0/24",
    ///             },
    ///         });
    ///         var bar = new Yandex.VpcSubnet("bar", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-b",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.2.0.0/24",
    ///             },
    ///         });
    ///         var fooMdbPostgresqlCluster = new Yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster", new Yandex.MdbPostgresqlClusterArgs
    ///         {
    ///             Environment = "PRESTABLE",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             Config = new Yandex.Inputs.MdbPostgresqlClusterConfigArgs
    ///             {
    ///                 Version = "12",
    ///                 Resources = new Yandex.Inputs.MdbPostgresqlClusterConfigResourcesArgs
    ///                 {
    ///                     ResourcePresetId = "s2.micro",
    ///                     DiskTypeId = "network-ssd",
    ///                     DiskSize = 16,
    ///                 },
    ///             },
    ///             Databases = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterDatabaseArgs
    ///                 {
    ///                     Name = "db_name",
    ///                     Owner = "user_name",
    ///                 },
    ///             },
    ///             Users = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterUserArgs
    ///                 {
    ///                     Name = "user_name",
    ///                     Password = "password",
    ///                     Permissions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbPostgresqlClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "db_name",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Hosts = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-a",
    ///                     SubnetId = fooVpcSubnet.Id,
    ///                 },
    ///                 new Yandex.Inputs.MdbPostgresqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-b",
    ///                     SubnetId = bar.Id,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Example of creating a High-Availability (HA) PostgreSQL Cluster with priority and set master.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork", new Yandex.VpcNetworkArgs
    ///         {
    ///         });
    ///         var vpcSubnet = new Yandex.VpcSubnet("vpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-c",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.3.0.0/24",
    ///             },
    ///         });
    ///         var fooMdbPostgresqlCluster = new Yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster", new Yandex.MdbPostgresqlClusterArgs
    ///         {
    ///             Description = "test High-Availability (HA) PostgreSQL Cluster with priority and set master",
    ///             Environment = "PRESTABLE",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             HostMasterName = "host_name_c_2",
    ///             Config = new Yandex.Inputs.MdbPostgresqlClusterConfigArgs
    ///             {
    ///                 Version = "12",
    ///                 Resources = new Yandex.Inputs.MdbPostgresqlClusterConfigResourcesArgs
    ///                 {
    ///                     ResourcePresetId = "s2.micro",
    ///                     DiskSize = 10,
    ///                     DiskTypeId = "network-ssd",
    ///                 },
    ///             },
    ///             Users = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterUserArgs
    ///                 {
    ///                     Name = "alice",
    ///                     Password = "mysecurepassword",
    ///                     Permissions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbPostgresqlClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "testdb",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Hosts = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-a",
    ///                     Name = "host_name_a",
    ///                     Priority = 2,
    ///                     SubnetId = index / vpcSubnetVpcSubnet.Id,
    ///                 },
    ///                 new Yandex.Inputs.MdbPostgresqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-b",
    ///                     Name = "host_name_b",
    ///                     ReplicationSourceName = "host_name_c",
    ///                     SubnetId = yandexIndex / vpcSubnetVpcSubnet.Id,
    ///                 },
    ///                 new Yandex.Inputs.MdbPostgresqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-c",
    ///                     Name = "host_name_c",
    ///                     SubnetId = vpcSubnet.Id,
    ///                 },
    ///                 new Yandex.Inputs.MdbPostgresqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-c",
    ///                     Name = "host_name_c_2",
    ///                     SubnetId = vpcSubnet.Id,
    ///                 },
    ///             },
    ///             Databases = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterDatabaseArgs
    ///                 {
    ///                     Owner = "alice",
    ///                     Name = "testdb",
    ///                 },
    ///             },
    ///         });
    ///         var index_vpcSubnetVpcSubnet = new Yandex.VpcSubnet("index/vpcSubnetVpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-a",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.1.0.0/24",
    ///             },
    ///         });
    ///         var yandexIndex_vpcSubnetVpcSubnet = new Yandex.VpcSubnet("yandexIndex/vpcSubnetVpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-b",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.2.0.0/24",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Example of creating a Single Node PostgreSQL from backup.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork", new Yandex.VpcNetworkArgs
    ///         {
    ///         });
    ///         var fooVpcSubnet = new Yandex.VpcSubnet("fooVpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-a",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.5.0.0/24",
    ///             },
    ///         });
    ///         var fooMdbPostgresqlCluster = new Yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster", new Yandex.MdbPostgresqlClusterArgs
    ///         {
    ///             Environment = "PRESTABLE",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             Restore = new Yandex.Inputs.MdbPostgresqlClusterRestoreArgs
    ///             {
    ///                 BackupId = "c9q99999999999999994cm:base_000000010000005F000000B4",
    ///                 Time = "2021-02-11T15:04:05",
    ///             },
    ///             Config = new Yandex.Inputs.MdbPostgresqlClusterConfigArgs
    ///             {
    ///                 Version = "12",
    ///                 Resources = new Yandex.Inputs.MdbPostgresqlClusterConfigResourcesArgs
    ///                 {
    ///                     ResourcePresetId = "s2.micro",
    ///                     DiskTypeId = "network-ssd",
    ///                     DiskSize = 16,
    ///                 },
    ///                 PostgresqlConfig = 
    ///                 {
    ///                     { "max_connections", "395" },
    ///                     { "enable_parallel_hash", "true" },
    ///                     { "vacuum_cleanup_index_scale_factor", "0.2" },
    ///                     { "autovacuum_vacuum_scale_factor", "0.34" },
    ///                     { "default_transaction_isolation", "TRANSACTION_ISOLATION_READ_COMMITTED" },
    ///                     { "shared_preload_libraries", "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN" },
    ///                 },
    ///             },
    ///             Databases = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterDatabaseArgs
    ///                 {
    ///                     Name = "db_name",
    ///                     Owner = "user_name",
    ///                 },
    ///             },
    ///             Users = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterUserArgs
    ///                 {
    ///                     Name = "user_name",
    ///                     Password = "your_password",
    ///                     ConnLimit = 50,
    ///                     Permissions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbPostgresqlClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "db_name",
    ///                         },
    ///                     },
    ///                     Settings = 
    ///                     {
    ///                         { "default_transaction_isolation", "read committed" },
    ///                         { "log_min_duration_statement", "5000" },
    ///                     },
    ///                 },
    ///             },
    ///             Hosts = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-a",
    ///                     SubnetId = fooVpcSubnet.Id,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Example of creating a High-Availability (HA) PostgreSQL cluster with multiple databases and users.
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Random = Pulumi.Random;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var passwords = new List&lt;Random.RandomPassword&gt;();
    ///         for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
    ///         {
    ///             var range = new { Value = rangeIndex };
    ///             passwords.Add(new Random.RandomPassword($"passwords-{range.Value}", new Random.RandomPasswordArgs
    ///             {
    ///                 Length = 16,
    ///                 Special = true,
    ///             }));
    ///         }
    ///         this.DbInstanceAlicePassword = passwords[0].Result;
    ///         this.DbInstanceBobPassword = passwords[1].Result;
    ///         var fooVpcNetwork = new Yandex.VpcNetwork("fooVpcNetwork", new Yandex.VpcNetworkArgs
    ///         {
    ///         });
    ///         var vpcSubnet = new Yandex.VpcSubnet("vpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-b",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.2.0.0/24",
    ///             },
    ///         });
    ///         var fooMdbPostgresqlCluster = new Yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster", new Yandex.MdbPostgresqlClusterArgs
    ///         {
    ///             Description = "Example of multiple databases and users",
    ///             Environment = "PRESTABLE",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             FolderId = "b1g24daaaddddffma52u",
    ///             Config = new Yandex.Inputs.MdbPostgresqlClusterConfigArgs
    ///             {
    ///                 Version = "13",
    ///                 Resources = new Yandex.Inputs.MdbPostgresqlClusterConfigResourcesArgs
    ///                 {
    ///                     ResourcePresetId = "s2.micro",
    ///                     DiskSize = 10,
    ///                     DiskTypeId = "network-ssd",
    ///                 },
    ///                 Access = new Yandex.Inputs.MdbPostgresqlClusterConfigAccessArgs
    ///                 {
    ///                     WebSql = true,
    ///                 },
    ///                 PostgresqlConfig = 
    ///                 {
    ///                     { "max_connections", "395" },
    ///                     { "enable_parallel_hash", "true" },
    ///                     { "vacuum_cleanup_index_scale_factor", "0.2" },
    ///                     { "autovacuum_vacuum_scale_factor", "0.32" },
    ///                     { "default_transaction_isolation", "TRANSACTION_ISOLATION_READ_UNCOMMITTED" },
    ///                     { "shared_preload_libraries", "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN" },
    ///                 },
    ///                 PoolerConfig = new Yandex.Inputs.MdbPostgresqlClusterConfigPoolerConfigArgs
    ///                 {
    ///                     PoolDiscard = true,
    ///                     PoolingMode = "SESSION",
    ///                 },
    ///             },
    ///             Users = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterUserArgs
    ///                 {
    ///                     Name = "alice",
    ///                     Password = passwords[0].Result,
    ///                     ConnLimit = 10,
    ///                     Permissions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbPostgresqlClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "testdb",
    ///                         },
    ///                         new Yandex.Inputs.MdbPostgresqlClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "testdb1",
    ///                         },
    ///                         new Yandex.Inputs.MdbPostgresqlClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "testdb2",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Yandex.Inputs.MdbPostgresqlClusterUserArgs
    ///                 {
    ///                     Name = "bob",
    ///                     Password = passwords[1].Result,
    ///                     Permissions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbPostgresqlClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "testdb2",
    ///                         },
    ///                         new Yandex.Inputs.MdbPostgresqlClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "testdb1",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Yandex.Inputs.MdbPostgresqlClusterUserArgs
    ///                 {
    ///                     Name = "chuck",
    ///                     Password = "123456789",
    ///                     Permissions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbPostgresqlClusterUserPermissionArgs
    ///                         {
    ///                             DatabaseName = "testdb",
    ///                         },
    ///                     },
    ///                     Grants = 
    ///                     {
    ///                         "bob",
    ///                         "alice",
    ///                     },
    ///                 },
    ///             },
    ///             Hosts = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-b",
    ///                     SubnetId = vpcSubnet.Id,
    ///                 },
    ///                 new Yandex.Inputs.MdbPostgresqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-a",
    ///                     SubnetId = yandexIndex / vpcSubnetVpcSubnet.Id,
    ///                 },
    ///                 new Yandex.Inputs.MdbPostgresqlClusterHostArgs
    ///                 {
    ///                     Zone = "ru-central1-c",
    ///                     SubnetId = index / vpcSubnetVpcSubnet.Id,
    ///                 },
    ///             },
    ///             Databases = 
    ///             {
    ///                 new Yandex.Inputs.MdbPostgresqlClusterDatabaseArgs
    ///                 {
    ///                     Owner = "alice",
    ///                     Name = "testdb",
    ///                 },
    ///                 new Yandex.Inputs.MdbPostgresqlClusterDatabaseArgs
    ///                 {
    ///                     Owner = "alice",
    ///                     Name = "testdb2",
    ///                 },
    ///                 new Yandex.Inputs.MdbPostgresqlClusterDatabaseArgs
    ///                 {
    ///                     Owner = "bob",
    ///                     Name = "testdb1",
    ///                     Extensions = 
    ///                     {
    ///                         new Yandex.Inputs.MdbPostgresqlClusterDatabaseExtensionArgs
    ///                         {
    ///                             Name = "postgis",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///         var yandexIndex_vpcSubnetVpcSubnet = new Yandex.VpcSubnet("yandexIndex/vpcSubnetVpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-a",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.1.0.0/24",
    ///             },
    ///         });
    ///         var index_vpcSubnetVpcSubnet = new Yandex.VpcSubnet("index/vpcSubnetVpcSubnet", new Yandex.VpcSubnetArgs
    ///         {
    ///             Zone = "ru-central1-c",
    ///             NetworkId = fooVpcNetwork.Id,
    ///             V4CidrBlocks = 
    ///             {
    ///                 "10.3.0.0/24",
    ///             },
    ///         });
    ///     }
    /// 
    ///     [Output("dbInstanceAlicePassword")]
    ///     public Output&lt;string&gt; DbInstanceAlicePassword { get; set; }
    ///     [Output("dbInstanceBobPassword")]
    ///     public Output&lt;string&gt; DbInstanceBobPassword { get; set; }
    /// }
    /// ```
    /// ## postresql config
    /// 
    /// More information about config:
    /// * https://www.postgresql.org/docs/current/runtime-config-connection.html
    /// * https://www.postgresql.org/docs/current/runtime-config-resource.html
    /// * https://www.postgresql.org/docs/current/runtime-config-wal.html
    /// * https://www.postgresql.org/docs/current/runtime-config-query.html
    /// * https://www.postgresql.org/docs/current/runtime-config-logging.html
    /// * https://www.postgresql.org/docs/current/runtime-config-autovacuum.html
    /// * https://www.postgresql.org/docs/current/runtime-config-client.html
    /// * https://www.postgresql.org/docs/current/runtime-config-locks.html
    /// * https://www.postgresql.org/docs/current/runtime-config-compatible.html
    /// 
    /// * `shared_preload_libraries` override if not set. One of:
    /// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
    /// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
    /// * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
    /// * * NO value
    /// 
    /// Other are not owweride if not set.
    /// 
    /// ### Postgresql 13 config
    /// * `archive_timeout` integer
    /// 
    /// * `array_nulls` boolean
    /// 
    /// * `auto_explain_log_analyze` boolean
    /// 
    /// * `auto_explain_log_buffers` boolean
    /// 
    /// * `auto_explain_log_min_duration` integer
    /// 
    /// * `auto_explain_log_nested_statements` boolean
    /// 
    /// * `auto_explain_log_timing` boolean
    /// 
    /// * `auto_explain_log_triggers` boolean
    /// 
    /// * `auto_explain_log_verbose` boolean
    /// 
    /// * `auto_explain_sample_rate` float
    /// 
    /// * `autovacuum_analyze_scale_factor` float
    /// 
    /// * `autovacuum_max_workers` integer
    /// 
    /// * `autovacuum_naptime` integer
    /// 
    /// * `autovacuum_vacuum_cost_delay` integer
    /// 
    /// * `autovacuum_vacuum_cost_limit` integer
    /// 
    /// * `autovacuum_vacuum_insert_scale_factor` float
    /// 
    /// * `autovacuum_vacuum_insert_threshold` integer
    /// 
    /// * `autovacuum_vacuum_scale_factor` float
    /// 
    /// * `autovacuum_work_mem` integer
    /// 
    /// * `backend_flush_after` integer
    /// 
    /// * `backslash_quote` one of:
    ///   - 0: "BACKSLASH_QUOTE_UNSPECIFIED"
    ///   - 1: "BACKSLASH_QUOTE"
    ///   - 2: "BACKSLASH_QUOTE_ON"
    ///   - 3: "BACKSLASH_QUOTE_OFF"
    ///   - 4: "BACKSLASH_QUOTE_SAFE_ENCODING"
    /// 
    /// * `bgwriter_delay` integer
    /// 
    /// * `bgwriter_flush_after` integer
    /// 
    /// * `bgwriter_lru_maxpages` integer
    /// 
    /// * `bgwriter_lru_multiplier` float
    /// 
    /// * `bytea_output` one of:
    ///   - 0: "BYTEA_OUTPUT_UNSPECIFIED"
    ///   - 1: "BYTEA_OUTPUT_HEX"
    ///   - 2: "BYTEA_OUTPUT_ESCAPED"
    /// 
    /// * `checkpoint_completion_target` float
    /// 
    /// * `checkpoint_flush_after` integer
    /// 
    /// * `checkpoint_timeout` integer
    /// 
    /// * `client_min_messages` one of:
    ///   - 0: "LOG_LEVEL_UNSPECIFIED"
    ///   - 1: "LOG_LEVEL_DEBUG5"
    ///   - 2: "LOG_LEVEL_DEBUG4"
    ///   - 3: "LOG_LEVEL_DEBUG3"
    ///   - 4: "LOG_LEVEL_DEBUG2"
    ///   - 5: "LOG_LEVEL_DEBUG1"
    ///   - 6: "LOG_LEVEL_LOG"
    ///   - 7: "LOG_LEVEL_NOTICE"
    ///   - 8: "LOG_LEVEL_WARNING"
    ///   - 9: "LOG_LEVEL_ERROR"
    ///   - 10: "LOG_LEVEL_FATAL"
    ///   - 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `constraint_exclusion` one of:
    ///   - 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
    ///   - 1: "CONSTRAINT_EXCLUSION_ON"
    ///   - 2: "CONSTRAINT_EXCLUSION_OFF"
    ///   - 3: "CONSTRAINT_EXCLUSION_PARTITION"
    /// 
    /// * `cursor_tuple_fraction` float
    /// 
    /// * `deadlock_timeout` integer
    /// 
    /// * `default_statistics_target` integer
    /// 
    /// * `default_transaction_isolation` one of:
    ///   - 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
    ///   - 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
    ///   - 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
    ///   - 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
    ///   - 4: "TRANSACTION_ISOLATION_SERIALIZABLE"
    /// 
    /// * `default_transaction_read_only` boolean
    /// 
    /// * `default_with_oids` boolean
    /// 
    /// * `effective_cache_size` integer
    /// 
    /// * `effective_io_concurrency` integer
    /// 
    /// * `enable_bitmapscan` boolean
    /// 
    /// * `enable_hashagg` boolean
    /// 
    /// * `enable_hashjoin` boolean
    /// 
    /// * `enable_incremental_sort` boolean
    /// 
    /// * `enable_indexonlyscan` boolean
    /// 
    /// * `enable_indexscan` boolean
    /// 
    /// * `enable_material` boolean
    /// 
    /// * `enable_mergejoin` boolean
    /// 
    /// * `enable_nestloop` boolean
    /// 
    /// * `enable_parallel_append` boolean
    /// 
    /// * `enable_parallel_hash` boolean
    /// 
    /// * `enable_partition_pruning` boolean
    /// 
    /// * `enable_partitionwise_aggregate` boolean
    /// 
    /// * `enable_partitionwise_join` boolean
    /// 
    /// * `enable_seqscan` boolean
    /// 
    /// * `enable_sort` boolean
    /// 
    /// * `enable_tidscan` boolean
    /// 
    /// * `escape_string_warning` boolean
    /// 
    /// * `exit_on_error` boolean
    /// 
    /// * `force_parallel_mode` one of:
    ///   - 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
    ///   - 1: "FORCE_PARALLEL_MODE_ON"
    ///   - 2: "FORCE_PARALLEL_MODE_OFF"
    ///   - 3: "FORCE_PARALLEL_MODE_REGRESS"
    /// 
    /// * `from_collapse_limit` integer
    /// 
    /// * `gin_pending_list_limit` integer
    /// 
    /// * `hash_mem_multiplier` float
    /// 
    /// * `idle_in_transaction_session_timeout` integer
    /// 
    /// * `jit` boolean
    /// 
    /// * `join_collapse_limit` integer
    /// 
    /// * `lo_compat_privileges` boolean
    /// 
    /// * `lock_timeout` integer
    /// 
    /// * `log_checkpoints` boolean
    /// 
    /// * `log_connections` boolean
    /// 
    /// * `log_disconnections` boolean
    /// 
    /// * `log_duration` boolean
    /// 
    /// * `log_error_verbosity` one of:
    ///   - 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
    ///   - 1: "LOG_ERROR_VERBOSITY_TERSE"
    ///   - 2: "LOG_ERROR_VERBOSITY_DEFAULT"
    ///   - 3: "LOG_ERROR_VERBOSITY_VERBOSE"
    /// 
    /// * `log_lock_waits` boolean
    /// 
    /// * `log_min_duration_sample` integer
    /// 
    /// * `log_min_duration_statement` integer
    /// 
    /// * `log_min_error_statement` one of:
    ///   - 0: "LOG_LEVEL_UNSPECIFIED"
    ///   - 1: "LOG_LEVEL_DEBUG5"
    ///   - 2: "LOG_LEVEL_DEBUG4"
    ///   - 3: "LOG_LEVEL_DEBUG3"
    ///   - 4: "LOG_LEVEL_DEBUG2"
    ///   - 5: "LOG_LEVEL_DEBUG1"
    ///   - 6: "LOG_LEVEL_LOG"
    ///   - 7: "LOG_LEVEL_NOTICE"
    ///   - 8: "LOG_LEVEL_WARNING"
    ///   - 9: "LOG_LEVEL_ERROR"
    ///   - 10: "LOG_LEVEL_FATAL"
    ///   - 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `log_min_messages` one of:
    ///   - 0: "LOG_LEVEL_UNSPECIFIED"
    ///   - 1: "LOG_LEVEL_DEBUG5"
    ///   - 2: "LOG_LEVEL_DEBUG4"
    ///   - 3: "LOG_LEVEL_DEBUG3"
    ///   - 4: "LOG_LEVEL_DEBUG2"
    ///   - 5: "LOG_LEVEL_DEBUG1"
    ///   - 6: "LOG_LEVEL_LOG"
    ///   - 7: "LOG_LEVEL_NOTICE"
    ///   - 8: "LOG_LEVEL_WARNING"
    ///   - 9: "LOG_LEVEL_ERROR"
    ///   - 10: "LOG_LEVEL_FATAL"
    ///   - 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `log_parameter_max_length` integer
    /// 
    /// * `log_parameter_max_length_on_error` integer
    /// 
    /// * `log_statement` one of:
    ///   - 0: "LOG_STATEMENT_UNSPECIFIED"
    ///   - 1: "LOG_STATEMENT_NONE"
    ///   - 2: "LOG_STATEMENT_DDL"
    ///   - 3: "LOG_STATEMENT_MOD"
    ///   - 4: "LOG_STATEMENT_ALL"
    /// 
    /// * `log_statement_sample_rate` float
    /// 
    /// * `log_temp_files` integer
    /// 
    /// * `log_transaction_sample_rate` float
    /// 
    /// * `logical_decoding_work_mem` integer
    /// 
    /// * `maintenance_io_concurrency` integer
    /// 
    /// * `maintenance_work_mem` integer
    /// 
    /// * `max_connections` integer
    /// 
    /// * `max_locks_per_transaction` integer
    /// 
    /// * `max_parallel_maintenance_workers` integer
    /// 
    /// * `max_parallel_workers` integer
    /// 
    /// * `max_parallel_workers_per_gather` integer
    /// 
    /// * `max_pred_locks_per_transaction` integer
    /// 
    /// * `max_prepared_transactions` integer
    /// 
    /// * `max_slot_wal_keep_size` integer
    /// 
    /// * `max_standby_streaming_delay` integer
    /// 
    /// * `max_wal_size` integer
    /// 
    /// * `max_worker_processes` integer
    /// 
    /// * `min_wal_size` integer
    /// 
    /// * `old_snapshot_threshold` integer
    /// 
    /// * `operator_precedence_warning` boolean
    /// 
    /// * `parallel_leader_participation` boolean
    /// 
    /// * `pg_hint_plan_debug_print` one of:
    ///   - 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
    ///   - 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
    ///   - 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
    ///   - 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
    ///   - 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"
    /// 
    /// * `pg_hint_plan_enable_hint` boolean
    /// 
    /// * `pg_hint_plan_enable_hint_table` boolean
    /// 
    /// * `pg_hint_plan_message_level` one of:
    ///   - 0: "LOG_LEVEL_UNSPECIFIED"
    ///   - 1: "LOG_LEVEL_DEBUG5"
    ///   - 2: "LOG_LEVEL_DEBUG4"
    ///   - 3: "LOG_LEVEL_DEBUG3"
    ///   - 4: "LOG_LEVEL_DEBUG2"
    ///   - 5: "LOG_LEVEL_DEBUG1"
    ///   - 6: "LOG_LEVEL_LOG"
    ///   - 7: "LOG_LEVEL_NOTICE"
    ///   - 8: "LOG_LEVEL_WARNING"
    ///   - 9: "LOG_LEVEL_ERROR"
    ///   - 10: "LOG_LEVEL_FATAL"
    ///   - 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `plan_cache_mode` one of:
    ///   - 0: "PLAN_CACHE_MODE_UNSPECIFIED"
    ///   - 1: "PLAN_CACHE_MODE_AUTO"
    ///   - 2: "PLAN_CACHE_MODE_FORCE_CUSTOM_PLAN"
    ///   - 3: "PLAN_CACHE_MODE_FORCE_GENERIC_PLAN"
    /// 
    /// * `quote_all_identifiers` boolean
    /// 
    /// * `random_page_cost` float
    /// 
    /// * `row_security` boolean
    /// 
    /// * `search_path` text
    /// 
    /// * `seq_page_cost` float
    /// 
    /// * `shared_buffers` integer
    /// 
    /// * `standard_conforming_strings` boolean
    /// 
    /// * `statement_timeout` integer
    /// 
    /// * `synchronize_seqscans` boolean
    /// 
    /// * `synchronous_commit` one of:
    ///   - 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
    ///   - 1: "SYNCHRONOUS_COMMIT_ON"
    ///   - 2: "SYNCHRONOUS_COMMIT_OFF"
    ///   - 3: "SYNCHRONOUS_COMMIT_LOCAL"
    ///   - 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
    ///   - 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"
    /// 
    /// * `temp_buffers` integer
    /// 
    /// * `temp_file_limit` integer
    /// 
    /// * `timezone` text
    /// 
    /// * `track_activity_query_size` integer
    /// 
    /// * `transform_null_equals` boolean
    /// 
    /// * `vacuum_cleanup_index_scale_factor` float
    /// 
    /// * `vacuum_cost_delay` integer
    /// 
    /// * `vacuum_cost_limit` integer
    /// 
    /// * `vacuum_cost_page_dirty` integer
    /// 
    /// * `vacuum_cost_page_hit` integer
    /// 
    /// * `vacuum_cost_page_miss` integer
    /// 
    /// * `wal_keep_size` integer
    /// 
    /// * `wal_level` one of:
    ///   - 0: "WAL_LEVEL_UNSPECIFIED"
    ///   - 1: "WAL_LEVEL_REPLICA"
    ///   - 2: "WAL_LEVEL_LOGICAL"
    /// 
    /// * `work_mem` integer
    /// 
    /// * `xmlbinary` one of:
    ///   - 0: "XML_BINARY_UNSPECIFIED"
    ///   - 1: "XML_BINARY_BASE64"
    ///   - 2: "XML_BINARY_HEX"
    /// 
    /// * `xmloption` one of:
    ///   - 0: "XML_OPTION_UNSPECIFIED"
    ///   - 1: "XML_OPTION_DOCUMENT"
    ///   - 2: "XML_OPTION_CONTENT"
    /// 
    /// ### Postgresql 12 config
    /// 
    /// * `archive_timeout` integer
    /// 
    /// * `array_nulls` boolean
    /// 
    /// * `auto_explain_log_analyze` boolean
    /// 
    /// * `auto_explain_log_buffers` boolean
    /// 
    /// * `auto_explain_log_min_duration` integer
    /// 
    /// * `auto_explain_log_nested_statements` boolean
    /// 
    /// * `auto_explain_log_timing` boolean
    /// 
    /// * `auto_explain_log_triggers` boolean
    /// 
    /// * `auto_explain_log_verbose` boolean
    /// 
    /// * `auto_explain_sample_rate` float
    /// 
    /// * `autovacuum_analyze_scale_factor` float
    /// 
    /// * `autovacuum_max_workers` integer
    /// 
    /// * `autovacuum_naptime` integer
    /// 
    /// * `autovacuum_vacuum_cost_delay` integer
    /// 
    /// * `autovacuum_vacuum_cost_limit` integer
    /// 
    /// * `autovacuum_vacuum_scale_factor` float
    /// 
    /// * `autovacuum_work_mem` integer
    /// 
    /// * `backend_flush_after` integer
    /// 
    /// * `backslash_quote` one of:
    /// * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
    /// * * 1: "BACKSLASH_QUOTE"
    /// * * 2: "BACKSLASH_QUOTE_ON"
    /// * * 3: "BACKSLASH_QUOTE_OFF"
    /// * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"
    /// 
    /// * `bgwriter_delay` integer
    /// 
    /// * `bgwriter_flush_after` integer
    /// 
    /// * `bgwriter_lru_maxpages` integer
    /// 
    /// * `bgwriter_lru_multiplier` float
    /// 
    /// * `bytea_output` one of:
    /// * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
    /// * * 1: "BYTEA_OUTPUT_HEX"
    /// * * 2: "BYTEA_OUTPUT_ESCAPED"
    /// 
    /// * `checkpoint_completion_target` float
    /// 
    /// * `checkpoint_flush_after` integer
    /// 
    /// * `checkpoint_timeout` integer
    /// 
    /// * `client_min_messages` one of:
    /// * * 0: "LOG_LEVEL_UNSPECIFIED"
    /// * * 1: "LOG_LEVEL_DEBUG5"
    /// * * 2: "LOG_LEVEL_DEBUG4"
    /// * * 3: "LOG_LEVEL_DEBUG3"
    /// * * 4: "LOG_LEVEL_DEBUG2"
    /// * * 5: "LOG_LEVEL_DEBUG1"
    /// * * 6: "LOG_LEVEL_LOG"
    /// * * 7: "LOG_LEVEL_NOTICE"
    /// * * 8: "LOG_LEVEL_WARNING"
    /// * * 9: "LOG_LEVEL_ERROR"
    /// * * 10: "LOG_LEVEL_FATAL"
    /// * * 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `constraint_exclusion` one of:
    /// * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
    /// * * 1: "CONSTRAINT_EXCLUSION_ON"
    /// * * 2: "CONSTRAINT_EXCLUSION_OFF"
    /// * * 3: "CONSTRAINT_EXCLUSION_PARTITION"
    /// 
    /// * `cursor_tuple_fraction` float
    /// 
    /// * `deadlock_timeout` integer
    /// 
    /// * `default_statistics_target` integer
    /// 
    /// * `default_transaction_isolation` one of:
    /// * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
    /// * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
    /// * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
    /// * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
    /// * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"
    /// 
    /// * `default_transaction_read_only` boolean
    /// 
    /// * `default_with_oids` boolean
    /// 
    /// * `effective_cache_size` integer
    /// 
    /// * `effective_io_concurrency` integer
    /// 
    /// * `enable_bitmapscan` boolean
    /// 
    /// * `enable_hashagg` boolean
    /// 
    /// * `enable_hashjoin` boolean
    /// 
    /// * `enable_indexonlyscan` boolean
    /// 
    /// * `enable_indexscan` boolean
    /// 
    /// * `enable_material` boolean
    /// 
    /// * `enable_mergejoin` boolean
    /// 
    /// * `enable_nestloop` boolean
    /// 
    /// * `enable_parallel_append` boolean
    /// 
    /// * `enable_parallel_hash` boolean
    /// 
    /// * `enable_partition_pruning` boolean
    /// 
    /// * `enable_partitionwise_aggregate` boolean
    /// 
    /// * `enable_partitionwise_join` boolean
    /// 
    /// * `enable_seqscan` boolean
    /// 
    /// * `enable_sort` boolean
    /// 
    /// * `enable_tidscan` boolean
    /// 
    /// * `escape_string_warning` boolean
    /// 
    /// * `exit_on_error` boolean
    /// 
    /// * `force_parallel_mode` one of:
    /// * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
    /// * * 1: "FORCE_PARALLEL_MODE_ON"
    /// * * 2: "FORCE_PARALLEL_MODE_OFF"
    /// * * 3: "FORCE_PARALLEL_MODE_REGRESS"
    /// 
    /// * `from_collapse_limit` integer
    /// 
    /// * `gin_pending_list_limit` integer
    /// 
    /// * `idle_in_transaction_session_timeout` integer
    /// 
    /// * `jit` boolean
    /// 
    /// * `join_collapse_limit` integer
    /// 
    /// * `lo_compat_privileges` boolean
    /// 
    /// * `lock_timeout` integer
    /// 
    /// * `log_checkpoints` boolean
    /// 
    /// * `log_connections` boolean
    /// 
    /// * `log_disconnections` boolean
    /// 
    /// * `log_duration` boolean
    /// 
    /// * `log_error_verbosity` one of:
    /// * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
    /// * * 1: "LOG_ERROR_VERBOSITY_TERSE"
    /// * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
    /// * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"
    /// 
    /// * `log_lock_waits` boolean
    /// 
    /// * `log_min_duration_statement` integer
    /// 
    /// * `log_min_error_statement` one of:
    /// * * 0: "LOG_LEVEL_UNSPECIFIED"
    /// * * 1: "LOG_LEVEL_DEBUG5"
    /// * * 2: "LOG_LEVEL_DEBUG4"
    /// * * 3: "LOG_LEVEL_DEBUG3"
    /// * * 4: "LOG_LEVEL_DEBUG2"
    /// * * 5: "LOG_LEVEL_DEBUG1"
    /// * * 6: "LOG_LEVEL_LOG"
    /// * * 7: "LOG_LEVEL_NOTICE"
    /// * * 8: "LOG_LEVEL_WARNING"
    /// * * 9: "LOG_LEVEL_ERROR"
    /// * * 10: "LOG_LEVEL_FATAL"
    /// * * 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `log_min_messages` one of:
    /// * * 0: "LOG_LEVEL_UNSPECIFIED"
    /// * * 1: "LOG_LEVEL_DEBUG5"
    /// * * 2: "LOG_LEVEL_DEBUG4"
    /// * * 3: "LOG_LEVEL_DEBUG3"
    /// * * 4: "LOG_LEVEL_DEBUG2"
    /// * * 5: "LOG_LEVEL_DEBUG1"
    /// * * 6: "LOG_LEVEL_LOG"
    /// * * 7: "LOG_LEVEL_NOTICE"
    /// * * 8: "LOG_LEVEL_WARNING"
    /// * * 9: "LOG_LEVEL_ERROR"
    /// * * 10: "LOG_LEVEL_FATAL"
    /// * * 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `log_statement` one of:
    /// * * 0: "LOG_STATEMENT_UNSPECIFIED"
    /// * * 1: "LOG_STATEMENT_NONE"
    /// * * 2: "LOG_STATEMENT_DDL"
    /// * * 3: "LOG_STATEMENT_MOD"
    /// * * 4: "LOG_STATEMENT_ALL"
    /// 
    /// * `log_temp_files` integer
    /// 
    /// * `log_transaction_sample_rate` float
    /// 
    /// * `maintenance_work_mem` integer
    /// 
    /// * `max_connections` integer
    /// 
    /// * `max_locks_per_transaction` integer
    /// 
    /// * `max_parallel_maintenance_workers` integer
    /// 
    /// * `max_parallel_workers` integer
    /// 
    /// * `max_parallel_workers_per_gather` integer
    /// 
    /// * `max_pred_locks_per_transaction` integer
    /// 
    /// * `max_prepared_transactions` integer
    /// 
    /// * `max_standby_streaming_delay` integer
    /// 
    /// * `max_wal_size` integer
    /// 
    /// * `max_worker_processes` integer
    /// 
    /// * `min_wal_size` integer
    /// 
    /// * `old_snapshot_threshold` integer
    /// 
    /// * `operator_precedence_warning` boolean
    /// 
    /// * `parallel_leader_participation` boolean
    /// 
    /// * `pg_hint_plan_debug_print` one of:
    /// * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
    /// * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
    /// * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
    /// * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
    /// * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"
    /// 
    /// * `pg_hint_plan_enable_hint` boolean
    /// 
    /// * `pg_hint_plan_enable_hint_table` boolean
    /// 
    /// * `pg_hint_plan_message_level` one of:
    /// * * 0: "LOG_LEVEL_UNSPECIFIED"
    /// * * 1: "LOG_LEVEL_DEBUG5"
    /// * * 2: "LOG_LEVEL_DEBUG4"
    /// * * 3: "LOG_LEVEL_DEBUG3"
    /// * * 4: "LOG_LEVEL_DEBUG2"
    /// * * 5: "LOG_LEVEL_DEBUG1"
    /// * * 6: "LOG_LEVEL_LOG"
    /// * * 7: "LOG_LEVEL_NOTICE"
    /// * * 8: "LOG_LEVEL_WARNING"
    /// * * 9: "LOG_LEVEL_ERROR"
    /// * * 10: "LOG_LEVEL_FATAL"
    /// * * 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `plan_cache_mode` one of:
    /// * * 0: "PLAN_CACHE_MODE_UNSPECIFIED"
    /// * * 1: "PLAN_CACHE_MODE_AUTO"
    /// * * 2: "PLAN_CACHE_MODE_FORCE_CUSTOM_PLAN"
    /// * * 3: "PLAN_CACHE_MODE_FORCE_GENERIC_PLAN"
    /// 
    /// * `quote_all_identifiers` boolean
    /// 
    /// * `random_page_cost` float
    /// 
    /// * `row_security` boolean
    /// 
    /// * `search_path` text
    /// 
    /// * `seq_page_cost` float
    /// 
    /// * `shared_buffers` integer
    /// 
    /// * `shared_preload_libraries` override if not set. One of:
    /// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
    /// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
    /// * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
    /// * * NO value
    /// 
    /// * `standard_conforming_strings` boolean
    /// 
    /// * `statement_timeout` integer
    /// 
    /// * `synchronize_seqscans` boolean
    /// 
    /// * `synchronous_commit` one of:
    /// * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
    /// * * 1: "SYNCHRONOUS_COMMIT_ON"
    /// * * 2: "SYNCHRONOUS_COMMIT_OFF"
    /// * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
    /// * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
    /// * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"
    /// 
    /// * `temp_buffers` integer
    /// 
    /// * `temp_file_limit` integer
    /// 
    /// * `timezone` text
    /// 
    /// * `track_activity_query_size` integer
    /// 
    /// * `transform_null_equals` boolean
    /// 
    /// * `vacuum_cleanup_index_scale_factor` float
    /// 
    /// * `vacuum_cost_delay` integer
    /// 
    /// * `vacuum_cost_limit` integer
    /// 
    /// * `vacuum_cost_page_dirty` integer
    /// 
    /// * `vacuum_cost_page_hit` integer
    /// 
    /// * `vacuum_cost_page_miss` integer
    /// 
    /// * `wal_level` one of:
    /// * * 0: "WAL_LEVEL_UNSPECIFIED"
    /// * * 1: "WAL_LEVEL_REPLICA"
    /// * * 2: "WAL_LEVEL_LOGICAL"
    /// 
    /// * `work_mem` integer
    /// 
    /// * `xmlbinary` one of:
    /// * * 0: "XML_BINARY_UNSPECIFIED"
    /// * * 1: "XML_BINARY_BASE64"
    /// * * 2: "XML_BINARY_HEX"
    /// 
    /// * `xmloption` one of:
    /// * * 0: "XML_OPTION_UNSPECIFIED"
    /// * * 1: "XML_OPTION_DOCUMENT"
    /// * * 2: "XML_OPTION_CONTENT"
    /// 
    /// ### Postgresql 11 config
    /// 
    /// * `archive_timeout` integer
    /// 
    /// * `array_nulls` boolean
    /// 
    /// * `auto_explain_log_analyze` boolean
    /// 
    /// * `auto_explain_log_buffers` boolean
    /// 
    /// * `auto_explain_log_min_duration` integer
    /// 
    /// * `auto_explain_log_nested_statements` boolean
    /// 
    /// * `auto_explain_log_timing` boolean
    /// 
    /// * `auto_explain_log_triggers` boolean
    /// 
    /// * `auto_explain_log_verbose` boolean
    /// 
    /// * `auto_explain_sample_rate` float
    /// 
    /// * `autovacuum_analyze_scale_factor` float
    /// 
    /// * `autovacuum_max_workers` integer
    /// 
    /// * `autovacuum_naptime` integer
    /// 
    /// * `autovacuum_vacuum_cost_delay` integer
    /// 
    /// * `autovacuum_vacuum_cost_limit` integer
    /// 
    /// * `autovacuum_vacuum_scale_factor` float
    /// 
    /// * `autovacuum_work_mem` integer
    /// 
    /// * `backend_flush_after` integer
    /// 
    /// * `backslash_quote` one of:
    /// * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
    /// * * 1: "BACKSLASH_QUOTE"
    /// * * 2: "BACKSLASH_QUOTE_ON"
    /// * * 3: "BACKSLASH_QUOTE_OFF"
    /// * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"
    /// 
    /// * `bgwriter_delay` integer
    /// 
    /// * `bgwriter_flush_after` integer
    /// 
    /// * `bgwriter_lru_maxpages` integer
    /// 
    /// * `bgwriter_lru_multiplier` float
    /// 
    /// * `bytea_output` one of:
    /// * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
    /// * * 1: "BYTEA_OUTPUT_HEX"
    /// * * 2: "BYTEA_OUTPUT_ESCAPED"
    /// 
    /// * `checkpoint_completion_target` float
    /// 
    /// * `checkpoint_flush_after` integer
    /// 
    /// * `checkpoint_timeout` integer
    /// 
    /// * `client_min_messages` one of:
    /// * * 0: "LOG_LEVEL_UNSPECIFIED"
    /// * * 1: "LOG_LEVEL_DEBUG5"
    /// * * 2: "LOG_LEVEL_DEBUG4"
    /// * * 3: "LOG_LEVEL_DEBUG3"
    /// * * 4: "LOG_LEVEL_DEBUG2"
    /// * * 5: "LOG_LEVEL_DEBUG1"
    /// * * 6: "LOG_LEVEL_LOG"
    /// * * 7: "LOG_LEVEL_NOTICE"
    /// * * 8: "LOG_LEVEL_WARNING"
    /// * * 9: "LOG_LEVEL_ERROR"
    /// * * 10: "LOG_LEVEL_FATAL"
    /// * * 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `constraint_exclusion` one of:
    /// * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
    /// * * 1: "CONSTRAINT_EXCLUSION_ON"
    /// * * 2: "CONSTRAINT_EXCLUSION_OFF"
    /// * * 3: "CONSTRAINT_EXCLUSION_PARTITION"
    /// 
    /// * `cursor_tuple_fraction` float
    /// 
    /// * `deadlock_timeout` integer
    /// 
    /// * `default_statistics_target` integer
    /// 
    /// * `default_transaction_isolation` one of:
    /// * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
    /// * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
    /// * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
    /// * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
    /// * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"
    /// 
    /// * `default_transaction_read_only` boolean
    /// 
    /// * `default_with_oids` boolean
    /// 
    /// * `effective_cache_size` integer
    /// 
    /// * `effective_io_concurrency` integer
    /// 
    /// * `enable_bitmapscan` boolean
    /// 
    /// * `enable_hashagg` boolean
    /// 
    /// * `enable_hashjoin` boolean
    /// 
    /// * `enable_indexonlyscan` boolean
    /// 
    /// * `enable_indexscan` boolean
    /// 
    /// * `enable_material` boolean
    /// 
    /// * `enable_mergejoin` boolean
    /// 
    /// * `enable_nestloop` boolean
    /// 
    /// * `enable_parallel_append` boolean
    /// 
    /// * `enable_parallel_hash` boolean
    /// 
    /// * `enable_partition_pruning` boolean
    /// 
    /// * `enable_partitionwise_aggregate` boolean
    /// 
    /// * `enable_partitionwise_join` boolean
    /// 
    /// * `enable_seqscan` boolean
    /// 
    /// * `enable_sort` boolean
    /// 
    /// * `enable_tidscan` boolean
    /// 
    /// * `escape_string_warning` boolean
    /// 
    /// * `exit_on_error` boolean
    /// 
    /// * `force_parallel_mode` one of:
    /// * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
    /// * * 1: "FORCE_PARALLEL_MODE_ON"
    /// * * 2: "FORCE_PARALLEL_MODE_OFF"
    /// * * 3: "FORCE_PARALLEL_MODE_REGRESS"
    /// 
    /// * `from_collapse_limit` integer
    /// 
    /// * `gin_pending_list_limit` integer
    /// 
    /// * `idle_in_transaction_session_timeout` integer
    /// 
    /// * `jit` boolean
    /// 
    /// * `join_collapse_limit` integer
    /// 
    /// * `lo_compat_privileges` boolean
    /// 
    /// * `lock_timeout` integer
    /// 
    /// * `log_checkpoints` boolean
    /// 
    /// * `log_connections` boolean
    /// 
    /// * `log_disconnections` boolean
    /// 
    /// * `log_duration` boolean
    /// 
    /// * `log_error_verbosity` one of:
    /// * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
    /// * * 1: "LOG_ERROR_VERBOSITY_TERSE"
    /// * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
    /// * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"
    /// 
    /// * `log_lock_waits` boolean
    /// 
    /// * `log_min_duration_statement` integer
    /// 
    /// * `log_min_error_statement` one of:
    /// * * 0: "LOG_LEVEL_UNSPECIFIED"
    /// * * 1: "LOG_LEVEL_DEBUG5"
    /// * * 2: "LOG_LEVEL_DEBUG4"
    /// * * 3: "LOG_LEVEL_DEBUG3"
    /// * * 4: "LOG_LEVEL_DEBUG2"
    /// * * 5: "LOG_LEVEL_DEBUG1"
    /// * * 6: "LOG_LEVEL_LOG"
    /// * * 7: "LOG_LEVEL_NOTICE"
    /// * * 8: "LOG_LEVEL_WARNING"
    /// * * 9: "LOG_LEVEL_ERROR"
    /// * * 10: "LOG_LEVEL_FATAL"
    /// * * 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `log_min_messages` one of:
    /// * * 0: "LOG_LEVEL_UNSPECIFIED"
    /// * * 1: "LOG_LEVEL_DEBUG5"
    /// * * 2: "LOG_LEVEL_DEBUG4"
    /// * * 3: "LOG_LEVEL_DEBUG3"
    /// * * 4: "LOG_LEVEL_DEBUG2"
    /// * * 5: "LOG_LEVEL_DEBUG1"
    /// * * 6: "LOG_LEVEL_LOG"
    /// * * 7: "LOG_LEVEL_NOTICE"
    /// * * 8: "LOG_LEVEL_WARNING"
    /// * * 9: "LOG_LEVEL_ERROR"
    /// * * 10: "LOG_LEVEL_FATAL"
    /// * * 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `log_statement` one of:
    /// * * 0: "LOG_STATEMENT_UNSPECIFIED"
    /// * * 1: "LOG_STATEMENT_NONE"
    /// * * 2: "LOG_STATEMENT_DDL"
    /// * * 3: "LOG_STATEMENT_MOD"
    /// * * 4: "LOG_STATEMENT_ALL"
    /// 
    /// * `log_temp_files` integer
    /// 
    /// * `maintenance_work_mem` integer
    /// 
    /// * `max_connections` integer
    /// 
    /// * `max_locks_per_transaction` integer
    /// 
    /// * `max_parallel_maintenance_workers` integer
    /// 
    /// * `max_parallel_workers` integer
    /// 
    /// * `max_parallel_workers_per_gather` integer
    /// 
    /// * `max_pred_locks_per_transaction` integer
    /// 
    /// * `max_prepared_transactions` integer
    /// 
    /// * `max_standby_streaming_delay` integer
    /// 
    /// * `max_wal_size` integer
    /// 
    /// * `max_worker_processes` integer
    /// 
    /// * `min_wal_size` integer
    /// 
    /// * `old_snapshot_threshold` integer
    /// 
    /// * `operator_precedence_warning` boolean
    /// 
    /// * `parallel_leader_participation` boolean
    /// 
    /// * `pg_hint_plan_debug_print` one of:
    /// * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
    /// * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
    /// * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
    /// * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
    /// * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"
    /// 
    /// * `pg_hint_plan_enable_hint` boolean
    /// 
    /// * `pg_hint_plan_enable_hint_table` boolean
    /// 
    /// * `pg_hint_plan_message_level` one of:
    /// * * 0: "LOG_LEVEL_UNSPECIFIED"
    /// * * 1: "LOG_LEVEL_DEBUG5"
    /// * * 2: "LOG_LEVEL_DEBUG4"
    /// * * 3: "LOG_LEVEL_DEBUG3"
    /// * * 4: "LOG_LEVEL_DEBUG2"
    /// * * 5: "LOG_LEVEL_DEBUG1"
    /// * * 6: "LOG_LEVEL_LOG"
    /// * * 7: "LOG_LEVEL_NOTICE"
    /// * * 8: "LOG_LEVEL_WARNING"
    /// * * 9: "LOG_LEVEL_ERROR"
    /// * * 10: "LOG_LEVEL_FATAL"
    /// * * 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `quote_all_identifiers` boolean
    /// 
    /// * `random_page_cost` float
    /// 
    /// * `row_security` boolean
    /// 
    /// * `search_path` text
    /// 
    /// * `seq_page_cost` float
    /// 
    /// * `shared_buffers` integer
    /// 
    /// * `shared_preload_libraries` override if not set. One of:
    /// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
    /// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
    /// * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
    /// * * NO value
    /// 
    /// * `standard_conforming_strings` boolean
    /// 
    /// * `statement_timeout` integer
    /// 
    /// * `synchronize_seqscans` boolean
    /// 
    /// * `synchronous_commit` one of:
    /// * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
    /// * * 1: "SYNCHRONOUS_COMMIT_ON"
    /// * * 2: "SYNCHRONOUS_COMMIT_OFF"
    /// * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
    /// * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
    /// * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"
    /// 
    /// * `temp_buffers` integer
    /// 
    /// * `temp_file_limit` integer
    /// 
    /// * `timezone` text
    /// 
    /// * `track_activity_query_size` integer
    /// 
    /// * `transform_null_equals` boolean
    /// 
    /// * `vacuum_cleanup_index_scale_factor` float
    /// 
    /// * `vacuum_cost_delay` integer
    /// 
    /// * `vacuum_cost_limit` integer
    /// 
    /// * `vacuum_cost_page_dirty` integer
    /// 
    /// * `vacuum_cost_page_hit` integer
    /// 
    /// * `vacuum_cost_page_miss` integer
    /// 
    /// * `wal_level` one of:
    /// * * 0: "WAL_LEVEL_UNSPECIFIED"
    /// * * 1: "WAL_LEVEL_REPLICA"
    /// * * 2: "WAL_LEVEL_LOGICAL"
    /// 
    /// * `work_mem` integer
    /// 
    /// * `xmlbinary` one of:
    /// * * 0: "XML_BINARY_UNSPECIFIED"
    /// * * 1: "XML_BINARY_BASE64"
    /// * * 2: "XML_BINARY_HEX"
    /// 
    /// * `xmloption` one of:
    /// * * 0: "XML_OPTION_UNSPECIFIED"
    /// * * 1: "XML_OPTION_DOCUMENT"
    /// * * 2: "XML_OPTION_CONTENT"
    /// 
    /// ### Postgresql 10 config
    /// 
    /// * `archive_timeout` integer
    /// 
    /// * `array_nulls` boolean
    /// 
    /// * `auto_explain_log_analyze` boolean
    /// 
    /// * `auto_explain_log_buffers` boolean
    /// 
    /// * `auto_explain_log_min_duration` integer
    /// 
    /// * `auto_explain_log_nested_statements` boolean
    /// 
    /// * `auto_explain_log_timing` boolean
    /// 
    /// * `auto_explain_log_triggers` boolean
    /// 
    /// * `auto_explain_log_verbose` boolean
    /// 
    /// * `auto_explain_sample_rate` float
    /// 
    /// * `autovacuum_analyze_scale_factor` float
    /// 
    /// * `autovacuum_max_workers` integer
    /// 
    /// * `autovacuum_naptime` integer
    /// 
    /// * `autovacuum_vacuum_cost_delay` integer
    /// 
    /// * `autovacuum_vacuum_cost_limit` integer
    /// 
    /// * `autovacuum_vacuum_scale_factor` float
    /// 
    /// * `autovacuum_work_mem` integer
    /// 
    /// * `backend_flush_after` integer
    /// 
    /// * `backslash_quote` one of:
    /// * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
    /// * * 1: "BACKSLASH_QUOTE"
    /// * * 2: "BACKSLASH_QUOTE_ON"
    /// * * 3: "BACKSLASH_QUOTE_OFF"
    /// * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"
    /// 
    /// * `bgwriter_delay` integer
    /// 
    /// * `bgwriter_flush_after` integer
    /// 
    /// * `bgwriter_lru_maxpages` integer
    /// 
    /// * `bgwriter_lru_multiplier` float
    /// 
    /// * `bytea_output` one of:
    /// * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
    /// * * 1: "BYTEA_OUTPUT_HEX"
    /// * * 2: "BYTEA_OUTPUT_ESCAPED"
    /// 
    /// * `checkpoint_completion_target` float
    /// 
    /// * `checkpoint_flush_after` integer
    /// 
    /// * `checkpoint_timeout` integer
    /// 
    /// * `client_min_messages` one of:
    /// * * 0: "LOG_LEVEL_UNSPECIFIED"
    /// * * 1: "LOG_LEVEL_DEBUG5"
    /// * * 2: "LOG_LEVEL_DEBUG4"
    /// * * 3: "LOG_LEVEL_DEBUG3"
    /// * * 4: "LOG_LEVEL_DEBUG2"
    /// * * 5: "LOG_LEVEL_DEBUG1"
    /// * * 6: "LOG_LEVEL_LOG"
    /// * * 7: "LOG_LEVEL_NOTICE"
    /// * * 8: "LOG_LEVEL_WARNING"
    /// * * 9: "LOG_LEVEL_ERROR"
    /// * * 10: "LOG_LEVEL_FATAL"
    /// * * 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `constraint_exclusion` one of:
    /// * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
    /// * * 1: "CONSTRAINT_EXCLUSION_ON"
    /// * * 2: "CONSTRAINT_EXCLUSION_OFF"
    /// * * 3: "CONSTRAINT_EXCLUSION_PARTITION"
    /// 
    /// * `cursor_tuple_fraction` float
    /// 
    /// * `deadlock_timeout` integer
    /// 
    /// * `default_statistics_target` integer
    /// 
    /// * `default_transaction_isolation` one of:
    /// * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
    /// * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
    /// * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
    /// * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
    /// * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"
    /// 
    /// * `default_transaction_read_only` boolean
    /// 
    /// * `default_with_oids` boolean
    /// 
    /// * `effective_cache_size` integer
    /// 
    /// * `effective_io_concurrency` integer
    /// 
    /// * `enable_bitmapscan` boolean
    /// 
    /// * `enable_hashagg` boolean
    /// 
    /// * `enable_hashjoin` boolean
    /// 
    /// * `enable_indexonlyscan` boolean
    /// 
    /// * `enable_indexscan` boolean
    /// 
    /// * `enable_material` boolean
    /// 
    /// * `enable_mergejoin` boolean
    /// 
    /// * `enable_nestloop` boolean
    /// 
    /// * `enable_seqscan` boolean
    /// 
    /// * `enable_sort` boolean
    /// 
    /// * `enable_tidscan` boolean
    /// 
    /// * `escape_string_warning` boolean
    /// 
    /// * `exit_on_error` boolean
    /// 
    /// * `force_parallel_mode` one of:
    /// * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
    /// * * 1: "FORCE_PARALLEL_MODE_ON"
    /// * * 2: "FORCE_PARALLEL_MODE_OFF"
    /// * * 3: "FORCE_PARALLEL_MODE_REGRESS"
    /// 
    /// * `from_collapse_limit` integer
    /// 
    /// * `gin_pending_list_limit` integer
    /// 
    /// * `idle_in_transaction_session_timeout` integer
    /// 
    /// * `join_collapse_limit` integer
    /// 
    /// * `lo_compat_privileges` boolean
    /// 
    /// * `lock_timeout` integer
    /// 
    /// * `log_checkpoints` boolean
    /// 
    /// * `log_connections` boolean
    /// 
    /// * `log_disconnections` boolean
    /// 
    /// * `log_duration` boolean
    /// 
    /// * `log_error_verbosity` one of:
    /// * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
    /// * * 1: "LOG_ERROR_VERBOSITY_TERSE"
    /// * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
    /// * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"
    /// 
    /// * `log_lock_waits` boolean
    /// 
    /// * `log_min_duration_statement` integer
    /// 
    /// * `log_min_error_statement` one of:
    /// * * 0: "LOG_LEVEL_UNSPECIFIED"
    /// * * 1: "LOG_LEVEL_DEBUG5"
    /// * * 2: "LOG_LEVEL_DEBUG4"
    /// * * 3: "LOG_LEVEL_DEBUG3"
    /// * * 4: "LOG_LEVEL_DEBUG2"
    /// * * 5: "LOG_LEVEL_DEBUG1"
    /// * * 6: "LOG_LEVEL_LOG"
    /// * * 7: "LOG_LEVEL_NOTICE"
    /// * * 8: "LOG_LEVEL_WARNING"
    /// * * 9: "LOG_LEVEL_ERROR"
    /// * * 10: "LOG_LEVEL_FATAL"
    /// * * 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `log_min_messages` one of:
    /// * * 0: "LOG_LEVEL_UNSPECIFIED"
    /// * * 1: "LOG_LEVEL_DEBUG5"
    /// * * 2: "LOG_LEVEL_DEBUG4"
    /// * * 3: "LOG_LEVEL_DEBUG3"
    /// * * 4: "LOG_LEVEL_DEBUG2"
    /// * * 5: "LOG_LEVEL_DEBUG1"
    /// * * 6: "LOG_LEVEL_LOG"
    /// * * 7: "LOG_LEVEL_NOTICE"
    /// * * 8: "LOG_LEVEL_WARNING"
    /// * * 9: "LOG_LEVEL_ERROR"
    /// * * 10: "LOG_LEVEL_FATAL"
    /// * * 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `log_statement` one of:
    /// * * 0: "LOG_STATEMENT_UNSPECIFIED"
    /// * * 1: "LOG_STATEMENT_NONE"
    /// * * 2: "LOG_STATEMENT_DDL"
    /// * * 3: "LOG_STATEMENT_MOD"
    /// * * 4: "LOG_STATEMENT_ALL"
    /// 
    /// * `log_temp_files` integer
    /// 
    /// * `maintenance_work_mem` integer
    /// 
    /// * `max_connections` integer
    /// 
    /// * `max_locks_per_transaction` integer
    /// 
    /// * `max_parallel_workers` integer
    /// 
    /// * `max_parallel_workers_per_gather` integer
    /// 
    /// * `max_pred_locks_per_transaction` integer
    /// 
    /// * `max_prepared_transactions` integer
    /// 
    /// * `max_standby_streaming_delay` integer
    /// 
    /// * `max_wal_size` integer
    /// 
    /// * `max_worker_processes` integer
    /// 
    /// * `min_wal_size` integer
    /// 
    /// * `old_snapshot_threshold` integer
    /// 
    /// * `operator_precedence_warning` boolean
    /// 
    /// * `pg_hint_plan_debug_print` one of:
    /// * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
    /// * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
    /// * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
    /// * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
    /// * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"
    /// 
    /// * `pg_hint_plan_enable_hint` boolean
    /// 
    /// * `pg_hint_plan_enable_hint_table` boolean
    /// 
    /// * `pg_hint_plan_message_level` one of:
    /// * * 0: "LOG_LEVEL_UNSPECIFIED"
    /// * * 1: "LOG_LEVEL_DEBUG5"
    /// * * 2: "LOG_LEVEL_DEBUG4"
    /// * * 3: "LOG_LEVEL_DEBUG3"
    /// * * 4: "LOG_LEVEL_DEBUG2"
    /// * * 5: "LOG_LEVEL_DEBUG1"
    /// * * 6: "LOG_LEVEL_LOG"
    /// * * 7: "LOG_LEVEL_NOTICE"
    /// * * 8: "LOG_LEVEL_WARNING"
    /// * * 9: "LOG_LEVEL_ERROR"
    /// * * 10: "LOG_LEVEL_FATAL"
    /// * * 11: "LOG_LEVEL_PANIC"
    /// 
    /// * `quote_all_identifiers` boolean
    /// 
    /// * `random_page_cost` float
    /// 
    /// * `replacement_sort_tuples` integer
    /// 
    /// * `row_security` boolean
    /// 
    /// * `search_path` text
    /// 
    /// * `seq_page_cost` float
    /// 
    /// * `shared_buffers` integer
    /// 
    /// * `shared_preload_libraries` override if not set. One of:
    /// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
    /// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
    /// * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
    /// * * NO value
    /// 
    /// * `standard_conforming_strings` boolean
    /// 
    /// * `statement_timeout` integer
    /// 
    /// * `synchronize_seqscans` boolean
    /// 
    /// * `synchronous_commit` one of:
    /// * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
    /// * * 1: "SYNCHRONOUS_COMMIT_ON"
    /// * * 2: "SYNCHRONOUS_COMMIT_OFF"
    /// * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
    /// * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
    /// * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"
    /// 
    /// * `temp_buffers` integer
    /// 
    /// * `temp_file_limit` integer
    /// 
    /// * `timezone` text
    /// 
    /// * `track_activity_query_size` integer
    /// 
    /// * `transform_null_equals` boolean
    /// 
    /// * `vacuum_cost_delay` integer
    /// 
    /// * `vacuum_cost_limit` integer
    /// 
    /// * `vacuum_cost_page_dirty` integer
    /// 
    /// * `vacuum_cost_page_hit` integer
    /// 
    /// * `vacuum_cost_page_miss` integer
    /// 
    /// * `wal_level` one of:
    /// * * 0: "WAL_LEVEL_UNSPECIFIED"
    /// * * 1: "WAL_LEVEL_REPLICA"
    /// * * 2: "WAL_LEVEL_LOGICAL"
    /// 
    /// * `work_mem` integer
    /// 
    /// * `xmlbinary` one of:
    /// * * 0: "XML_BINARY_UNSPECIFIED"
    /// * * 1: "XML_BINARY_BASE64"
    /// * * 2: "XML_BINARY_HEX"
    /// 
    /// * `xmloption` one of:
    /// * * 0: "XML_OPTION_UNSPECIFIED"
    /// * * 1: "XML_OPTION_DOCUMENT"
    /// * * 2: "XML_OPTION_CONTENT"
    /// 
    /// ## Import
    /// 
    /// A cluster can be imported using the `id` of the resource, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster foo cluster_id
    /// ```
    /// </summary>
    [YandexResourceType("yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster")]
    public partial class MdbPostgresqlCluster : Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration of the PostgreSQL cluster. The structure is documented below.
        /// </summary>
        [Output("config")]
        public Output<Outputs.MdbPostgresqlClusterConfig> Config { get; private set; } = null!;

        /// <summary>
        /// Timestamp of cluster creation.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A database of the PostgreSQL cluster. The structure is documented below.
        /// </summary>
        [Output("databases")]
        public Output<ImmutableArray<Outputs.MdbPostgresqlClusterDatabase>> Databases { get; private set; } = null!;

        /// <summary>
        /// Description of the PostgreSQL cluster.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Deployment environment of the PostgreSQL cluster.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// The ID of the folder that the resource belongs to. If it is unset, the default provider `folder_id` is used for create.
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// Aggregated health of the cluster.
        /// </summary>
        [Output("health")]
        public Output<string> Health { get; private set; } = null!;

        /// <summary>
        /// It sets name of master host. It works only when `host.name` is set.
        /// </summary>
        [Output("hostMasterName")]
        public Output<string> HostMasterName { get; private set; } = null!;

        /// <summary>
        /// A host of the PostgreSQL cluster. The structure is documented below.
        /// </summary>
        [Output("hosts")]
        public Output<ImmutableArray<Outputs.MdbPostgresqlClusterHost>> Hosts { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs to assign to the PostgreSQL cluster.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replication_source_name` parameter.
        /// Also, this field is used to select which host will be selected as a master host. Please see `host_master_name` parameter.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the network, to which the PostgreSQL cluster belongs.
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The cluster will be created from the specified backup. The structure is documented below.
        /// </summary>
        [Output("restore")]
        public Output<Outputs.MdbPostgresqlClusterRestore?> Restore { get; private set; } = null!;

        /// <summary>
        /// A set of ids of security groups assigned to hosts of the cluster.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// Status of the cluster.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A user of the PostgreSQL cluster. The structure is documented below.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.MdbPostgresqlClusterUser>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a MdbPostgresqlCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MdbPostgresqlCluster(string name, MdbPostgresqlClusterArgs args, CustomResourceOptions? options = null)
            : base("yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster", name, args ?? new MdbPostgresqlClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MdbPostgresqlCluster(string name, Input<string> id, MdbPostgresqlClusterState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MdbPostgresqlCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MdbPostgresqlCluster Get(string name, Input<string> id, MdbPostgresqlClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new MdbPostgresqlCluster(name, id, state, options);
        }
    }

    public sealed class MdbPostgresqlClusterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration of the PostgreSQL cluster. The structure is documented below.
        /// </summary>
        [Input("config", required: true)]
        public Input<Inputs.MdbPostgresqlClusterConfigArgs> Config { get; set; } = null!;

        [Input("databases", required: true)]
        private InputList<Inputs.MdbPostgresqlClusterDatabaseArgs>? _databases;

        /// <summary>
        /// A database of the PostgreSQL cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbPostgresqlClusterDatabaseArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.MdbPostgresqlClusterDatabaseArgs>());
            set => _databases = value;
        }

        /// <summary>
        /// Description of the PostgreSQL cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Deployment environment of the PostgreSQL cluster.
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// The ID of the folder that the resource belongs to. If it is unset, the default provider `folder_id` is used for create.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// It sets name of master host. It works only when `host.name` is set.
        /// </summary>
        [Input("hostMasterName")]
        public Input<string>? HostMasterName { get; set; }

        [Input("hosts", required: true)]
        private InputList<Inputs.MdbPostgresqlClusterHostArgs>? _hosts;

        /// <summary>
        /// A host of the PostgreSQL cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbPostgresqlClusterHostArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.MdbPostgresqlClusterHostArgs>());
            set => _hosts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to the PostgreSQL cluster.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replication_source_name` parameter.
        /// Also, this field is used to select which host will be selected as a master host. Please see `host_master_name` parameter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the network, to which the PostgreSQL cluster belongs.
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// The cluster will be created from the specified backup. The structure is documented below.
        /// </summary>
        [Input("restore")]
        public Input<Inputs.MdbPostgresqlClusterRestoreArgs>? Restore { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// A set of ids of security groups assigned to hosts of the cluster.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("users", required: true)]
        private InputList<Inputs.MdbPostgresqlClusterUserArgs>? _users;

        /// <summary>
        /// A user of the PostgreSQL cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbPostgresqlClusterUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.MdbPostgresqlClusterUserArgs>());
            set => _users = value;
        }

        public MdbPostgresqlClusterArgs()
        {
        }
    }

    public sealed class MdbPostgresqlClusterState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration of the PostgreSQL cluster. The structure is documented below.
        /// </summary>
        [Input("config")]
        public Input<Inputs.MdbPostgresqlClusterConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// Timestamp of cluster creation.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("databases")]
        private InputList<Inputs.MdbPostgresqlClusterDatabaseGetArgs>? _databases;

        /// <summary>
        /// A database of the PostgreSQL cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbPostgresqlClusterDatabaseGetArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.MdbPostgresqlClusterDatabaseGetArgs>());
            set => _databases = value;
        }

        /// <summary>
        /// Description of the PostgreSQL cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Deployment environment of the PostgreSQL cluster.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The ID of the folder that the resource belongs to. If it is unset, the default provider `folder_id` is used for create.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// Aggregated health of the cluster.
        /// </summary>
        [Input("health")]
        public Input<string>? Health { get; set; }

        /// <summary>
        /// It sets name of master host. It works only when `host.name` is set.
        /// </summary>
        [Input("hostMasterName")]
        public Input<string>? HostMasterName { get; set; }

        [Input("hosts")]
        private InputList<Inputs.MdbPostgresqlClusterHostGetArgs>? _hosts;

        /// <summary>
        /// A host of the PostgreSQL cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbPostgresqlClusterHostGetArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.MdbPostgresqlClusterHostGetArgs>());
            set => _hosts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to the PostgreSQL cluster.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replication_source_name` parameter.
        /// Also, this field is used to select which host will be selected as a master host. Please see `host_master_name` parameter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the network, to which the PostgreSQL cluster belongs.
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The cluster will be created from the specified backup. The structure is documented below.
        /// </summary>
        [Input("restore")]
        public Input<Inputs.MdbPostgresqlClusterRestoreGetArgs>? Restore { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// A set of ids of security groups assigned to hosts of the cluster.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// Status of the cluster.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("users")]
        private InputList<Inputs.MdbPostgresqlClusterUserGetArgs>? _users;

        /// <summary>
        /// A user of the PostgreSQL cluster. The structure is documented below.
        /// </summary>
        public InputList<Inputs.MdbPostgresqlClusterUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.MdbPostgresqlClusterUserGetArgs>());
            set => _users = value;
        }

        public MdbPostgresqlClusterState()
        {
        }
    }
}
