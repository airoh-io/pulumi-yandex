// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    /// <summary>
    /// Get information about a Yandex Monitoring dashboard.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //
    ///     // Create a new Monitoring Dashboard.
    ///     //
    ///     var my_dashboard = new Yandex.MonitoringDashboard("my-dashboard", new()
    ///     {
    ///         Description = "Description",
    ///         Labels = 
    ///         {
    ///             { "a", "b" },
    ///         },
    ///         Parametrizations = new[]
    ///         {
    ///             new Yandex.Inputs.MonitoringDashboardParametrizationArgs
    ///             {
    ///                 Parameters = new[]
    ///                 {
    ///                     new Yandex.Inputs.MonitoringDashboardParametrizationParameterArgs
    ///                     {
    ///                         Custom = new[]
    ///                         {
    ///                             
    ///                             {
    ///                                 { "defaultValues", new[]
    ///                                 {
    ///                                     "1",
    ///                                     "2",
    ///                                 } },
    ///                                 { "multiselectable", true },
    ///                                 { "values", new[]
    ///                                 {
    ///                                     "1",
    ///                                     "2",
    ///                                     "3",
    ///                                 } },
    ///                             },
    ///                         },
    ///                         Description = "param1 description",
    ///                         Hidden = false,
    ///                         Id = "param1",
    ///                         Title = "title",
    ///                     },
    ///                     new Yandex.Inputs.MonitoringDashboardParametrizationParameterArgs
    ///                     {
    ///                         Hidden = true,
    ///                         Id = "param2",
    ///                         LabelValues = new[]
    ///                         {
    ///                             new Yandex.Inputs.MonitoringDashboardParametrizationParameterLabelValueArgs
    ///                             {
    ///                                 DefaultValues = new[]
    ///                                 {
    ///                                     "1",
    ///                                     "2",
    ///                                 },
    ///                                 LabelKey = "key",
    ///                                 Multiselectable = true,
    ///                                 Selectors = "a=b",
    ///                             },
    ///                         },
    ///                     },
    ///                     new Yandex.Inputs.MonitoringDashboardParametrizationParameterArgs
    ///                     {
    ///                         Hidden = true,
    ///                         Id = "param3",
    ///                         Text = new[]
    ///                         {
    ///                             
    ///                             {
    ///                                 { "defaultValue", "abc" },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 Selectors = "a=b",
    ///             },
    ///         },
    ///         Title = "My title",
    ///         Widgets = new[]
    ///         {
    ///             new Yandex.Inputs.MonitoringDashboardWidgetArgs
    ///             {
    ///                 Positions = new[]
    ///                 {
    ///                     new Yandex.Inputs.MonitoringDashboardWidgetPositionArgs
    ///                     {
    ///                         H = 1,
    ///                         W = 1,
    ///                         X = 4,
    ///                         Y = 4,
    ///                     },
    ///                 },
    ///                 Texts = new[]
    ///                 {
    ///                     new Yandex.Inputs.MonitoringDashboardWidgetTextArgs
    ///                     {
    ///                         Text = "text here",
    ///                     },
    ///                 },
    ///             },
    ///             new Yandex.Inputs.MonitoringDashboardWidgetArgs
    ///             {
    ///                 Charts = new[]
    ///                 {
    ///                     new Yandex.Inputs.MonitoringDashboardWidgetChartArgs
    ///                     {
    ///                         ChartId = "chart1id",
    ///                         Description = "chart description",
    ///                         DisplayLegend = true,
    ///                         Freeze = "FREEZE_DURATION_HOUR",
    ///                         NameHidingSettings = new[]
    ///                         {
    ///                             new Yandex.Inputs.MonitoringDashboardWidgetChartNameHidingSettingArgs
    ///                             {
    ///                                 Names = new[]
    ///                                 {
    ///                                     "a",
    ///                                     "b",
    ///                                 },
    ///                                 Positive = true,
    ///                             },
    ///                         },
    ///                         Queries = new[]
    ///                         {
    ///                             new Yandex.Inputs.MonitoringDashboardWidgetChartQueryArgs
    ///                             {
    ///                                 Downsampling = new[]
    ///                                 {
    ///                                     
    ///                                     {
    ///                                         { "disabled", false },
    ///                                         { "gapFilling", "GAP_FILLING_NULL" },
    ///                                         { "gridAggregation", "GRID_AGGREGATION_COUNT" },
    ///                                         { "maxPoints", 100 },
    ///                                     },
    ///                                 },
    ///                                 Target = new[]
    ///                                 {
    ///                                     
    ///                                     {
    ///                                         { "hidden", true },
    ///                                         { "query", "{service=monitoring}" },
    ///                                         { "textMode", true },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                         SeriesOverrides = new[]
    ///                         {
    ///                             new Yandex.Inputs.MonitoringDashboardWidgetChartSeriesOverrideArgs
    ///                             {
    ///                                 Name = "name",
    ///                                 Settings = new[]
    ///                                 {
    ///                                     new Yandex.Inputs.MonitoringDashboardWidgetChartSeriesOverrideSettingArgs
    ///                                     {
    ///                                         Color = "colorValue",
    ///                                         GrowDown = true,
    ///                                         Name = "series_overrides name",
    ///                                         StackName = "stack name",
    ///                                         Type = "SERIES_VISUALIZATION_TYPE_LINE",
    ///                                         YaxisPosition = "YAXIS_POSITION_LEFT",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                         Title = "title for chart",
    ///                         VisualizationSettings = new[]
    ///                         {
    ///                             new Yandex.Inputs.MonitoringDashboardWidgetChartVisualizationSettingArgs
    ///                             {
    ///                                 Aggregation = "SERIES_AGGREGATION_AVG",
    ///                                 ColorSchemeSettings = new[]
    ///                                 {
    ///                                     new Yandex.Inputs.MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingArgs
    ///                                     {
    ///                                         Gradient = new[]
    ///                                         {
    ///                                             
    ///                                             {
    ///                                                 { "greenValue", "11" },
    ///                                                 { "redValue", "22" },
    ///                                                 { "violetValue", "33" },
    ///                                                 { "yellowValue", "44" },
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                                 HeatmapSettings = new[]
    ///                                 {
    ///                                     new Yandex.Inputs.MonitoringDashboardWidgetChartVisualizationSettingHeatmapSettingArgs
    ///                                     {
    ///                                         GreenValue = "1",
    ///                                         RedValue = "2",
    ///                                         VioletValue = "3",
    ///                                         YellowValue = "4",
    ///                                     },
    ///                                 },
    ///                                 Interpolate = "INTERPOLATE_LEFT",
    ///                                 Normalize = true,
    ///                                 ShowLabels = true,
    ///                                 Title = "visualization_settings title",
    ///                                 Type = "VISUALIZATION_TYPE_POINTS",
    ///                                 YaxisSettings = new[]
    ///                                 {
    ///                                     new Yandex.Inputs.MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingArgs
    ///                                     {
    ///                                         Left = new[]
    ///                                         {
    ///                                             
    ///                                             {
    ///                                                 { "max", "111" },
    ///                                                 { "min", "11" },
    ///                                                 { "precision", 3 },
    ///                                                 { "title", "yaxis_settings left title" },
    ///                                                 { "type", "YAXIS_TYPE_LOGARITHMIC" },
    ///                                                 { "unitFormat", "UNIT_CELSIUS" },
    ///                                             },
    ///                                         },
    ///                                         Right = new[]
    ///                                         {
    ///                                             
    ///                                             {
    ///                                                 { "max", "22" },
    ///                                                 { "min", "2" },
    ///                                                 { "precision", 2 },
    ///                                                 { "title", "yaxis_settings right title" },
    ///                                                 { "type", "YAXIS_TYPE_LOGARITHMIC" },
    ///                                                 { "unitFormat", "UNIT_NONE" },
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 Positions = new[]
    ///                 {
    ///                     new Yandex.Inputs.MonitoringDashboardWidgetPositionArgs
    ///                     {
    ///                         H = 100,
    ///                         W = 100,
    ///                         X = 6,
    ///                         Y = 6,
    ///                     },
    ///                 },
    ///             },
    ///             new Yandex.Inputs.MonitoringDashboardWidgetArgs
    ///             {
    ///                 Positions = new[]
    ///                 {
    ///                     new Yandex.Inputs.MonitoringDashboardWidgetPositionArgs
    ///                     {
    ///                         H = 1,
    ///                         W = 1,
    ///                         X = 1,
    ///                         Y = 1,
    ///                     },
    ///                 },
    ///                 Titles = new[]
    ///                 {
    ///                     new Yandex.Inputs.MonitoringDashboardWidgetTitleArgs
    ///                     {
    ///                         Size = "TITLE_SIZE_XS",
    ///                         Text = "title here",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
    /// 
    /// ```sh
    /// $ pulumi import yandex:index/monitoringDashboard:MonitoringDashboard &lt;resource Name&gt; &lt;resource Id&gt;
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import yandex:index/monitoringDashboard:MonitoringDashboard my-dashboard ...
    /// ```
    /// </summary>
    [YandexResourceType("yandex:index/monitoringDashboard:MonitoringDashboard")]
    public partial class MonitoringDashboard : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Dashboard ID.
        /// </summary>
        [Output("dashboardId")]
        public Output<string> DashboardId { get; private set; } = null!;

        /// <summary>
        /// The resource description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Dashboard parametrization.
        /// </summary>
        [Output("parametrizations")]
        public Output<ImmutableArray<Outputs.MonitoringDashboardParametrization>> Parametrizations { get; private set; } = null!;

        /// <summary>
        /// Dashboard title.
        /// </summary>
        [Output("title")]
        public Output<string?> Title { get; private set; } = null!;

        /// <summary>
        /// Widgets.
        /// </summary>
        [Output("widgets")]
        public Output<ImmutableArray<Outputs.MonitoringDashboardWidget>> Widgets { get; private set; } = null!;


        /// <summary>
        /// Create a MonitoringDashboard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MonitoringDashboard(string name, MonitoringDashboardArgs? args = null, CustomResourceOptions? options = null)
            : base("yandex:index/monitoringDashboard:MonitoringDashboard", name, args ?? new MonitoringDashboardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MonitoringDashboard(string name, Input<string> id, MonitoringDashboardState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/monitoringDashboard:MonitoringDashboard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MonitoringDashboard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MonitoringDashboard Get(string name, Input<string> id, MonitoringDashboardState? state = null, CustomResourceOptions? options = null)
        {
            return new MonitoringDashboard(name, id, state, options);
        }
    }

    public sealed class MonitoringDashboardArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parametrizations")]
        private InputList<Inputs.MonitoringDashboardParametrizationArgs>? _parametrizations;

        /// <summary>
        /// Dashboard parametrization.
        /// </summary>
        public InputList<Inputs.MonitoringDashboardParametrizationArgs> Parametrizations
        {
            get => _parametrizations ?? (_parametrizations = new InputList<Inputs.MonitoringDashboardParametrizationArgs>());
            set => _parametrizations = value;
        }

        /// <summary>
        /// Dashboard title.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("widgets")]
        private InputList<Inputs.MonitoringDashboardWidgetArgs>? _widgets;

        /// <summary>
        /// Widgets.
        /// </summary>
        public InputList<Inputs.MonitoringDashboardWidgetArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.MonitoringDashboardWidgetArgs>());
            set => _widgets = value;
        }

        public MonitoringDashboardArgs()
        {
        }
        public static new MonitoringDashboardArgs Empty => new MonitoringDashboardArgs();
    }

    public sealed class MonitoringDashboardState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Dashboard ID.
        /// </summary>
        [Input("dashboardId")]
        public Input<string>? DashboardId { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parametrizations")]
        private InputList<Inputs.MonitoringDashboardParametrizationGetArgs>? _parametrizations;

        /// <summary>
        /// Dashboard parametrization.
        /// </summary>
        public InputList<Inputs.MonitoringDashboardParametrizationGetArgs> Parametrizations
        {
            get => _parametrizations ?? (_parametrizations = new InputList<Inputs.MonitoringDashboardParametrizationGetArgs>());
            set => _parametrizations = value;
        }

        /// <summary>
        /// Dashboard title.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("widgets")]
        private InputList<Inputs.MonitoringDashboardWidgetGetArgs>? _widgets;

        /// <summary>
        /// Widgets.
        /// </summary>
        public InputList<Inputs.MonitoringDashboardWidgetGetArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.MonitoringDashboardWidgetGetArgs>());
            set => _widgets = value;
        }

        public MonitoringDashboardState()
        {
        }
        public static new MonitoringDashboardState Empty => new MonitoringDashboardState();
    }
}
