// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Outputs
{

    [OutputType]
    public sealed class GetBackupPolicySchedulingResult
    {
        /// <summary>
        /// A list of schedules with backup sets that compose the whole scheme.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackupPolicySchedulingBackupSetResult> BackupSets;
        /// <summary>
        /// Enables or disables scheduling. Default `true`.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Maximum number of backup processes allowed to run in parallel. 0 for unlimited. Default `0`.
        /// </summary>
        public readonly int MaxParallelBackups;
        /// <summary>
        /// Configuration of the random delay between the execution of parallel tasks. See `interval_type` for available values. Default `30m`.
        /// </summary>
        public readonly string RandomMaxDelay;
        /// <summary>
        /// Scheme of the backups. Available values are: `ALWAYS_INCREMENTAL`, `ALWAYS_FULL`, `WEEKLY_FULL_DAILY_INCREMENTAL`, `WEEKLY_INCREMENTAL`. Default `ALWAYS_INCREMENTAL`.
        /// </summary>
        public readonly string Scheme;
        /// <summary>
        /// A day of week to start weekly backups. See `day_type` for available values. Default `MONDAY`.
        /// </summary>
        public readonly string WeeklyBackupDay;

        [OutputConstructor]
        private GetBackupPolicySchedulingResult(
            ImmutableArray<Outputs.GetBackupPolicySchedulingBackupSetResult> backupSets,

            bool enabled,

            int maxParallelBackups,

            string randomMaxDelay,

            string scheme,

            string weeklyBackupDay)
        {
            BackupSets = backupSets;
            Enabled = enabled;
            MaxParallelBackups = maxParallelBackups;
            RandomMaxDelay = randomMaxDelay;
            Scheme = scheme;
            WeeklyBackupDay = weeklyBackupDay;
        }
    }
}
