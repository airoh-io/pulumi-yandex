// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Outputs
{

    [OutputType]
    public sealed class GetComputeInstanceGroupInstanceTemplateNetworkInterfaceResult
    {
        /// <summary>
        /// List of DNS records.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecordResult> DnsRecords;
        /// <summary>
        /// Manual set static IP address.
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// Allocate an IPv4 address for the interface. The default value is `true`.
        /// </summary>
        public readonly bool Ipv4;
        /// <summary>
        /// If `true`, allocate an IPv6 address for the interface. The address will be automatically assigned from the specified subnet.
        /// </summary>
        public readonly bool Ipv6;
        /// <summary>
        /// Manual set static IPv6 address.
        /// </summary>
        public readonly string Ipv6Address;
        /// <summary>
        /// List of IPv6 DNS records.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordResult> Ipv6DnsRecords;
        /// <summary>
        /// Flag for using NAT.
        /// </summary>
        public readonly bool Nat;
        /// <summary>
        /// List of NAT DNS records.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecordResult> NatDnsRecords;
        /// <summary>
        /// A public address that can be used to access the internet over NAT. Use `variables` to set.
        /// </summary>
        public readonly string NatIpAddress;
        /// <summary>
        /// The ID of the network.
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// Security group (SG) `IDs` for network interface.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// The ID of the subnets to attach this interface to.
        /// </summary>
        public readonly ImmutableArray<string> SubnetIds;

        [OutputConstructor]
        private GetComputeInstanceGroupInstanceTemplateNetworkInterfaceResult(
            ImmutableArray<Outputs.GetComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecordResult> dnsRecords,

            string ipAddress,

            bool ipv4,

            bool ipv6,

            string ipv6Address,

            ImmutableArray<Outputs.GetComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordResult> ipv6DnsRecords,

            bool nat,

            ImmutableArray<Outputs.GetComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecordResult> natDnsRecords,

            string natIpAddress,

            string networkId,

            ImmutableArray<string> securityGroupIds,

            ImmutableArray<string> subnetIds)
        {
            DnsRecords = dnsRecords;
            IpAddress = ipAddress;
            Ipv4 = ipv4;
            Ipv6 = ipv6;
            Ipv6Address = ipv6Address;
            Ipv6DnsRecords = ipv6DnsRecords;
            Nat = nat;
            NatDnsRecords = natDnsRecords;
            NatIpAddress = natIpAddress;
            NetworkId = networkId;
            SecurityGroupIds = securityGroupIds;
            SubnetIds = subnetIds;
        }
    }
}
