// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Outputs
{

    [OutputType]
    public sealed class GetKubernetesClusterMasterResult
    {
        /// <summary>
        /// PEM-encoded public certificate that is the root of trust for the Kubernetes cluster.
        /// </summary>
        public readonly string ClusterCaCertificate;
        /// <summary>
        /// Number of etcd clusters that will be used for the Kubernetes master.
        /// </summary>
        public readonly int EtcdClusterSize;
        /// <summary>
        /// An IPv4 external network address that is assigned to the master.
        /// </summary>
        public readonly string ExternalV4Address;
        /// <summary>
        /// External endpoint that can be used to access Kubernetes cluster API from the internet (outside of the cloud).
        /// </summary>
        public readonly string ExternalV4Endpoint;
        /// <summary>
        /// An IPv6 external network address that is assigned to the master.
        /// </summary>
        public readonly string ExternalV6Address;
        /// <summary>
        /// External IPv6 endpoint that can be used to access Kubernetes cluster API from the internet (outside of the cloud).
        /// </summary>
        public readonly string ExternalV6Endpoint;
        /// <summary>
        /// An IPv4 internal network address that is assigned to the master.
        /// </summary>
        public readonly string InternalV4Address;
        /// <summary>
        /// Internal endpoint that can be used to connect to the master from cloud networks.
        /// </summary>
        public readonly string InternalV4Endpoint;
        /// <summary>
        /// Maintenance policy for Kubernetes master. If policy is omitted, automatic revision upgrades of the kubernetes master are enabled and could happen at any time. Revision upgrades are performed only within the same minor version, e.g. 1.29. Minor version upgrades (e.g. 1.29-&gt;1.30) should be performed manually.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterMasterMaintenancePolicyResult> MaintenancePolicies;
        /// <summary>
        /// Cluster master's instances locations array (zone and subnet). Cannot be used together with `zonal` or `regional`. Currently, supports either one, for zonal master, or three instances of `master_location`. Can be updated in place. When creating regional cluster (three master instances), its `region` will be evaluated automatically by backend.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterMasterMasterLocationResult> MasterLocations;
        /// <summary>
        /// Master Logging options.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterMasterMasterLoggingResult> MasterLoggings;
        /// <summary>
        /// When `true`, Kubernetes master will have visible ipv4 address.
        /// </summary>
        public readonly bool PublicIp;
        /// <summary>
        /// Initialize parameters for Regional Master (highly available master).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterMasterRegionalResult> Regionals;
        /// <summary>
        /// Scale policy of the master.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterMasterScalePolicyResult> ScalePolicies;
        /// <summary>
        /// The list of security groups applied to resource or their components.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// Version of Kubernetes that will be used for master.
        /// </summary>
        public readonly string Version;
        /// <summary>
        /// Information about cluster version.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterMasterVersionInfoResult> VersionInfos;
        /// <summary>
        /// Initialize parameters for Zonal Master (single node master).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterMasterZonalResult> Zonals;

        [OutputConstructor]
        private GetKubernetesClusterMasterResult(
            string clusterCaCertificate,

            int etcdClusterSize,

            string externalV4Address,

            string externalV4Endpoint,

            string externalV6Address,

            string externalV6Endpoint,

            string internalV4Address,

            string internalV4Endpoint,

            ImmutableArray<Outputs.GetKubernetesClusterMasterMaintenancePolicyResult> maintenancePolicies,

            ImmutableArray<Outputs.GetKubernetesClusterMasterMasterLocationResult> masterLocations,

            ImmutableArray<Outputs.GetKubernetesClusterMasterMasterLoggingResult> masterLoggings,

            bool publicIp,

            ImmutableArray<Outputs.GetKubernetesClusterMasterRegionalResult> regionals,

            ImmutableArray<Outputs.GetKubernetesClusterMasterScalePolicyResult> scalePolicies,

            ImmutableArray<string> securityGroupIds,

            string version,

            ImmutableArray<Outputs.GetKubernetesClusterMasterVersionInfoResult> versionInfos,

            ImmutableArray<Outputs.GetKubernetesClusterMasterZonalResult> zonals)
        {
            ClusterCaCertificate = clusterCaCertificate;
            EtcdClusterSize = etcdClusterSize;
            ExternalV4Address = externalV4Address;
            ExternalV4Endpoint = externalV4Endpoint;
            ExternalV6Address = externalV6Address;
            ExternalV6Endpoint = externalV6Endpoint;
            InternalV4Address = internalV4Address;
            InternalV4Endpoint = internalV4Endpoint;
            MaintenancePolicies = maintenancePolicies;
            MasterLocations = masterLocations;
            MasterLoggings = masterLoggings;
            PublicIp = publicIp;
            Regionals = regionals;
            ScalePolicies = scalePolicies;
            SecurityGroupIds = securityGroupIds;
            Version = version;
            VersionInfos = versionInfos;
            Zonals = zonals;
        }
    }
}
