// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Outputs
{

    [OutputType]
    public sealed class MdbPostgresqlClusterUser
    {
        /// <summary>
        /// The maximum number of connections per user. (Default 50).
        /// </summary>
        public readonly int? ConnLimit;
        /// <summary>
        /// List of the user's grants.
        /// </summary>
        public readonly ImmutableArray<string> Grants;
        /// <summary>
        /// User's ability to login.
        /// </summary>
        public readonly bool? Login;
        /// <summary>
        /// The name of the user.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The password of the user.
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// Set of permissions granted to the user.
        /// </summary>
        public readonly ImmutableArray<Outputs.MdbPostgresqlClusterUserPermission> Permissions;
        /// <summary>
        /// Map of user settings. [Full description](https://yandex.cloud/docs/managed-postgresql/api-ref/grpc/Cluster/create#yandex.cloud.mdb.postgresql.v1.UserSettings).
        /// 
        /// * `default_transaction_isolation` - defines the default isolation level to be set for all new SQL transactions. One of:
        ///   - 1: `read uncommitted`
        ///   - 2: `read committed`
        ///   - 3: `repeatable read`
        ///   - 4: `serializable`
        /// 
        /// * `lock_timeout` - The maximum time (in milliseconds) for any statement to wait for acquiring a lock on an table, index, row or other database object (default 0).
        /// 
        /// * `log_min_duration_statement` - This setting controls logging of the duration of statements. Default -1 disables logging of the duration of statements.
        /// 
        /// * `synchronous_commit` - This setting defines whether DBMS will commit transaction in a synchronous way. One of:
        ///   - 1: `on`
        ///   - 2: `off`
        ///   - 3: `local`
        ///   - 4: `remote write`
        ///   - 5: `remote apply`
        /// 
        /// * `temp_file_limit` - The maximum storage space size (in kilobytes) that a single process can use to create temporary files.
        /// 
        /// * `log_statement` - This setting specifies which SQL statements should be logged (on the user level). One of:
        ///   - 1: `none`
        ///   - 2: `ddl`
        ///   - 3: `mod`
        ///   - 4: `all`
        /// 
        /// * `pool_mode` - Mode that the connection pooler is working in with specified user. One of:
        ///   - 1: `session`
        ///   - 2: `transaction`
        ///   - 3: `statement`
        /// 
        /// * `prepared_statements_pooling` - This setting allows user to use prepared statements with transaction pooling. Boolean.
        /// 
        /// * `catchup_timeout` - The connection pooler setting. It determines the maximum allowed replication lag (in seconds). Pooler will reject connections to the replica with a lag above this threshold. Default value is 0, which disables this feature. Integer.
        /// 
        /// * `wal_sender_timeout` - The maximum time (in milliseconds) to wait for WAL replication. Terminate replication connections that are inactive for longer than this amount of time. Integer.
        /// 
        /// * `idle_in_transaction_session_timeout` - Sets the maximum allowed idle time (in milliseconds) between queries, when in a transaction. Value of 0 (default) disables the timeout. Integer.
        /// 
        /// * `statement_timeout` - The maximum time (in milliseconds) to wait for statement. Value of 0 (default) disables the timeout. Integer.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Settings;

        [OutputConstructor]
        private MdbPostgresqlClusterUser(
            int? connLimit,

            ImmutableArray<string> grants,

            bool? login,

            string name,

            string password,

            ImmutableArray<Outputs.MdbPostgresqlClusterUserPermission> permissions,

            ImmutableDictionary<string, string>? settings)
        {
            ConnLimit = connLimit;
            Grants = grants;
            Login = login;
            Name = name;
            Password = password;
            Permissions = permissions;
            Settings = settings;
        }
    }
}
