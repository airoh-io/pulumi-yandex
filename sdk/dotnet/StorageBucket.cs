// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    /// <summary>
    /// Allows management of [Yandex.Cloud Storage Bucket](https://cloud.yandex.com/docs/storage/concepts/bucket).
    /// 
    /// ## Example Usage
    /// ### Simple Private Bucket
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Yandex.StorageBucket("test", new Yandex.StorageBucketArgs
    ///         {
    ///             Bucket = "tf-test-bucket",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Static Website Hosting
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Yandex.StorageBucket("test", new Yandex.StorageBucketArgs
    ///         {
    ///             Acl = "public-read",
    ///             Bucket = "storage-website-test.hashicorp.com",
    ///             Website = new Yandex.Inputs.StorageBucketWebsiteArgs
    ///             {
    ///                 ErrorDocument = "error.html",
    ///                 IndexDocument = "index.html",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Using ACL policy grants
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Yandex.StorageBucket("test", new Yandex.StorageBucketArgs
    ///         {
    ///             Bucket = "mybucket",
    ///             Grants = 
    ///             {
    ///                 new Yandex.Inputs.StorageBucketGrantArgs
    ///                 {
    ///                     Id = "myuser",
    ///                     Permissions = 
    ///                     {
    ///                         "FULL_CONTROL",
    ///                     },
    ///                     Type = "CanonicalUser",
    ///                 },
    ///                 new Yandex.Inputs.StorageBucketGrantArgs
    ///                 {
    ///                     Permissions = 
    ///                     {
    ///                         "READ",
    ///                         "WRITE",
    ///                     },
    ///                     Type = "Group",
    ///                     Uri = "http://acs.amazonaws.com/groups/global/AllUsers",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Using CORS
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var storageBucket = new Yandex.StorageBucket("storageBucket", new Yandex.StorageBucketArgs
    ///         {
    ///             Acl = "public-read",
    ///             Bucket = "s3-website-test.hashicorp.com",
    ///             CorsRules = 
    ///             {
    ///                 new Yandex.Inputs.StorageBucketCorsRuleArgs
    ///                 {
    ///                     AllowedHeaders = 
    ///                     {
    ///                         "*",
    ///                     },
    ///                     AllowedMethods = 
    ///                     {
    ///                         "PUT",
    ///                         "POST",
    ///                     },
    ///                     AllowedOrigins = 
    ///                     {
    ///                         "https://s3-website-test.hashicorp.com",
    ///                     },
    ///                     ExposeHeaders = 
    ///                     {
    ///                         "ETag",
    ///                     },
    ///                     MaxAgeSeconds = 3000,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Using versioning
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var storageBucket = new Yandex.StorageBucket("storageBucket", new Yandex.StorageBucketArgs
    ///         {
    ///             Acl = "private",
    ///             Bucket = "my-tf-test-bucket",
    ///             Versioning = new Yandex.Inputs.StorageBucketVersioningArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Enable Logging
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var logBucket = new Yandex.StorageBucket("logBucket", new Yandex.StorageBucketArgs
    ///         {
    ///             Bucket = "my-tf-log-bucket",
    ///         });
    ///         var storageBucket = new Yandex.StorageBucket("storageBucket", new Yandex.StorageBucketArgs
    ///         {
    ///             Bucket = "my-tf-test-bucket",
    ///             Acl = "private",
    ///             Loggings = 
    ///             {
    ///                 new Yandex.Inputs.StorageBucketLoggingArgs
    ///                 {
    ///                     TargetBucket = logBucket.Id,
    ///                     TargetPrefix = "log/",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Using object lifecycle
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var bucket = new Yandex.StorageBucket("bucket", new Yandex.StorageBucketArgs
    ///         {
    ///             Acl = "private",
    ///             Bucket = "my-bucket",
    ///             LifecycleRules = 
    ///             {
    ///                 new Yandex.Inputs.StorageBucketLifecycleRuleArgs
    ///                 {
    ///                     Enabled = true,
    ///                     Expiration = new Yandex.Inputs.StorageBucketLifecycleRuleExpirationArgs
    ///                     {
    ///                         Days = 90,
    ///                     },
    ///                     Id = "log",
    ///                     Prefix = "log/",
    ///                     Transitions = 
    ///                     {
    ///                         new Yandex.Inputs.StorageBucketLifecycleRuleTransitionArgs
    ///                         {
    ///                             Days = 30,
    ///                             StorageClass = "COLD",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Yandex.Inputs.StorageBucketLifecycleRuleArgs
    ///                 {
    ///                     Enabled = true,
    ///                     Expiration = new Yandex.Inputs.StorageBucketLifecycleRuleExpirationArgs
    ///                     {
    ///                         Date = "2020-12-21",
    ///                     },
    ///                     Id = "tmp",
    ///                     Prefix = "tmp/",
    ///                 },
    ///             },
    ///         });
    ///         var versioningBucket = new Yandex.StorageBucket("versioningBucket", new Yandex.StorageBucketArgs
    ///         {
    ///             Acl = "private",
    ///             Bucket = "my-versioning-bucket",
    ///             LifecycleRules = 
    ///             {
    ///                 new Yandex.Inputs.StorageBucketLifecycleRuleArgs
    ///                 {
    ///                     Enabled = true,
    ///                     NoncurrentVersionExpiration = new Yandex.Inputs.StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs
    ///                     {
    ///                         Days = 90,
    ///                     },
    ///                     NoncurrentVersionTransitions = 
    ///                     {
    ///                         new Yandex.Inputs.StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs
    ///                         {
    ///                             Days = 30,
    ///                             StorageClass = "COLD",
    ///                         },
    ///                     },
    ///                     Prefix = "config/",
    ///                 },
    ///             },
    ///             Versioning = new Yandex.Inputs.StorageBucketVersioningArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Using SSE
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var key_a = new Yandex.KmsSymmetricKey("key-a", new Yandex.KmsSymmetricKeyArgs
    ///         {
    ///             Description = "description for key",
    ///             DefaultAlgorithm = "AES_128",
    ///             RotationPeriod = "8760h",
    ///         });
    ///         // equal to 1 year
    ///         var test = new Yandex.StorageBucket("test", new Yandex.StorageBucketArgs
    ///         {
    ///             Bucket = "mybucket",
    ///             ServerSideEncryptionConfiguration = new Yandex.Inputs.StorageBucketServerSideEncryptionConfigurationArgs
    ///             {
    ///                 Rule = new Yandex.Inputs.StorageBucketServerSideEncryptionConfigurationRuleArgs
    ///                 {
    ///                     ApplyServerSideEncryptionByDefault = new Yandex.Inputs.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs
    ///                     {
    ///                         KmsMasterKeyId = key_a.Id,
    ///                         SseAlgorithm = "aws:kms",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Bucket Policy
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var storageBucket = new Yandex.StorageBucket("storageBucket", new Yandex.StorageBucketArgs
    ///         {
    ///             Bucket = "my-policy-bucket",
    ///             Policy = @"{
    ///   ""Version"": ""2012-10-17"",
    ///   ""Statement"": [
    ///     {
    ///       ""Effect"": ""Allow"",
    ///       ""Principal"": ""*"",
    ///       ""Action"": ""s3:*"",
    ///       ""Resource"": [
    ///         ""arn:aws:s3:::my-policy-bucket/*"",
    ///         ""arn:aws:s3:::my-policy-bucket""
    ///       ]
    ///     },
    ///     {
    ///       ""Effect"": ""Deny"",
    ///       ""Principal"": ""*"",
    ///       ""Action"": ""s3:PutObject"",
    ///       ""Resource"": [
    ///         ""arn:aws:s3:::my-policy-bucket/*"",
    ///         ""arn:aws:s3:::my-policy-bucket""
    ///       ]
    ///     }
    ///   ]
    /// }
    /// 
    /// ",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### All settings example
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var logBucket = new Yandex.StorageBucket("logBucket", new Yandex.StorageBucketArgs
    ///         {
    ///             Bucket = "my-tf-log-bucket",
    ///             LifecycleRules = 
    ///             {
    ///                 new Yandex.Inputs.StorageBucketLifecycleRuleArgs
    ///                 {
    ///                     Id = "cleanupoldlogs",
    ///                     Enabled = true,
    ///                     Expiration = new Yandex.Inputs.StorageBucketLifecycleRuleExpirationArgs
    ///                     {
    ///                         Days = 365,
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///         var key_a = new Yandex.KmsSymmetricKey("key-a", new Yandex.KmsSymmetricKeyArgs
    ///         {
    ///             Description = "description for key",
    ///             DefaultAlgorithm = "AES_128",
    ///             RotationPeriod = "8760h",
    ///         });
    ///         // equal to 1 year
    ///         var allSettings = new Yandex.StorageBucket("allSettings", new Yandex.StorageBucketArgs
    ///         {
    ///             Bucket = "example-tf-settings-bucket",
    ///             Website = new Yandex.Inputs.StorageBucketWebsiteArgs
    ///             {
    ///                 IndexDocument = "index.html",
    ///                 ErrorDocument = "error.html",
    ///             },
    ///             LifecycleRules = 
    ///             {
    ///                 new Yandex.Inputs.StorageBucketLifecycleRuleArgs
    ///                 {
    ///                     Id = "test",
    ///                     Enabled = true,
    ///                     Prefix = "prefix/",
    ///                     Expiration = new Yandex.Inputs.StorageBucketLifecycleRuleExpirationArgs
    ///                     {
    ///                         Days = 30,
    ///                     },
    ///                 },
    ///                 new Yandex.Inputs.StorageBucketLifecycleRuleArgs
    ///                 {
    ///                     Id = "log",
    ///                     Enabled = true,
    ///                     Prefix = "log/",
    ///                     Transitions = 
    ///                     {
    ///                         new Yandex.Inputs.StorageBucketLifecycleRuleTransitionArgs
    ///                         {
    ///                             Days = 30,
    ///                             StorageClass = "COLD",
    ///                         },
    ///                     },
    ///                     Expiration = new Yandex.Inputs.StorageBucketLifecycleRuleExpirationArgs
    ///                     {
    ///                         Days = 90,
    ///                     },
    ///                 },
    ///                 new Yandex.Inputs.StorageBucketLifecycleRuleArgs
    ///                 {
    ///                     Id = "everything180",
    ///                     Prefix = "",
    ///                     Enabled = true,
    ///                     Expiration = new Yandex.Inputs.StorageBucketLifecycleRuleExpirationArgs
    ///                     {
    ///                         Days = 180,
    ///                     },
    ///                 },
    ///                 new Yandex.Inputs.StorageBucketLifecycleRuleArgs
    ///                 {
    ///                     Id = "cleanupoldversions",
    ///                     Prefix = "config/",
    ///                     Enabled = true,
    ///                     NoncurrentVersionTransitions = 
    ///                     {
    ///                         new Yandex.Inputs.StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs
    ///                         {
    ///                             Days = 30,
    ///                             StorageClass = "COLD",
    ///                         },
    ///                     },
    ///                     NoncurrentVersionExpiration = new Yandex.Inputs.StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs
    ///                     {
    ///                         Days = 90,
    ///                     },
    ///                 },
    ///                 new Yandex.Inputs.StorageBucketLifecycleRuleArgs
    ///                 {
    ///                     Id = "abortmultiparts",
    ///                     Prefix = "",
    ///                     Enabled = true,
    ///                     AbortIncompleteMultipartUploadDays = 7,
    ///                 },
    ///             },
    ///             CorsRules = 
    ///             {
    ///                 new Yandex.Inputs.StorageBucketCorsRuleArgs
    ///                 {
    ///                     AllowedHeaders = 
    ///                     {
    ///                         "*",
    ///                     },
    ///                     AllowedMethods = 
    ///                     {
    ///                         "GET",
    ///                         "PUT",
    ///                     },
    ///                     AllowedOrigins = 
    ///                     {
    ///                         "https://storage-cloud.example.com",
    ///                     },
    ///                     ExposeHeaders = 
    ///                     {
    ///                         "ETag",
    ///                     },
    ///                     MaxAgeSeconds = 3000,
    ///                 },
    ///             },
    ///             Versioning = new Yandex.Inputs.StorageBucketVersioningArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///             ServerSideEncryptionConfiguration = new Yandex.Inputs.StorageBucketServerSideEncryptionConfigurationArgs
    ///             {
    ///                 Rule = new Yandex.Inputs.StorageBucketServerSideEncryptionConfigurationRuleArgs
    ///                 {
    ///                     ApplyServerSideEncryptionByDefault = new Yandex.Inputs.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs
    ///                     {
    ///                         KmsMasterKeyId = key_a.Id,
    ///                         SseAlgorithm = "aws:kms",
    ///                     },
    ///                 },
    ///             },
    ///             Loggings = 
    ///             {
    ///                 new Yandex.Inputs.StorageBucketLoggingArgs
    ///                 {
    ///                     TargetBucket = logBucket.Id,
    ///                     TargetPrefix = "tf-logs/",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Storage bucket can be imported using the `bucket`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import yandex:index/storageBucket:StorageBucket bucket bucket-name
    /// ```
    /// 
    ///  `false` in state. If you've set it to `true` in config, run `terraform apply` to update the value set in state. If you delete this resource before updating the value, objects in the bucket will not be destroyed.
    /// </summary>
    [YandexResourceType("yandex:index/storageBucket:StorageBucket")]
    public partial class StorageBucket : Pulumi.CustomResource
    {
        /// <summary>
        /// The access key to use when applying changes. If omitted, `storage_access_key` specified in provider config is used.
        /// </summary>
        [Output("accessKey")]
        public Output<string?> AccessKey { get; private set; } = null!;

        /// <summary>
        /// The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`. Conflicts with `grant`.
        /// </summary>
        [Output("acl")]
        public Output<string?> Acl { get; private set; } = null!;

        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// The bucket domain name.
        /// </summary>
        [Output("bucketDomainName")]
        public Output<string> BucketDomainName { get; private set; } = null!;

        /// <summary>
        /// Creates a unique bucket name beginning with the specified prefix. Conflicts with `bucket`.
        /// </summary>
        [Output("bucketPrefix")]
        public Output<string?> BucketPrefix { get; private set; } = null!;

        /// <summary>
        /// A rule of [Cross-Origin Resource Sharing](https://cloud.yandex.com/docs/storage/cors/) (documented below).
        /// </summary>
        [Output("corsRules")]
        public Output<ImmutableArray<Outputs.StorageBucketCorsRule>> CorsRules { get; private set; } = null!;

        /// <summary>
        /// A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        /// <summary>
        /// An [ACL policy grant](https://cloud.yandex.com/docs/storage/concepts/acl#permissions-types). Conflicts with `acl`.
        /// </summary>
        [Output("grants")]
        public Output<ImmutableArray<Outputs.StorageBucketGrant>> Grants { get; private set; } = null!;

        /// <summary>
        /// A configuration of [object lifecycle management](https://cloud.yandex.com/docs/storage/concepts/lifecycles) (documented below).
        /// </summary>
        [Output("lifecycleRules")]
        public Output<ImmutableArray<Outputs.StorageBucketLifecycleRule>> LifecycleRules { get; private set; } = null!;

        /// <summary>
        /// A settings of [bucket logging](https://cloud.yandex.ru/docs/storage/concepts/server-logs) (documented below).
        /// </summary>
        [Output("loggings")]
        public Output<ImmutableArray<Outputs.StorageBucketLogging>> Loggings { get; private set; } = null!;

        [Output("policy")]
        public Output<string?> Policy { get; private set; } = null!;

        /// <summary>
        /// The secret key to use when applying changes. If omitted, `storage_secret_key` specified in provider config is used.
        /// </summary>
        [Output("secretKey")]
        public Output<string?> SecretKey { get; private set; } = null!;

        /// <summary>
        /// A configuration of server-side encryption for the bucket (documented below)
        /// </summary>
        [Output("serverSideEncryptionConfiguration")]
        public Output<Outputs.StorageBucketServerSideEncryptionConfiguration?> ServerSideEncryptionConfiguration { get; private set; } = null!;

        /// <summary>
        /// A state of [versioning](https://cloud.yandex.ru/docs/storage/concepts/versioning) (documented below)
        /// </summary>
        [Output("versioning")]
        public Output<Outputs.StorageBucketVersioning> Versioning { get; private set; } = null!;

        /// <summary>
        /// A [website object](https://cloud.yandex.ru/docs/storage/concepts/hosting) (documented below).
        /// </summary>
        [Output("website")]
        public Output<Outputs.StorageBucketWebsite?> Website { get; private set; } = null!;

        /// <summary>
        /// The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        /// </summary>
        [Output("websiteDomain")]
        public Output<string> WebsiteDomain { get; private set; } = null!;

        /// <summary>
        /// The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        /// </summary>
        [Output("websiteEndpoint")]
        public Output<string> WebsiteEndpoint { get; private set; } = null!;


        /// <summary>
        /// Create a StorageBucket resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StorageBucket(string name, StorageBucketArgs? args = null, CustomResourceOptions? options = null)
            : base("yandex:index/storageBucket:StorageBucket", name, args ?? new StorageBucketArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StorageBucket(string name, Input<string> id, StorageBucketState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/storageBucket:StorageBucket", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StorageBucket resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StorageBucket Get(string name, Input<string> id, StorageBucketState? state = null, CustomResourceOptions? options = null)
        {
            return new StorageBucket(name, id, state, options);
        }
    }

    public sealed class StorageBucketArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access key to use when applying changes. If omitted, `storage_access_key` specified in provider config is used.
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`. Conflicts with `grant`.
        /// </summary>
        [Input("acl")]
        public Input<string>? Acl { get; set; }

        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// Creates a unique bucket name beginning with the specified prefix. Conflicts with `bucket`.
        /// </summary>
        [Input("bucketPrefix")]
        public Input<string>? BucketPrefix { get; set; }

        [Input("corsRules")]
        private InputList<Inputs.StorageBucketCorsRuleArgs>? _corsRules;

        /// <summary>
        /// A rule of [Cross-Origin Resource Sharing](https://cloud.yandex.com/docs/storage/cors/) (documented below).
        /// </summary>
        public InputList<Inputs.StorageBucketCorsRuleArgs> CorsRules
        {
            get => _corsRules ?? (_corsRules = new InputList<Inputs.StorageBucketCorsRuleArgs>());
            set => _corsRules = value;
        }

        /// <summary>
        /// A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("grants")]
        private InputList<Inputs.StorageBucketGrantArgs>? _grants;

        /// <summary>
        /// An [ACL policy grant](https://cloud.yandex.com/docs/storage/concepts/acl#permissions-types). Conflicts with `acl`.
        /// </summary>
        public InputList<Inputs.StorageBucketGrantArgs> Grants
        {
            get => _grants ?? (_grants = new InputList<Inputs.StorageBucketGrantArgs>());
            set => _grants = value;
        }

        [Input("lifecycleRules")]
        private InputList<Inputs.StorageBucketLifecycleRuleArgs>? _lifecycleRules;

        /// <summary>
        /// A configuration of [object lifecycle management](https://cloud.yandex.com/docs/storage/concepts/lifecycles) (documented below).
        /// </summary>
        public InputList<Inputs.StorageBucketLifecycleRuleArgs> LifecycleRules
        {
            get => _lifecycleRules ?? (_lifecycleRules = new InputList<Inputs.StorageBucketLifecycleRuleArgs>());
            set => _lifecycleRules = value;
        }

        [Input("loggings")]
        private InputList<Inputs.StorageBucketLoggingArgs>? _loggings;

        /// <summary>
        /// A settings of [bucket logging](https://cloud.yandex.ru/docs/storage/concepts/server-logs) (documented below).
        /// </summary>
        public InputList<Inputs.StorageBucketLoggingArgs> Loggings
        {
            get => _loggings ?? (_loggings = new InputList<Inputs.StorageBucketLoggingArgs>());
            set => _loggings = value;
        }

        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// The secret key to use when applying changes. If omitted, `storage_secret_key` specified in provider config is used.
        /// </summary>
        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        /// <summary>
        /// A configuration of server-side encryption for the bucket (documented below)
        /// </summary>
        [Input("serverSideEncryptionConfiguration")]
        public Input<Inputs.StorageBucketServerSideEncryptionConfigurationArgs>? ServerSideEncryptionConfiguration { get; set; }

        /// <summary>
        /// A state of [versioning](https://cloud.yandex.ru/docs/storage/concepts/versioning) (documented below)
        /// </summary>
        [Input("versioning")]
        public Input<Inputs.StorageBucketVersioningArgs>? Versioning { get; set; }

        /// <summary>
        /// A [website object](https://cloud.yandex.ru/docs/storage/concepts/hosting) (documented below).
        /// </summary>
        [Input("website")]
        public Input<Inputs.StorageBucketWebsiteArgs>? Website { get; set; }

        /// <summary>
        /// The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        /// </summary>
        [Input("websiteDomain")]
        public Input<string>? WebsiteDomain { get; set; }

        /// <summary>
        /// The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        /// </summary>
        [Input("websiteEndpoint")]
        public Input<string>? WebsiteEndpoint { get; set; }

        public StorageBucketArgs()
        {
        }
    }

    public sealed class StorageBucketState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access key to use when applying changes. If omitted, `storage_access_key` specified in provider config is used.
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`. Conflicts with `grant`.
        /// </summary>
        [Input("acl")]
        public Input<string>? Acl { get; set; }

        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// The bucket domain name.
        /// </summary>
        [Input("bucketDomainName")]
        public Input<string>? BucketDomainName { get; set; }

        /// <summary>
        /// Creates a unique bucket name beginning with the specified prefix. Conflicts with `bucket`.
        /// </summary>
        [Input("bucketPrefix")]
        public Input<string>? BucketPrefix { get; set; }

        [Input("corsRules")]
        private InputList<Inputs.StorageBucketCorsRuleGetArgs>? _corsRules;

        /// <summary>
        /// A rule of [Cross-Origin Resource Sharing](https://cloud.yandex.com/docs/storage/cors/) (documented below).
        /// </summary>
        public InputList<Inputs.StorageBucketCorsRuleGetArgs> CorsRules
        {
            get => _corsRules ?? (_corsRules = new InputList<Inputs.StorageBucketCorsRuleGetArgs>());
            set => _corsRules = value;
        }

        /// <summary>
        /// A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("grants")]
        private InputList<Inputs.StorageBucketGrantGetArgs>? _grants;

        /// <summary>
        /// An [ACL policy grant](https://cloud.yandex.com/docs/storage/concepts/acl#permissions-types). Conflicts with `acl`.
        /// </summary>
        public InputList<Inputs.StorageBucketGrantGetArgs> Grants
        {
            get => _grants ?? (_grants = new InputList<Inputs.StorageBucketGrantGetArgs>());
            set => _grants = value;
        }

        [Input("lifecycleRules")]
        private InputList<Inputs.StorageBucketLifecycleRuleGetArgs>? _lifecycleRules;

        /// <summary>
        /// A configuration of [object lifecycle management](https://cloud.yandex.com/docs/storage/concepts/lifecycles) (documented below).
        /// </summary>
        public InputList<Inputs.StorageBucketLifecycleRuleGetArgs> LifecycleRules
        {
            get => _lifecycleRules ?? (_lifecycleRules = new InputList<Inputs.StorageBucketLifecycleRuleGetArgs>());
            set => _lifecycleRules = value;
        }

        [Input("loggings")]
        private InputList<Inputs.StorageBucketLoggingGetArgs>? _loggings;

        /// <summary>
        /// A settings of [bucket logging](https://cloud.yandex.ru/docs/storage/concepts/server-logs) (documented below).
        /// </summary>
        public InputList<Inputs.StorageBucketLoggingGetArgs> Loggings
        {
            get => _loggings ?? (_loggings = new InputList<Inputs.StorageBucketLoggingGetArgs>());
            set => _loggings = value;
        }

        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// The secret key to use when applying changes. If omitted, `storage_secret_key` specified in provider config is used.
        /// </summary>
        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        /// <summary>
        /// A configuration of server-side encryption for the bucket (documented below)
        /// </summary>
        [Input("serverSideEncryptionConfiguration")]
        public Input<Inputs.StorageBucketServerSideEncryptionConfigurationGetArgs>? ServerSideEncryptionConfiguration { get; set; }

        /// <summary>
        /// A state of [versioning](https://cloud.yandex.ru/docs/storage/concepts/versioning) (documented below)
        /// </summary>
        [Input("versioning")]
        public Input<Inputs.StorageBucketVersioningGetArgs>? Versioning { get; set; }

        /// <summary>
        /// A [website object](https://cloud.yandex.ru/docs/storage/concepts/hosting) (documented below).
        /// </summary>
        [Input("website")]
        public Input<Inputs.StorageBucketWebsiteGetArgs>? Website { get; set; }

        /// <summary>
        /// The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        /// </summary>
        [Input("websiteDomain")]
        public Input<string>? WebsiteDomain { get; set; }

        /// <summary>
        /// The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        /// </summary>
        [Input("websiteEndpoint")]
        public Input<string>? WebsiteEndpoint { get; set; }

        public StorageBucketState()
        {
        }
    }
}
