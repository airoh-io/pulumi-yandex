// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a backend group in the specified folder and adds the specified backends to it. For more information, see [the official documentation](https://yandex.cloud/docs/application-load-balancer/concepts/backend-group).
//
// > Only one type of backends `httpBackend` or `grpcBackend` or `streamBackend` should be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a new ALB Backend Group.
//			_, err := yandex.NewAlbBackendGroup(ctx, "myAlbBg", &yandex.AlbBackendGroupArgs{
//				HttpBackends: yandex.AlbBackendGroupHttpBackendArray{
//					&yandex.AlbBackendGroupHttpBackendArgs{
//						Healthcheck: &yandex.AlbBackendGroupHttpBackendHealthcheckArgs{
//							HttpHealthcheck: &yandex.AlbBackendGroupHttpBackendHealthcheckHttpHealthcheckArgs{
//								Path: pulumi.String("/"),
//							},
//							Interval: pulumi.String("1s"),
//							Timeout:  pulumi.String("1s"),
//						},
//						Http2: pulumi.Bool(true),
//						LoadBalancingConfig: &yandex.AlbBackendGroupHttpBackendLoadBalancingConfigArgs{
//							PanicThreshold: pulumi.Int(50),
//						},
//						Name: pulumi.String("test-http-backend"),
//						Port: pulumi.Int(8080),
//						TargetGroupIds: pulumi.StringArray{
//							yandex_alb_target_group.TestTargetGroup.Id,
//						},
//						Tls: &yandex.AlbBackendGroupHttpBackendTlsArgs{
//							Sni: pulumi.String("backend-domain.internal"),
//						},
//						Weight: pulumi.Int(1),
//					},
//				},
//				SessionAffinity: &yandex.AlbBackendGroupSessionAffinityArgs{
//					Connection: &yandex.AlbBackendGroupSessionAffinityConnectionArgs{
//						SourceIp: pulumi.Bool("127.0.0.1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
//
// bash
//
// ```sh
// $ pulumi import yandex:index/albBackendGroup:AlbBackendGroup <resource Name> <resource ID>
// ```
//
// ```sh
// $ pulumi import yandex:index/albBackendGroup:AlbBackendGroup my_alb_bg ds7io**********9bike
// ```
type AlbBackendGroup struct {
	pulumi.CustomResourceState

	// The creation timestamp of the resource.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The resource description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// gRPC backend specification that will be used by the ALB Backend Group.
	GrpcBackends AlbBackendGroupGrpcBackendArrayOutput `pulumi:"grpcBackends"`
	// HTTP backend specification that will be used by the ALB Backend Group.
	HttpBackends AlbBackendGroupHttpBackendArrayOutput `pulumi:"httpBackends"`
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Session affinity mode determines how incoming requests are grouped into one session.
	//
	// > Only one type(`connection` or `cookie` or `header`) of session affinity should be specified.
	SessionAffinity AlbBackendGroupSessionAffinityPtrOutput `pulumi:"sessionAffinity"`
	// Stream backend specification that will be used by the ALB Backend Group.
	StreamBackends AlbBackendGroupStreamBackendArrayOutput `pulumi:"streamBackends"`
}

// NewAlbBackendGroup registers a new resource with the given unique name, arguments, and options.
func NewAlbBackendGroup(ctx *pulumi.Context,
	name string, args *AlbBackendGroupArgs, opts ...pulumi.ResourceOption) (*AlbBackendGroup, error) {
	if args == nil {
		args = &AlbBackendGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AlbBackendGroup
	err := ctx.RegisterResource("yandex:index/albBackendGroup:AlbBackendGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlbBackendGroup gets an existing AlbBackendGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlbBackendGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlbBackendGroupState, opts ...pulumi.ResourceOption) (*AlbBackendGroup, error) {
	var resource AlbBackendGroup
	err := ctx.ReadResource("yandex:index/albBackendGroup:AlbBackendGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlbBackendGroup resources.
type albBackendGroupState struct {
	// The creation timestamp of the resource.
	CreatedAt *string `pulumi:"createdAt"`
	// The resource description.
	Description *string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// gRPC backend specification that will be used by the ALB Backend Group.
	GrpcBackends []AlbBackendGroupGrpcBackend `pulumi:"grpcBackends"`
	// HTTP backend specification that will be used by the ALB Backend Group.
	HttpBackends []AlbBackendGroupHttpBackend `pulumi:"httpBackends"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// Session affinity mode determines how incoming requests are grouped into one session.
	//
	// > Only one type(`connection` or `cookie` or `header`) of session affinity should be specified.
	SessionAffinity *AlbBackendGroupSessionAffinity `pulumi:"sessionAffinity"`
	// Stream backend specification that will be used by the ALB Backend Group.
	StreamBackends []AlbBackendGroupStreamBackend `pulumi:"streamBackends"`
}

type AlbBackendGroupState struct {
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// gRPC backend specification that will be used by the ALB Backend Group.
	GrpcBackends AlbBackendGroupGrpcBackendArrayInput
	// HTTP backend specification that will be used by the ALB Backend Group.
	HttpBackends AlbBackendGroupHttpBackendArrayInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// The resource name.
	Name pulumi.StringPtrInput
	// Session affinity mode determines how incoming requests are grouped into one session.
	//
	// > Only one type(`connection` or `cookie` or `header`) of session affinity should be specified.
	SessionAffinity AlbBackendGroupSessionAffinityPtrInput
	// Stream backend specification that will be used by the ALB Backend Group.
	StreamBackends AlbBackendGroupStreamBackendArrayInput
}

func (AlbBackendGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*albBackendGroupState)(nil)).Elem()
}

type albBackendGroupArgs struct {
	// The resource description.
	Description *string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// gRPC backend specification that will be used by the ALB Backend Group.
	GrpcBackends []AlbBackendGroupGrpcBackend `pulumi:"grpcBackends"`
	// HTTP backend specification that will be used by the ALB Backend Group.
	HttpBackends []AlbBackendGroupHttpBackend `pulumi:"httpBackends"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// Session affinity mode determines how incoming requests are grouped into one session.
	//
	// > Only one type(`connection` or `cookie` or `header`) of session affinity should be specified.
	SessionAffinity *AlbBackendGroupSessionAffinity `pulumi:"sessionAffinity"`
	// Stream backend specification that will be used by the ALB Backend Group.
	StreamBackends []AlbBackendGroupStreamBackend `pulumi:"streamBackends"`
}

// The set of arguments for constructing a AlbBackendGroup resource.
type AlbBackendGroupArgs struct {
	// The resource description.
	Description pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// gRPC backend specification that will be used by the ALB Backend Group.
	GrpcBackends AlbBackendGroupGrpcBackendArrayInput
	// HTTP backend specification that will be used by the ALB Backend Group.
	HttpBackends AlbBackendGroupHttpBackendArrayInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// The resource name.
	Name pulumi.StringPtrInput
	// Session affinity mode determines how incoming requests are grouped into one session.
	//
	// > Only one type(`connection` or `cookie` or `header`) of session affinity should be specified.
	SessionAffinity AlbBackendGroupSessionAffinityPtrInput
	// Stream backend specification that will be used by the ALB Backend Group.
	StreamBackends AlbBackendGroupStreamBackendArrayInput
}

func (AlbBackendGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*albBackendGroupArgs)(nil)).Elem()
}

type AlbBackendGroupInput interface {
	pulumi.Input

	ToAlbBackendGroupOutput() AlbBackendGroupOutput
	ToAlbBackendGroupOutputWithContext(ctx context.Context) AlbBackendGroupOutput
}

func (*AlbBackendGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AlbBackendGroup)(nil)).Elem()
}

func (i *AlbBackendGroup) ToAlbBackendGroupOutput() AlbBackendGroupOutput {
	return i.ToAlbBackendGroupOutputWithContext(context.Background())
}

func (i *AlbBackendGroup) ToAlbBackendGroupOutputWithContext(ctx context.Context) AlbBackendGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbBackendGroupOutput)
}

// AlbBackendGroupArrayInput is an input type that accepts AlbBackendGroupArray and AlbBackendGroupArrayOutput values.
// You can construct a concrete instance of `AlbBackendGroupArrayInput` via:
//
//	AlbBackendGroupArray{ AlbBackendGroupArgs{...} }
type AlbBackendGroupArrayInput interface {
	pulumi.Input

	ToAlbBackendGroupArrayOutput() AlbBackendGroupArrayOutput
	ToAlbBackendGroupArrayOutputWithContext(context.Context) AlbBackendGroupArrayOutput
}

type AlbBackendGroupArray []AlbBackendGroupInput

func (AlbBackendGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlbBackendGroup)(nil)).Elem()
}

func (i AlbBackendGroupArray) ToAlbBackendGroupArrayOutput() AlbBackendGroupArrayOutput {
	return i.ToAlbBackendGroupArrayOutputWithContext(context.Background())
}

func (i AlbBackendGroupArray) ToAlbBackendGroupArrayOutputWithContext(ctx context.Context) AlbBackendGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbBackendGroupArrayOutput)
}

// AlbBackendGroupMapInput is an input type that accepts AlbBackendGroupMap and AlbBackendGroupMapOutput values.
// You can construct a concrete instance of `AlbBackendGroupMapInput` via:
//
//	AlbBackendGroupMap{ "key": AlbBackendGroupArgs{...} }
type AlbBackendGroupMapInput interface {
	pulumi.Input

	ToAlbBackendGroupMapOutput() AlbBackendGroupMapOutput
	ToAlbBackendGroupMapOutputWithContext(context.Context) AlbBackendGroupMapOutput
}

type AlbBackendGroupMap map[string]AlbBackendGroupInput

func (AlbBackendGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlbBackendGroup)(nil)).Elem()
}

func (i AlbBackendGroupMap) ToAlbBackendGroupMapOutput() AlbBackendGroupMapOutput {
	return i.ToAlbBackendGroupMapOutputWithContext(context.Background())
}

func (i AlbBackendGroupMap) ToAlbBackendGroupMapOutputWithContext(ctx context.Context) AlbBackendGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbBackendGroupMapOutput)
}

type AlbBackendGroupOutput struct{ *pulumi.OutputState }

func (AlbBackendGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlbBackendGroup)(nil)).Elem()
}

func (o AlbBackendGroupOutput) ToAlbBackendGroupOutput() AlbBackendGroupOutput {
	return o
}

func (o AlbBackendGroupOutput) ToAlbBackendGroupOutputWithContext(ctx context.Context) AlbBackendGroupOutput {
	return o
}

// The creation timestamp of the resource.
func (o AlbBackendGroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AlbBackendGroup) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The resource description.
func (o AlbBackendGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlbBackendGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o AlbBackendGroupOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *AlbBackendGroup) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// gRPC backend specification that will be used by the ALB Backend Group.
func (o AlbBackendGroupOutput) GrpcBackends() AlbBackendGroupGrpcBackendArrayOutput {
	return o.ApplyT(func(v *AlbBackendGroup) AlbBackendGroupGrpcBackendArrayOutput { return v.GrpcBackends }).(AlbBackendGroupGrpcBackendArrayOutput)
}

// HTTP backend specification that will be used by the ALB Backend Group.
func (o AlbBackendGroupOutput) HttpBackends() AlbBackendGroupHttpBackendArrayOutput {
	return o.ApplyT(func(v *AlbBackendGroup) AlbBackendGroupHttpBackendArrayOutput { return v.HttpBackends }).(AlbBackendGroupHttpBackendArrayOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o AlbBackendGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlbBackendGroup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name.
func (o AlbBackendGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AlbBackendGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Session affinity mode determines how incoming requests are grouped into one session.
//
// > Only one type(`connection` or `cookie` or `header`) of session affinity should be specified.
func (o AlbBackendGroupOutput) SessionAffinity() AlbBackendGroupSessionAffinityPtrOutput {
	return o.ApplyT(func(v *AlbBackendGroup) AlbBackendGroupSessionAffinityPtrOutput { return v.SessionAffinity }).(AlbBackendGroupSessionAffinityPtrOutput)
}

// Stream backend specification that will be used by the ALB Backend Group.
func (o AlbBackendGroupOutput) StreamBackends() AlbBackendGroupStreamBackendArrayOutput {
	return o.ApplyT(func(v *AlbBackendGroup) AlbBackendGroupStreamBackendArrayOutput { return v.StreamBackends }).(AlbBackendGroupStreamBackendArrayOutput)
}

type AlbBackendGroupArrayOutput struct{ *pulumi.OutputState }

func (AlbBackendGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlbBackendGroup)(nil)).Elem()
}

func (o AlbBackendGroupArrayOutput) ToAlbBackendGroupArrayOutput() AlbBackendGroupArrayOutput {
	return o
}

func (o AlbBackendGroupArrayOutput) ToAlbBackendGroupArrayOutputWithContext(ctx context.Context) AlbBackendGroupArrayOutput {
	return o
}

func (o AlbBackendGroupArrayOutput) Index(i pulumi.IntInput) AlbBackendGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlbBackendGroup {
		return vs[0].([]*AlbBackendGroup)[vs[1].(int)]
	}).(AlbBackendGroupOutput)
}

type AlbBackendGroupMapOutput struct{ *pulumi.OutputState }

func (AlbBackendGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlbBackendGroup)(nil)).Elem()
}

func (o AlbBackendGroupMapOutput) ToAlbBackendGroupMapOutput() AlbBackendGroupMapOutput {
	return o
}

func (o AlbBackendGroupMapOutput) ToAlbBackendGroupMapOutputWithContext(ctx context.Context) AlbBackendGroupMapOutput {
	return o
}

func (o AlbBackendGroupMapOutput) MapIndex(k pulumi.StringInput) AlbBackendGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlbBackendGroup {
		return vs[0].(map[string]*AlbBackendGroup)[vs[1].(string)]
	}).(AlbBackendGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlbBackendGroupInput)(nil)).Elem(), &AlbBackendGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlbBackendGroupArrayInput)(nil)).Elem(), AlbBackendGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlbBackendGroupMapInput)(nil)).Elem(), AlbBackendGroupMap{})
	pulumi.RegisterOutputType(AlbBackendGroupOutput{})
	pulumi.RegisterOutputType(AlbBackendGroupArrayOutput{})
	pulumi.RegisterOutputType(AlbBackendGroupMapOutput{})
}
