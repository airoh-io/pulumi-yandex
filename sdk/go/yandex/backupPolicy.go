// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows management of [Yandex Cloud Backup Policy](https://yandex.cloud/docs/backup/concepts/policy).
//
// > Cloud Backup Provider must be activated in order to manipulate with policies. Active it either by UI Console or by `yc` command.
//
// ## Defined types
//
// ### intervalType
//
//  A string type, that accepts values in the format of: `number` + `time type`, where `time type` might be:
// * `s` — seconds
// * `m` — minutes
// * `h` — hours
// * `d` — days
// * `w` — weekdays
// * `M` — months
//
// Example of interval value: `5m`, `10d`, `2M`, `5w`
//
// ### dayType
//
// A string type, that accepts the following values: `ALWAYS_INCREMENTAL`, `ALWAYS_FULL`, `WEEKLY_FULL_DAILY_INCREMENTAL`, `WEEKLY_INCREMENTAL`.
//
// ### backupSetType
//
// `TYPE_AUTO`, `TYPE_FULL`, `TYPE_INCREMENTAL`, `TYPE_DIFFERENTIAL`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a new basic Cloud Backup Policy
//			_, err := yandex.NewBackupPolicy(ctx, "basicPolicy", &yandex.BackupPolicyArgs{
//				Reattempts: &yandex.BackupPolicyReattemptsArgs{},
//				Retention: &yandex.BackupPolicyRetentionArgs{
//					AfterBackup: pulumi.Bool(false),
//				},
//				Scheduling: &yandex.BackupPolicySchedulingArgs{
//					BackupSets: yandex.BackupPolicySchedulingBackupSetArray{
//						&yandex.BackupPolicySchedulingBackupSetArgs{
//							ExecuteByInterval: pulumi.Int(86400),
//						},
//					},
//					Enabled: pulumi.Bool(false),
//				},
//				VmSnapshotReattempts: &yandex.BackupPolicyVmSnapshotReattemptsArgs{},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a new full Cloud Backup Policy
//			_, err := yandex.NewBackupPolicy(ctx, "myPolicy", &yandex.BackupPolicyArgs{
//				ArchiveName:                    pulumi.String("[Machine Name]-[Plan ID]-[Unique ID]a"),
//				Cbt:                            pulumi.String("USE_IF_ENABLED"),
//				Compression:                    pulumi.String("NORMAL"),
//				FastBackupEnabled:              pulumi.Bool(true),
//				Format:                         pulumi.String("AUTO"),
//				MultiVolumeSnapshottingEnabled: pulumi.Bool(true),
//				PerformanceWindowEnabled:       pulumi.Bool(true),
//				PreserveFileSecuritySettings:   pulumi.Bool(true),
//				QuiesceSnapshottingEnabled:     pulumi.Bool(true),
//				Reattempts: &yandex.BackupPolicyReattemptsArgs{
//					Enabled:     pulumi.Bool(true),
//					Interval:    pulumi.String("1m"),
//					MaxAttempts: pulumi.Int(10),
//				},
//				Retention: &yandex.BackupPolicyRetentionArgs{
//					AfterBackup: pulumi.Bool(false),
//					Rules: yandex.BackupPolicyRetentionRuleArray{
//						&yandex.BackupPolicyRetentionRuleArgs{
//							MaxAge:       pulumi.String("365d"),
//							RepeatPeriod: []interface{}{},
//						},
//					},
//				},
//				Scheduling: &yandex.BackupPolicySchedulingArgs{
//					BackupSets: yandex.BackupPolicySchedulingBackupSetArray{
//						&yandex.BackupPolicySchedulingBackupSetArgs{
//							ExecuteByTime: []map[string]interface{}{
//								map[string]interface{}{
//									"includeLastDayOfMonth": true,
//									"monthdays":             []interface{}{},
//									"months": []float64{
//										1,
//										2,
//										3,
//										4,
//										5,
//										6,
//										7,
//										8,
//										9,
//										10,
//										11,
//										12,
//									},
//									"repeatAt": []string{
//										"04:10",
//									},
//									"repeatEvery": "30m",
//									"type":        "MONTHLY",
//									"weekdays":    []interface{}{},
//								},
//							},
//						},
//					},
//					Enabled:            pulumi.Bool(false),
//					MaxParallelBackups: pulumi.Int(0),
//					RandomMaxDelay:     pulumi.String("30m"),
//					Scheme:             pulumi.String("ALWAYS_INCREMENTAL"),
//					WeeklyBackupDay:    pulumi.String("MONDAY"),
//				},
//				SilentModeEnabled: pulumi.Bool(true),
//				SplittingBytes:    pulumi.String("9223372036854775807"),
//				VmSnapshotReattempts: &yandex.BackupPolicyVmSnapshotReattemptsArgs{
//					Enabled:     pulumi.Bool(true),
//					Interval:    pulumi.String("1m"),
//					MaxAttempts: pulumi.Int(10),
//				},
//				VssProvider: pulumi.String("NATIVE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
//
// bash
//
// ```sh
// $ pulumi import yandex:index/backupPolicy:BackupPolicy <resource Name> <Resource Id>
// ```
//
// ```sh
// $ pulumi import yandex:index/backupPolicy:BackupPolicy my_backup_policy ...
// ```
type BackupPolicy struct {
	pulumi.CustomResourceState

	// The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
	ArchiveName pulumi.StringPtrOutput `pulumi:"archiveName"`
	// Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`. Default `DO_NOT_USE`.
	Cbt pulumi.StringPtrOutput `pulumi:"cbt"`
	// Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
	Compression pulumi.StringPtrOutput `pulumi:"compression"`
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// If this field is true, it means that the policy is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are compared to those stored in the backup.
	FastBackupEnabled pulumi.BoolPtrOutput `pulumi:"fastBackupEnabled"`
	// File filters to specify masks of files to backup or to exclude of backuping.
	FileFilters BackupPolicyFileFiltersPtrOutput `pulumi:"fileFilters"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`, `VERSION_11`, `VERSION_12`.
	Format pulumi.StringPtrOutput `pulumi:"format"`
	// LVM will be used to create the volume snapshot. If LVM fails to create a snapshot (for example, because there is not enough free space), the software will create the snapshot itself.
	LvmSnapshottingEnabled pulumi.BoolPtrOutput `pulumi:"lvmSnapshottingEnabled"`
	// If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
	MultiVolumeSnapshottingEnabled pulumi.BoolPtrOutput `pulumi:"multiVolumeSnapshottingEnabled"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Time windows for performance limitations of backup. Default `false`.
	PerformanceWindowEnabled pulumi.BoolPtrOutput `pulumi:"performanceWindowEnabled"`
	// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
	//
	// Deprecated: This setting is depricated and will be removed in future versions. You can safely delete it.
	PreserveFileSecuritySettings pulumi.BoolPtrOutput `pulumi:"preserveFileSecuritySettings"`
	// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
	//
	// Deprecated: This setting is depricated and will be removed in future versions. You can safely delete it.
	QuiesceSnapshottingEnabled pulumi.BoolPtrOutput `pulumi:"quiesceSnapshottingEnabled"`
	// Amount of reattempts that should be performed while trying to make backup at the host.
	Reattempts BackupPolicyReattemptsOutput `pulumi:"reattempts"`
	// Retention policy for backups. Allows to setup backups lifecycle.
	Retention BackupPolicyRetentionOutput `pulumi:"retention"`
	// Schedule settings for creating backups on the host.
	Scheduling BackupPolicySchedulingOutput `pulumi:"scheduling"`
	// A sector-by-sector backup of a disk or volume creates a backup copy of all sectors of the disk or volume, including those that do not contain data. Therefore, the size of such a backup copy will be equal to the size of the original disk or volume.
	SectorBySector pulumi.BoolPtrOutput `pulumi:"sectorBySector"`
	// If true, a user interaction will be avoided when possible. Default `true`.
	SilentModeEnabled pulumi.BoolPtrOutput `pulumi:"silentModeEnabled"`
	// Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
	SplittingBytes pulumi.StringPtrOutput `pulumi:"splittingBytes"`
	// The update timestamp of the resource.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Validation is a time-consuming process, even with incremental or differential backups of small amounts of data. This is because not only the data physically contained in the backup copy is verified, but all data restored when it is selected. This option requires access to previously created backup copies.
	ValidationEnabled pulumi.BoolPtrOutput `pulumi:"validationEnabled"`
	// Amount of reattempts that should be performed while trying to make snapshot.
	VmSnapshotReattempts BackupPolicyVmSnapshotReattemptsOutput `pulumi:"vmSnapshotReattempts"`
	// Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
	VssProvider pulumi.StringPtrOutput `pulumi:"vssProvider"`
}

// NewBackupPolicy registers a new resource with the given unique name, arguments, and options.
func NewBackupPolicy(ctx *pulumi.Context,
	name string, args *BackupPolicyArgs, opts ...pulumi.ResourceOption) (*BackupPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Reattempts == nil {
		return nil, errors.New("invalid value for required argument 'Reattempts'")
	}
	if args.Retention == nil {
		return nil, errors.New("invalid value for required argument 'Retention'")
	}
	if args.Scheduling == nil {
		return nil, errors.New("invalid value for required argument 'Scheduling'")
	}
	if args.VmSnapshotReattempts == nil {
		return nil, errors.New("invalid value for required argument 'VmSnapshotReattempts'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupPolicy
	err := ctx.RegisterResource("yandex:index/backupPolicy:BackupPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupPolicy gets an existing BackupPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupPolicyState, opts ...pulumi.ResourceOption) (*BackupPolicy, error) {
	var resource BackupPolicy
	err := ctx.ReadResource("yandex:index/backupPolicy:BackupPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupPolicy resources.
type backupPolicyState struct {
	// The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
	ArchiveName *string `pulumi:"archiveName"`
	// Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`. Default `DO_NOT_USE`.
	Cbt *string `pulumi:"cbt"`
	// Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
	Compression *string `pulumi:"compression"`
	// The creation timestamp of the resource.
	CreatedAt *string `pulumi:"createdAt"`
	// If this field is true, it means that the policy is enabled.
	Enabled *bool `pulumi:"enabled"`
	// If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are compared to those stored in the backup.
	FastBackupEnabled *bool `pulumi:"fastBackupEnabled"`
	// File filters to specify masks of files to backup or to exclude of backuping.
	FileFilters *BackupPolicyFileFilters `pulumi:"fileFilters"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`, `VERSION_11`, `VERSION_12`.
	Format *string `pulumi:"format"`
	// LVM will be used to create the volume snapshot. If LVM fails to create a snapshot (for example, because there is not enough free space), the software will create the snapshot itself.
	LvmSnapshottingEnabled *bool `pulumi:"lvmSnapshottingEnabled"`
	// If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
	MultiVolumeSnapshottingEnabled *bool `pulumi:"multiVolumeSnapshottingEnabled"`
	// The resource name.
	Name *string `pulumi:"name"`
	// Time windows for performance limitations of backup. Default `false`.
	PerformanceWindowEnabled *bool `pulumi:"performanceWindowEnabled"`
	// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
	//
	// Deprecated: This setting is depricated and will be removed in future versions. You can safely delete it.
	PreserveFileSecuritySettings *bool `pulumi:"preserveFileSecuritySettings"`
	// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
	//
	// Deprecated: This setting is depricated and will be removed in future versions. You can safely delete it.
	QuiesceSnapshottingEnabled *bool `pulumi:"quiesceSnapshottingEnabled"`
	// Amount of reattempts that should be performed while trying to make backup at the host.
	Reattempts *BackupPolicyReattempts `pulumi:"reattempts"`
	// Retention policy for backups. Allows to setup backups lifecycle.
	Retention *BackupPolicyRetention `pulumi:"retention"`
	// Schedule settings for creating backups on the host.
	Scheduling *BackupPolicyScheduling `pulumi:"scheduling"`
	// A sector-by-sector backup of a disk or volume creates a backup copy of all sectors of the disk or volume, including those that do not contain data. Therefore, the size of such a backup copy will be equal to the size of the original disk or volume.
	SectorBySector *bool `pulumi:"sectorBySector"`
	// If true, a user interaction will be avoided when possible. Default `true`.
	SilentModeEnabled *bool `pulumi:"silentModeEnabled"`
	// Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
	SplittingBytes *string `pulumi:"splittingBytes"`
	// The update timestamp of the resource.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Validation is a time-consuming process, even with incremental or differential backups of small amounts of data. This is because not only the data physically contained in the backup copy is verified, but all data restored when it is selected. This option requires access to previously created backup copies.
	ValidationEnabled *bool `pulumi:"validationEnabled"`
	// Amount of reattempts that should be performed while trying to make snapshot.
	VmSnapshotReattempts *BackupPolicyVmSnapshotReattempts `pulumi:"vmSnapshotReattempts"`
	// Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
	VssProvider *string `pulumi:"vssProvider"`
}

type BackupPolicyState struct {
	// The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
	ArchiveName pulumi.StringPtrInput
	// Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`. Default `DO_NOT_USE`.
	Cbt pulumi.StringPtrInput
	// Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
	Compression pulumi.StringPtrInput
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringPtrInput
	// If this field is true, it means that the policy is enabled.
	Enabled pulumi.BoolPtrInput
	// If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are compared to those stored in the backup.
	FastBackupEnabled pulumi.BoolPtrInput
	// File filters to specify masks of files to backup or to exclude of backuping.
	FileFilters BackupPolicyFileFiltersPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`, `VERSION_11`, `VERSION_12`.
	Format pulumi.StringPtrInput
	// LVM will be used to create the volume snapshot. If LVM fails to create a snapshot (for example, because there is not enough free space), the software will create the snapshot itself.
	LvmSnapshottingEnabled pulumi.BoolPtrInput
	// If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
	MultiVolumeSnapshottingEnabled pulumi.BoolPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// Time windows for performance limitations of backup. Default `false`.
	PerformanceWindowEnabled pulumi.BoolPtrInput
	// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
	//
	// Deprecated: This setting is depricated and will be removed in future versions. You can safely delete it.
	PreserveFileSecuritySettings pulumi.BoolPtrInput
	// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
	//
	// Deprecated: This setting is depricated and will be removed in future versions. You can safely delete it.
	QuiesceSnapshottingEnabled pulumi.BoolPtrInput
	// Amount of reattempts that should be performed while trying to make backup at the host.
	Reattempts BackupPolicyReattemptsPtrInput
	// Retention policy for backups. Allows to setup backups lifecycle.
	Retention BackupPolicyRetentionPtrInput
	// Schedule settings for creating backups on the host.
	Scheduling BackupPolicySchedulingPtrInput
	// A sector-by-sector backup of a disk or volume creates a backup copy of all sectors of the disk or volume, including those that do not contain data. Therefore, the size of such a backup copy will be equal to the size of the original disk or volume.
	SectorBySector pulumi.BoolPtrInput
	// If true, a user interaction will be avoided when possible. Default `true`.
	SilentModeEnabled pulumi.BoolPtrInput
	// Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
	SplittingBytes pulumi.StringPtrInput
	// The update timestamp of the resource.
	UpdatedAt pulumi.StringPtrInput
	// Validation is a time-consuming process, even with incremental or differential backups of small amounts of data. This is because not only the data physically contained in the backup copy is verified, but all data restored when it is selected. This option requires access to previously created backup copies.
	ValidationEnabled pulumi.BoolPtrInput
	// Amount of reattempts that should be performed while trying to make snapshot.
	VmSnapshotReattempts BackupPolicyVmSnapshotReattemptsPtrInput
	// Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
	VssProvider pulumi.StringPtrInput
}

func (BackupPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPolicyState)(nil)).Elem()
}

type backupPolicyArgs struct {
	// The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
	ArchiveName *string `pulumi:"archiveName"`
	// Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`. Default `DO_NOT_USE`.
	Cbt *string `pulumi:"cbt"`
	// Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
	Compression *string `pulumi:"compression"`
	// If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are compared to those stored in the backup.
	FastBackupEnabled *bool `pulumi:"fastBackupEnabled"`
	// File filters to specify masks of files to backup or to exclude of backuping.
	FileFilters *BackupPolicyFileFilters `pulumi:"fileFilters"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`, `VERSION_11`, `VERSION_12`.
	Format *string `pulumi:"format"`
	// LVM will be used to create the volume snapshot. If LVM fails to create a snapshot (for example, because there is not enough free space), the software will create the snapshot itself.
	LvmSnapshottingEnabled *bool `pulumi:"lvmSnapshottingEnabled"`
	// If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
	MultiVolumeSnapshottingEnabled *bool `pulumi:"multiVolumeSnapshottingEnabled"`
	// The resource name.
	Name *string `pulumi:"name"`
	// Time windows for performance limitations of backup. Default `false`.
	PerformanceWindowEnabled *bool `pulumi:"performanceWindowEnabled"`
	// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
	//
	// Deprecated: This setting is depricated and will be removed in future versions. You can safely delete it.
	PreserveFileSecuritySettings *bool `pulumi:"preserveFileSecuritySettings"`
	// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
	//
	// Deprecated: This setting is depricated and will be removed in future versions. You can safely delete it.
	QuiesceSnapshottingEnabled *bool `pulumi:"quiesceSnapshottingEnabled"`
	// Amount of reattempts that should be performed while trying to make backup at the host.
	Reattempts BackupPolicyReattempts `pulumi:"reattempts"`
	// Retention policy for backups. Allows to setup backups lifecycle.
	Retention BackupPolicyRetention `pulumi:"retention"`
	// Schedule settings for creating backups on the host.
	Scheduling BackupPolicyScheduling `pulumi:"scheduling"`
	// A sector-by-sector backup of a disk or volume creates a backup copy of all sectors of the disk or volume, including those that do not contain data. Therefore, the size of such a backup copy will be equal to the size of the original disk or volume.
	SectorBySector *bool `pulumi:"sectorBySector"`
	// If true, a user interaction will be avoided when possible. Default `true`.
	SilentModeEnabled *bool `pulumi:"silentModeEnabled"`
	// Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
	SplittingBytes *string `pulumi:"splittingBytes"`
	// Validation is a time-consuming process, even with incremental or differential backups of small amounts of data. This is because not only the data physically contained in the backup copy is verified, but all data restored when it is selected. This option requires access to previously created backup copies.
	ValidationEnabled *bool `pulumi:"validationEnabled"`
	// Amount of reattempts that should be performed while trying to make snapshot.
	VmSnapshotReattempts BackupPolicyVmSnapshotReattempts `pulumi:"vmSnapshotReattempts"`
	// Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
	VssProvider *string `pulumi:"vssProvider"`
}

// The set of arguments for constructing a BackupPolicy resource.
type BackupPolicyArgs struct {
	// The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
	ArchiveName pulumi.StringPtrInput
	// Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`. Default `DO_NOT_USE`.
	Cbt pulumi.StringPtrInput
	// Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
	Compression pulumi.StringPtrInput
	// If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are compared to those stored in the backup.
	FastBackupEnabled pulumi.BoolPtrInput
	// File filters to specify masks of files to backup or to exclude of backuping.
	FileFilters BackupPolicyFileFiltersPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`, `VERSION_11`, `VERSION_12`.
	Format pulumi.StringPtrInput
	// LVM will be used to create the volume snapshot. If LVM fails to create a snapshot (for example, because there is not enough free space), the software will create the snapshot itself.
	LvmSnapshottingEnabled pulumi.BoolPtrInput
	// If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
	MultiVolumeSnapshottingEnabled pulumi.BoolPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// Time windows for performance limitations of backup. Default `false`.
	PerformanceWindowEnabled pulumi.BoolPtrInput
	// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
	//
	// Deprecated: This setting is depricated and will be removed in future versions. You can safely delete it.
	PreserveFileSecuritySettings pulumi.BoolPtrInput
	// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
	//
	// Deprecated: This setting is depricated and will be removed in future versions. You can safely delete it.
	QuiesceSnapshottingEnabled pulumi.BoolPtrInput
	// Amount of reattempts that should be performed while trying to make backup at the host.
	Reattempts BackupPolicyReattemptsInput
	// Retention policy for backups. Allows to setup backups lifecycle.
	Retention BackupPolicyRetentionInput
	// Schedule settings for creating backups on the host.
	Scheduling BackupPolicySchedulingInput
	// A sector-by-sector backup of a disk or volume creates a backup copy of all sectors of the disk or volume, including those that do not contain data. Therefore, the size of such a backup copy will be equal to the size of the original disk or volume.
	SectorBySector pulumi.BoolPtrInput
	// If true, a user interaction will be avoided when possible. Default `true`.
	SilentModeEnabled pulumi.BoolPtrInput
	// Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
	SplittingBytes pulumi.StringPtrInput
	// Validation is a time-consuming process, even with incremental or differential backups of small amounts of data. This is because not only the data physically contained in the backup copy is verified, but all data restored when it is selected. This option requires access to previously created backup copies.
	ValidationEnabled pulumi.BoolPtrInput
	// Amount of reattempts that should be performed while trying to make snapshot.
	VmSnapshotReattempts BackupPolicyVmSnapshotReattemptsInput
	// Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
	VssProvider pulumi.StringPtrInput
}

func (BackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPolicyArgs)(nil)).Elem()
}

type BackupPolicyInput interface {
	pulumi.Input

	ToBackupPolicyOutput() BackupPolicyOutput
	ToBackupPolicyOutputWithContext(ctx context.Context) BackupPolicyOutput
}

func (*BackupPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPolicy)(nil)).Elem()
}

func (i *BackupPolicy) ToBackupPolicyOutput() BackupPolicyOutput {
	return i.ToBackupPolicyOutputWithContext(context.Background())
}

func (i *BackupPolicy) ToBackupPolicyOutputWithContext(ctx context.Context) BackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPolicyOutput)
}

// BackupPolicyArrayInput is an input type that accepts BackupPolicyArray and BackupPolicyArrayOutput values.
// You can construct a concrete instance of `BackupPolicyArrayInput` via:
//
//	BackupPolicyArray{ BackupPolicyArgs{...} }
type BackupPolicyArrayInput interface {
	pulumi.Input

	ToBackupPolicyArrayOutput() BackupPolicyArrayOutput
	ToBackupPolicyArrayOutputWithContext(context.Context) BackupPolicyArrayOutput
}

type BackupPolicyArray []BackupPolicyInput

func (BackupPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPolicy)(nil)).Elem()
}

func (i BackupPolicyArray) ToBackupPolicyArrayOutput() BackupPolicyArrayOutput {
	return i.ToBackupPolicyArrayOutputWithContext(context.Background())
}

func (i BackupPolicyArray) ToBackupPolicyArrayOutputWithContext(ctx context.Context) BackupPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPolicyArrayOutput)
}

// BackupPolicyMapInput is an input type that accepts BackupPolicyMap and BackupPolicyMapOutput values.
// You can construct a concrete instance of `BackupPolicyMapInput` via:
//
//	BackupPolicyMap{ "key": BackupPolicyArgs{...} }
type BackupPolicyMapInput interface {
	pulumi.Input

	ToBackupPolicyMapOutput() BackupPolicyMapOutput
	ToBackupPolicyMapOutputWithContext(context.Context) BackupPolicyMapOutput
}

type BackupPolicyMap map[string]BackupPolicyInput

func (BackupPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPolicy)(nil)).Elem()
}

func (i BackupPolicyMap) ToBackupPolicyMapOutput() BackupPolicyMapOutput {
	return i.ToBackupPolicyMapOutputWithContext(context.Background())
}

func (i BackupPolicyMap) ToBackupPolicyMapOutputWithContext(ctx context.Context) BackupPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPolicyMapOutput)
}

type BackupPolicyOutput struct{ *pulumi.OutputState }

func (BackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPolicy)(nil)).Elem()
}

func (o BackupPolicyOutput) ToBackupPolicyOutput() BackupPolicyOutput {
	return o
}

func (o BackupPolicyOutput) ToBackupPolicyOutputWithContext(ctx context.Context) BackupPolicyOutput {
	return o
}

// The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
func (o BackupPolicyOutput) ArchiveName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringPtrOutput { return v.ArchiveName }).(pulumi.StringPtrOutput)
}

// Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`. Default `DO_NOT_USE`.
func (o BackupPolicyOutput) Cbt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringPtrOutput { return v.Cbt }).(pulumi.StringPtrOutput)
}

// Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
func (o BackupPolicyOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringPtrOutput { return v.Compression }).(pulumi.StringPtrOutput)
}

// The creation timestamp of the resource.
func (o BackupPolicyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// If this field is true, it means that the policy is enabled.
func (o BackupPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are compared to those stored in the backup.
func (o BackupPolicyOutput) FastBackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolPtrOutput { return v.FastBackupEnabled }).(pulumi.BoolPtrOutput)
}

// File filters to specify masks of files to backup or to exclude of backuping.
func (o BackupPolicyOutput) FileFilters() BackupPolicyFileFiltersPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) BackupPolicyFileFiltersPtrOutput { return v.FileFilters }).(BackupPolicyFileFiltersPtrOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o BackupPolicyOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`, `VERSION_11`, `VERSION_12`.
func (o BackupPolicyOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringPtrOutput { return v.Format }).(pulumi.StringPtrOutput)
}

// LVM will be used to create the volume snapshot. If LVM fails to create a snapshot (for example, because there is not enough free space), the software will create the snapshot itself.
func (o BackupPolicyOutput) LvmSnapshottingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolPtrOutput { return v.LvmSnapshottingEnabled }).(pulumi.BoolPtrOutput)
}

// If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
func (o BackupPolicyOutput) MultiVolumeSnapshottingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolPtrOutput { return v.MultiVolumeSnapshottingEnabled }).(pulumi.BoolPtrOutput)
}

// The resource name.
func (o BackupPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Time windows for performance limitations of backup. Default `false`.
func (o BackupPolicyOutput) PerformanceWindowEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolPtrOutput { return v.PerformanceWindowEnabled }).(pulumi.BoolPtrOutput)
}

// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
//
// Deprecated: This setting is depricated and will be removed in future versions. You can safely delete it.
func (o BackupPolicyOutput) PreserveFileSecuritySettings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolPtrOutput { return v.PreserveFileSecuritySettings }).(pulumi.BoolPtrOutput)
}

// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
//
// Deprecated: This setting is depricated and will be removed in future versions. You can safely delete it.
func (o BackupPolicyOutput) QuiesceSnapshottingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolPtrOutput { return v.QuiesceSnapshottingEnabled }).(pulumi.BoolPtrOutput)
}

// Amount of reattempts that should be performed while trying to make backup at the host.
func (o BackupPolicyOutput) Reattempts() BackupPolicyReattemptsOutput {
	return o.ApplyT(func(v *BackupPolicy) BackupPolicyReattemptsOutput { return v.Reattempts }).(BackupPolicyReattemptsOutput)
}

// Retention policy for backups. Allows to setup backups lifecycle.
func (o BackupPolicyOutput) Retention() BackupPolicyRetentionOutput {
	return o.ApplyT(func(v *BackupPolicy) BackupPolicyRetentionOutput { return v.Retention }).(BackupPolicyRetentionOutput)
}

// Schedule settings for creating backups on the host.
func (o BackupPolicyOutput) Scheduling() BackupPolicySchedulingOutput {
	return o.ApplyT(func(v *BackupPolicy) BackupPolicySchedulingOutput { return v.Scheduling }).(BackupPolicySchedulingOutput)
}

// A sector-by-sector backup of a disk or volume creates a backup copy of all sectors of the disk or volume, including those that do not contain data. Therefore, the size of such a backup copy will be equal to the size of the original disk or volume.
func (o BackupPolicyOutput) SectorBySector() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolPtrOutput { return v.SectorBySector }).(pulumi.BoolPtrOutput)
}

// If true, a user interaction will be avoided when possible. Default `true`.
func (o BackupPolicyOutput) SilentModeEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolPtrOutput { return v.SilentModeEnabled }).(pulumi.BoolPtrOutput)
}

// Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
func (o BackupPolicyOutput) SplittingBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringPtrOutput { return v.SplittingBytes }).(pulumi.StringPtrOutput)
}

// The update timestamp of the resource.
func (o BackupPolicyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Validation is a time-consuming process, even with incremental or differential backups of small amounts of data. This is because not only the data physically contained in the backup copy is verified, but all data restored when it is selected. This option requires access to previously created backup copies.
func (o BackupPolicyOutput) ValidationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolPtrOutput { return v.ValidationEnabled }).(pulumi.BoolPtrOutput)
}

// Amount of reattempts that should be performed while trying to make snapshot.
func (o BackupPolicyOutput) VmSnapshotReattempts() BackupPolicyVmSnapshotReattemptsOutput {
	return o.ApplyT(func(v *BackupPolicy) BackupPolicyVmSnapshotReattemptsOutput { return v.VmSnapshotReattempts }).(BackupPolicyVmSnapshotReattemptsOutput)
}

// Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
func (o BackupPolicyOutput) VssProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringPtrOutput { return v.VssProvider }).(pulumi.StringPtrOutput)
}

type BackupPolicyArrayOutput struct{ *pulumi.OutputState }

func (BackupPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPolicy)(nil)).Elem()
}

func (o BackupPolicyArrayOutput) ToBackupPolicyArrayOutput() BackupPolicyArrayOutput {
	return o
}

func (o BackupPolicyArrayOutput) ToBackupPolicyArrayOutputWithContext(ctx context.Context) BackupPolicyArrayOutput {
	return o
}

func (o BackupPolicyArrayOutput) Index(i pulumi.IntInput) BackupPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupPolicy {
		return vs[0].([]*BackupPolicy)[vs[1].(int)]
	}).(BackupPolicyOutput)
}

type BackupPolicyMapOutput struct{ *pulumi.OutputState }

func (BackupPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPolicy)(nil)).Elem()
}

func (o BackupPolicyMapOutput) ToBackupPolicyMapOutput() BackupPolicyMapOutput {
	return o
}

func (o BackupPolicyMapOutput) ToBackupPolicyMapOutputWithContext(ctx context.Context) BackupPolicyMapOutput {
	return o
}

func (o BackupPolicyMapOutput) MapIndex(k pulumi.StringInput) BackupPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupPolicy {
		return vs[0].(map[string]*BackupPolicy)[vs[1].(string)]
	}).(BackupPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPolicyInput)(nil)).Elem(), &BackupPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPolicyArrayInput)(nil)).Elem(), BackupPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPolicyMapInput)(nil)).Elem(), BackupPolicyMap{})
	pulumi.RegisterOutputType(BackupPolicyOutput{})
	pulumi.RegisterOutputType(BackupPolicyArrayOutput{})
	pulumi.RegisterOutputType(BackupPolicyMapOutput{})
}
