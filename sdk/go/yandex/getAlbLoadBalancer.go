// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Application Load Balancer. For more information, see [Yandex Cloud Application Load Balancer](https://yandex.cloud/docs/application-load-balancer/quickstart).
//
// This data source is used to define [Application Load Balancer](https://yandex.cloud/docs/application-load-balancer/concepts/application-load-balancer) that can be used by other resources.
//
// > One of `loadBalancerId` or `name` should be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := yandex.LookupAlbLoadBalancer(ctx, &yandex.LookupAlbLoadBalancerArgs{
//				LoadBalancerId: pulumi.StringRef("my-alb-id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAlbLoadBalancer(ctx *pulumi.Context, args *LookupAlbLoadBalancerArgs, opts ...pulumi.InvokeOption) (*LookupAlbLoadBalancerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAlbLoadBalancerResult
	err := ctx.Invoke("yandex:index/getAlbLoadBalancer:getAlbLoadBalancer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlbLoadBalancer.
type LookupAlbLoadBalancerArgs struct {
	// The resource identifier.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// The resource name.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getAlbLoadBalancer.
type LookupAlbLoadBalancerResult struct {
	// Allocation zones for the Load Balancer instance.
	AllocationPolicies []GetAlbLoadBalancerAllocationPolicy `pulumi:"allocationPolicies"`
	// Specifies whether application load balancer is available to zonal shift
	AllowZonalShift bool `pulumi:"allowZonalShift"`
	// Scaling settings of the application load balancer.
	AutoScalePolicies []GetAlbLoadBalancerAutoScalePolicy `pulumi:"autoScalePolicies"`
	// The creation timestamp of the resource.
	CreatedAt string `pulumi:"createdAt"`
	// The resource description.
	Description string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId string `pulumi:"folderId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// List of listeners for the Load Balancer.
	Listeners []GetAlbLoadBalancerListener `pulumi:"listeners"`
	// The resource identifier.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// Cloud Logging group ID to send logs to. Leave empty to use the balancer folder default log group.
	LogGroupId string `pulumi:"logGroupId"`
	// Cloud Logging settings.
	LogOptions []GetAlbLoadBalancerLogOption `pulumi:"logOptions"`
	// The resource name.
	Name string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId string `pulumi:"networkId"`
	// The region ID where Load Balancer is located at.
	RegionId string `pulumi:"regionId"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Status of the Load Balancer.
	Status string `pulumi:"status"`
}

func LookupAlbLoadBalancerOutput(ctx *pulumi.Context, args LookupAlbLoadBalancerOutputArgs, opts ...pulumi.InvokeOption) LookupAlbLoadBalancerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAlbLoadBalancerResultOutput, error) {
			args := v.(LookupAlbLoadBalancerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getAlbLoadBalancer:getAlbLoadBalancer", args, LookupAlbLoadBalancerResultOutput{}, options).(LookupAlbLoadBalancerResultOutput), nil
		}).(LookupAlbLoadBalancerResultOutput)
}

// A collection of arguments for invoking getAlbLoadBalancer.
type LookupAlbLoadBalancerOutputArgs struct {
	// The resource identifier.
	LoadBalancerId pulumi.StringPtrInput `pulumi:"loadBalancerId"`
	// The resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupAlbLoadBalancerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlbLoadBalancerArgs)(nil)).Elem()
}

// A collection of values returned by getAlbLoadBalancer.
type LookupAlbLoadBalancerResultOutput struct{ *pulumi.OutputState }

func (LookupAlbLoadBalancerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlbLoadBalancerResult)(nil)).Elem()
}

func (o LookupAlbLoadBalancerResultOutput) ToLookupAlbLoadBalancerResultOutput() LookupAlbLoadBalancerResultOutput {
	return o
}

func (o LookupAlbLoadBalancerResultOutput) ToLookupAlbLoadBalancerResultOutputWithContext(ctx context.Context) LookupAlbLoadBalancerResultOutput {
	return o
}

// Allocation zones for the Load Balancer instance.
func (o LookupAlbLoadBalancerResultOutput) AllocationPolicies() GetAlbLoadBalancerAllocationPolicyArrayOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) []GetAlbLoadBalancerAllocationPolicy { return v.AllocationPolicies }).(GetAlbLoadBalancerAllocationPolicyArrayOutput)
}

// Specifies whether application load balancer is available to zonal shift
func (o LookupAlbLoadBalancerResultOutput) AllowZonalShift() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) bool { return v.AllowZonalShift }).(pulumi.BoolOutput)
}

// Scaling settings of the application load balancer.
func (o LookupAlbLoadBalancerResultOutput) AutoScalePolicies() GetAlbLoadBalancerAutoScalePolicyArrayOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) []GetAlbLoadBalancerAutoScalePolicy { return v.AutoScalePolicies }).(GetAlbLoadBalancerAutoScalePolicyArrayOutput)
}

// The creation timestamp of the resource.
func (o LookupAlbLoadBalancerResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The resource description.
func (o LookupAlbLoadBalancerResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) string { return v.Description }).(pulumi.StringOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o LookupAlbLoadBalancerResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAlbLoadBalancerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) string { return v.Id }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o LookupAlbLoadBalancerResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// List of listeners for the Load Balancer.
func (o LookupAlbLoadBalancerResultOutput) Listeners() GetAlbLoadBalancerListenerArrayOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) []GetAlbLoadBalancerListener { return v.Listeners }).(GetAlbLoadBalancerListenerArrayOutput)
}

// The resource identifier.
func (o LookupAlbLoadBalancerResultOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) string { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// Cloud Logging group ID to send logs to. Leave empty to use the balancer folder default log group.
func (o LookupAlbLoadBalancerResultOutput) LogGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) string { return v.LogGroupId }).(pulumi.StringOutput)
}

// Cloud Logging settings.
func (o LookupAlbLoadBalancerResultOutput) LogOptions() GetAlbLoadBalancerLogOptionArrayOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) []GetAlbLoadBalancerLogOption { return v.LogOptions }).(GetAlbLoadBalancerLogOptionArrayOutput)
}

// The resource name.
func (o LookupAlbLoadBalancerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) string { return v.Name }).(pulumi.StringOutput)
}

// The `VPC Network ID` of subnets which resource attached to.
func (o LookupAlbLoadBalancerResultOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) string { return v.NetworkId }).(pulumi.StringOutput)
}

// The region ID where Load Balancer is located at.
func (o LookupAlbLoadBalancerResultOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) string { return v.RegionId }).(pulumi.StringOutput)
}

// The list of security groups applied to resource or their components.
func (o LookupAlbLoadBalancerResultOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Status of the Load Balancer.
func (o LookupAlbLoadBalancerResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlbLoadBalancerResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAlbLoadBalancerResultOutput{})
}
