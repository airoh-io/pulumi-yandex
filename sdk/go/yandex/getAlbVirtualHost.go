// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex ALB Virtual Host. For more information, see [Yandex Cloud Application Load Balancer](https://yandex.cloud/docs/application-load-balancer/quickstart).
//
// This data source is used to define [Application Load Balancer Virtual Host](https://yandex.cloud/docs/application-load-balancer/concepts/http-router) that can be used by other resources.
//
// > One of `virtualHostId` or `name` with `httpRouterId` should be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := yandex.LookupAlbVirtualHost(ctx, &yandex.LookupAlbVirtualHostArgs{
//				Name:         pulumi.StringRef(yandex_alb_virtual_host.MyVh.Name),
//				HttpRouterId: pulumi.StringRef(yandex_alb_virtual_host.MyRouter.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAlbVirtualHost(ctx *pulumi.Context, args *LookupAlbVirtualHostArgs, opts ...pulumi.InvokeOption) (*LookupAlbVirtualHostResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAlbVirtualHostResult
	err := ctx.Invoke("yandex:index/getAlbVirtualHost:getAlbVirtualHost", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlbVirtualHost.
type LookupAlbVirtualHostArgs struct {
	// The ID of the HTTP router to which the virtual host belongs.
	HttpRouterId *string `pulumi:"httpRouterId"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The ID of a specific Virtual Host. Virtual Host ID is concatenation of HTTP Router ID and Virtual Host name with `/` symbol between them. For Example, `http_router_id/vhost_name`.
	VirtualHostId *string `pulumi:"virtualHostId"`
}

// A collection of values returned by getAlbVirtualHost.
type LookupAlbVirtualHostResult struct {
	// A list of domains (host/authority header) that will be matched to this virtual host. Wildcard hosts are supported in the form of '*.foo.com' or '*-bar.foo.com'. If not specified, all domains will be matched.
	Authorities []string `pulumi:"authorities"`
	// The ID of the HTTP router to which the virtual host belongs.
	HttpRouterId string `pulumi:"httpRouterId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Apply the following modifications to the Request/Response header.
	ModifyRequestHeaders  []GetAlbVirtualHostModifyRequestHeader  `pulumi:"modifyRequestHeaders"`
	ModifyResponseHeaders []GetAlbVirtualHostModifyResponseHeader `pulumi:"modifyResponseHeaders"`
	// The resource name.
	Name         string                         `pulumi:"name"`
	RateLimits   []GetAlbVirtualHostRateLimit   `pulumi:"rateLimits"`
	RouteOptions []GetAlbVirtualHostRouteOption `pulumi:"routeOptions"`
	Routes       []GetAlbVirtualHostRoute       `pulumi:"routes"`
	// The ID of a specific Virtual Host. Virtual Host ID is concatenation of HTTP Router ID and Virtual Host name with `/` symbol between them. For Example, `http_router_id/vhost_name`.
	VirtualHostId string `pulumi:"virtualHostId"`
}

func LookupAlbVirtualHostOutput(ctx *pulumi.Context, args LookupAlbVirtualHostOutputArgs, opts ...pulumi.InvokeOption) LookupAlbVirtualHostResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAlbVirtualHostResultOutput, error) {
			args := v.(LookupAlbVirtualHostArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getAlbVirtualHost:getAlbVirtualHost", args, LookupAlbVirtualHostResultOutput{}, options).(LookupAlbVirtualHostResultOutput), nil
		}).(LookupAlbVirtualHostResultOutput)
}

// A collection of arguments for invoking getAlbVirtualHost.
type LookupAlbVirtualHostOutputArgs struct {
	// The ID of the HTTP router to which the virtual host belongs.
	HttpRouterId pulumi.StringPtrInput `pulumi:"httpRouterId"`
	// The resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID of a specific Virtual Host. Virtual Host ID is concatenation of HTTP Router ID and Virtual Host name with `/` symbol between them. For Example, `http_router_id/vhost_name`.
	VirtualHostId pulumi.StringPtrInput `pulumi:"virtualHostId"`
}

func (LookupAlbVirtualHostOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlbVirtualHostArgs)(nil)).Elem()
}

// A collection of values returned by getAlbVirtualHost.
type LookupAlbVirtualHostResultOutput struct{ *pulumi.OutputState }

func (LookupAlbVirtualHostResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlbVirtualHostResult)(nil)).Elem()
}

func (o LookupAlbVirtualHostResultOutput) ToLookupAlbVirtualHostResultOutput() LookupAlbVirtualHostResultOutput {
	return o
}

func (o LookupAlbVirtualHostResultOutput) ToLookupAlbVirtualHostResultOutputWithContext(ctx context.Context) LookupAlbVirtualHostResultOutput {
	return o
}

// A list of domains (host/authority header) that will be matched to this virtual host. Wildcard hosts are supported in the form of '*.foo.com' or '*-bar.foo.com'. If not specified, all domains will be matched.
func (o LookupAlbVirtualHostResultOutput) Authorities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAlbVirtualHostResult) []string { return v.Authorities }).(pulumi.StringArrayOutput)
}

// The ID of the HTTP router to which the virtual host belongs.
func (o LookupAlbVirtualHostResultOutput) HttpRouterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlbVirtualHostResult) string { return v.HttpRouterId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAlbVirtualHostResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlbVirtualHostResult) string { return v.Id }).(pulumi.StringOutput)
}

// Apply the following modifications to the Request/Response header.
func (o LookupAlbVirtualHostResultOutput) ModifyRequestHeaders() GetAlbVirtualHostModifyRequestHeaderArrayOutput {
	return o.ApplyT(func(v LookupAlbVirtualHostResult) []GetAlbVirtualHostModifyRequestHeader {
		return v.ModifyRequestHeaders
	}).(GetAlbVirtualHostModifyRequestHeaderArrayOutput)
}

func (o LookupAlbVirtualHostResultOutput) ModifyResponseHeaders() GetAlbVirtualHostModifyResponseHeaderArrayOutput {
	return o.ApplyT(func(v LookupAlbVirtualHostResult) []GetAlbVirtualHostModifyResponseHeader {
		return v.ModifyResponseHeaders
	}).(GetAlbVirtualHostModifyResponseHeaderArrayOutput)
}

// The resource name.
func (o LookupAlbVirtualHostResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlbVirtualHostResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupAlbVirtualHostResultOutput) RateLimits() GetAlbVirtualHostRateLimitArrayOutput {
	return o.ApplyT(func(v LookupAlbVirtualHostResult) []GetAlbVirtualHostRateLimit { return v.RateLimits }).(GetAlbVirtualHostRateLimitArrayOutput)
}

func (o LookupAlbVirtualHostResultOutput) RouteOptions() GetAlbVirtualHostRouteOptionArrayOutput {
	return o.ApplyT(func(v LookupAlbVirtualHostResult) []GetAlbVirtualHostRouteOption { return v.RouteOptions }).(GetAlbVirtualHostRouteOptionArrayOutput)
}

func (o LookupAlbVirtualHostResultOutput) Routes() GetAlbVirtualHostRouteArrayOutput {
	return o.ApplyT(func(v LookupAlbVirtualHostResult) []GetAlbVirtualHostRoute { return v.Routes }).(GetAlbVirtualHostRouteArrayOutput)
}

// The ID of a specific Virtual Host. Virtual Host ID is concatenation of HTTP Router ID and Virtual Host name with `/` symbol between them. For Example, `http_router_id/vhost_name`.
func (o LookupAlbVirtualHostResultOutput) VirtualHostId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlbVirtualHostResult) string { return v.VirtualHostId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAlbVirtualHostResultOutput{})
}
