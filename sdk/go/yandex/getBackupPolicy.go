// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Backup Policy. For more information, see [the official documentation](https://yandex.cloud/docs/backup/concepts/policy).
//
// > One of `policyId` or `name` should be specified.
//
// > In case you use `name`, an error will occur if two policies with the same name exist. In this case, rename the policy or use the `policyId`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myPolicy, err := yandex.LookupBackupPolicy(ctx, &yandex.LookupBackupPolicyArgs{
//				Name: pulumi.StringRef("some_policy_name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("myPolicyName", myPolicy.Name)
//			return nil
//		})
//	}
//
// ```
func LookupBackupPolicy(ctx *pulumi.Context, args *LookupBackupPolicyArgs, opts ...pulumi.InvokeOption) (*LookupBackupPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBackupPolicyResult
	err := ctx.Invoke("yandex:index/getBackupPolicy:getBackupPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBackupPolicy.
type LookupBackupPolicyArgs struct {
	// The resource name.
	Name *string `pulumi:"name"`
	// ID of the policy.
	PolicyId *string `pulumi:"policyId"`
}

// A collection of values returned by getBackupPolicy.
type LookupBackupPolicyResult struct {
	// The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
	ArchiveName string `pulumi:"archiveName"`
	// Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`. Default `DO_NOT_USE`.
	Cbt string `pulumi:"cbt"`
	// Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
	Compression string `pulumi:"compression"`
	// The creation timestamp of the resource.
	CreatedAt string `pulumi:"createdAt"`
	// If this field is true, it means that the policy is enabled.
	Enabled bool `pulumi:"enabled"`
	// If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are compared to those stored in the backup.
	FastBackupEnabled bool `pulumi:"fastBackupEnabled"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId string `pulumi:"folderId"`
	// Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`, `VERSION_11`, `VERSION_12`.
	Format string `pulumi:"format"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
	MultiVolumeSnapshottingEnabled bool `pulumi:"multiVolumeSnapshottingEnabled"`
	// The resource name.
	Name string `pulumi:"name"`
	// Time windows for performance limitations of backup. Default `false`.
	PerformanceWindowEnabled bool `pulumi:"performanceWindowEnabled"`
	// ID of the policy.
	PolicyId string `pulumi:"policyId"`
	// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
	PreserveFileSecuritySettings bool `pulumi:"preserveFileSecuritySettings"`
	// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
	QuiesceSnapshottingEnabled bool                        `pulumi:"quiesceSnapshottingEnabled"`
	Reattempts                 []GetBackupPolicyReattempt  `pulumi:"reattempts"`
	Retentions                 []GetBackupPolicyRetention  `pulumi:"retentions"`
	Schedulings                []GetBackupPolicyScheduling `pulumi:"schedulings"`
	// If true, a user interaction will be avoided when possible. Default `true`.
	SilentModeEnabled bool `pulumi:"silentModeEnabled"`
	// Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
	SplittingBytes string `pulumi:"splittingBytes"`
	// The update timestamp of the resource.
	UpdatedAt            string                               `pulumi:"updatedAt"`
	VmSnapshotReattempts []GetBackupPolicyVmSnapshotReattempt `pulumi:"vmSnapshotReattempts"`
	// Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
	VssProvider string `pulumi:"vssProvider"`
}

func LookupBackupPolicyOutput(ctx *pulumi.Context, args LookupBackupPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupBackupPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupBackupPolicyResultOutput, error) {
			args := v.(LookupBackupPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getBackupPolicy:getBackupPolicy", args, LookupBackupPolicyResultOutput{}, options).(LookupBackupPolicyResultOutput), nil
		}).(LookupBackupPolicyResultOutput)
}

// A collection of arguments for invoking getBackupPolicy.
type LookupBackupPolicyOutputArgs struct {
	// The resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ID of the policy.
	PolicyId pulumi.StringPtrInput `pulumi:"policyId"`
}

func (LookupBackupPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBackupPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getBackupPolicy.
type LookupBackupPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupBackupPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBackupPolicyResult)(nil)).Elem()
}

func (o LookupBackupPolicyResultOutput) ToLookupBackupPolicyResultOutput() LookupBackupPolicyResultOutput {
	return o
}

func (o LookupBackupPolicyResultOutput) ToLookupBackupPolicyResultOutputWithContext(ctx context.Context) LookupBackupPolicyResultOutput {
	return o
}

// The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
func (o LookupBackupPolicyResultOutput) ArchiveName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.ArchiveName }).(pulumi.StringOutput)
}

// Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`. Default `DO_NOT_USE`.
func (o LookupBackupPolicyResultOutput) Cbt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.Cbt }).(pulumi.StringOutput)
}

// Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
func (o LookupBackupPolicyResultOutput) Compression() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.Compression }).(pulumi.StringOutput)
}

// The creation timestamp of the resource.
func (o LookupBackupPolicyResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// If this field is true, it means that the policy is enabled.
func (o LookupBackupPolicyResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are compared to those stored in the backup.
func (o LookupBackupPolicyResultOutput) FastBackupEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) bool { return v.FastBackupEnabled }).(pulumi.BoolOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o LookupBackupPolicyResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`, `VERSION_11`, `VERSION_12`.
func (o LookupBackupPolicyResultOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.Format }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupBackupPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
func (o LookupBackupPolicyResultOutput) MultiVolumeSnapshottingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) bool { return v.MultiVolumeSnapshottingEnabled }).(pulumi.BoolOutput)
}

// The resource name.
func (o LookupBackupPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// Time windows for performance limitations of backup. Default `false`.
func (o LookupBackupPolicyResultOutput) PerformanceWindowEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) bool { return v.PerformanceWindowEnabled }).(pulumi.BoolOutput)
}

// ID of the policy.
func (o LookupBackupPolicyResultOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.PolicyId }).(pulumi.StringOutput)
}

// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
func (o LookupBackupPolicyResultOutput) PreserveFileSecuritySettings() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) bool { return v.PreserveFileSecuritySettings }).(pulumi.BoolOutput)
}

// If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
func (o LookupBackupPolicyResultOutput) QuiesceSnapshottingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) bool { return v.QuiesceSnapshottingEnabled }).(pulumi.BoolOutput)
}

func (o LookupBackupPolicyResultOutput) Reattempts() GetBackupPolicyReattemptArrayOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) []GetBackupPolicyReattempt { return v.Reattempts }).(GetBackupPolicyReattemptArrayOutput)
}

func (o LookupBackupPolicyResultOutput) Retentions() GetBackupPolicyRetentionArrayOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) []GetBackupPolicyRetention { return v.Retentions }).(GetBackupPolicyRetentionArrayOutput)
}

func (o LookupBackupPolicyResultOutput) Schedulings() GetBackupPolicySchedulingArrayOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) []GetBackupPolicyScheduling { return v.Schedulings }).(GetBackupPolicySchedulingArrayOutput)
}

// If true, a user interaction will be avoided when possible. Default `true`.
func (o LookupBackupPolicyResultOutput) SilentModeEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) bool { return v.SilentModeEnabled }).(pulumi.BoolOutput)
}

// Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
func (o LookupBackupPolicyResultOutput) SplittingBytes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.SplittingBytes }).(pulumi.StringOutput)
}

// The update timestamp of the resource.
func (o LookupBackupPolicyResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o LookupBackupPolicyResultOutput) VmSnapshotReattempts() GetBackupPolicyVmSnapshotReattemptArrayOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) []GetBackupPolicyVmSnapshotReattempt { return v.VmSnapshotReattempts }).(GetBackupPolicyVmSnapshotReattemptArrayOutput)
}

// Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
func (o LookupBackupPolicyResultOutput) VssProvider() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.VssProvider }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBackupPolicyResultOutput{})
}
