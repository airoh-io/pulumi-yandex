// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Certificate Manager Certificate. For more information, see [the official documentation](https://yandex.cloud/docs/certificate-manager/concepts/).
//
// > One of `certificateId` or `name` should be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := yandex.LookupCmCertificate(ctx, &yandex.LookupCmCertificateArgs{
//				CertificateId: pulumi.StringRef("certificate-id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = yandex.LookupCmCertificate(ctx, &yandex.LookupCmCertificateArgs{
//				FolderId: pulumi.StringRef("folder-id"),
//				Name:     pulumi.StringRef("example"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCmCertificate(ctx *pulumi.Context, args *LookupCmCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCmCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCmCertificateResult
	err := ctx.Invoke("yandex:index/getCmCertificate:getCmCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCmCertificate.
type LookupCmCertificateArgs struct {
	// Certificate Id.
	CertificateId *string `pulumi:"certificateId"`
	// The resource description.
	Description *string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// If `true`, the operation won't be completed while the certificate is in `VALIDATING`.
	WaitValidation *bool `pulumi:"waitValidation"`
}

// A collection of values returned by getCmCertificate.
type LookupCmCertificateResult struct {
	// Certificate Id.
	CertificateId string                      `pulumi:"certificateId"`
	Challenges    []GetCmCertificateChallenge `pulumi:"challenges"`
	// The creation timestamp of the resource.
	CreatedAt string `pulumi:"createdAt"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection bool `pulumi:"deletionProtection"`
	// The resource description.
	Description string `pulumi:"description"`
	// Domains for this certificate. Should be specified for managed certificates.
	Domains []string `pulumi:"domains"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId string `pulumi:"folderId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Certificate issue timestamp.
	IssuedAt string `pulumi:"issuedAt"`
	// Certificate Issuer.
	Issuer string `pulumi:"issuer"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name string `pulumi:"name"`
	// Certificate end valid period.
	NotAfter string `pulumi:"notAfter"`
	// Certificate start valid period.
	NotBefore string `pulumi:"notBefore"`
	// Certificate Serial Number.
	Serial string `pulumi:"serial"`
	// Certificate status: `VALIDATING`, `INVALID`, `ISSUED`, `REVOKED`, `RENEWING` or `RENEWAL_FAILED`.
	Status string `pulumi:"status"`
	// Certificate Subject.
	Subject string `pulumi:"subject"`
	// Certificate type: `MANAGED` or `IMPORTED`.
	Type string `pulumi:"type"`
	// Certificate update timestamp.
	UpdatedAt string `pulumi:"updatedAt"`
	// If `true`, the operation won't be completed while the certificate is in `VALIDATING`.
	WaitValidation *bool `pulumi:"waitValidation"`
}

func LookupCmCertificateOutput(ctx *pulumi.Context, args LookupCmCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCmCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCmCertificateResultOutput, error) {
			args := v.(LookupCmCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getCmCertificate:getCmCertificate", args, LookupCmCertificateResultOutput{}, options).(LookupCmCertificateResultOutput), nil
		}).(LookupCmCertificateResultOutput)
}

// A collection of arguments for invoking getCmCertificate.
type LookupCmCertificateOutputArgs struct {
	// Certificate Id.
	CertificateId pulumi.StringPtrInput `pulumi:"certificateId"`
	// The resource description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If `true`, the operation won't be completed while the certificate is in `VALIDATING`.
	WaitValidation pulumi.BoolPtrInput `pulumi:"waitValidation"`
}

func (LookupCmCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCmCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getCmCertificate.
type LookupCmCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCmCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCmCertificateResult)(nil)).Elem()
}

func (o LookupCmCertificateResultOutput) ToLookupCmCertificateResultOutput() LookupCmCertificateResultOutput {
	return o
}

func (o LookupCmCertificateResultOutput) ToLookupCmCertificateResultOutputWithContext(ctx context.Context) LookupCmCertificateResultOutput {
	return o
}

// Certificate Id.
func (o LookupCmCertificateResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) Challenges() GetCmCertificateChallengeArrayOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) []GetCmCertificateChallenge { return v.Challenges }).(GetCmCertificateChallengeArrayOutput)
}

// The creation timestamp of the resource.
func (o LookupCmCertificateResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The `true` value means that resource is protected from accidental deletion.
func (o LookupCmCertificateResultOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) bool { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// The resource description.
func (o LookupCmCertificateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Description }).(pulumi.StringOutput)
}

// Domains for this certificate. Should be specified for managed certificates.
func (o LookupCmCertificateResultOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o LookupCmCertificateResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCmCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Certificate issue timestamp.
func (o LookupCmCertificateResultOutput) IssuedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.IssuedAt }).(pulumi.StringOutput)
}

// Certificate Issuer.
func (o LookupCmCertificateResultOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Issuer }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o LookupCmCertificateResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name.
func (o LookupCmCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

// Certificate end valid period.
func (o LookupCmCertificateResultOutput) NotAfter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.NotAfter }).(pulumi.StringOutput)
}

// Certificate start valid period.
func (o LookupCmCertificateResultOutput) NotBefore() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.NotBefore }).(pulumi.StringOutput)
}

// Certificate Serial Number.
func (o LookupCmCertificateResultOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Serial }).(pulumi.StringOutput)
}

// Certificate status: `VALIDATING`, `INVALID`, `ISSUED`, `REVOKED`, `RENEWING` or `RENEWAL_FAILED`.
func (o LookupCmCertificateResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Status }).(pulumi.StringOutput)
}

// Certificate Subject.
func (o LookupCmCertificateResultOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Subject }).(pulumi.StringOutput)
}

// Certificate type: `MANAGED` or `IMPORTED`.
func (o LookupCmCertificateResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Type }).(pulumi.StringOutput)
}

// Certificate update timestamp.
func (o LookupCmCertificateResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// If `true`, the operation won't be completed while the certificate is in `VALIDATING`.
func (o LookupCmCertificateResultOutput) WaitValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) *bool { return v.WaitValidation }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCmCertificateResultOutput{})
}
