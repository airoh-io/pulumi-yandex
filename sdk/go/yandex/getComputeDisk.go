// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Compute disk. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/disk).
//
// > One of `diskId` or `name` should be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myDisk, err := yandex.LookupComputeDisk(ctx, &yandex.LookupComputeDiskArgs{
//				DiskId: pulumi.StringRef("some_disk_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// You can use "data.yandex_compute_disk.my_disk.id" identifier
//			// as reference to the existing resource.
//			// ...
//			_, err = yandex.NewComputeInstance(ctx, "default", &yandex.ComputeInstanceArgs{
//				SecondaryDisks: yandex.ComputeInstanceSecondaryDiskArray{
//					&yandex.ComputeInstanceSecondaryDiskArgs{
//						DiskId: pulumi.String(myDisk.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupComputeDisk(ctx *pulumi.Context, args *LookupComputeDiskArgs, opts ...pulumi.InvokeOption) (*LookupComputeDiskResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupComputeDiskResult
	err := ctx.Invoke("yandex:index/getComputeDisk:getComputeDisk", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getComputeDisk.
type LookupComputeDiskArgs struct {
	// The ID of a specific disk.
	DiskId              *string                            `pulumi:"diskId"`
	DiskPlacementPolicy *GetComputeDiskDiskPlacementPolicy `pulumi:"diskPlacementPolicy"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// The resource name.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getComputeDisk.
type LookupComputeDiskResult struct {
	// Block size of the disk, specified in bytes.
	BlockSize int `pulumi:"blockSize"`
	// The creation timestamp of the resource.
	CreatedAt string `pulumi:"createdAt"`
	// The resource description.
	Description string `pulumi:"description"`
	// The ID of a specific disk.
	DiskId              string                             `pulumi:"diskId"`
	DiskPlacementPolicy *GetComputeDiskDiskPlacementPolicy `pulumi:"diskPlacementPolicy"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId            string                             `pulumi:"folderId"`
	HardwareGenerations []GetComputeDiskHardwareGeneration `pulumi:"hardwareGenerations"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The source image to use for disk creation.
	ImageId     string   `pulumi:"imageId"`
	InstanceIds []string `pulumi:"instanceIds"`
	// ID of KMS symmetric key used to encrypt disk.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name       string   `pulumi:"name"`
	ProductIds []string `pulumi:"productIds"`
	// Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the `imageId` or `snapshotId` parameter, or specify it alone to create an empty persistent disk. If you specify this field along with `imageId` or `snapshotId`, the size value must not be less than the size of the source image or the size of the snapshot.
	Size int `pulumi:"size"`
	// The source snapshot to use for disk creation.
	SnapshotId string `pulumi:"snapshotId"`
	// The status of the disk.
	Status string `pulumi:"status"`
	// Type of disk to create. Provide this when creating a disk.
	Type string `pulumi:"type"`
	// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
	Zone string `pulumi:"zone"`
}

func LookupComputeDiskOutput(ctx *pulumi.Context, args LookupComputeDiskOutputArgs, opts ...pulumi.InvokeOption) LookupComputeDiskResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupComputeDiskResultOutput, error) {
			args := v.(LookupComputeDiskArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getComputeDisk:getComputeDisk", args, LookupComputeDiskResultOutput{}, options).(LookupComputeDiskResultOutput), nil
		}).(LookupComputeDiskResultOutput)
}

// A collection of arguments for invoking getComputeDisk.
type LookupComputeDiskOutputArgs struct {
	// The ID of a specific disk.
	DiskId              pulumi.StringPtrInput                     `pulumi:"diskId"`
	DiskPlacementPolicy GetComputeDiskDiskPlacementPolicyPtrInput `pulumi:"diskPlacementPolicy"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput `pulumi:"folderId"`
	// The resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupComputeDiskOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComputeDiskArgs)(nil)).Elem()
}

// A collection of values returned by getComputeDisk.
type LookupComputeDiskResultOutput struct{ *pulumi.OutputState }

func (LookupComputeDiskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComputeDiskResult)(nil)).Elem()
}

func (o LookupComputeDiskResultOutput) ToLookupComputeDiskResultOutput() LookupComputeDiskResultOutput {
	return o
}

func (o LookupComputeDiskResultOutput) ToLookupComputeDiskResultOutputWithContext(ctx context.Context) LookupComputeDiskResultOutput {
	return o
}

// Block size of the disk, specified in bytes.
func (o LookupComputeDiskResultOutput) BlockSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) int { return v.BlockSize }).(pulumi.IntOutput)
}

// The creation timestamp of the resource.
func (o LookupComputeDiskResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The resource description.
func (o LookupComputeDiskResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of a specific disk.
func (o LookupComputeDiskResultOutput) DiskId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) string { return v.DiskId }).(pulumi.StringOutput)
}

func (o LookupComputeDiskResultOutput) DiskPlacementPolicy() GetComputeDiskDiskPlacementPolicyPtrOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) *GetComputeDiskDiskPlacementPolicy { return v.DiskPlacementPolicy }).(GetComputeDiskDiskPlacementPolicyPtrOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o LookupComputeDiskResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) string { return v.FolderId }).(pulumi.StringOutput)
}

func (o LookupComputeDiskResultOutput) HardwareGenerations() GetComputeDiskHardwareGenerationArrayOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) []GetComputeDiskHardwareGeneration { return v.HardwareGenerations }).(GetComputeDiskHardwareGenerationArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupComputeDiskResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) string { return v.Id }).(pulumi.StringOutput)
}

// The source image to use for disk creation.
func (o LookupComputeDiskResultOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) string { return v.ImageId }).(pulumi.StringOutput)
}

func (o LookupComputeDiskResultOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) []string { return v.InstanceIds }).(pulumi.StringArrayOutput)
}

// ID of KMS symmetric key used to encrypt disk.
func (o LookupComputeDiskResultOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o LookupComputeDiskResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name.
func (o LookupComputeDiskResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupComputeDiskResultOutput) ProductIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) []string { return v.ProductIds }).(pulumi.StringArrayOutput)
}

// Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the `imageId` or `snapshotId` parameter, or specify it alone to create an empty persistent disk. If you specify this field along with `imageId` or `snapshotId`, the size value must not be less than the size of the source image or the size of the snapshot.
func (o LookupComputeDiskResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) int { return v.Size }).(pulumi.IntOutput)
}

// The source snapshot to use for disk creation.
func (o LookupComputeDiskResultOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// The status of the disk.
func (o LookupComputeDiskResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) string { return v.Status }).(pulumi.StringOutput)
}

// Type of disk to create. Provide this when creating a disk.
func (o LookupComputeDiskResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) string { return v.Type }).(pulumi.StringOutput)
}

// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
func (o LookupComputeDiskResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeDiskResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupComputeDiskResultOutput{})
}
