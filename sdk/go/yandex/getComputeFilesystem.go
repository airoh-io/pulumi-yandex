// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Compute filesystem. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/filesystem).
//
// > One of `filesystemId` or `name` should be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myFs, err := yandex.LookupComputeFilesystem(ctx, &yandex.LookupComputeFilesystemArgs{
//				FilesystemId: pulumi.StringRef("some_fs_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// You can use "data.yandex_compute_filesystem.my_fs.id" identifier
//			// as reference to the existing resource.
//			// ...
//			_, err = yandex.NewComputeInstance(ctx, "default", &yandex.ComputeInstanceArgs{
//				Filesystems: yandex.ComputeInstanceFilesystemArray{
//					&yandex.ComputeInstanceFilesystemArgs{
//						FilesystemId: pulumi.String(myFs.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupComputeFilesystem(ctx *pulumi.Context, args *LookupComputeFilesystemArgs, opts ...pulumi.InvokeOption) (*LookupComputeFilesystemResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupComputeFilesystemResult
	err := ctx.Invoke("yandex:index/getComputeFilesystem:getComputeFilesystem", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getComputeFilesystem.
type LookupComputeFilesystemArgs struct {
	// ID of the filesystem.
	FilesystemId *string `pulumi:"filesystemId"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// The resource name.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getComputeFilesystem.
type LookupComputeFilesystemResult struct {
	// Block size of the filesystem, specified in bytes.
	BlockSize int `pulumi:"blockSize"`
	// The creation timestamp of the resource.
	CreatedAt string `pulumi:"createdAt"`
	// The resource description.
	Description string `pulumi:"description"`
	// ID of the filesystem.
	FilesystemId string `pulumi:"filesystemId"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId string `pulumi:"folderId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name string `pulumi:"name"`
	// Size of the filesystem, specified in GB.
	Size int `pulumi:"size"`
	// The status of the filesystem.
	Status string `pulumi:"status"`
	// Type of filesystem to create. Type `network-hdd` is set by default.
	Type string `pulumi:"type"`
	// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
	Zone string `pulumi:"zone"`
}

func LookupComputeFilesystemOutput(ctx *pulumi.Context, args LookupComputeFilesystemOutputArgs, opts ...pulumi.InvokeOption) LookupComputeFilesystemResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupComputeFilesystemResultOutput, error) {
			args := v.(LookupComputeFilesystemArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getComputeFilesystem:getComputeFilesystem", args, LookupComputeFilesystemResultOutput{}, options).(LookupComputeFilesystemResultOutput), nil
		}).(LookupComputeFilesystemResultOutput)
}

// A collection of arguments for invoking getComputeFilesystem.
type LookupComputeFilesystemOutputArgs struct {
	// ID of the filesystem.
	FilesystemId pulumi.StringPtrInput `pulumi:"filesystemId"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput `pulumi:"folderId"`
	// The resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupComputeFilesystemOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComputeFilesystemArgs)(nil)).Elem()
}

// A collection of values returned by getComputeFilesystem.
type LookupComputeFilesystemResultOutput struct{ *pulumi.OutputState }

func (LookupComputeFilesystemResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComputeFilesystemResult)(nil)).Elem()
}

func (o LookupComputeFilesystemResultOutput) ToLookupComputeFilesystemResultOutput() LookupComputeFilesystemResultOutput {
	return o
}

func (o LookupComputeFilesystemResultOutput) ToLookupComputeFilesystemResultOutputWithContext(ctx context.Context) LookupComputeFilesystemResultOutput {
	return o
}

// Block size of the filesystem, specified in bytes.
func (o LookupComputeFilesystemResultOutput) BlockSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupComputeFilesystemResult) int { return v.BlockSize }).(pulumi.IntOutput)
}

// The creation timestamp of the resource.
func (o LookupComputeFilesystemResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeFilesystemResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The resource description.
func (o LookupComputeFilesystemResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeFilesystemResult) string { return v.Description }).(pulumi.StringOutput)
}

// ID of the filesystem.
func (o LookupComputeFilesystemResultOutput) FilesystemId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeFilesystemResult) string { return v.FilesystemId }).(pulumi.StringOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o LookupComputeFilesystemResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeFilesystemResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupComputeFilesystemResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeFilesystemResult) string { return v.Id }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o LookupComputeFilesystemResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupComputeFilesystemResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name.
func (o LookupComputeFilesystemResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeFilesystemResult) string { return v.Name }).(pulumi.StringOutput)
}

// Size of the filesystem, specified in GB.
func (o LookupComputeFilesystemResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupComputeFilesystemResult) int { return v.Size }).(pulumi.IntOutput)
}

// The status of the filesystem.
func (o LookupComputeFilesystemResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeFilesystemResult) string { return v.Status }).(pulumi.StringOutput)
}

// Type of filesystem to create. Type `network-hdd` is set by default.
func (o LookupComputeFilesystemResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeFilesystemResult) string { return v.Type }).(pulumi.StringOutput)
}

// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
func (o LookupComputeFilesystemResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeFilesystemResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupComputeFilesystemResultOutput{})
}
