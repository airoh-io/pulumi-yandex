// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Compute GPU cluster. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/gpu-cluster).
//
// > One of `gpuClusterId` or `name` should be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myGpuCluster, err := yandex.LookupComputeGpuCluster(ctx, &yandex.LookupComputeGpuClusterArgs{
//				GpuClusterId: pulumi.StringRef("some_gpu_cluster_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// You can use "data.yandex_compute_gpu_cluster.my_gpu_cluster.id" identifier
//			// as reference to the existing resource.
//			// ...
//			_, err = yandex.NewComputeInstance(ctx, "default", &yandex.ComputeInstanceArgs{
//				GpuClusterId: pulumi.String(myGpuCluster.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupComputeGpuCluster(ctx *pulumi.Context, args *LookupComputeGpuClusterArgs, opts ...pulumi.InvokeOption) (*LookupComputeGpuClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupComputeGpuClusterResult
	err := ctx.Invoke("yandex:index/getComputeGpuCluster:getComputeGpuCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getComputeGpuCluster.
type LookupComputeGpuClusterArgs struct {
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// ID of the GPU cluster.
	GpuClusterId *string `pulumi:"gpuClusterId"`
	// The resource name.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getComputeGpuCluster.
type LookupComputeGpuClusterResult struct {
	// The creation timestamp of the resource.
	CreatedAt string `pulumi:"createdAt"`
	// The resource description.
	Description string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId string `pulumi:"folderId"`
	// ID of the GPU cluster.
	GpuClusterId string `pulumi:"gpuClusterId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Type of interconnect between nodes to use in GPU cluster. Type `INFINIBAND` is set by default, and it is the only one available at the moment.
	InterconnectType string `pulumi:"interconnectType"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name string `pulumi:"name"`
	// The status of the GPU cluster.
	Status string `pulumi:"status"`
	// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
	Zone string `pulumi:"zone"`
}

func LookupComputeGpuClusterOutput(ctx *pulumi.Context, args LookupComputeGpuClusterOutputArgs, opts ...pulumi.InvokeOption) LookupComputeGpuClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupComputeGpuClusterResultOutput, error) {
			args := v.(LookupComputeGpuClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getComputeGpuCluster:getComputeGpuCluster", args, LookupComputeGpuClusterResultOutput{}, options).(LookupComputeGpuClusterResultOutput), nil
		}).(LookupComputeGpuClusterResultOutput)
}

// A collection of arguments for invoking getComputeGpuCluster.
type LookupComputeGpuClusterOutputArgs struct {
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput `pulumi:"folderId"`
	// ID of the GPU cluster.
	GpuClusterId pulumi.StringPtrInput `pulumi:"gpuClusterId"`
	// The resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupComputeGpuClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComputeGpuClusterArgs)(nil)).Elem()
}

// A collection of values returned by getComputeGpuCluster.
type LookupComputeGpuClusterResultOutput struct{ *pulumi.OutputState }

func (LookupComputeGpuClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComputeGpuClusterResult)(nil)).Elem()
}

func (o LookupComputeGpuClusterResultOutput) ToLookupComputeGpuClusterResultOutput() LookupComputeGpuClusterResultOutput {
	return o
}

func (o LookupComputeGpuClusterResultOutput) ToLookupComputeGpuClusterResultOutputWithContext(ctx context.Context) LookupComputeGpuClusterResultOutput {
	return o
}

// The creation timestamp of the resource.
func (o LookupComputeGpuClusterResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeGpuClusterResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The resource description.
func (o LookupComputeGpuClusterResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeGpuClusterResult) string { return v.Description }).(pulumi.StringOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o LookupComputeGpuClusterResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeGpuClusterResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// ID of the GPU cluster.
func (o LookupComputeGpuClusterResultOutput) GpuClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeGpuClusterResult) string { return v.GpuClusterId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupComputeGpuClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeGpuClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Type of interconnect between nodes to use in GPU cluster. Type `INFINIBAND` is set by default, and it is the only one available at the moment.
func (o LookupComputeGpuClusterResultOutput) InterconnectType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeGpuClusterResult) string { return v.InterconnectType }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o LookupComputeGpuClusterResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupComputeGpuClusterResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name.
func (o LookupComputeGpuClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeGpuClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the GPU cluster.
func (o LookupComputeGpuClusterResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeGpuClusterResult) string { return v.Status }).(pulumi.StringOutput)
}

// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
func (o LookupComputeGpuClusterResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeGpuClusterResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupComputeGpuClusterResultOutput{})
}
