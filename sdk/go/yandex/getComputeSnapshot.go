// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Compute snapshot. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/snapshot).
//
// > One of `snapshotId` or `name` should be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mySnapshot, err := yandex.LookupComputeSnapshot(ctx, &yandex.LookupComputeSnapshotArgs{
//				SnapshotId: pulumi.StringRef("some_snapshot_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// You can use "data.yandex_compute_snapshot.my_snapshot.id" identifier
//			// as reference to existing resource.
//			// ...
//			_, err = yandex.NewComputeInstance(ctx, "default", &yandex.ComputeInstanceArgs{
//				BootDisk: &yandex.ComputeInstanceBootDiskArgs{
//					InitializeParams: &yandex.ComputeInstanceBootDiskInitializeParamsArgs{
//						SnapshotId: pulumi.String(mySnapshot.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupComputeSnapshot(ctx *pulumi.Context, args *LookupComputeSnapshotArgs, opts ...pulumi.InvokeOption) (*LookupComputeSnapshotResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupComputeSnapshotResult
	err := ctx.Invoke("yandex:index/getComputeSnapshot:getComputeSnapshot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getComputeSnapshot.
type LookupComputeSnapshotArgs struct {
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The ID of a specific snapshot.
	SnapshotId *string `pulumi:"snapshotId"`
}

// A collection of values returned by getComputeSnapshot.
type LookupComputeSnapshotResult struct {
	// The creation timestamp of the resource.
	CreatedAt string `pulumi:"createdAt"`
	// The resource description.
	Description string `pulumi:"description"`
	// Size of the disk when the snapshot was created, specified in GB.
	DiskSize int `pulumi:"diskSize"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId            string                                 `pulumi:"folderId"`
	HardwareGenerations []GetComputeSnapshotHardwareGeneration `pulumi:"hardwareGenerations"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ID of KMS symmetric key used to encrypt snapshot.
	KmsKeyId string `pulumi:"kmsKeyId"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name string `pulumi:"name"`
	// License IDs that indicate which licenses are attached to this snapshot.
	ProductIds []string `pulumi:"productIds"`
	// The ID of a specific snapshot.
	SnapshotId string `pulumi:"snapshotId"`
	// ID of the disk to create a snapshot from.
	SourceDiskId string `pulumi:"sourceDiskId"`
	// The status of the snapshot.
	Status string `pulumi:"status"`
	// Size of the snapshot, specified in GB.
	StorageSize int `pulumi:"storageSize"`
}

func LookupComputeSnapshotOutput(ctx *pulumi.Context, args LookupComputeSnapshotOutputArgs, opts ...pulumi.InvokeOption) LookupComputeSnapshotResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupComputeSnapshotResultOutput, error) {
			args := v.(LookupComputeSnapshotArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getComputeSnapshot:getComputeSnapshot", args, LookupComputeSnapshotResultOutput{}, options).(LookupComputeSnapshotResultOutput), nil
		}).(LookupComputeSnapshotResultOutput)
}

// A collection of arguments for invoking getComputeSnapshot.
type LookupComputeSnapshotOutputArgs struct {
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput `pulumi:"folderId"`
	// The resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID of a specific snapshot.
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
}

func (LookupComputeSnapshotOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComputeSnapshotArgs)(nil)).Elem()
}

// A collection of values returned by getComputeSnapshot.
type LookupComputeSnapshotResultOutput struct{ *pulumi.OutputState }

func (LookupComputeSnapshotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComputeSnapshotResult)(nil)).Elem()
}

func (o LookupComputeSnapshotResultOutput) ToLookupComputeSnapshotResultOutput() LookupComputeSnapshotResultOutput {
	return o
}

func (o LookupComputeSnapshotResultOutput) ToLookupComputeSnapshotResultOutputWithContext(ctx context.Context) LookupComputeSnapshotResultOutput {
	return o
}

// The creation timestamp of the resource.
func (o LookupComputeSnapshotResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The resource description.
func (o LookupComputeSnapshotResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotResult) string { return v.Description }).(pulumi.StringOutput)
}

// Size of the disk when the snapshot was created, specified in GB.
func (o LookupComputeSnapshotResultOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupComputeSnapshotResult) int { return v.DiskSize }).(pulumi.IntOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o LookupComputeSnapshotResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotResult) string { return v.FolderId }).(pulumi.StringOutput)
}

func (o LookupComputeSnapshotResultOutput) HardwareGenerations() GetComputeSnapshotHardwareGenerationArrayOutput {
	return o.ApplyT(func(v LookupComputeSnapshotResult) []GetComputeSnapshotHardwareGeneration {
		return v.HardwareGenerations
	}).(GetComputeSnapshotHardwareGenerationArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupComputeSnapshotResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of KMS symmetric key used to encrypt snapshot.
func (o LookupComputeSnapshotResultOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotResult) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o LookupComputeSnapshotResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupComputeSnapshotResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name.
func (o LookupComputeSnapshotResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotResult) string { return v.Name }).(pulumi.StringOutput)
}

// License IDs that indicate which licenses are attached to this snapshot.
func (o LookupComputeSnapshotResultOutput) ProductIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupComputeSnapshotResult) []string { return v.ProductIds }).(pulumi.StringArrayOutput)
}

// The ID of a specific snapshot.
func (o LookupComputeSnapshotResultOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotResult) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// ID of the disk to create a snapshot from.
func (o LookupComputeSnapshotResultOutput) SourceDiskId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotResult) string { return v.SourceDiskId }).(pulumi.StringOutput)
}

// The status of the snapshot.
func (o LookupComputeSnapshotResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotResult) string { return v.Status }).(pulumi.StringOutput)
}

// Size of the snapshot, specified in GB.
func (o LookupComputeSnapshotResultOutput) StorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupComputeSnapshotResult) int { return v.StorageSize }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupComputeSnapshotResultOutput{})
}
