// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Container Repository. For more information, see [the official documentation](https://yandex.cloud/docs/container-registry/concepts/lifecycle-policy).
//
// > Either `lifecyclePolicyId` or `name` and `repositoryId` must be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := yandex.LookupContainerRepositoryLifecyclePolicy(ctx, &yandex.LookupContainerRepositoryLifecyclePolicyArgs{
//				LifecyclePolicyId: pulumi.StringRef(yandex_container_repository_lifecycle_policy.My_lifecycle_policy.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupContainerRepositoryLifecyclePolicy(ctx *pulumi.Context, args *LookupContainerRepositoryLifecyclePolicyArgs, opts ...pulumi.InvokeOption) (*LookupContainerRepositoryLifecyclePolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupContainerRepositoryLifecyclePolicyResult
	err := ctx.Invoke("yandex:index/getContainerRepositoryLifecyclePolicy:getContainerRepositoryLifecyclePolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainerRepositoryLifecyclePolicy.
type LookupContainerRepositoryLifecyclePolicyArgs struct {
	// The ID of a specific Lifecycle Policy.
	LifecyclePolicyId *string `pulumi:"lifecyclePolicyId"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The ID of the repository that the resource belongs to.
	RepositoryId *string `pulumi:"repositoryId"`
}

// A collection of values returned by getContainerRepositoryLifecyclePolicy.
type LookupContainerRepositoryLifecyclePolicyResult struct {
	// The creation timestamp of the resource.
	CreatedAt string `pulumi:"createdAt"`
	// The resource description.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of a specific Lifecycle Policy.
	LifecyclePolicyId string `pulumi:"lifecyclePolicyId"`
	// The resource name.
	Name string `pulumi:"name"`
	// The ID of the repository that the resource belongs to.
	RepositoryId string                                      `pulumi:"repositoryId"`
	Rules        []GetContainerRepositoryLifecyclePolicyRule `pulumi:"rules"`
	// The status of lifecycle policy. Must be `active` or `disabled`.
	Status string `pulumi:"status"`
}

func LookupContainerRepositoryLifecyclePolicyOutput(ctx *pulumi.Context, args LookupContainerRepositoryLifecyclePolicyOutputArgs, opts ...pulumi.InvokeOption) LookupContainerRepositoryLifecyclePolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupContainerRepositoryLifecyclePolicyResultOutput, error) {
			args := v.(LookupContainerRepositoryLifecyclePolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getContainerRepositoryLifecyclePolicy:getContainerRepositoryLifecyclePolicy", args, LookupContainerRepositoryLifecyclePolicyResultOutput{}, options).(LookupContainerRepositoryLifecyclePolicyResultOutput), nil
		}).(LookupContainerRepositoryLifecyclePolicyResultOutput)
}

// A collection of arguments for invoking getContainerRepositoryLifecyclePolicy.
type LookupContainerRepositoryLifecyclePolicyOutputArgs struct {
	// The ID of a specific Lifecycle Policy.
	LifecyclePolicyId pulumi.StringPtrInput `pulumi:"lifecyclePolicyId"`
	// The resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID of the repository that the resource belongs to.
	RepositoryId pulumi.StringPtrInput `pulumi:"repositoryId"`
}

func (LookupContainerRepositoryLifecyclePolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerRepositoryLifecyclePolicyArgs)(nil)).Elem()
}

// A collection of values returned by getContainerRepositoryLifecyclePolicy.
type LookupContainerRepositoryLifecyclePolicyResultOutput struct{ *pulumi.OutputState }

func (LookupContainerRepositoryLifecyclePolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerRepositoryLifecyclePolicyResult)(nil)).Elem()
}

func (o LookupContainerRepositoryLifecyclePolicyResultOutput) ToLookupContainerRepositoryLifecyclePolicyResultOutput() LookupContainerRepositoryLifecyclePolicyResultOutput {
	return o
}

func (o LookupContainerRepositoryLifecyclePolicyResultOutput) ToLookupContainerRepositoryLifecyclePolicyResultOutputWithContext(ctx context.Context) LookupContainerRepositoryLifecyclePolicyResultOutput {
	return o
}

// The creation timestamp of the resource.
func (o LookupContainerRepositoryLifecyclePolicyResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The resource description.
func (o LookupContainerRepositoryLifecyclePolicyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupContainerRepositoryLifecyclePolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of a specific Lifecycle Policy.
func (o LookupContainerRepositoryLifecyclePolicyResultOutput) LifecyclePolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) string { return v.LifecyclePolicyId }).(pulumi.StringOutput)
}

// The resource name.
func (o LookupContainerRepositoryLifecyclePolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the repository that the resource belongs to.
func (o LookupContainerRepositoryLifecyclePolicyResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

func (o LookupContainerRepositoryLifecyclePolicyResultOutput) Rules() GetContainerRepositoryLifecyclePolicyRuleArrayOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) []GetContainerRepositoryLifecyclePolicyRule {
		return v.Rules
	}).(GetContainerRepositoryLifecyclePolicyRuleArrayOutput)
}

// The status of lifecycle policy. Must be `active` or `disabled`.
func (o LookupContainerRepositoryLifecyclePolicyResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupContainerRepositoryLifecyclePolicyResultOutput{})
}
