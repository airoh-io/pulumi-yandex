// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Kubernetes Node Group. For more information, see [the official documentation](https://yandex.cloud/docs/managed-kubernetes/concepts/#node-group).
//
// > One of `nodeGroupId` or `name` should be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myNodeGroup, err := yandex.LookupKubernetesNodeGroup(ctx, &yandex.LookupKubernetesNodeGroupArgs{
//				NodeGroupId: pulumi.StringRef("some_k8s_node_group_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("myNodeGroup.status", myNodeGroup.Status)
//			return nil
//		})
//	}
//
// ```
func LookupKubernetesNodeGroup(ctx *pulumi.Context, args *LookupKubernetesNodeGroupArgs, opts ...pulumi.InvokeOption) (*LookupKubernetesNodeGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupKubernetesNodeGroupResult
	err := ctx.Invoke("yandex:index/getKubernetesNodeGroup:getKubernetesNodeGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKubernetesNodeGroup.
type LookupKubernetesNodeGroupArgs struct {
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// The resource name.
	Name *string `pulumi:"name"`
	// ID of a specific Kubernetes node group.
	NodeGroupId *string `pulumi:"nodeGroupId"`
}

// A collection of values returned by getKubernetesNodeGroup.
type LookupKubernetesNodeGroupResult struct {
	AllocationPolicies []GetKubernetesNodeGroupAllocationPolicy `pulumi:"allocationPolicies"`
	// A list of allowed unsafe `sysctl` parameters for this node group. For more details see [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster).
	AllowedUnsafeSysctls []string `pulumi:"allowedUnsafeSysctls"`
	// The ID of the Kubernetes cluster that this node group belongs to.
	ClusterId string `pulumi:"clusterId"`
	// The creation timestamp of the resource.
	CreatedAt      string                               `pulumi:"createdAt"`
	DeployPolicies []GetKubernetesNodeGroupDeployPolicy `pulumi:"deployPolicies"`
	// The resource description.
	Description string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId string `pulumi:"folderId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ID of instance group that is used to manage this Kubernetes node group.
	InstanceGroupId   string                                   `pulumi:"instanceGroupId"`
	InstanceTemplates []GetKubernetesNodeGroupInstanceTemplate `pulumi:"instanceTemplates"`
	// A set of key/value label pairs which assigned to resource.
	Labels              map[string]string                         `pulumi:"labels"`
	MaintenancePolicies []GetKubernetesNodeGroupMaintenancePolicy `pulumi:"maintenancePolicies"`
	// The resource name.
	Name string `pulumi:"name"`
	// ID of a specific Kubernetes node group.
	NodeGroupId string `pulumi:"nodeGroupId"`
	// A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.
	NodeLabels map[string]string `pulumi:"nodeLabels"`
	// A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.
	NodeTaints    []string                            `pulumi:"nodeTaints"`
	ScalePolicies []GetKubernetesNodeGroupScalePolicy `pulumi:"scalePolicies"`
	// Status of the Kubernetes node group.
	Status       string                              `pulumi:"status"`
	VersionInfos []GetKubernetesNodeGroupVersionInfo `pulumi:"versionInfos"`
}

func LookupKubernetesNodeGroupOutput(ctx *pulumi.Context, args LookupKubernetesNodeGroupOutputArgs, opts ...pulumi.InvokeOption) LookupKubernetesNodeGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupKubernetesNodeGroupResultOutput, error) {
			args := v.(LookupKubernetesNodeGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getKubernetesNodeGroup:getKubernetesNodeGroup", args, LookupKubernetesNodeGroupResultOutput{}, options).(LookupKubernetesNodeGroupResultOutput), nil
		}).(LookupKubernetesNodeGroupResultOutput)
}

// A collection of arguments for invoking getKubernetesNodeGroup.
type LookupKubernetesNodeGroupOutputArgs struct {
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput `pulumi:"folderId"`
	// The resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ID of a specific Kubernetes node group.
	NodeGroupId pulumi.StringPtrInput `pulumi:"nodeGroupId"`
}

func (LookupKubernetesNodeGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKubernetesNodeGroupArgs)(nil)).Elem()
}

// A collection of values returned by getKubernetesNodeGroup.
type LookupKubernetesNodeGroupResultOutput struct{ *pulumi.OutputState }

func (LookupKubernetesNodeGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKubernetesNodeGroupResult)(nil)).Elem()
}

func (o LookupKubernetesNodeGroupResultOutput) ToLookupKubernetesNodeGroupResultOutput() LookupKubernetesNodeGroupResultOutput {
	return o
}

func (o LookupKubernetesNodeGroupResultOutput) ToLookupKubernetesNodeGroupResultOutputWithContext(ctx context.Context) LookupKubernetesNodeGroupResultOutput {
	return o
}

func (o LookupKubernetesNodeGroupResultOutput) AllocationPolicies() GetKubernetesNodeGroupAllocationPolicyArrayOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) []GetKubernetesNodeGroupAllocationPolicy {
		return v.AllocationPolicies
	}).(GetKubernetesNodeGroupAllocationPolicyArrayOutput)
}

// A list of allowed unsafe `sysctl` parameters for this node group. For more details see [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster).
func (o LookupKubernetesNodeGroupResultOutput) AllowedUnsafeSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) []string { return v.AllowedUnsafeSysctls }).(pulumi.StringArrayOutput)
}

// The ID of the Kubernetes cluster that this node group belongs to.
func (o LookupKubernetesNodeGroupResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The creation timestamp of the resource.
func (o LookupKubernetesNodeGroupResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupKubernetesNodeGroupResultOutput) DeployPolicies() GetKubernetesNodeGroupDeployPolicyArrayOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) []GetKubernetesNodeGroupDeployPolicy { return v.DeployPolicies }).(GetKubernetesNodeGroupDeployPolicyArrayOutput)
}

// The resource description.
func (o LookupKubernetesNodeGroupResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) string { return v.Description }).(pulumi.StringOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o LookupKubernetesNodeGroupResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupKubernetesNodeGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of instance group that is used to manage this Kubernetes node group.
func (o LookupKubernetesNodeGroupResultOutput) InstanceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) string { return v.InstanceGroupId }).(pulumi.StringOutput)
}

func (o LookupKubernetesNodeGroupResultOutput) InstanceTemplates() GetKubernetesNodeGroupInstanceTemplateArrayOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) []GetKubernetesNodeGroupInstanceTemplate {
		return v.InstanceTemplates
	}).(GetKubernetesNodeGroupInstanceTemplateArrayOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o LookupKubernetesNodeGroupResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupKubernetesNodeGroupResultOutput) MaintenancePolicies() GetKubernetesNodeGroupMaintenancePolicyArrayOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) []GetKubernetesNodeGroupMaintenancePolicy {
		return v.MaintenancePolicies
	}).(GetKubernetesNodeGroupMaintenancePolicyArrayOutput)
}

// The resource name.
func (o LookupKubernetesNodeGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// ID of a specific Kubernetes node group.
func (o LookupKubernetesNodeGroupResultOutput) NodeGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) string { return v.NodeGroupId }).(pulumi.StringOutput)
}

// A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.
func (o LookupKubernetesNodeGroupResultOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) map[string]string { return v.NodeLabels }).(pulumi.StringMapOutput)
}

// A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.
func (o LookupKubernetesNodeGroupResultOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) []string { return v.NodeTaints }).(pulumi.StringArrayOutput)
}

func (o LookupKubernetesNodeGroupResultOutput) ScalePolicies() GetKubernetesNodeGroupScalePolicyArrayOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) []GetKubernetesNodeGroupScalePolicy { return v.ScalePolicies }).(GetKubernetesNodeGroupScalePolicyArrayOutput)
}

// Status of the Kubernetes node group.
func (o LookupKubernetesNodeGroupResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupKubernetesNodeGroupResultOutput) VersionInfos() GetKubernetesNodeGroupVersionInfoArrayOutput {
	return o.ApplyT(func(v LookupKubernetesNodeGroupResult) []GetKubernetesNodeGroupVersionInfo { return v.VersionInfos }).(GetKubernetesNodeGroupVersionInfoArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKubernetesNodeGroupResultOutput{})
}
