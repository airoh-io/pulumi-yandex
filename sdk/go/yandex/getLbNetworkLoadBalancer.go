// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Load Balancer network load balancer. For more information, see [the official documentation](https://yandex.cloud/docs/load-balancer/concepts/).
//
// This data source is used to define [Load Balancer Network Load Balancers](https://yandex.cloud/docs/load-balancer/concepts/) that can be used by other resources.
//
// > One of `networkLoadBalancerId` or `name` should be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := yandex.LookupLbNetworkLoadBalancer(ctx, &yandex.LookupLbNetworkLoadBalancerArgs{
//				NetworkLoadBalancerId: pulumi.StringRef("my-network-load-balancer"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLbNetworkLoadBalancer(ctx *pulumi.Context, args *LookupLbNetworkLoadBalancerArgs, opts ...pulumi.InvokeOption) (*LookupLbNetworkLoadBalancerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLbNetworkLoadBalancerResult
	err := ctx.Invoke("yandex:index/getLbNetworkLoadBalancer:getLbNetworkLoadBalancer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLbNetworkLoadBalancer.
type LookupLbNetworkLoadBalancerArgs struct {
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// The resource name.
	Name *string `pulumi:"name"`
	// Network load balancer ID.
	NetworkLoadBalancerId *string `pulumi:"networkLoadBalancerId"`
}

// A collection of values returned by getLbNetworkLoadBalancer.
type LookupLbNetworkLoadBalancerResult struct {
	// Flag that marks the network load balancer as available to zonal shift.
	AllowZonalShift      bool                                          `pulumi:"allowZonalShift"`
	AttachedTargetGroups []GetLbNetworkLoadBalancerAttachedTargetGroup `pulumi:"attachedTargetGroups"`
	// The creation timestamp of the resource.
	CreatedAt string `pulumi:"createdAt"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection bool `pulumi:"deletionProtection"`
	// The resource description.
	Description string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId string `pulumi:"folderId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A set of key/value label pairs which assigned to resource.
	Labels    map[string]string                  `pulumi:"labels"`
	Listeners []GetLbNetworkLoadBalancerListener `pulumi:"listeners"`
	// The resource name.
	Name string `pulumi:"name"`
	// Network load balancer ID.
	NetworkLoadBalancerId string `pulumi:"networkLoadBalancerId"`
	// ID of the availability zone where the network load balancer resides. If omitted, default region is being used.
	RegionId string `pulumi:"regionId"`
	// Type of the network load balancer. Must be one of 'external' or 'internal'. The default is 'external'.
	Type string `pulumi:"type"`
}

func LookupLbNetworkLoadBalancerOutput(ctx *pulumi.Context, args LookupLbNetworkLoadBalancerOutputArgs, opts ...pulumi.InvokeOption) LookupLbNetworkLoadBalancerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLbNetworkLoadBalancerResultOutput, error) {
			args := v.(LookupLbNetworkLoadBalancerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getLbNetworkLoadBalancer:getLbNetworkLoadBalancer", args, LookupLbNetworkLoadBalancerResultOutput{}, options).(LookupLbNetworkLoadBalancerResultOutput), nil
		}).(LookupLbNetworkLoadBalancerResultOutput)
}

// A collection of arguments for invoking getLbNetworkLoadBalancer.
type LookupLbNetworkLoadBalancerOutputArgs struct {
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput `pulumi:"folderId"`
	// The resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Network load balancer ID.
	NetworkLoadBalancerId pulumi.StringPtrInput `pulumi:"networkLoadBalancerId"`
}

func (LookupLbNetworkLoadBalancerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLbNetworkLoadBalancerArgs)(nil)).Elem()
}

// A collection of values returned by getLbNetworkLoadBalancer.
type LookupLbNetworkLoadBalancerResultOutput struct{ *pulumi.OutputState }

func (LookupLbNetworkLoadBalancerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLbNetworkLoadBalancerResult)(nil)).Elem()
}

func (o LookupLbNetworkLoadBalancerResultOutput) ToLookupLbNetworkLoadBalancerResultOutput() LookupLbNetworkLoadBalancerResultOutput {
	return o
}

func (o LookupLbNetworkLoadBalancerResultOutput) ToLookupLbNetworkLoadBalancerResultOutputWithContext(ctx context.Context) LookupLbNetworkLoadBalancerResultOutput {
	return o
}

// Flag that marks the network load balancer as available to zonal shift.
func (o LookupLbNetworkLoadBalancerResultOutput) AllowZonalShift() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLbNetworkLoadBalancerResult) bool { return v.AllowZonalShift }).(pulumi.BoolOutput)
}

func (o LookupLbNetworkLoadBalancerResultOutput) AttachedTargetGroups() GetLbNetworkLoadBalancerAttachedTargetGroupArrayOutput {
	return o.ApplyT(func(v LookupLbNetworkLoadBalancerResult) []GetLbNetworkLoadBalancerAttachedTargetGroup {
		return v.AttachedTargetGroups
	}).(GetLbNetworkLoadBalancerAttachedTargetGroupArrayOutput)
}

// The creation timestamp of the resource.
func (o LookupLbNetworkLoadBalancerResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbNetworkLoadBalancerResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The `true` value means that resource is protected from accidental deletion.
func (o LookupLbNetworkLoadBalancerResultOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLbNetworkLoadBalancerResult) bool { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// The resource description.
func (o LookupLbNetworkLoadBalancerResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbNetworkLoadBalancerResult) string { return v.Description }).(pulumi.StringOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o LookupLbNetworkLoadBalancerResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbNetworkLoadBalancerResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLbNetworkLoadBalancerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbNetworkLoadBalancerResult) string { return v.Id }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o LookupLbNetworkLoadBalancerResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupLbNetworkLoadBalancerResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupLbNetworkLoadBalancerResultOutput) Listeners() GetLbNetworkLoadBalancerListenerArrayOutput {
	return o.ApplyT(func(v LookupLbNetworkLoadBalancerResult) []GetLbNetworkLoadBalancerListener { return v.Listeners }).(GetLbNetworkLoadBalancerListenerArrayOutput)
}

// The resource name.
func (o LookupLbNetworkLoadBalancerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbNetworkLoadBalancerResult) string { return v.Name }).(pulumi.StringOutput)
}

// Network load balancer ID.
func (o LookupLbNetworkLoadBalancerResultOutput) NetworkLoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbNetworkLoadBalancerResult) string { return v.NetworkLoadBalancerId }).(pulumi.StringOutput)
}

// ID of the availability zone where the network load balancer resides. If omitted, default region is being used.
func (o LookupLbNetworkLoadBalancerResultOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbNetworkLoadBalancerResult) string { return v.RegionId }).(pulumi.StringOutput)
}

// Type of the network load balancer. Must be one of 'external' or 'internal'. The default is 'external'.
func (o LookupLbNetworkLoadBalancerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLbNetworkLoadBalancerResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLbNetworkLoadBalancerResultOutput{})
}
