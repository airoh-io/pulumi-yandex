// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Managed Greenplum cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-greenplum/).
//
// > Either `clusterId` or `name` should be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := yandex.LookupMdbGreenplumCluster(ctx, &yandex.LookupMdbGreenplumClusterArgs{
//				Name: pulumi.StringRef("test"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("networkId", foo.NetworkId)
//			return nil
//		})
//	}
//
// ```
func LookupMdbGreenplumCluster(ctx *pulumi.Context, args *LookupMdbGreenplumClusterArgs, opts ...pulumi.InvokeOption) (*LookupMdbGreenplumClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMdbGreenplumClusterResult
	err := ctx.Invoke("yandex:index/getMdbGreenplumCluster:getMdbGreenplumCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMdbGreenplumCluster.
type LookupMdbGreenplumClusterArgs struct {
	BackgroundActivities []GetMdbGreenplumClusterBackgroundActivity `pulumi:"backgroundActivities"`
	// The ID of the Greenplum cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId        *string           `pulumi:"folderId"`
	GreenplumConfig map[string]string `pulumi:"greenplumConfig"`
	// A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
	MasterHostGroupIds []string `pulumi:"masterHostGroupIds"`
	// The resource name.
	Name         *string                             `pulumi:"name"`
	PoolerConfig *GetMdbGreenplumClusterPoolerConfig `pulumi:"poolerConfig"`
	PxfConfigs   []GetMdbGreenplumClusterPxfConfig   `pulumi:"pxfConfigs"`
	// A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
	SegmentHostGroupIds []string `pulumi:"segmentHostGroupIds"`
}

// A collection of values returned by getMdbGreenplumCluster.
type LookupMdbGreenplumClusterResult struct {
	Accesses []GetMdbGreenplumClusterAccess `pulumi:"accesses"`
	// Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.
	AssignPublicIp       bool                                       `pulumi:"assignPublicIp"`
	BackgroundActivities []GetMdbGreenplumClusterBackgroundActivity `pulumi:"backgroundActivities"`
	BackupWindowStarts   []GetMdbGreenplumClusterBackupWindowStart  `pulumi:"backupWindowStarts"`
	CloudStorages        []GetMdbGreenplumClusterCloudStorage       `pulumi:"cloudStorages"`
	// The ID of the Greenplum cluster.
	ClusterId string `pulumi:"clusterId"`
	// The creation timestamp of the resource.
	CreatedAt string `pulumi:"createdAt"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection bool `pulumi:"deletionProtection"`
	// The resource description.
	Description string `pulumi:"description"`
	// Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)
	Environment string `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId        string            `pulumi:"folderId"`
	GreenplumConfig map[string]string `pulumi:"greenplumConfig"`
	// Aggregated health of the cluster.
	Health string `pulumi:"health"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A set of key/value label pairs which assigned to resource.
	Labels             map[string]string                         `pulumi:"labels"`
	Loggings           []GetMdbGreenplumClusterLogging           `pulumi:"loggings"`
	MaintenanceWindows []GetMdbGreenplumClusterMaintenanceWindow `pulumi:"maintenanceWindows"`
	// Number of hosts in master subcluster (1 or 2).
	MasterHostCount int `pulumi:"masterHostCount"`
	// A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
	MasterHostGroupIds []string                                 `pulumi:"masterHostGroupIds"`
	MasterHosts        []GetMdbGreenplumClusterMasterHost       `pulumi:"masterHosts"`
	MasterSubclusters  []GetMdbGreenplumClusterMasterSubcluster `pulumi:"masterSubclusters"`
	// The resource name.
	Name string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId    string                              `pulumi:"networkId"`
	PoolerConfig *GetMdbGreenplumClusterPoolerConfig `pulumi:"poolerConfig"`
	PxfConfigs   []GetMdbGreenplumClusterPxfConfig   `pulumi:"pxfConfigs"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Number of hosts in segment subcluster (from 1 to 32).
	SegmentHostCount int `pulumi:"segmentHostCount"`
	// A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
	SegmentHostGroupIds []string                            `pulumi:"segmentHostGroupIds"`
	SegmentHosts        []GetMdbGreenplumClusterSegmentHost `pulumi:"segmentHosts"`
	// Number of segments on segment host (not more then 1 + RAM/8).
	SegmentInHost      int                                       `pulumi:"segmentInHost"`
	SegmentSubclusters []GetMdbGreenplumClusterSegmentSubcluster `pulumi:"segmentSubclusters"`
	// ID of service account to use with Yandex Cloud resources (e.g. S3, Cloud Logging).
	ServiceAccountId string `pulumi:"serviceAccountId"`
	// Status of the cluster.
	Status string `pulumi:"status"`
	// The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.
	SubnetId string `pulumi:"subnetId"`
	// Greenplum cluster admin user name.
	UserName string `pulumi:"userName"`
	// Version of the Greenplum cluster. (`6.25`)
	Version string `pulumi:"version"`
	// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
	Zone string `pulumi:"zone"`
}

func LookupMdbGreenplumClusterOutput(ctx *pulumi.Context, args LookupMdbGreenplumClusterOutputArgs, opts ...pulumi.InvokeOption) LookupMdbGreenplumClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMdbGreenplumClusterResultOutput, error) {
			args := v.(LookupMdbGreenplumClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getMdbGreenplumCluster:getMdbGreenplumCluster", args, LookupMdbGreenplumClusterResultOutput{}, options).(LookupMdbGreenplumClusterResultOutput), nil
		}).(LookupMdbGreenplumClusterResultOutput)
}

// A collection of arguments for invoking getMdbGreenplumCluster.
type LookupMdbGreenplumClusterOutputArgs struct {
	BackgroundActivities GetMdbGreenplumClusterBackgroundActivityArrayInput `pulumi:"backgroundActivities"`
	// The ID of the Greenplum cluster.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId        pulumi.StringPtrInput `pulumi:"folderId"`
	GreenplumConfig pulumi.StringMapInput `pulumi:"greenplumConfig"`
	// A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
	MasterHostGroupIds pulumi.StringArrayInput `pulumi:"masterHostGroupIds"`
	// The resource name.
	Name         pulumi.StringPtrInput                      `pulumi:"name"`
	PoolerConfig GetMdbGreenplumClusterPoolerConfigPtrInput `pulumi:"poolerConfig"`
	PxfConfigs   GetMdbGreenplumClusterPxfConfigArrayInput  `pulumi:"pxfConfigs"`
	// A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
	SegmentHostGroupIds pulumi.StringArrayInput `pulumi:"segmentHostGroupIds"`
}

func (LookupMdbGreenplumClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbGreenplumClusterArgs)(nil)).Elem()
}

// A collection of values returned by getMdbGreenplumCluster.
type LookupMdbGreenplumClusterResultOutput struct{ *pulumi.OutputState }

func (LookupMdbGreenplumClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbGreenplumClusterResult)(nil)).Elem()
}

func (o LookupMdbGreenplumClusterResultOutput) ToLookupMdbGreenplumClusterResultOutput() LookupMdbGreenplumClusterResultOutput {
	return o
}

func (o LookupMdbGreenplumClusterResultOutput) ToLookupMdbGreenplumClusterResultOutputWithContext(ctx context.Context) LookupMdbGreenplumClusterResultOutput {
	return o
}

func (o LookupMdbGreenplumClusterResultOutput) Accesses() GetMdbGreenplumClusterAccessArrayOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) []GetMdbGreenplumClusterAccess { return v.Accesses }).(GetMdbGreenplumClusterAccessArrayOutput)
}

// Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.
func (o LookupMdbGreenplumClusterResultOutput) AssignPublicIp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) bool { return v.AssignPublicIp }).(pulumi.BoolOutput)
}

func (o LookupMdbGreenplumClusterResultOutput) BackgroundActivities() GetMdbGreenplumClusterBackgroundActivityArrayOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) []GetMdbGreenplumClusterBackgroundActivity {
		return v.BackgroundActivities
	}).(GetMdbGreenplumClusterBackgroundActivityArrayOutput)
}

func (o LookupMdbGreenplumClusterResultOutput) BackupWindowStarts() GetMdbGreenplumClusterBackupWindowStartArrayOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) []GetMdbGreenplumClusterBackupWindowStart {
		return v.BackupWindowStarts
	}).(GetMdbGreenplumClusterBackupWindowStartArrayOutput)
}

func (o LookupMdbGreenplumClusterResultOutput) CloudStorages() GetMdbGreenplumClusterCloudStorageArrayOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) []GetMdbGreenplumClusterCloudStorage { return v.CloudStorages }).(GetMdbGreenplumClusterCloudStorageArrayOutput)
}

// The ID of the Greenplum cluster.
func (o LookupMdbGreenplumClusterResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The creation timestamp of the resource.
func (o LookupMdbGreenplumClusterResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The `true` value means that resource is protected from accidental deletion.
func (o LookupMdbGreenplumClusterResultOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) bool { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// The resource description.
func (o LookupMdbGreenplumClusterResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.Description }).(pulumi.StringOutput)
}

// Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)
func (o LookupMdbGreenplumClusterResultOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.Environment }).(pulumi.StringOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o LookupMdbGreenplumClusterResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.FolderId }).(pulumi.StringOutput)
}

func (o LookupMdbGreenplumClusterResultOutput) GreenplumConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) map[string]string { return v.GreenplumConfig }).(pulumi.StringMapOutput)
}

// Aggregated health of the cluster.
func (o LookupMdbGreenplumClusterResultOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.Health }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMdbGreenplumClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o LookupMdbGreenplumClusterResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupMdbGreenplumClusterResultOutput) Loggings() GetMdbGreenplumClusterLoggingArrayOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) []GetMdbGreenplumClusterLogging { return v.Loggings }).(GetMdbGreenplumClusterLoggingArrayOutput)
}

func (o LookupMdbGreenplumClusterResultOutput) MaintenanceWindows() GetMdbGreenplumClusterMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) []GetMdbGreenplumClusterMaintenanceWindow {
		return v.MaintenanceWindows
	}).(GetMdbGreenplumClusterMaintenanceWindowArrayOutput)
}

// Number of hosts in master subcluster (1 or 2).
func (o LookupMdbGreenplumClusterResultOutput) MasterHostCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) int { return v.MasterHostCount }).(pulumi.IntOutput)
}

// A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
func (o LookupMdbGreenplumClusterResultOutput) MasterHostGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) []string { return v.MasterHostGroupIds }).(pulumi.StringArrayOutput)
}

func (o LookupMdbGreenplumClusterResultOutput) MasterHosts() GetMdbGreenplumClusterMasterHostArrayOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) []GetMdbGreenplumClusterMasterHost { return v.MasterHosts }).(GetMdbGreenplumClusterMasterHostArrayOutput)
}

func (o LookupMdbGreenplumClusterResultOutput) MasterSubclusters() GetMdbGreenplumClusterMasterSubclusterArrayOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) []GetMdbGreenplumClusterMasterSubcluster {
		return v.MasterSubclusters
	}).(GetMdbGreenplumClusterMasterSubclusterArrayOutput)
}

// The resource name.
func (o LookupMdbGreenplumClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// The `VPC Network ID` of subnets which resource attached to.
func (o LookupMdbGreenplumClusterResultOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.NetworkId }).(pulumi.StringOutput)
}

func (o LookupMdbGreenplumClusterResultOutput) PoolerConfig() GetMdbGreenplumClusterPoolerConfigPtrOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) *GetMdbGreenplumClusterPoolerConfig { return v.PoolerConfig }).(GetMdbGreenplumClusterPoolerConfigPtrOutput)
}

func (o LookupMdbGreenplumClusterResultOutput) PxfConfigs() GetMdbGreenplumClusterPxfConfigArrayOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) []GetMdbGreenplumClusterPxfConfig { return v.PxfConfigs }).(GetMdbGreenplumClusterPxfConfigArrayOutput)
}

// The list of security groups applied to resource or their components.
func (o LookupMdbGreenplumClusterResultOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Number of hosts in segment subcluster (from 1 to 32).
func (o LookupMdbGreenplumClusterResultOutput) SegmentHostCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) int { return v.SegmentHostCount }).(pulumi.IntOutput)
}

// A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
func (o LookupMdbGreenplumClusterResultOutput) SegmentHostGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) []string { return v.SegmentHostGroupIds }).(pulumi.StringArrayOutput)
}

func (o LookupMdbGreenplumClusterResultOutput) SegmentHosts() GetMdbGreenplumClusterSegmentHostArrayOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) []GetMdbGreenplumClusterSegmentHost { return v.SegmentHosts }).(GetMdbGreenplumClusterSegmentHostArrayOutput)
}

// Number of segments on segment host (not more then 1 + RAM/8).
func (o LookupMdbGreenplumClusterResultOutput) SegmentInHost() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) int { return v.SegmentInHost }).(pulumi.IntOutput)
}

func (o LookupMdbGreenplumClusterResultOutput) SegmentSubclusters() GetMdbGreenplumClusterSegmentSubclusterArrayOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) []GetMdbGreenplumClusterSegmentSubcluster {
		return v.SegmentSubclusters
	}).(GetMdbGreenplumClusterSegmentSubclusterArrayOutput)
}

// ID of service account to use with Yandex Cloud resources (e.g. S3, Cloud Logging).
func (o LookupMdbGreenplumClusterResultOutput) ServiceAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.ServiceAccountId }).(pulumi.StringOutput)
}

// Status of the cluster.
func (o LookupMdbGreenplumClusterResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.Status }).(pulumi.StringOutput)
}

// The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.
func (o LookupMdbGreenplumClusterResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Greenplum cluster admin user name.
func (o LookupMdbGreenplumClusterResultOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.UserName }).(pulumi.StringOutput)
}

// Version of the Greenplum cluster. (`6.25`)
func (o LookupMdbGreenplumClusterResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.Version }).(pulumi.StringOutput)
}

// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
func (o LookupMdbGreenplumClusterResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbGreenplumClusterResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMdbGreenplumClusterResultOutput{})
}
