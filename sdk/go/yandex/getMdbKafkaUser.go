// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a user of the Yandex Managed Kafka cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-kafka/concepts).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myUser, err := yandex.LookupMdbKafkaUser(ctx, &yandex.LookupMdbKafkaUserArgs{
//				ClusterId: "some_cluster_id",
//				Name:      "test",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("username", myUser.Name)
//			return nil
//		})
//	}
//
// ```
func LookupMdbKafkaUser(ctx *pulumi.Context, args *LookupMdbKafkaUserArgs, opts ...pulumi.InvokeOption) (*LookupMdbKafkaUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMdbKafkaUserResult
	err := ctx.Invoke("yandex:index/getMdbKafkaUser:getMdbKafkaUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMdbKafkaUser.
type LookupMdbKafkaUserArgs struct {
	// The ID of the Kafka cluster.
	ClusterId string `pulumi:"clusterId"`
	// The resource name.
	Name string `pulumi:"name"`
}

// A collection of values returned by getMdbKafkaUser.
type LookupMdbKafkaUserResult struct {
	// The ID of the Kafka cluster.
	ClusterId string `pulumi:"clusterId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The resource name.
	Name string `pulumi:"name"`
	// The password of the user.
	Password string `pulumi:"password"`
	// Set of permissions granted to the user.
	Permissions []GetMdbKafkaUserPermission `pulumi:"permissions"`
}

func LookupMdbKafkaUserOutput(ctx *pulumi.Context, args LookupMdbKafkaUserOutputArgs, opts ...pulumi.InvokeOption) LookupMdbKafkaUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMdbKafkaUserResultOutput, error) {
			args := v.(LookupMdbKafkaUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getMdbKafkaUser:getMdbKafkaUser", args, LookupMdbKafkaUserResultOutput{}, options).(LookupMdbKafkaUserResultOutput), nil
		}).(LookupMdbKafkaUserResultOutput)
}

// A collection of arguments for invoking getMdbKafkaUser.
type LookupMdbKafkaUserOutputArgs struct {
	// The ID of the Kafka cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The resource name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupMdbKafkaUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbKafkaUserArgs)(nil)).Elem()
}

// A collection of values returned by getMdbKafkaUser.
type LookupMdbKafkaUserResultOutput struct{ *pulumi.OutputState }

func (LookupMdbKafkaUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbKafkaUserResult)(nil)).Elem()
}

func (o LookupMdbKafkaUserResultOutput) ToLookupMdbKafkaUserResultOutput() LookupMdbKafkaUserResultOutput {
	return o
}

func (o LookupMdbKafkaUserResultOutput) ToLookupMdbKafkaUserResultOutputWithContext(ctx context.Context) LookupMdbKafkaUserResultOutput {
	return o
}

// The ID of the Kafka cluster.
func (o LookupMdbKafkaUserResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbKafkaUserResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMdbKafkaUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbKafkaUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// The resource name.
func (o LookupMdbKafkaUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbKafkaUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// The password of the user.
func (o LookupMdbKafkaUserResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbKafkaUserResult) string { return v.Password }).(pulumi.StringOutput)
}

// Set of permissions granted to the user.
func (o LookupMdbKafkaUserResultOutput) Permissions() GetMdbKafkaUserPermissionArrayOutput {
	return o.ApplyT(func(v LookupMdbKafkaUserResult) []GetMdbKafkaUserPermission { return v.Permissions }).(GetMdbKafkaUserPermissionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMdbKafkaUserResultOutput{})
}
