// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Managed MongoDB cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-mongodb/concepts).
//
// > Either `clusterId` or `name` should be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := yandex.LookupMdbMongodbCluster(ctx, &yandex.LookupMdbMongodbClusterArgs{
//				Name: pulumi.StringRef("test"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("networkId", foo.NetworkId)
//			return nil
//		})
//	}
//
// ```
func LookupMdbMongodbCluster(ctx *pulumi.Context, args *LookupMdbMongodbClusterArgs, opts ...pulumi.InvokeOption) (*LookupMdbMongodbClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMdbMongodbClusterResult
	err := ctx.Invoke("yandex:index/getMdbMongodbCluster:getMdbMongodbCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMdbMongodbCluster.
type LookupMdbMongodbClusterArgs struct {
	// Configuration of the MongoDB subcluster.
	ClusterConfig *GetMdbMongodbClusterClusterConfig `pulumi:"clusterConfig"`
	// The ID of the cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The creation timestamp of the resource.
	CreatedAt *string `pulumi:"createdAt"`
	// A database of the MongoDB cluster.
	//
	// Deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database
	Databases []GetMdbMongodbClusterDatabase `pulumi:"databases"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The resource description.
	Description *string `pulumi:"description"`
	// ID of the KMS key for cluster disk encryption.
	DiskEncryptionKeyId *string `pulumi:"diskEncryptionKeyId"`
	// Disk size autoscaling settings for mongocfg.
	DiskSizeAutoscalingMongocfg *GetMdbMongodbClusterDiskSizeAutoscalingMongocfg `pulumi:"diskSizeAutoscalingMongocfg"`
	// Disk size autoscaling settings for mongod.
	DiskSizeAutoscalingMongod *GetMdbMongodbClusterDiskSizeAutoscalingMongod `pulumi:"diskSizeAutoscalingMongod"`
	// Disk size autoscaling settings for mongoinfra.
	DiskSizeAutoscalingMongoinfra *GetMdbMongodbClusterDiskSizeAutoscalingMongoinfra `pulumi:"diskSizeAutoscalingMongoinfra"`
	// Disk size autoscaling settings for mongos.
	DiskSizeAutoscalingMongos *GetMdbMongodbClusterDiskSizeAutoscalingMongos `pulumi:"diskSizeAutoscalingMongos"`
	// Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment *string `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
	Health *string `pulumi:"health"`
	// A host of the MongoDB cluster.
	Hosts []GetMdbMongodbClusterHost `pulumi:"hosts"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// Maintenance window settings of the MongoDB cluster.
	MaintenanceWindow *GetMdbMongodbClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId *string `pulumi:"networkId"`
	// (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
	//
	// Deprecated: to manage `resources`s, please switch to using a separate resource type `resources_mongo*`
	Resources *GetMdbMongodbClusterResources `pulumi:"resources"`
	// Resources allocated to `mongocfg` hosts of the MongoDB cluster.
	ResourcesMongocfg *GetMdbMongodbClusterResourcesMongocfg `pulumi:"resourcesMongocfg"`
	// Resources allocated to `mongod` hosts of the MongoDB cluster.
	ResourcesMongod *GetMdbMongodbClusterResourcesMongod `pulumi:"resourcesMongod"`
	// Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
	ResourcesMongoinfra *GetMdbMongodbClusterResourcesMongoinfra `pulumi:"resourcesMongoinfra"`
	// Resources allocated to `mongos` hosts of the MongoDB cluster.
	ResourcesMongos *GetMdbMongodbClusterResourcesMongos `pulumi:"resourcesMongos"`
	// The cluster will be created from the specified backup.
	Restore *GetMdbMongodbClusterRestore `pulumi:"restore"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// MongoDB Cluster mode enabled/disabled.
	Sharded *bool `pulumi:"sharded"`
	// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
	Status *string `pulumi:"status"`
	// A user of the MongoDB cluster.
	//
	// Deprecated: to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user
	Users []GetMdbMongodbClusterUser `pulumi:"users"`
}

// A collection of values returned by getMdbMongodbCluster.
type LookupMdbMongodbClusterResult struct {
	// Configuration of the MongoDB subcluster.
	ClusterConfig *GetMdbMongodbClusterClusterConfig `pulumi:"clusterConfig"`
	// The ID of the cluster.
	ClusterId string `pulumi:"clusterId"`
	// The creation timestamp of the resource.
	CreatedAt string `pulumi:"createdAt"`
	// A database of the MongoDB cluster.
	//
	// Deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database
	Databases []GetMdbMongodbClusterDatabase `pulumi:"databases"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection bool `pulumi:"deletionProtection"`
	// The resource description.
	Description *string `pulumi:"description"`
	// ID of the KMS key for cluster disk encryption.
	DiskEncryptionKeyId string `pulumi:"diskEncryptionKeyId"`
	// Disk size autoscaling settings for mongocfg.
	DiskSizeAutoscalingMongocfg GetMdbMongodbClusterDiskSizeAutoscalingMongocfg `pulumi:"diskSizeAutoscalingMongocfg"`
	// Disk size autoscaling settings for mongod.
	DiskSizeAutoscalingMongod GetMdbMongodbClusterDiskSizeAutoscalingMongod `pulumi:"diskSizeAutoscalingMongod"`
	// Disk size autoscaling settings for mongoinfra.
	DiskSizeAutoscalingMongoinfra GetMdbMongodbClusterDiskSizeAutoscalingMongoinfra `pulumi:"diskSizeAutoscalingMongoinfra"`
	// Disk size autoscaling settings for mongos.
	DiskSizeAutoscalingMongos GetMdbMongodbClusterDiskSizeAutoscalingMongos `pulumi:"diskSizeAutoscalingMongos"`
	// Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment *string `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId string `pulumi:"folderId"`
	// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
	Health string `pulumi:"health"`
	// A host of the MongoDB cluster.
	Hosts []GetMdbMongodbClusterHost `pulumi:"hosts"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// Maintenance window settings of the MongoDB cluster.
	MaintenanceWindow GetMdbMongodbClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId *string `pulumi:"networkId"`
	// (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
	//
	// Deprecated: to manage `resources`s, please switch to using a separate resource type `resources_mongo*`
	Resources *GetMdbMongodbClusterResources `pulumi:"resources"`
	// Resources allocated to `mongocfg` hosts of the MongoDB cluster.
	ResourcesMongocfg *GetMdbMongodbClusterResourcesMongocfg `pulumi:"resourcesMongocfg"`
	// Resources allocated to `mongod` hosts of the MongoDB cluster.
	ResourcesMongod *GetMdbMongodbClusterResourcesMongod `pulumi:"resourcesMongod"`
	// Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
	ResourcesMongoinfra *GetMdbMongodbClusterResourcesMongoinfra `pulumi:"resourcesMongoinfra"`
	// Resources allocated to `mongos` hosts of the MongoDB cluster.
	ResourcesMongos *GetMdbMongodbClusterResourcesMongos `pulumi:"resourcesMongos"`
	// The cluster will be created from the specified backup.
	Restore *GetMdbMongodbClusterRestore `pulumi:"restore"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// MongoDB Cluster mode enabled/disabled.
	Sharded bool `pulumi:"sharded"`
	// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
	Status string `pulumi:"status"`
	// A user of the MongoDB cluster.
	//
	// Deprecated: to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user
	Users []GetMdbMongodbClusterUser `pulumi:"users"`
}

func LookupMdbMongodbClusterOutput(ctx *pulumi.Context, args LookupMdbMongodbClusterOutputArgs, opts ...pulumi.InvokeOption) LookupMdbMongodbClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMdbMongodbClusterResultOutput, error) {
			args := v.(LookupMdbMongodbClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getMdbMongodbCluster:getMdbMongodbCluster", args, LookupMdbMongodbClusterResultOutput{}, options).(LookupMdbMongodbClusterResultOutput), nil
		}).(LookupMdbMongodbClusterResultOutput)
}

// A collection of arguments for invoking getMdbMongodbCluster.
type LookupMdbMongodbClusterOutputArgs struct {
	// Configuration of the MongoDB subcluster.
	ClusterConfig GetMdbMongodbClusterClusterConfigPtrInput `pulumi:"clusterConfig"`
	// The ID of the cluster.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// A database of the MongoDB cluster.
	//
	// Deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database
	Databases GetMdbMongodbClusterDatabaseArrayInput `pulumi:"databases"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolPtrInput `pulumi:"deletionProtection"`
	// The resource description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// ID of the KMS key for cluster disk encryption.
	DiskEncryptionKeyId pulumi.StringPtrInput `pulumi:"diskEncryptionKeyId"`
	// Disk size autoscaling settings for mongocfg.
	DiskSizeAutoscalingMongocfg GetMdbMongodbClusterDiskSizeAutoscalingMongocfgPtrInput `pulumi:"diskSizeAutoscalingMongocfg"`
	// Disk size autoscaling settings for mongod.
	DiskSizeAutoscalingMongod GetMdbMongodbClusterDiskSizeAutoscalingMongodPtrInput `pulumi:"diskSizeAutoscalingMongod"`
	// Disk size autoscaling settings for mongoinfra.
	DiskSizeAutoscalingMongoinfra GetMdbMongodbClusterDiskSizeAutoscalingMongoinfraPtrInput `pulumi:"diskSizeAutoscalingMongoinfra"`
	// Disk size autoscaling settings for mongos.
	DiskSizeAutoscalingMongos GetMdbMongodbClusterDiskSizeAutoscalingMongosPtrInput `pulumi:"diskSizeAutoscalingMongos"`
	// Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment pulumi.StringPtrInput `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput `pulumi:"folderId"`
	// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
	Health pulumi.StringPtrInput `pulumi:"health"`
	// A host of the MongoDB cluster.
	Hosts GetMdbMongodbClusterHostArrayInput `pulumi:"hosts"`
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Maintenance window settings of the MongoDB cluster.
	MaintenanceWindow GetMdbMongodbClusterMaintenanceWindowPtrInput `pulumi:"maintenanceWindow"`
	// The resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringPtrInput `pulumi:"networkId"`
	// (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
	//
	// Deprecated: to manage `resources`s, please switch to using a separate resource type `resources_mongo*`
	Resources GetMdbMongodbClusterResourcesPtrInput `pulumi:"resources"`
	// Resources allocated to `mongocfg` hosts of the MongoDB cluster.
	ResourcesMongocfg GetMdbMongodbClusterResourcesMongocfgPtrInput `pulumi:"resourcesMongocfg"`
	// Resources allocated to `mongod` hosts of the MongoDB cluster.
	ResourcesMongod GetMdbMongodbClusterResourcesMongodPtrInput `pulumi:"resourcesMongod"`
	// Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
	ResourcesMongoinfra GetMdbMongodbClusterResourcesMongoinfraPtrInput `pulumi:"resourcesMongoinfra"`
	// Resources allocated to `mongos` hosts of the MongoDB cluster.
	ResourcesMongos GetMdbMongodbClusterResourcesMongosPtrInput `pulumi:"resourcesMongos"`
	// The cluster will be created from the specified backup.
	Restore GetMdbMongodbClusterRestorePtrInput `pulumi:"restore"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// MongoDB Cluster mode enabled/disabled.
	Sharded pulumi.BoolPtrInput `pulumi:"sharded"`
	// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
	Status pulumi.StringPtrInput `pulumi:"status"`
	// A user of the MongoDB cluster.
	//
	// Deprecated: to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user
	Users GetMdbMongodbClusterUserArrayInput `pulumi:"users"`
}

func (LookupMdbMongodbClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbMongodbClusterArgs)(nil)).Elem()
}

// A collection of values returned by getMdbMongodbCluster.
type LookupMdbMongodbClusterResultOutput struct{ *pulumi.OutputState }

func (LookupMdbMongodbClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbMongodbClusterResult)(nil)).Elem()
}

func (o LookupMdbMongodbClusterResultOutput) ToLookupMdbMongodbClusterResultOutput() LookupMdbMongodbClusterResultOutput {
	return o
}

func (o LookupMdbMongodbClusterResultOutput) ToLookupMdbMongodbClusterResultOutputWithContext(ctx context.Context) LookupMdbMongodbClusterResultOutput {
	return o
}

// Configuration of the MongoDB subcluster.
func (o LookupMdbMongodbClusterResultOutput) ClusterConfig() GetMdbMongodbClusterClusterConfigPtrOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) *GetMdbMongodbClusterClusterConfig { return v.ClusterConfig }).(GetMdbMongodbClusterClusterConfigPtrOutput)
}

// The ID of the cluster.
func (o LookupMdbMongodbClusterResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The creation timestamp of the resource.
func (o LookupMdbMongodbClusterResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// A database of the MongoDB cluster.
//
// Deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database
func (o LookupMdbMongodbClusterResultOutput) Databases() GetMdbMongodbClusterDatabaseArrayOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) []GetMdbMongodbClusterDatabase { return v.Databases }).(GetMdbMongodbClusterDatabaseArrayOutput)
}

// The `true` value means that resource is protected from accidental deletion.
func (o LookupMdbMongodbClusterResultOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) bool { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// The resource description.
func (o LookupMdbMongodbClusterResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// ID of the KMS key for cluster disk encryption.
func (o LookupMdbMongodbClusterResultOutput) DiskEncryptionKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) string { return v.DiskEncryptionKeyId }).(pulumi.StringOutput)
}

// Disk size autoscaling settings for mongocfg.
func (o LookupMdbMongodbClusterResultOutput) DiskSizeAutoscalingMongocfg() GetMdbMongodbClusterDiskSizeAutoscalingMongocfgOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) GetMdbMongodbClusterDiskSizeAutoscalingMongocfg {
		return v.DiskSizeAutoscalingMongocfg
	}).(GetMdbMongodbClusterDiskSizeAutoscalingMongocfgOutput)
}

// Disk size autoscaling settings for mongod.
func (o LookupMdbMongodbClusterResultOutput) DiskSizeAutoscalingMongod() GetMdbMongodbClusterDiskSizeAutoscalingMongodOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) GetMdbMongodbClusterDiskSizeAutoscalingMongod {
		return v.DiskSizeAutoscalingMongod
	}).(GetMdbMongodbClusterDiskSizeAutoscalingMongodOutput)
}

// Disk size autoscaling settings for mongoinfra.
func (o LookupMdbMongodbClusterResultOutput) DiskSizeAutoscalingMongoinfra() GetMdbMongodbClusterDiskSizeAutoscalingMongoinfraOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) GetMdbMongodbClusterDiskSizeAutoscalingMongoinfra {
		return v.DiskSizeAutoscalingMongoinfra
	}).(GetMdbMongodbClusterDiskSizeAutoscalingMongoinfraOutput)
}

// Disk size autoscaling settings for mongos.
func (o LookupMdbMongodbClusterResultOutput) DiskSizeAutoscalingMongos() GetMdbMongodbClusterDiskSizeAutoscalingMongosOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) GetMdbMongodbClusterDiskSizeAutoscalingMongos {
		return v.DiskSizeAutoscalingMongos
	}).(GetMdbMongodbClusterDiskSizeAutoscalingMongosOutput)
}

// Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
func (o LookupMdbMongodbClusterResultOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o LookupMdbMongodbClusterResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
func (o LookupMdbMongodbClusterResultOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) string { return v.Health }).(pulumi.StringOutput)
}

// A host of the MongoDB cluster.
func (o LookupMdbMongodbClusterResultOutput) Hosts() GetMdbMongodbClusterHostArrayOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) []GetMdbMongodbClusterHost { return v.Hosts }).(GetMdbMongodbClusterHostArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMdbMongodbClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o LookupMdbMongodbClusterResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Maintenance window settings of the MongoDB cluster.
func (o LookupMdbMongodbClusterResultOutput) MaintenanceWindow() GetMdbMongodbClusterMaintenanceWindowOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) GetMdbMongodbClusterMaintenanceWindow {
		return v.MaintenanceWindow
	}).(GetMdbMongodbClusterMaintenanceWindowOutput)
}

// The resource name.
func (o LookupMdbMongodbClusterResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The `VPC Network ID` of subnets which resource attached to.
func (o LookupMdbMongodbClusterResultOutput) NetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) *string { return v.NetworkId }).(pulumi.StringPtrOutput)
}

// (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
//
// Deprecated: to manage `resources`s, please switch to using a separate resource type `resources_mongo*`
func (o LookupMdbMongodbClusterResultOutput) Resources() GetMdbMongodbClusterResourcesPtrOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) *GetMdbMongodbClusterResources { return v.Resources }).(GetMdbMongodbClusterResourcesPtrOutput)
}

// Resources allocated to `mongocfg` hosts of the MongoDB cluster.
func (o LookupMdbMongodbClusterResultOutput) ResourcesMongocfg() GetMdbMongodbClusterResourcesMongocfgPtrOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) *GetMdbMongodbClusterResourcesMongocfg {
		return v.ResourcesMongocfg
	}).(GetMdbMongodbClusterResourcesMongocfgPtrOutput)
}

// Resources allocated to `mongod` hosts of the MongoDB cluster.
func (o LookupMdbMongodbClusterResultOutput) ResourcesMongod() GetMdbMongodbClusterResourcesMongodPtrOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) *GetMdbMongodbClusterResourcesMongod { return v.ResourcesMongod }).(GetMdbMongodbClusterResourcesMongodPtrOutput)
}

// Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
func (o LookupMdbMongodbClusterResultOutput) ResourcesMongoinfra() GetMdbMongodbClusterResourcesMongoinfraPtrOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) *GetMdbMongodbClusterResourcesMongoinfra {
		return v.ResourcesMongoinfra
	}).(GetMdbMongodbClusterResourcesMongoinfraPtrOutput)
}

// Resources allocated to `mongos` hosts of the MongoDB cluster.
func (o LookupMdbMongodbClusterResultOutput) ResourcesMongos() GetMdbMongodbClusterResourcesMongosPtrOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) *GetMdbMongodbClusterResourcesMongos { return v.ResourcesMongos }).(GetMdbMongodbClusterResourcesMongosPtrOutput)
}

// The cluster will be created from the specified backup.
func (o LookupMdbMongodbClusterResultOutput) Restore() GetMdbMongodbClusterRestorePtrOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) *GetMdbMongodbClusterRestore { return v.Restore }).(GetMdbMongodbClusterRestorePtrOutput)
}

// The list of security groups applied to resource or their components.
func (o LookupMdbMongodbClusterResultOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// MongoDB Cluster mode enabled/disabled.
func (o LookupMdbMongodbClusterResultOutput) Sharded() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) bool { return v.Sharded }).(pulumi.BoolOutput)
}

// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
func (o LookupMdbMongodbClusterResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) string { return v.Status }).(pulumi.StringOutput)
}

// A user of the MongoDB cluster.
//
// Deprecated: to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user
func (o LookupMdbMongodbClusterResultOutput) Users() GetMdbMongodbClusterUserArrayOutput {
	return o.ApplyT(func(v LookupMdbMongodbClusterResult) []GetMdbMongodbClusterUser { return v.Users }).(GetMdbMongodbClusterUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMdbMongodbClusterResultOutput{})
}
