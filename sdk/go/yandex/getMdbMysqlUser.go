// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Managed MySQL user. For more information, see [the official documentation](https://yandex.cloud/docs/managed-mysql/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := yandex.LookupMdbMysqlUser(ctx, &yandex.LookupMdbMysqlUserArgs{
//				ClusterId: "some_cluster_id",
//				Name:      "test",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("permission", data.Yandex_mdb_mysql_user.Foo.Permission)
//			return nil
//		})
//	}
//
// ```
func LookupMdbMysqlUser(ctx *pulumi.Context, args *LookupMdbMysqlUserArgs, opts ...pulumi.InvokeOption) (*LookupMdbMysqlUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMdbMysqlUserResult
	err := ctx.Invoke("yandex:index/getMdbMysqlUser:getMdbMysqlUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMdbMysqlUser.
type LookupMdbMysqlUserArgs struct {
	// The ID of the MySQL cluster.
	ClusterId string `pulumi:"clusterId"`
	// The name of the MySQL user.
	Name        string                      `pulumi:"name"`
	Permissions []GetMdbMysqlUserPermission `pulumi:"permissions"`
}

// A collection of values returned by getMdbMysqlUser.
type LookupMdbMysqlUserResult struct {
	// Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD` (for version 5.7 `MYSQL_NATIVE_PASSWORD`, `SHA256_PASSWORD`)
	AuthenticationPlugin string `pulumi:"authenticationPlugin"`
	// The ID of the MySQL cluster.
	ClusterId        string                           `pulumi:"clusterId"`
	ConnectionLimits []GetMdbMysqlUserConnectionLimit `pulumi:"connectionLimits"`
	// Connection Manager connection configuration. Filled in by the server automatically.
	ConnectionManager map[string]string `pulumi:"connectionManager"`
	// List user's global permissions. Allowed permissions: `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS`, `FLUSH_OPTIMIZER_COSTS`, `SHOW_ROUTINE`, `MDB_ADMIN` for clear list use empty list. If the attribute is not specified there will be no changes.
	GlobalPermissions []string `pulumi:"globalPermissions"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the MySQL user.
	Name        string                      `pulumi:"name"`
	Permissions []GetMdbMysqlUserPermission `pulumi:"permissions"`
}

func LookupMdbMysqlUserOutput(ctx *pulumi.Context, args LookupMdbMysqlUserOutputArgs, opts ...pulumi.InvokeOption) LookupMdbMysqlUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMdbMysqlUserResultOutput, error) {
			args := v.(LookupMdbMysqlUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getMdbMysqlUser:getMdbMysqlUser", args, LookupMdbMysqlUserResultOutput{}, options).(LookupMdbMysqlUserResultOutput), nil
		}).(LookupMdbMysqlUserResultOutput)
}

// A collection of arguments for invoking getMdbMysqlUser.
type LookupMdbMysqlUserOutputArgs struct {
	// The ID of the MySQL cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The name of the MySQL user.
	Name        pulumi.StringInput                  `pulumi:"name"`
	Permissions GetMdbMysqlUserPermissionArrayInput `pulumi:"permissions"`
}

func (LookupMdbMysqlUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbMysqlUserArgs)(nil)).Elem()
}

// A collection of values returned by getMdbMysqlUser.
type LookupMdbMysqlUserResultOutput struct{ *pulumi.OutputState }

func (LookupMdbMysqlUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbMysqlUserResult)(nil)).Elem()
}

func (o LookupMdbMysqlUserResultOutput) ToLookupMdbMysqlUserResultOutput() LookupMdbMysqlUserResultOutput {
	return o
}

func (o LookupMdbMysqlUserResultOutput) ToLookupMdbMysqlUserResultOutputWithContext(ctx context.Context) LookupMdbMysqlUserResultOutput {
	return o
}

// Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD` (for version 5.7 `MYSQL_NATIVE_PASSWORD`, `SHA256_PASSWORD`)
func (o LookupMdbMysqlUserResultOutput) AuthenticationPlugin() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) string { return v.AuthenticationPlugin }).(pulumi.StringOutput)
}

// The ID of the MySQL cluster.
func (o LookupMdbMysqlUserResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o LookupMdbMysqlUserResultOutput) ConnectionLimits() GetMdbMysqlUserConnectionLimitArrayOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) []GetMdbMysqlUserConnectionLimit { return v.ConnectionLimits }).(GetMdbMysqlUserConnectionLimitArrayOutput)
}

// Connection Manager connection configuration. Filled in by the server automatically.
func (o LookupMdbMysqlUserResultOutput) ConnectionManager() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) map[string]string { return v.ConnectionManager }).(pulumi.StringMapOutput)
}

// List user's global permissions. Allowed permissions: `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS`, `FLUSH_OPTIMIZER_COSTS`, `SHOW_ROUTINE`, `MDB_ADMIN` for clear list use empty list. If the attribute is not specified there will be no changes.
func (o LookupMdbMysqlUserResultOutput) GlobalPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) []string { return v.GlobalPermissions }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMdbMysqlUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the MySQL user.
func (o LookupMdbMysqlUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupMdbMysqlUserResultOutput) Permissions() GetMdbMysqlUserPermissionArrayOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) []GetMdbMysqlUserPermission { return v.Permissions }).(GetMdbMysqlUserPermissionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMdbMysqlUserResultOutput{})
}
