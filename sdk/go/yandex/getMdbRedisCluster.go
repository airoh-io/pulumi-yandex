// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Managed Redis cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-redis/concepts).
//
// > Either `clusterId` or `name` should be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := yandex.LookupMdbRedisCluster(ctx, &yandex.LookupMdbRedisClusterArgs{
//				Name: pulumi.StringRef("test"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("networkId", foo.NetworkId)
//			return nil
//		})
//	}
//
// ```
func LookupMdbRedisCluster(ctx *pulumi.Context, args *LookupMdbRedisClusterArgs, opts ...pulumi.InvokeOption) (*LookupMdbRedisClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMdbRedisClusterResult
	err := ctx.Invoke("yandex:index/getMdbRedisCluster:getMdbRedisCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMdbRedisCluster.
type LookupMdbRedisClusterArgs struct {
	// The ID of the Redis cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// ID of the KMS key for cluster disk encryption.
	DiskEncryptionKeyId *string `pulumi:"diskEncryptionKeyId"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// The name of the Redis cluster.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getMdbRedisCluster.
type LookupMdbRedisClusterResult struct {
	// Announce fqdn instead of ip address.
	AnnounceHostnames bool `pulumi:"announceHostnames"`
	// Allows to use ACL users to auth in sentinel
	AuthSentinel bool `pulumi:"authSentinel"`
	// The ID of the Redis cluster.
	ClusterId string `pulumi:"clusterId"`
	// Configuration of the Redis cluster.
	Configs []GetMdbRedisClusterConfig `pulumi:"configs"`
	// The creation timestamp of the resource.
	CreatedAt string `pulumi:"createdAt"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection bool `pulumi:"deletionProtection"`
	// The resource description.
	Description string `pulumi:"description"`
	// ID of the KMS key for cluster disk encryption.
	DiskEncryptionKeyId string `pulumi:"diskEncryptionKeyId"`
	// Disk size autoscaling settings.
	DiskSizeAutoscalings []GetMdbRedisClusterDiskSizeAutoscaling `pulumi:"diskSizeAutoscalings"`
	// Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment string `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId string `pulumi:"folderId"`
	// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
	Health string `pulumi:"health"`
	// A host of the Redis cluster.
	Hosts []GetMdbRedisClusterHost `pulumi:"hosts"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// Maintenance window settings.
	MaintenanceWindows []GetMdbRedisClusterMaintenanceWindow `pulumi:"maintenanceWindows"`
	// The name of the Redis cluster.
	Name string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId string `pulumi:"networkId"`
	// Persistence mode. Possible values: `ON`, `OFF`.
	PersistenceMode string `pulumi:"persistenceMode"`
	// Resources allocated to hosts of the Redis cluster.
	Resources []GetMdbRedisClusterResource `pulumi:"resources"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not allowed.
	Sharded bool `pulumi:"sharded"`
	// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
	Status string `pulumi:"status"`
	// TLS support mode enabled/disabled.
	TlsEnabled bool `pulumi:"tlsEnabled"`
}

func LookupMdbRedisClusterOutput(ctx *pulumi.Context, args LookupMdbRedisClusterOutputArgs, opts ...pulumi.InvokeOption) LookupMdbRedisClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMdbRedisClusterResultOutput, error) {
			args := v.(LookupMdbRedisClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getMdbRedisCluster:getMdbRedisCluster", args, LookupMdbRedisClusterResultOutput{}, options).(LookupMdbRedisClusterResultOutput), nil
		}).(LookupMdbRedisClusterResultOutput)
}

// A collection of arguments for invoking getMdbRedisCluster.
type LookupMdbRedisClusterOutputArgs struct {
	// The ID of the Redis cluster.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolPtrInput `pulumi:"deletionProtection"`
	// ID of the KMS key for cluster disk encryption.
	DiskEncryptionKeyId pulumi.StringPtrInput `pulumi:"diskEncryptionKeyId"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput `pulumi:"folderId"`
	// The name of the Redis cluster.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupMdbRedisClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbRedisClusterArgs)(nil)).Elem()
}

// A collection of values returned by getMdbRedisCluster.
type LookupMdbRedisClusterResultOutput struct{ *pulumi.OutputState }

func (LookupMdbRedisClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbRedisClusterResult)(nil)).Elem()
}

func (o LookupMdbRedisClusterResultOutput) ToLookupMdbRedisClusterResultOutput() LookupMdbRedisClusterResultOutput {
	return o
}

func (o LookupMdbRedisClusterResultOutput) ToLookupMdbRedisClusterResultOutputWithContext(ctx context.Context) LookupMdbRedisClusterResultOutput {
	return o
}

// Announce fqdn instead of ip address.
func (o LookupMdbRedisClusterResultOutput) AnnounceHostnames() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) bool { return v.AnnounceHostnames }).(pulumi.BoolOutput)
}

// Allows to use ACL users to auth in sentinel
func (o LookupMdbRedisClusterResultOutput) AuthSentinel() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) bool { return v.AuthSentinel }).(pulumi.BoolOutput)
}

// The ID of the Redis cluster.
func (o LookupMdbRedisClusterResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// Configuration of the Redis cluster.
func (o LookupMdbRedisClusterResultOutput) Configs() GetMdbRedisClusterConfigArrayOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) []GetMdbRedisClusterConfig { return v.Configs }).(GetMdbRedisClusterConfigArrayOutput)
}

// The creation timestamp of the resource.
func (o LookupMdbRedisClusterResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The `true` value means that resource is protected from accidental deletion.
func (o LookupMdbRedisClusterResultOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) bool { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// The resource description.
func (o LookupMdbRedisClusterResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) string { return v.Description }).(pulumi.StringOutput)
}

// ID of the KMS key for cluster disk encryption.
func (o LookupMdbRedisClusterResultOutput) DiskEncryptionKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) string { return v.DiskEncryptionKeyId }).(pulumi.StringOutput)
}

// Disk size autoscaling settings.
func (o LookupMdbRedisClusterResultOutput) DiskSizeAutoscalings() GetMdbRedisClusterDiskSizeAutoscalingArrayOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) []GetMdbRedisClusterDiskSizeAutoscaling {
		return v.DiskSizeAutoscalings
	}).(GetMdbRedisClusterDiskSizeAutoscalingArrayOutput)
}

// Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
func (o LookupMdbRedisClusterResultOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) string { return v.Environment }).(pulumi.StringOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o LookupMdbRedisClusterResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
func (o LookupMdbRedisClusterResultOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) string { return v.Health }).(pulumi.StringOutput)
}

// A host of the Redis cluster.
func (o LookupMdbRedisClusterResultOutput) Hosts() GetMdbRedisClusterHostArrayOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) []GetMdbRedisClusterHost { return v.Hosts }).(GetMdbRedisClusterHostArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMdbRedisClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o LookupMdbRedisClusterResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Maintenance window settings.
func (o LookupMdbRedisClusterResultOutput) MaintenanceWindows() GetMdbRedisClusterMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) []GetMdbRedisClusterMaintenanceWindow { return v.MaintenanceWindows }).(GetMdbRedisClusterMaintenanceWindowArrayOutput)
}

// The name of the Redis cluster.
func (o LookupMdbRedisClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// The `VPC Network ID` of subnets which resource attached to.
func (o LookupMdbRedisClusterResultOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) string { return v.NetworkId }).(pulumi.StringOutput)
}

// Persistence mode. Possible values: `ON`, `OFF`.
func (o LookupMdbRedisClusterResultOutput) PersistenceMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) string { return v.PersistenceMode }).(pulumi.StringOutput)
}

// Resources allocated to hosts of the Redis cluster.
func (o LookupMdbRedisClusterResultOutput) Resources() GetMdbRedisClusterResourceArrayOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) []GetMdbRedisClusterResource { return v.Resources }).(GetMdbRedisClusterResourceArrayOutput)
}

// The list of security groups applied to resource or their components.
func (o LookupMdbRedisClusterResultOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not allowed.
func (o LookupMdbRedisClusterResultOutput) Sharded() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) bool { return v.Sharded }).(pulumi.BoolOutput)
}

// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
func (o LookupMdbRedisClusterResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) string { return v.Status }).(pulumi.StringOutput)
}

// TLS support mode enabled/disabled.
func (o LookupMdbRedisClusterResultOutput) TlsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMdbRedisClusterResult) bool { return v.TlsEnabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMdbRedisClusterResultOutput{})
}
