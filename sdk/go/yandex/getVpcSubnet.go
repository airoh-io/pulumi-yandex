// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex VPC subnet. For more information, see [Yandex Cloud VPC](https://yandex.cloud/docs/vpc/concepts/index).
//
// This data source is used to define [VPC Subnets](https://yandex.cloud/docs/vpc/concepts/network#subnet) that can be used by other resources.
//
// > One of `subnetId` or `name` should be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := yandex.LookupVpcSubnet(ctx, &yandex.LookupVpcSubnetArgs{
//				SubnetId: pulumi.StringRef("my-subnet-id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupVpcSubnet(ctx *pulumi.Context, args *LookupVpcSubnetArgs, opts ...pulumi.InvokeOption) (*LookupVpcSubnetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpcSubnetResult
	err := ctx.Invoke("yandex:index/getVpcSubnet:getVpcSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcSubnet.
type LookupVpcSubnetArgs struct {
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// The resource name.
	Name *string `pulumi:"name"`
	// Subnet ID.
	SubnetId *string `pulumi:"subnetId"`
}

// A collection of values returned by getVpcSubnet.
type LookupVpcSubnetResult struct {
	// The creation timestamp of the resource.
	CreatedAt string `pulumi:"createdAt"`
	// The resource description.
	Description string                   `pulumi:"description"`
	DhcpOptions []GetVpcSubnetDhcpOption `pulumi:"dhcpOptions"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId string `pulumi:"folderId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name string `pulumi:"name"`
	// ID of the network this subnet belongs to. Only networks that are in the distributed mode can have subnets.
	NetworkId string `pulumi:"networkId"`
	// The ID of the route table to assign to this subnet. Assigned route table should belong to the same network as this subnet.
	RouteTableId string `pulumi:"routeTableId"`
	// Subnet ID.
	SubnetId string `pulumi:"subnetId"`
	// A list of blocks of internal IPv4 addresses that are owned by this subnet. Provide this property when you create the subnet. For example, `10.0.0.0/22` or `192.168.0.0/16`. Blocks of addresses must be unique and non-overlapping within a network. Minimum subnet size is `/28`, and maximum subnet size is `/16`. Only IPv4 is supported.
	V4CidrBlocks []string `pulumi:"v4CidrBlocks"`
	// An optional list of blocks of IPv6 addresses that are owned by this subnet.
	V6CidrBlocks []string `pulumi:"v6CidrBlocks"`
	// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
	Zone string `pulumi:"zone"`
}

func LookupVpcSubnetOutput(ctx *pulumi.Context, args LookupVpcSubnetOutputArgs, opts ...pulumi.InvokeOption) LookupVpcSubnetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVpcSubnetResultOutput, error) {
			args := v.(LookupVpcSubnetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getVpcSubnet:getVpcSubnet", args, LookupVpcSubnetResultOutput{}, options).(LookupVpcSubnetResultOutput), nil
		}).(LookupVpcSubnetResultOutput)
}

// A collection of arguments for invoking getVpcSubnet.
type LookupVpcSubnetOutputArgs struct {
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput `pulumi:"folderId"`
	// The resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Subnet ID.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (LookupVpcSubnetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcSubnetArgs)(nil)).Elem()
}

// A collection of values returned by getVpcSubnet.
type LookupVpcSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupVpcSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcSubnetResult)(nil)).Elem()
}

func (o LookupVpcSubnetResultOutput) ToLookupVpcSubnetResultOutput() LookupVpcSubnetResultOutput {
	return o
}

func (o LookupVpcSubnetResultOutput) ToLookupVpcSubnetResultOutputWithContext(ctx context.Context) LookupVpcSubnetResultOutput {
	return o
}

// The creation timestamp of the resource.
func (o LookupVpcSubnetResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The resource description.
func (o LookupVpcSubnetResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) DhcpOptions() GetVpcSubnetDhcpOptionArrayOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) []GetVpcSubnetDhcpOption { return v.DhcpOptions }).(GetVpcSubnetDhcpOptionArrayOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o LookupVpcSubnetResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVpcSubnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.Id }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o LookupVpcSubnetResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name.
func (o LookupVpcSubnetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.Name }).(pulumi.StringOutput)
}

// ID of the network this subnet belongs to. Only networks that are in the distributed mode can have subnets.
func (o LookupVpcSubnetResultOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.NetworkId }).(pulumi.StringOutput)
}

// The ID of the route table to assign to this subnet. Assigned route table should belong to the same network as this subnet.
func (o LookupVpcSubnetResultOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// Subnet ID.
func (o LookupVpcSubnetResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// A list of blocks of internal IPv4 addresses that are owned by this subnet. Provide this property when you create the subnet. For example, `10.0.0.0/22` or `192.168.0.0/16`. Blocks of addresses must be unique and non-overlapping within a network. Minimum subnet size is `/28`, and maximum subnet size is `/16`. Only IPv4 is supported.
func (o LookupVpcSubnetResultOutput) V4CidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) []string { return v.V4CidrBlocks }).(pulumi.StringArrayOutput)
}

// An optional list of blocks of IPv6 addresses that are owned by this subnet.
func (o LookupVpcSubnetResultOutput) V6CidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) []string { return v.V6CidrBlocks }).(pulumi.StringArrayOutput)
}

// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
func (o LookupVpcSubnetResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVpcSubnetResultOutput{})
}
