// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a ClickHouse cluster within the Yandex Cloud. For more information, see [the official documentation](https://yandex.cloud/docs/managed-clickhouse/concepts).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooVpcNetwork, err := yandex.NewVpcNetwork(ctx, "fooVpcNetwork", nil)
//			if err != nil {
//				return err
//			}
//			fooVpcSubnet, err := yandex.NewVpcSubnet(ctx, "fooVpcSubnet", &yandex.VpcSubnetArgs{
//				Zone:      pulumi.String("ru-central1-a"),
//				NetworkId: fooVpcNetwork.ID(),
//				V4CidrBlocks: pulumi.StringArray{
//					pulumi.String("10.5.0.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a new MDB Clickhouse Cluster.
//			_, err = yandex.NewMdbClickhouseCluster(ctx, "myCluster", &yandex.MdbClickhouseClusterArgs{
//				Environment: pulumi.String("PRESTABLE"),
//				NetworkId:   fooVpcNetwork.ID(),
//				Clickhouse: &yandex.MdbClickhouseClusterClickhouseArgs{
//					Resources: &yandex.MdbClickhouseClusterClickhouseResourcesArgs{
//						ResourcePresetId: pulumi.String("s2.micro"),
//						DiskTypeId:       pulumi.String("network-ssd"),
//						DiskSize:         pulumi.Int(32),
//					},
//					Config: &yandex.MdbClickhouseClusterClickhouseConfigArgs{
//						LogLevel:                    pulumi.String("TRACE"),
//						MaxConnections:              pulumi.Int(100),
//						MaxConcurrentQueries:        pulumi.Int(50),
//						KeepAliveTimeout:            pulumi.Int(3000),
//						UncompressedCacheSize:       pulumi.Int(8589934592),
//						MarkCacheSize:               pulumi.Int(5368709120),
//						MaxTableSizeToDrop:          pulumi.Int(53687091200),
//						MaxPartitionSizeToDrop:      pulumi.Int(53687091200),
//						Timezone:                    pulumi.String("UTC"),
//						GeobaseUri:                  pulumi.String(""),
//						QueryLogRetentionSize:       pulumi.Int(1073741824),
//						QueryLogRetentionTime:       pulumi.Int(2592000),
//						QueryThreadLogEnabled:       pulumi.Bool(true),
//						QueryThreadLogRetentionSize: pulumi.Int(536870912),
//						QueryThreadLogRetentionTime: pulumi.Int(2592000),
//						PartLogRetentionSize:        pulumi.Int(536870912),
//						PartLogRetentionTime:        pulumi.Int(2592000),
//						MetricLogEnabled:            pulumi.Bool(true),
//						MetricLogRetentionSize:      pulumi.Int(536870912),
//						MetricLogRetentionTime:      pulumi.Int(2592000),
//						TraceLogEnabled:             pulumi.Bool(true),
//						TraceLogRetentionSize:       pulumi.Int(536870912),
//						TraceLogRetentionTime:       pulumi.Int(2592000),
//						TextLogEnabled:              pulumi.Bool(true),
//						TextLogRetentionSize:        pulumi.Int(536870912),
//						TextLogRetentionTime:        pulumi.Int(2592000),
//						TextLogLevel:                pulumi.String("TRACE"),
//						BackgroundPoolSize:          pulumi.Int(16),
//						BackgroundSchedulePoolSize:  pulumi.Int(16),
//						MergeTree: &yandex.MdbClickhouseClusterClickhouseConfigMergeTreeArgs{
//							ReplicatedDeduplicationWindow:                  pulumi.Int(100),
//							ReplicatedDeduplicationWindowSeconds:           pulumi.Int(604800),
//							PartsToDelayInsert:                             pulumi.Int(150),
//							PartsToThrowInsert:                             pulumi.Int(300),
//							MaxReplicatedMergesInQueue:                     pulumi.Int(16),
//							NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge: pulumi.Int(8),
//							MaxBytesToMergeAtMinSpaceInPool:                pulumi.Int(1048576),
//							MaxBytesToMergeAtMaxSpaceInPool:                pulumi.Int(161061273600),
//						},
//						Kafka: &yandex.MdbClickhouseClusterClickhouseConfigKafkaArgs{
//							SecurityProtocol: pulumi.String("SECURITY_PROTOCOL_PLAINTEXT"),
//							SaslMechanism:    pulumi.String("SASL_MECHANISM_GSSAPI"),
//							SaslUsername:     pulumi.String("user1"),
//							SaslPassword:     pulumi.String("pass1"),
//						},
//						KafkaTopics: yandex.MdbClickhouseClusterClickhouseConfigKafkaTopicArray{
//							&yandex.MdbClickhouseClusterClickhouseConfigKafkaTopicArgs{
//								Name: pulumi.String("topic1"),
//								Settings: &yandex.MdbClickhouseClusterClickhouseConfigKafkaTopicSettingsArgs{
//									SecurityProtocol: pulumi.String("SECURITY_PROTOCOL_SSL"),
//									SaslMechanism:    pulumi.String("SASL_MECHANISM_SCRAM_SHA_256"),
//									SaslUsername:     pulumi.String("user2"),
//									SaslPassword:     pulumi.String("pass2"),
//								},
//							},
//							&yandex.MdbClickhouseClusterClickhouseConfigKafkaTopicArgs{
//								Name: pulumi.String("topic2"),
//								Settings: &yandex.MdbClickhouseClusterClickhouseConfigKafkaTopicSettingsArgs{
//									SecurityProtocol: pulumi.String("SECURITY_PROTOCOL_SASL_PLAINTEXT"),
//									SaslMechanism:    pulumi.String("SASL_MECHANISM_PLAIN"),
//								},
//							},
//						},
//						Rabbitmq: &yandex.MdbClickhouseClusterClickhouseConfigRabbitmqArgs{
//							Username: pulumi.String("rabbit_user"),
//							Password: pulumi.String("rabbit_pass"),
//						},
//						Compressions: yandex.MdbClickhouseClusterClickhouseConfigCompressionArray{
//							&yandex.MdbClickhouseClusterClickhouseConfigCompressionArgs{
//								Method:           pulumi.String("LZ4"),
//								MinPartSize:      pulumi.Int(1024),
//								MinPartSizeRatio: pulumi.Float64(0.5),
//							},
//							&yandex.MdbClickhouseClusterClickhouseConfigCompressionArgs{
//								Method:           pulumi.String("ZSTD"),
//								MinPartSize:      pulumi.Int(2048),
//								MinPartSizeRatio: pulumi.Float64(0.7),
//							},
//						},
//						GraphiteRollups: yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupArray{
//							&yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupArgs{
//								Name: pulumi.String("rollup1"),
//								Patterns: yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternArray{
//									&yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternArgs{
//										Regexp:   pulumi.String("abc"),
//										Function: pulumi.String("func1"),
//										Retentions: yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionArray{
//											&yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionArgs{
//												Age:       pulumi.Int(1000),
//												Precision: pulumi.Int(3),
//											},
//										},
//									},
//								},
//							},
//							&yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupArgs{
//								Name: pulumi.String("rollup2"),
//								Patterns: yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternArray{
//									&yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternArgs{
//										Function: pulumi.String("func2"),
//										Retentions: yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionArray{
//											&yandex.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionArgs{
//												Age:       pulumi.Int(2000),
//												Precision: pulumi.Int(5),
//											},
//										},
//									},
//								},
//							},
//						},
//					},
//				},
//				Databases: yandex.MdbClickhouseClusterDatabaseArray{
//					&yandex.MdbClickhouseClusterDatabaseArgs{
//						Name: pulumi.String("db_name"),
//					},
//				},
//				Users: yandex.MdbClickhouseClusterUserArray{
//					&yandex.MdbClickhouseClusterUserArgs{
//						Name:     pulumi.String("user"),
//						Password: pulumi.String("your_password"),
//						Permissions: yandex.MdbClickhouseClusterUserPermissionArray{
//							&yandex.MdbClickhouseClusterUserPermissionArgs{
//								DatabaseName: pulumi.String("db_name"),
//							},
//						},
//						Settings: &yandex.MdbClickhouseClusterUserSettingsArgs{
//							MaxMemoryUsageForUser:              pulumi.Int(1000000000),
//							ReadOverflowMode:                   pulumi.String("throw"),
//							OutputFormatJsonQuote64bitIntegers: pulumi.Bool(true),
//						},
//						Quotas: yandex.MdbClickhouseClusterUserQuotaArray{
//							&yandex.MdbClickhouseClusterUserQuotaArgs{
//								IntervalDuration: pulumi.Int(3600000),
//								Queries:          pulumi.Int(10000),
//								Errors:           pulumi.Int(1000),
//							},
//							&yandex.MdbClickhouseClusterUserQuotaArgs{
//								IntervalDuration: pulumi.Int(79800000),
//								Queries:          pulumi.Int(50000),
//								Errors:           pulumi.Int(5000),
//							},
//						},
//					},
//				},
//				Hosts: yandex.MdbClickhouseClusterHostArray{
//					&yandex.MdbClickhouseClusterHostArgs{
//						Type:     pulumi.String("CLICKHOUSE"),
//						Zone:     pulumi.String("ru-central1-a"),
//						SubnetId: fooVpcSubnet.ID(),
//					},
//				},
//				FormatSchemas: yandex.MdbClickhouseClusterFormatSchemaArray{
//					&yandex.MdbClickhouseClusterFormatSchemaArgs{
//						Name: pulumi.String("test_schema"),
//						Type: pulumi.String("FORMAT_SCHEMA_TYPE_CAPNPROTO"),
//						Uri:  pulumi.String("https://storage.yandexcloud.net/ch-data/schema.proto"),
//					},
//				},
//				MlModels: yandex.MdbClickhouseClusterMlModelArray{
//					&yandex.MdbClickhouseClusterMlModelArgs{
//						Name: pulumi.String("test_model"),
//						Type: pulumi.String("ML_MODEL_TYPE_CATBOOST"),
//						Uri:  pulumi.String("https://storage.yandexcloud.net/ch-data/train.csv"),
//					},
//				},
//				ServiceAccountId: pulumi.String("your_service_account_id"),
//				CloudStorage: &yandex.MdbClickhouseClusterCloudStorageArgs{
//					Enabled: pulumi.Bool(false),
//				},
//				MaintenanceWindow: &yandex.MdbClickhouseClusterMaintenanceWindowArgs{
//					Type: pulumi.String("ANYTIME"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Auxiliary resources
//			fooVpcNetwork, err := yandex.NewVpcNetwork(ctx, "fooVpcNetwork", nil)
//			if err != nil {
//				return err
//			}
//			fooVpcSubnet, err := yandex.NewVpcSubnet(ctx, "fooVpcSubnet", &yandex.VpcSubnetArgs{
//				Zone:      pulumi.String("ru-central1-a"),
//				NetworkId: fooVpcNetwork.ID(),
//				V4CidrBlocks: pulumi.StringArray{
//					pulumi.String("10.1.0.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			bar, err := yandex.NewVpcSubnet(ctx, "bar", &yandex.VpcSubnetArgs{
//				Zone:      pulumi.String("ru-central1-b"),
//				NetworkId: fooVpcNetwork.ID(),
//				V4CidrBlocks: pulumi.StringArray{
//					pulumi.String("10.2.0.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			baz, err := yandex.NewVpcSubnet(ctx, "baz", &yandex.VpcSubnetArgs{
//				Zone:      pulumi.String("ru-central1-d"),
//				NetworkId: fooVpcNetwork.ID(),
//				V4CidrBlocks: pulumi.StringArray{
//					pulumi.String("10.3.0.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a new MDB High Availability Clickhouse Cluster.
//			_, err = yandex.NewMdbClickhouseCluster(ctx, "myCluster", &yandex.MdbClickhouseClusterArgs{
//				Environment: pulumi.String("PRESTABLE"),
//				NetworkId:   fooVpcNetwork.ID(),
//				Clickhouse: &yandex.MdbClickhouseClusterClickhouseArgs{
//					Resources: &yandex.MdbClickhouseClusterClickhouseResourcesArgs{
//						ResourcePresetId: pulumi.String("s2.micro"),
//						DiskTypeId:       pulumi.String("network-ssd"),
//						DiskSize:         pulumi.Int(16),
//					},
//				},
//				Zookeeper: &yandex.MdbClickhouseClusterZookeeperArgs{
//					Resources: &yandex.MdbClickhouseClusterZookeeperResourcesArgs{
//						ResourcePresetId: pulumi.String("s2.micro"),
//						DiskTypeId:       pulumi.String("network-ssd"),
//						DiskSize:         pulumi.Int(10),
//					},
//				},
//				Databases: yandex.MdbClickhouseClusterDatabaseArray{
//					&yandex.MdbClickhouseClusterDatabaseArgs{
//						Name: pulumi.String("db_name"),
//					},
//				},
//				Users: yandex.MdbClickhouseClusterUserArray{
//					&yandex.MdbClickhouseClusterUserArgs{
//						Name:     pulumi.String("user"),
//						Password: pulumi.String("password"),
//						Permissions: yandex.MdbClickhouseClusterUserPermissionArray{
//							&yandex.MdbClickhouseClusterUserPermissionArgs{
//								DatabaseName: pulumi.String("db_name"),
//							},
//						},
//						Settings: &yandex.MdbClickhouseClusterUserSettingsArgs{
//							MaxMemoryUsageForUser:              pulumi.Int(1000000000),
//							ReadOverflowMode:                   pulumi.String("throw"),
//							OutputFormatJsonQuote64bitIntegers: pulumi.Bool(true),
//						},
//						Quotas: yandex.MdbClickhouseClusterUserQuotaArray{
//							&yandex.MdbClickhouseClusterUserQuotaArgs{
//								IntervalDuration: pulumi.Int(3600000),
//								Queries:          pulumi.Int(10000),
//								Errors:           pulumi.Int(1000),
//							},
//							&yandex.MdbClickhouseClusterUserQuotaArgs{
//								IntervalDuration: pulumi.Int(79800000),
//								Queries:          pulumi.Int(50000),
//								Errors:           pulumi.Int(5000),
//							},
//						},
//					},
//				},
//				Hosts: yandex.MdbClickhouseClusterHostArray{
//					&yandex.MdbClickhouseClusterHostArgs{
//						Type:     pulumi.String("CLICKHOUSE"),
//						Zone:     pulumi.String("ru-central1-a"),
//						SubnetId: fooVpcSubnet.ID(),
//					},
//					&yandex.MdbClickhouseClusterHostArgs{
//						Type:     pulumi.String("CLICKHOUSE"),
//						Zone:     pulumi.String("ru-central1-b"),
//						SubnetId: bar.ID(),
//					},
//					&yandex.MdbClickhouseClusterHostArgs{
//						Type:     pulumi.String("ZOOKEEPER"),
//						Zone:     pulumi.String("ru-central1-a"),
//						SubnetId: fooVpcSubnet.ID(),
//					},
//					&yandex.MdbClickhouseClusterHostArgs{
//						Type:     pulumi.String("ZOOKEEPER"),
//						Zone:     pulumi.String("ru-central1-b"),
//						SubnetId: bar.ID(),
//					},
//					&yandex.MdbClickhouseClusterHostArgs{
//						Type:     pulumi.String("ZOOKEEPER"),
//						Zone:     pulumi.String("ru-central1-d"),
//						SubnetId: baz.ID(),
//					},
//				},
//				CloudStorage: &yandex.MdbClickhouseClusterCloudStorageArgs{
//					Enabled: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Auxiliary resources
//			fooVpcNetwork, err := yandex.NewVpcNetwork(ctx, "fooVpcNetwork", nil)
//			if err != nil {
//				return err
//			}
//			fooVpcSubnet, err := yandex.NewVpcSubnet(ctx, "fooVpcSubnet", &yandex.VpcSubnetArgs{
//				Zone:      pulumi.String("ru-central1-a"),
//				NetworkId: fooVpcNetwork.ID(),
//				V4CidrBlocks: pulumi.StringArray{
//					pulumi.String("10.1.0.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			bar, err := yandex.NewVpcSubnet(ctx, "bar", &yandex.VpcSubnetArgs{
//				Zone:      pulumi.String("ru-central1-b"),
//				NetworkId: fooVpcNetwork.ID(),
//				V4CidrBlocks: pulumi.StringArray{
//					pulumi.String("10.2.0.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			baz, err := yandex.NewVpcSubnet(ctx, "baz", &yandex.VpcSubnetArgs{
//				Zone:      pulumi.String("ru-central1-d"),
//				NetworkId: fooVpcNetwork.ID(),
//				V4CidrBlocks: pulumi.StringArray{
//					pulumi.String("10.3.0.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a new MDB Sharded Clickhouse Cluster.
//			_, err = yandex.NewMdbClickhouseCluster(ctx, "myCluster", &yandex.MdbClickhouseClusterArgs{
//				Environment: pulumi.String("PRODUCTION"),
//				NetworkId:   fooVpcNetwork.ID(),
//				Clickhouse: &yandex.MdbClickhouseClusterClickhouseArgs{
//					Resources: &yandex.MdbClickhouseClusterClickhouseResourcesArgs{
//						ResourcePresetId: pulumi.String("s2.micro"),
//						DiskTypeId:       pulumi.String("network-ssd"),
//						DiskSize:         pulumi.Int(16),
//					},
//				},
//				Zookeeper: &yandex.MdbClickhouseClusterZookeeperArgs{
//					Resources: &yandex.MdbClickhouseClusterZookeeperResourcesArgs{
//						ResourcePresetId: pulumi.String("s2.micro"),
//						DiskTypeId:       pulumi.String("network-ssd"),
//						DiskSize:         pulumi.Int(10),
//					},
//				},
//				Databases: yandex.MdbClickhouseClusterDatabaseArray{
//					&yandex.MdbClickhouseClusterDatabaseArgs{
//						Name: pulumi.String("db_name"),
//					},
//				},
//				Users: yandex.MdbClickhouseClusterUserArray{
//					&yandex.MdbClickhouseClusterUserArgs{
//						Name:     pulumi.String("user"),
//						Password: pulumi.String("password"),
//						Permissions: yandex.MdbClickhouseClusterUserPermissionArray{
//							&yandex.MdbClickhouseClusterUserPermissionArgs{
//								DatabaseName: pulumi.String("db_name"),
//							},
//						},
//						Settings: &yandex.MdbClickhouseClusterUserSettingsArgs{
//							MaxMemoryUsageForUser:              pulumi.Int(1000000000),
//							ReadOverflowMode:                   pulumi.String("throw"),
//							OutputFormatJsonQuote64bitIntegers: pulumi.Bool(true),
//						},
//						Quotas: yandex.MdbClickhouseClusterUserQuotaArray{
//							&yandex.MdbClickhouseClusterUserQuotaArgs{
//								IntervalDuration: pulumi.Int(3600000),
//								Queries:          pulumi.Int(10000),
//								Errors:           pulumi.Int(1000),
//							},
//							&yandex.MdbClickhouseClusterUserQuotaArgs{
//								IntervalDuration: pulumi.Int(79800000),
//								Queries:          pulumi.Int(50000),
//								Errors:           pulumi.Int(5000),
//							},
//						},
//					},
//				},
//				Shards: yandex.MdbClickhouseClusterShardArray{
//					&yandex.MdbClickhouseClusterShardArgs{
//						Name:   pulumi.String("shard1"),
//						Weight: pulumi.Int(110),
//					},
//					&yandex.MdbClickhouseClusterShardArgs{
//						Name:   pulumi.String("shard2"),
//						Weight: pulumi.Int(300),
//					},
//				},
//				Hosts: yandex.MdbClickhouseClusterHostArray{
//					&yandex.MdbClickhouseClusterHostArgs{
//						Type:      pulumi.String("CLICKHOUSE"),
//						Zone:      pulumi.String("ru-central1-a"),
//						SubnetId:  fooVpcSubnet.ID(),
//						ShardName: pulumi.String("shard1"),
//					},
//					&yandex.MdbClickhouseClusterHostArgs{
//						Type:      pulumi.String("CLICKHOUSE"),
//						Zone:      pulumi.String("ru-central1-b"),
//						SubnetId:  bar.ID(),
//						ShardName: pulumi.String("shard1"),
//					},
//					&yandex.MdbClickhouseClusterHostArgs{
//						Type:      pulumi.String("CLICKHOUSE"),
//						Zone:      pulumi.String("ru-central1-b"),
//						SubnetId:  bar.ID(),
//						ShardName: pulumi.String("shard2"),
//					},
//					&yandex.MdbClickhouseClusterHostArgs{
//						Type:      pulumi.String("CLICKHOUSE"),
//						Zone:      pulumi.String("ru-central1-d"),
//						SubnetId:  baz.ID(),
//						ShardName: pulumi.String("shard2"),
//					},
//				},
//				ShardGroups: yandex.MdbClickhouseClusterShardGroupArray{
//					&yandex.MdbClickhouseClusterShardGroupArgs{
//						Name:        pulumi.String("single_shard_group"),
//						Description: pulumi.String("Cluster configuration that contain only shard1"),
//						ShardNames: pulumi.StringArray{
//							pulumi.String("shard1"),
//						},
//					},
//				},
//				CloudStorage: &yandex.MdbClickhouseClusterCloudStorageArgs{
//					Enabled: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
//
// ```sh
// $ pulumi import yandex:index/mdbClickhouseCluster:MdbClickhouseCluster <resource Name> <resource Id>
// ```
//
// ```sh
// $ pulumi import yandex:index/mdbClickhouseCluster:MdbClickhouseCluster my_cluster ...
// ```
type MdbClickhouseCluster struct {
	pulumi.CustomResourceState

	// Access policy to the ClickHouse cluster.
	Access MdbClickhouseClusterAccessOutput `pulumi:"access"`
	// A password used to authorize as user `admin` when `sqlUserManagement` enabled.
	AdminPassword pulumi.StringPtrOutput `pulumi:"adminPassword"`
	// The period in days during which backups are stored.
	BackupRetainPeriodDays pulumi.IntPtrOutput `pulumi:"backupRetainPeriodDays"`
	// Time to start the daily backup, in the UTC timezone.
	BackupWindowStart MdbClickhouseClusterBackupWindowStartOutput `pulumi:"backupWindowStart"`
	// Configuration of the ClickHouse subcluster.
	Clickhouse MdbClickhouseClusterClickhouseOutput `pulumi:"clickhouse"`
	// Cloud Storage settings.
	CloudStorage MdbClickhouseClusterCloudStorageOutput `pulumi:"cloudStorage"`
	// The cluster identifier.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Whether to copy schema on new ClickHouse hosts.
	CopySchemaOnNewHosts pulumi.BoolPtrOutput `pulumi:"copySchemaOnNewHosts"`
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A database of the ClickHouse cluster.
	//
	// Deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_clickhouse_database
	Databases MdbClickhouseClusterDatabaseArrayOutput `pulumi:"databases"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolOutput `pulumi:"deletionProtection"`
	// The resource description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ID of the KMS key for cluster disk encryption.
	DiskEncryptionKeyId pulumi.StringOutput `pulumi:"diskEncryptionKeyId"`
	// Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.
	EmbeddedKeeper pulumi.BoolOutput `pulumi:"embeddedKeeper"`
	// Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// A set of `protobuf` or `capnproto` format schemas.
	FormatSchemas MdbClickhouseClusterFormatSchemaArrayOutput `pulumi:"formatSchemas"`
	// Aggregated health of the cluster. Can be `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
	Health pulumi.StringOutput `pulumi:"health"`
	// A host of the ClickHouse cluster.
	Hosts MdbClickhouseClusterHostArrayOutput `pulumi:"hosts"`
	// A set of key/value label pairs which assigned to resource.
	Labels            pulumi.StringMapOutput                      `pulumi:"labels"`
	MaintenanceWindow MdbClickhouseClusterMaintenanceWindowOutput `pulumi:"maintenanceWindow"`
	// A group of machine learning models.
	MlModels MdbClickhouseClusterMlModelArrayOutput `pulumi:"mlModels"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
	ServiceAccountId pulumi.StringPtrOutput `pulumi:"serviceAccountId"`
	// A group of clickhouse shards.
	ShardGroups MdbClickhouseClusterShardGroupArrayOutput `pulumi:"shardGroups"`
	// A shard of the ClickHouse cluster.
	Shards MdbClickhouseClusterShardArrayOutput `pulumi:"shards"`
	// Grants `admin` user database management permission.
	SqlDatabaseManagement pulumi.BoolOutput `pulumi:"sqlDatabaseManagement"`
	// Enables `admin` user with user management permission.
	SqlUserManagement pulumi.BoolOutput `pulumi:"sqlUserManagement"`
	// Status of the cluster. Can be `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
	Status pulumi.StringOutput `pulumi:"status"`
	// A user of the ClickHouse cluster.
	//
	// Deprecated: to manage users, please switch to using a separate resource type yandex_mdb_clickhouse_user
	Users MdbClickhouseClusterUserArrayOutput `pulumi:"users"`
	// Version of the ClickHouse server software.
	Version pulumi.StringOutput `pulumi:"version"`
	// Configuration of the ZooKeeper subcluster.
	Zookeeper MdbClickhouseClusterZookeeperOutput `pulumi:"zookeeper"`
}

// NewMdbClickhouseCluster registers a new resource with the given unique name, arguments, and options.
func NewMdbClickhouseCluster(ctx *pulumi.Context,
	name string, args *MdbClickhouseClusterArgs, opts ...pulumi.ResourceOption) (*MdbClickhouseCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Hosts == nil {
		return nil, errors.New("invalid value for required argument 'Hosts'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.AdminPassword != nil {
		args.AdminPassword = pulumi.ToSecret(args.AdminPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"adminPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MdbClickhouseCluster
	err := ctx.RegisterResource("yandex:index/mdbClickhouseCluster:MdbClickhouseCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMdbClickhouseCluster gets an existing MdbClickhouseCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMdbClickhouseCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MdbClickhouseClusterState, opts ...pulumi.ResourceOption) (*MdbClickhouseCluster, error) {
	var resource MdbClickhouseCluster
	err := ctx.ReadResource("yandex:index/mdbClickhouseCluster:MdbClickhouseCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MdbClickhouseCluster resources.
type mdbClickhouseClusterState struct {
	// Access policy to the ClickHouse cluster.
	Access *MdbClickhouseClusterAccess `pulumi:"access"`
	// A password used to authorize as user `admin` when `sqlUserManagement` enabled.
	AdminPassword *string `pulumi:"adminPassword"`
	// The period in days during which backups are stored.
	BackupRetainPeriodDays *int `pulumi:"backupRetainPeriodDays"`
	// Time to start the daily backup, in the UTC timezone.
	BackupWindowStart *MdbClickhouseClusterBackupWindowStart `pulumi:"backupWindowStart"`
	// Configuration of the ClickHouse subcluster.
	Clickhouse *MdbClickhouseClusterClickhouse `pulumi:"clickhouse"`
	// Cloud Storage settings.
	CloudStorage *MdbClickhouseClusterCloudStorage `pulumi:"cloudStorage"`
	// The cluster identifier.
	ClusterId *string `pulumi:"clusterId"`
	// Whether to copy schema on new ClickHouse hosts.
	CopySchemaOnNewHosts *bool `pulumi:"copySchemaOnNewHosts"`
	// The creation timestamp of the resource.
	CreatedAt *string `pulumi:"createdAt"`
	// A database of the ClickHouse cluster.
	//
	// Deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_clickhouse_database
	Databases []MdbClickhouseClusterDatabase `pulumi:"databases"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The resource description.
	Description *string `pulumi:"description"`
	// ID of the KMS key for cluster disk encryption.
	DiskEncryptionKeyId *string `pulumi:"diskEncryptionKeyId"`
	// Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.
	EmbeddedKeeper *bool `pulumi:"embeddedKeeper"`
	// Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment *string `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A set of `protobuf` or `capnproto` format schemas.
	FormatSchemas []MdbClickhouseClusterFormatSchema `pulumi:"formatSchemas"`
	// Aggregated health of the cluster. Can be `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
	Health *string `pulumi:"health"`
	// A host of the ClickHouse cluster.
	Hosts []MdbClickhouseClusterHost `pulumi:"hosts"`
	// A set of key/value label pairs which assigned to resource.
	Labels            map[string]string                      `pulumi:"labels"`
	MaintenanceWindow *MdbClickhouseClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// A group of machine learning models.
	MlModels []MdbClickhouseClusterMlModel `pulumi:"mlModels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId *string `pulumi:"networkId"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
	ServiceAccountId *string `pulumi:"serviceAccountId"`
	// A group of clickhouse shards.
	ShardGroups []MdbClickhouseClusterShardGroup `pulumi:"shardGroups"`
	// A shard of the ClickHouse cluster.
	Shards []MdbClickhouseClusterShard `pulumi:"shards"`
	// Grants `admin` user database management permission.
	SqlDatabaseManagement *bool `pulumi:"sqlDatabaseManagement"`
	// Enables `admin` user with user management permission.
	SqlUserManagement *bool `pulumi:"sqlUserManagement"`
	// Status of the cluster. Can be `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
	Status *string `pulumi:"status"`
	// A user of the ClickHouse cluster.
	//
	// Deprecated: to manage users, please switch to using a separate resource type yandex_mdb_clickhouse_user
	Users []MdbClickhouseClusterUser `pulumi:"users"`
	// Version of the ClickHouse server software.
	Version *string `pulumi:"version"`
	// Configuration of the ZooKeeper subcluster.
	Zookeeper *MdbClickhouseClusterZookeeper `pulumi:"zookeeper"`
}

type MdbClickhouseClusterState struct {
	// Access policy to the ClickHouse cluster.
	Access MdbClickhouseClusterAccessPtrInput
	// A password used to authorize as user `admin` when `sqlUserManagement` enabled.
	AdminPassword pulumi.StringPtrInput
	// The period in days during which backups are stored.
	BackupRetainPeriodDays pulumi.IntPtrInput
	// Time to start the daily backup, in the UTC timezone.
	BackupWindowStart MdbClickhouseClusterBackupWindowStartPtrInput
	// Configuration of the ClickHouse subcluster.
	Clickhouse MdbClickhouseClusterClickhousePtrInput
	// Cloud Storage settings.
	CloudStorage MdbClickhouseClusterCloudStoragePtrInput
	// The cluster identifier.
	ClusterId pulumi.StringPtrInput
	// Whether to copy schema on new ClickHouse hosts.
	CopySchemaOnNewHosts pulumi.BoolPtrInput
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringPtrInput
	// A database of the ClickHouse cluster.
	//
	// Deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_clickhouse_database
	Databases MdbClickhouseClusterDatabaseArrayInput
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// ID of the KMS key for cluster disk encryption.
	DiskEncryptionKeyId pulumi.StringPtrInput
	// Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.
	EmbeddedKeeper pulumi.BoolPtrInput
	// Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// A set of `protobuf` or `capnproto` format schemas.
	FormatSchemas MdbClickhouseClusterFormatSchemaArrayInput
	// Aggregated health of the cluster. Can be `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
	Health pulumi.StringPtrInput
	// A host of the ClickHouse cluster.
	Hosts MdbClickhouseClusterHostArrayInput
	// A set of key/value label pairs which assigned to resource.
	Labels            pulumi.StringMapInput
	MaintenanceWindow MdbClickhouseClusterMaintenanceWindowPtrInput
	// A group of machine learning models.
	MlModels MdbClickhouseClusterMlModelArrayInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringPtrInput
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayInput
	// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
	ServiceAccountId pulumi.StringPtrInput
	// A group of clickhouse shards.
	ShardGroups MdbClickhouseClusterShardGroupArrayInput
	// A shard of the ClickHouse cluster.
	Shards MdbClickhouseClusterShardArrayInput
	// Grants `admin` user database management permission.
	SqlDatabaseManagement pulumi.BoolPtrInput
	// Enables `admin` user with user management permission.
	SqlUserManagement pulumi.BoolPtrInput
	// Status of the cluster. Can be `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
	Status pulumi.StringPtrInput
	// A user of the ClickHouse cluster.
	//
	// Deprecated: to manage users, please switch to using a separate resource type yandex_mdb_clickhouse_user
	Users MdbClickhouseClusterUserArrayInput
	// Version of the ClickHouse server software.
	Version pulumi.StringPtrInput
	// Configuration of the ZooKeeper subcluster.
	Zookeeper MdbClickhouseClusterZookeeperPtrInput
}

func (MdbClickhouseClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbClickhouseClusterState)(nil)).Elem()
}

type mdbClickhouseClusterArgs struct {
	// Access policy to the ClickHouse cluster.
	Access *MdbClickhouseClusterAccess `pulumi:"access"`
	// A password used to authorize as user `admin` when `sqlUserManagement` enabled.
	AdminPassword *string `pulumi:"adminPassword"`
	// The period in days during which backups are stored.
	BackupRetainPeriodDays *int `pulumi:"backupRetainPeriodDays"`
	// Time to start the daily backup, in the UTC timezone.
	BackupWindowStart *MdbClickhouseClusterBackupWindowStart `pulumi:"backupWindowStart"`
	// Configuration of the ClickHouse subcluster.
	Clickhouse *MdbClickhouseClusterClickhouse `pulumi:"clickhouse"`
	// Cloud Storage settings.
	CloudStorage *MdbClickhouseClusterCloudStorage `pulumi:"cloudStorage"`
	// The cluster identifier.
	ClusterId *string `pulumi:"clusterId"`
	// Whether to copy schema on new ClickHouse hosts.
	CopySchemaOnNewHosts *bool `pulumi:"copySchemaOnNewHosts"`
	// A database of the ClickHouse cluster.
	//
	// Deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_clickhouse_database
	Databases []MdbClickhouseClusterDatabase `pulumi:"databases"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The resource description.
	Description *string `pulumi:"description"`
	// ID of the KMS key for cluster disk encryption.
	DiskEncryptionKeyId *string `pulumi:"diskEncryptionKeyId"`
	// Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.
	EmbeddedKeeper *bool `pulumi:"embeddedKeeper"`
	// Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment string `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A set of `protobuf` or `capnproto` format schemas.
	FormatSchemas []MdbClickhouseClusterFormatSchema `pulumi:"formatSchemas"`
	// A host of the ClickHouse cluster.
	Hosts []MdbClickhouseClusterHost `pulumi:"hosts"`
	// A set of key/value label pairs which assigned to resource.
	Labels            map[string]string                      `pulumi:"labels"`
	MaintenanceWindow *MdbClickhouseClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// A group of machine learning models.
	MlModels []MdbClickhouseClusterMlModel `pulumi:"mlModels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId string `pulumi:"networkId"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
	ServiceAccountId *string `pulumi:"serviceAccountId"`
	// A group of clickhouse shards.
	ShardGroups []MdbClickhouseClusterShardGroup `pulumi:"shardGroups"`
	// A shard of the ClickHouse cluster.
	Shards []MdbClickhouseClusterShard `pulumi:"shards"`
	// Grants `admin` user database management permission.
	SqlDatabaseManagement *bool `pulumi:"sqlDatabaseManagement"`
	// Enables `admin` user with user management permission.
	SqlUserManagement *bool `pulumi:"sqlUserManagement"`
	// A user of the ClickHouse cluster.
	//
	// Deprecated: to manage users, please switch to using a separate resource type yandex_mdb_clickhouse_user
	Users []MdbClickhouseClusterUser `pulumi:"users"`
	// Version of the ClickHouse server software.
	Version *string `pulumi:"version"`
	// Configuration of the ZooKeeper subcluster.
	Zookeeper *MdbClickhouseClusterZookeeper `pulumi:"zookeeper"`
}

// The set of arguments for constructing a MdbClickhouseCluster resource.
type MdbClickhouseClusterArgs struct {
	// Access policy to the ClickHouse cluster.
	Access MdbClickhouseClusterAccessPtrInput
	// A password used to authorize as user `admin` when `sqlUserManagement` enabled.
	AdminPassword pulumi.StringPtrInput
	// The period in days during which backups are stored.
	BackupRetainPeriodDays pulumi.IntPtrInput
	// Time to start the daily backup, in the UTC timezone.
	BackupWindowStart MdbClickhouseClusterBackupWindowStartPtrInput
	// Configuration of the ClickHouse subcluster.
	Clickhouse MdbClickhouseClusterClickhousePtrInput
	// Cloud Storage settings.
	CloudStorage MdbClickhouseClusterCloudStoragePtrInput
	// The cluster identifier.
	ClusterId pulumi.StringPtrInput
	// Whether to copy schema on new ClickHouse hosts.
	CopySchemaOnNewHosts pulumi.BoolPtrInput
	// A database of the ClickHouse cluster.
	//
	// Deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_clickhouse_database
	Databases MdbClickhouseClusterDatabaseArrayInput
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// ID of the KMS key for cluster disk encryption.
	DiskEncryptionKeyId pulumi.StringPtrInput
	// Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.
	EmbeddedKeeper pulumi.BoolPtrInput
	// Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment pulumi.StringInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// A set of `protobuf` or `capnproto` format schemas.
	FormatSchemas MdbClickhouseClusterFormatSchemaArrayInput
	// A host of the ClickHouse cluster.
	Hosts MdbClickhouseClusterHostArrayInput
	// A set of key/value label pairs which assigned to resource.
	Labels            pulumi.StringMapInput
	MaintenanceWindow MdbClickhouseClusterMaintenanceWindowPtrInput
	// A group of machine learning models.
	MlModels MdbClickhouseClusterMlModelArrayInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringInput
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayInput
	// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
	ServiceAccountId pulumi.StringPtrInput
	// A group of clickhouse shards.
	ShardGroups MdbClickhouseClusterShardGroupArrayInput
	// A shard of the ClickHouse cluster.
	Shards MdbClickhouseClusterShardArrayInput
	// Grants `admin` user database management permission.
	SqlDatabaseManagement pulumi.BoolPtrInput
	// Enables `admin` user with user management permission.
	SqlUserManagement pulumi.BoolPtrInput
	// A user of the ClickHouse cluster.
	//
	// Deprecated: to manage users, please switch to using a separate resource type yandex_mdb_clickhouse_user
	Users MdbClickhouseClusterUserArrayInput
	// Version of the ClickHouse server software.
	Version pulumi.StringPtrInput
	// Configuration of the ZooKeeper subcluster.
	Zookeeper MdbClickhouseClusterZookeeperPtrInput
}

func (MdbClickhouseClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbClickhouseClusterArgs)(nil)).Elem()
}

type MdbClickhouseClusterInput interface {
	pulumi.Input

	ToMdbClickhouseClusterOutput() MdbClickhouseClusterOutput
	ToMdbClickhouseClusterOutputWithContext(ctx context.Context) MdbClickhouseClusterOutput
}

func (*MdbClickhouseCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbClickhouseCluster)(nil)).Elem()
}

func (i *MdbClickhouseCluster) ToMdbClickhouseClusterOutput() MdbClickhouseClusterOutput {
	return i.ToMdbClickhouseClusterOutputWithContext(context.Background())
}

func (i *MdbClickhouseCluster) ToMdbClickhouseClusterOutputWithContext(ctx context.Context) MdbClickhouseClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbClickhouseClusterOutput)
}

// MdbClickhouseClusterArrayInput is an input type that accepts MdbClickhouseClusterArray and MdbClickhouseClusterArrayOutput values.
// You can construct a concrete instance of `MdbClickhouseClusterArrayInput` via:
//
//	MdbClickhouseClusterArray{ MdbClickhouseClusterArgs{...} }
type MdbClickhouseClusterArrayInput interface {
	pulumi.Input

	ToMdbClickhouseClusterArrayOutput() MdbClickhouseClusterArrayOutput
	ToMdbClickhouseClusterArrayOutputWithContext(context.Context) MdbClickhouseClusterArrayOutput
}

type MdbClickhouseClusterArray []MdbClickhouseClusterInput

func (MdbClickhouseClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbClickhouseCluster)(nil)).Elem()
}

func (i MdbClickhouseClusterArray) ToMdbClickhouseClusterArrayOutput() MdbClickhouseClusterArrayOutput {
	return i.ToMdbClickhouseClusterArrayOutputWithContext(context.Background())
}

func (i MdbClickhouseClusterArray) ToMdbClickhouseClusterArrayOutputWithContext(ctx context.Context) MdbClickhouseClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbClickhouseClusterArrayOutput)
}

// MdbClickhouseClusterMapInput is an input type that accepts MdbClickhouseClusterMap and MdbClickhouseClusterMapOutput values.
// You can construct a concrete instance of `MdbClickhouseClusterMapInput` via:
//
//	MdbClickhouseClusterMap{ "key": MdbClickhouseClusterArgs{...} }
type MdbClickhouseClusterMapInput interface {
	pulumi.Input

	ToMdbClickhouseClusterMapOutput() MdbClickhouseClusterMapOutput
	ToMdbClickhouseClusterMapOutputWithContext(context.Context) MdbClickhouseClusterMapOutput
}

type MdbClickhouseClusterMap map[string]MdbClickhouseClusterInput

func (MdbClickhouseClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbClickhouseCluster)(nil)).Elem()
}

func (i MdbClickhouseClusterMap) ToMdbClickhouseClusterMapOutput() MdbClickhouseClusterMapOutput {
	return i.ToMdbClickhouseClusterMapOutputWithContext(context.Background())
}

func (i MdbClickhouseClusterMap) ToMdbClickhouseClusterMapOutputWithContext(ctx context.Context) MdbClickhouseClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbClickhouseClusterMapOutput)
}

type MdbClickhouseClusterOutput struct{ *pulumi.OutputState }

func (MdbClickhouseClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbClickhouseCluster)(nil)).Elem()
}

func (o MdbClickhouseClusterOutput) ToMdbClickhouseClusterOutput() MdbClickhouseClusterOutput {
	return o
}

func (o MdbClickhouseClusterOutput) ToMdbClickhouseClusterOutputWithContext(ctx context.Context) MdbClickhouseClusterOutput {
	return o
}

// Access policy to the ClickHouse cluster.
func (o MdbClickhouseClusterOutput) Access() MdbClickhouseClusterAccessOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) MdbClickhouseClusterAccessOutput { return v.Access }).(MdbClickhouseClusterAccessOutput)
}

// A password used to authorize as user `admin` when `sqlUserManagement` enabled.
func (o MdbClickhouseClusterOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringPtrOutput { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// The period in days during which backups are stored.
func (o MdbClickhouseClusterOutput) BackupRetainPeriodDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.IntPtrOutput { return v.BackupRetainPeriodDays }).(pulumi.IntPtrOutput)
}

// Time to start the daily backup, in the UTC timezone.
func (o MdbClickhouseClusterOutput) BackupWindowStart() MdbClickhouseClusterBackupWindowStartOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) MdbClickhouseClusterBackupWindowStartOutput { return v.BackupWindowStart }).(MdbClickhouseClusterBackupWindowStartOutput)
}

// Configuration of the ClickHouse subcluster.
func (o MdbClickhouseClusterOutput) Clickhouse() MdbClickhouseClusterClickhouseOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) MdbClickhouseClusterClickhouseOutput { return v.Clickhouse }).(MdbClickhouseClusterClickhouseOutput)
}

// Cloud Storage settings.
func (o MdbClickhouseClusterOutput) CloudStorage() MdbClickhouseClusterCloudStorageOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) MdbClickhouseClusterCloudStorageOutput { return v.CloudStorage }).(MdbClickhouseClusterCloudStorageOutput)
}

// The cluster identifier.
func (o MdbClickhouseClusterOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Whether to copy schema on new ClickHouse hosts.
func (o MdbClickhouseClusterOutput) CopySchemaOnNewHosts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.BoolPtrOutput { return v.CopySchemaOnNewHosts }).(pulumi.BoolPtrOutput)
}

// The creation timestamp of the resource.
func (o MdbClickhouseClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A database of the ClickHouse cluster.
//
// Deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_clickhouse_database
func (o MdbClickhouseClusterOutput) Databases() MdbClickhouseClusterDatabaseArrayOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) MdbClickhouseClusterDatabaseArrayOutput { return v.Databases }).(MdbClickhouseClusterDatabaseArrayOutput)
}

// The `true` value means that resource is protected from accidental deletion.
func (o MdbClickhouseClusterOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.BoolOutput { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// The resource description.
func (o MdbClickhouseClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ID of the KMS key for cluster disk encryption.
func (o MdbClickhouseClusterOutput) DiskEncryptionKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringOutput { return v.DiskEncryptionKeyId }).(pulumi.StringOutput)
}

// Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.
func (o MdbClickhouseClusterOutput) EmbeddedKeeper() pulumi.BoolOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.BoolOutput { return v.EmbeddedKeeper }).(pulumi.BoolOutput)
}

// Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
func (o MdbClickhouseClusterOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o MdbClickhouseClusterOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// A set of `protobuf` or `capnproto` format schemas.
func (o MdbClickhouseClusterOutput) FormatSchemas() MdbClickhouseClusterFormatSchemaArrayOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) MdbClickhouseClusterFormatSchemaArrayOutput { return v.FormatSchemas }).(MdbClickhouseClusterFormatSchemaArrayOutput)
}

// Aggregated health of the cluster. Can be `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
func (o MdbClickhouseClusterOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringOutput { return v.Health }).(pulumi.StringOutput)
}

// A host of the ClickHouse cluster.
func (o MdbClickhouseClusterOutput) Hosts() MdbClickhouseClusterHostArrayOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) MdbClickhouseClusterHostArrayOutput { return v.Hosts }).(MdbClickhouseClusterHostArrayOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o MdbClickhouseClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o MdbClickhouseClusterOutput) MaintenanceWindow() MdbClickhouseClusterMaintenanceWindowOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) MdbClickhouseClusterMaintenanceWindowOutput { return v.MaintenanceWindow }).(MdbClickhouseClusterMaintenanceWindowOutput)
}

// A group of machine learning models.
func (o MdbClickhouseClusterOutput) MlModels() MdbClickhouseClusterMlModelArrayOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) MdbClickhouseClusterMlModelArrayOutput { return v.MlModels }).(MdbClickhouseClusterMlModelArrayOutput)
}

// The resource name.
func (o MdbClickhouseClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The `VPC Network ID` of subnets which resource attached to.
func (o MdbClickhouseClusterOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The list of security groups applied to resource or their components.
func (o MdbClickhouseClusterOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
func (o MdbClickhouseClusterOutput) ServiceAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringPtrOutput { return v.ServiceAccountId }).(pulumi.StringPtrOutput)
}

// A group of clickhouse shards.
func (o MdbClickhouseClusterOutput) ShardGroups() MdbClickhouseClusterShardGroupArrayOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) MdbClickhouseClusterShardGroupArrayOutput { return v.ShardGroups }).(MdbClickhouseClusterShardGroupArrayOutput)
}

// A shard of the ClickHouse cluster.
func (o MdbClickhouseClusterOutput) Shards() MdbClickhouseClusterShardArrayOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) MdbClickhouseClusterShardArrayOutput { return v.Shards }).(MdbClickhouseClusterShardArrayOutput)
}

// Grants `admin` user database management permission.
func (o MdbClickhouseClusterOutput) SqlDatabaseManagement() pulumi.BoolOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.BoolOutput { return v.SqlDatabaseManagement }).(pulumi.BoolOutput)
}

// Enables `admin` user with user management permission.
func (o MdbClickhouseClusterOutput) SqlUserManagement() pulumi.BoolOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.BoolOutput { return v.SqlUserManagement }).(pulumi.BoolOutput)
}

// Status of the cluster. Can be `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
func (o MdbClickhouseClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A user of the ClickHouse cluster.
//
// Deprecated: to manage users, please switch to using a separate resource type yandex_mdb_clickhouse_user
func (o MdbClickhouseClusterOutput) Users() MdbClickhouseClusterUserArrayOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) MdbClickhouseClusterUserArrayOutput { return v.Users }).(MdbClickhouseClusterUserArrayOutput)
}

// Version of the ClickHouse server software.
func (o MdbClickhouseClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Configuration of the ZooKeeper subcluster.
func (o MdbClickhouseClusterOutput) Zookeeper() MdbClickhouseClusterZookeeperOutput {
	return o.ApplyT(func(v *MdbClickhouseCluster) MdbClickhouseClusterZookeeperOutput { return v.Zookeeper }).(MdbClickhouseClusterZookeeperOutput)
}

type MdbClickhouseClusterArrayOutput struct{ *pulumi.OutputState }

func (MdbClickhouseClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbClickhouseCluster)(nil)).Elem()
}

func (o MdbClickhouseClusterArrayOutput) ToMdbClickhouseClusterArrayOutput() MdbClickhouseClusterArrayOutput {
	return o
}

func (o MdbClickhouseClusterArrayOutput) ToMdbClickhouseClusterArrayOutputWithContext(ctx context.Context) MdbClickhouseClusterArrayOutput {
	return o
}

func (o MdbClickhouseClusterArrayOutput) Index(i pulumi.IntInput) MdbClickhouseClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MdbClickhouseCluster {
		return vs[0].([]*MdbClickhouseCluster)[vs[1].(int)]
	}).(MdbClickhouseClusterOutput)
}

type MdbClickhouseClusterMapOutput struct{ *pulumi.OutputState }

func (MdbClickhouseClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbClickhouseCluster)(nil)).Elem()
}

func (o MdbClickhouseClusterMapOutput) ToMdbClickhouseClusterMapOutput() MdbClickhouseClusterMapOutput {
	return o
}

func (o MdbClickhouseClusterMapOutput) ToMdbClickhouseClusterMapOutputWithContext(ctx context.Context) MdbClickhouseClusterMapOutput {
	return o
}

func (o MdbClickhouseClusterMapOutput) MapIndex(k pulumi.StringInput) MdbClickhouseClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MdbClickhouseCluster {
		return vs[0].(map[string]*MdbClickhouseCluster)[vs[1].(string)]
	}).(MdbClickhouseClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MdbClickhouseClusterInput)(nil)).Elem(), &MdbClickhouseCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbClickhouseClusterArrayInput)(nil)).Elem(), MdbClickhouseClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbClickhouseClusterMapInput)(nil)).Elem(), MdbClickhouseClusterMap{})
	pulumi.RegisterOutputType(MdbClickhouseClusterOutput{})
	pulumi.RegisterOutputType(MdbClickhouseClusterArrayOutput{})
	pulumi.RegisterOutputType(MdbClickhouseClusterMapOutput{})
}
