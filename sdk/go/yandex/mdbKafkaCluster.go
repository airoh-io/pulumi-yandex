// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Kafka cluster within the Yandex.Cloud. For more information, see
// [the official documentation](https://cloud.yandex.com/docs/managed-kafka/concepts).
//
// ## Import
//
// A cluster can be imported using the `id` of the resource, e.g.
//
// ```sh
//  $ pulumi import yandex:index/mdbKafkaCluster:MdbKafkaCluster foo cluster_id
// ```
type MdbKafkaCluster struct {
	pulumi.CustomResourceState

	// Configuration of the Kafka cluster. The structure is documented below.
	Config MdbKafkaClusterConfigOutput `pulumi:"config"`
	// Timestamp of cluster creation.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the Kafka cluster.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Deployment environment of the Kafka cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment pulumi.StringPtrOutput `pulumi:"environment"`
	// The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// Health of the host.
	Health pulumi.StringOutput `pulumi:"health"`
	// A host of the Kafka cluster. The structure is documented below.
	Hosts MdbKafkaClusterHostArrayOutput `pulumi:"hosts"`
	// A set of key/value label pairs to assign to the Kafka cluster.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the topic.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the network, to which the Kafka cluster belongs.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Security group ids, to which the Kafka cluster belongs.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.
	// For more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-kafka/api-ref/Cluster/).
	Status    pulumi.StringOutput      `pulumi:"status"`
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// A topic of the Kafka cluster. The structure is documented below.
	Topics MdbKafkaClusterTopicArrayOutput `pulumi:"topics"`
	// A user of the Kafka cluster. The structure is documented below.
	Users MdbKafkaClusterUserArrayOutput `pulumi:"users"`
}

// NewMdbKafkaCluster registers a new resource with the given unique name, arguments, and options.
func NewMdbKafkaCluster(ctx *pulumi.Context,
	name string, args *MdbKafkaClusterArgs, opts ...pulumi.ResourceOption) (*MdbKafkaCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	var resource MdbKafkaCluster
	err := ctx.RegisterResource("yandex:index/mdbKafkaCluster:MdbKafkaCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMdbKafkaCluster gets an existing MdbKafkaCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMdbKafkaCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MdbKafkaClusterState, opts ...pulumi.ResourceOption) (*MdbKafkaCluster, error) {
	var resource MdbKafkaCluster
	err := ctx.ReadResource("yandex:index/mdbKafkaCluster:MdbKafkaCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MdbKafkaCluster resources.
type mdbKafkaClusterState struct {
	// Configuration of the Kafka cluster. The structure is documented below.
	Config *MdbKafkaClusterConfig `pulumi:"config"`
	// Timestamp of cluster creation.
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the Kafka cluster.
	Description *string `pulumi:"description"`
	// Deployment environment of the Kafka cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment *string `pulumi:"environment"`
	// The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// Health of the host.
	Health *string `pulumi:"health"`
	// A host of the Kafka cluster. The structure is documented below.
	Hosts []MdbKafkaClusterHost `pulumi:"hosts"`
	// A set of key/value label pairs to assign to the Kafka cluster.
	Labels map[string]string `pulumi:"labels"`
	// The name of the topic.
	Name *string `pulumi:"name"`
	// ID of the network, to which the Kafka cluster belongs.
	NetworkId *string `pulumi:"networkId"`
	// Security group ids, to which the Kafka cluster belongs.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.
	// For more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-kafka/api-ref/Cluster/).
	Status    *string  `pulumi:"status"`
	SubnetIds []string `pulumi:"subnetIds"`
	// A topic of the Kafka cluster. The structure is documented below.
	Topics []MdbKafkaClusterTopic `pulumi:"topics"`
	// A user of the Kafka cluster. The structure is documented below.
	Users []MdbKafkaClusterUser `pulumi:"users"`
}

type MdbKafkaClusterState struct {
	// Configuration of the Kafka cluster. The structure is documented below.
	Config MdbKafkaClusterConfigPtrInput
	// Timestamp of cluster creation.
	CreatedAt pulumi.StringPtrInput
	// Description of the Kafka cluster.
	Description pulumi.StringPtrInput
	// Deployment environment of the Kafka cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment pulumi.StringPtrInput
	// The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.
	FolderId pulumi.StringPtrInput
	// Health of the host.
	Health pulumi.StringPtrInput
	// A host of the Kafka cluster. The structure is documented below.
	Hosts MdbKafkaClusterHostArrayInput
	// A set of key/value label pairs to assign to the Kafka cluster.
	Labels pulumi.StringMapInput
	// The name of the topic.
	Name pulumi.StringPtrInput
	// ID of the network, to which the Kafka cluster belongs.
	NetworkId pulumi.StringPtrInput
	// Security group ids, to which the Kafka cluster belongs.
	SecurityGroupIds pulumi.StringArrayInput
	// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.
	// For more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-kafka/api-ref/Cluster/).
	Status    pulumi.StringPtrInput
	SubnetIds pulumi.StringArrayInput
	// A topic of the Kafka cluster. The structure is documented below.
	Topics MdbKafkaClusterTopicArrayInput
	// A user of the Kafka cluster. The structure is documented below.
	Users MdbKafkaClusterUserArrayInput
}

func (MdbKafkaClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbKafkaClusterState)(nil)).Elem()
}

type mdbKafkaClusterArgs struct {
	// Configuration of the Kafka cluster. The structure is documented below.
	Config MdbKafkaClusterConfig `pulumi:"config"`
	// Description of the Kafka cluster.
	Description *string `pulumi:"description"`
	// Deployment environment of the Kafka cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment *string `pulumi:"environment"`
	// The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs to assign to the Kafka cluster.
	Labels map[string]string `pulumi:"labels"`
	// The name of the topic.
	Name *string `pulumi:"name"`
	// ID of the network, to which the Kafka cluster belongs.
	NetworkId string `pulumi:"networkId"`
	// Security group ids, to which the Kafka cluster belongs.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	SubnetIds        []string `pulumi:"subnetIds"`
	// A topic of the Kafka cluster. The structure is documented below.
	Topics []MdbKafkaClusterTopic `pulumi:"topics"`
	// A user of the Kafka cluster. The structure is documented below.
	Users []MdbKafkaClusterUser `pulumi:"users"`
}

// The set of arguments for constructing a MdbKafkaCluster resource.
type MdbKafkaClusterArgs struct {
	// Configuration of the Kafka cluster. The structure is documented below.
	Config MdbKafkaClusterConfigInput
	// Description of the Kafka cluster.
	Description pulumi.StringPtrInput
	// Deployment environment of the Kafka cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment pulumi.StringPtrInput
	// The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs to assign to the Kafka cluster.
	Labels pulumi.StringMapInput
	// The name of the topic.
	Name pulumi.StringPtrInput
	// ID of the network, to which the Kafka cluster belongs.
	NetworkId pulumi.StringInput
	// Security group ids, to which the Kafka cluster belongs.
	SecurityGroupIds pulumi.StringArrayInput
	SubnetIds        pulumi.StringArrayInput
	// A topic of the Kafka cluster. The structure is documented below.
	Topics MdbKafkaClusterTopicArrayInput
	// A user of the Kafka cluster. The structure is documented below.
	Users MdbKafkaClusterUserArrayInput
}

func (MdbKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbKafkaClusterArgs)(nil)).Elem()
}

type MdbKafkaClusterInput interface {
	pulumi.Input

	ToMdbKafkaClusterOutput() MdbKafkaClusterOutput
	ToMdbKafkaClusterOutputWithContext(ctx context.Context) MdbKafkaClusterOutput
}

func (*MdbKafkaCluster) ElementType() reflect.Type {
	return reflect.TypeOf((*MdbKafkaCluster)(nil))
}

func (i *MdbKafkaCluster) ToMdbKafkaClusterOutput() MdbKafkaClusterOutput {
	return i.ToMdbKafkaClusterOutputWithContext(context.Background())
}

func (i *MdbKafkaCluster) ToMdbKafkaClusterOutputWithContext(ctx context.Context) MdbKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaClusterOutput)
}

func (i *MdbKafkaCluster) ToMdbKafkaClusterPtrOutput() MdbKafkaClusterPtrOutput {
	return i.ToMdbKafkaClusterPtrOutputWithContext(context.Background())
}

func (i *MdbKafkaCluster) ToMdbKafkaClusterPtrOutputWithContext(ctx context.Context) MdbKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaClusterPtrOutput)
}

type MdbKafkaClusterPtrInput interface {
	pulumi.Input

	ToMdbKafkaClusterPtrOutput() MdbKafkaClusterPtrOutput
	ToMdbKafkaClusterPtrOutputWithContext(ctx context.Context) MdbKafkaClusterPtrOutput
}

type mdbKafkaClusterPtrType MdbKafkaClusterArgs

func (*mdbKafkaClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbKafkaCluster)(nil))
}

func (i *mdbKafkaClusterPtrType) ToMdbKafkaClusterPtrOutput() MdbKafkaClusterPtrOutput {
	return i.ToMdbKafkaClusterPtrOutputWithContext(context.Background())
}

func (i *mdbKafkaClusterPtrType) ToMdbKafkaClusterPtrOutputWithContext(ctx context.Context) MdbKafkaClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaClusterPtrOutput)
}

// MdbKafkaClusterArrayInput is an input type that accepts MdbKafkaClusterArray and MdbKafkaClusterArrayOutput values.
// You can construct a concrete instance of `MdbKafkaClusterArrayInput` via:
//
//          MdbKafkaClusterArray{ MdbKafkaClusterArgs{...} }
type MdbKafkaClusterArrayInput interface {
	pulumi.Input

	ToMdbKafkaClusterArrayOutput() MdbKafkaClusterArrayOutput
	ToMdbKafkaClusterArrayOutputWithContext(context.Context) MdbKafkaClusterArrayOutput
}

type MdbKafkaClusterArray []MdbKafkaClusterInput

func (MdbKafkaClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*MdbKafkaCluster)(nil))
}

func (i MdbKafkaClusterArray) ToMdbKafkaClusterArrayOutput() MdbKafkaClusterArrayOutput {
	return i.ToMdbKafkaClusterArrayOutputWithContext(context.Background())
}

func (i MdbKafkaClusterArray) ToMdbKafkaClusterArrayOutputWithContext(ctx context.Context) MdbKafkaClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaClusterArrayOutput)
}

// MdbKafkaClusterMapInput is an input type that accepts MdbKafkaClusterMap and MdbKafkaClusterMapOutput values.
// You can construct a concrete instance of `MdbKafkaClusterMapInput` via:
//
//          MdbKafkaClusterMap{ "key": MdbKafkaClusterArgs{...} }
type MdbKafkaClusterMapInput interface {
	pulumi.Input

	ToMdbKafkaClusterMapOutput() MdbKafkaClusterMapOutput
	ToMdbKafkaClusterMapOutputWithContext(context.Context) MdbKafkaClusterMapOutput
}

type MdbKafkaClusterMap map[string]MdbKafkaClusterInput

func (MdbKafkaClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*MdbKafkaCluster)(nil))
}

func (i MdbKafkaClusterMap) ToMdbKafkaClusterMapOutput() MdbKafkaClusterMapOutput {
	return i.ToMdbKafkaClusterMapOutputWithContext(context.Background())
}

func (i MdbKafkaClusterMap) ToMdbKafkaClusterMapOutputWithContext(ctx context.Context) MdbKafkaClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaClusterMapOutput)
}

type MdbKafkaClusterOutput struct {
	*pulumi.OutputState
}

func (MdbKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MdbKafkaCluster)(nil))
}

func (o MdbKafkaClusterOutput) ToMdbKafkaClusterOutput() MdbKafkaClusterOutput {
	return o
}

func (o MdbKafkaClusterOutput) ToMdbKafkaClusterOutputWithContext(ctx context.Context) MdbKafkaClusterOutput {
	return o
}

func (o MdbKafkaClusterOutput) ToMdbKafkaClusterPtrOutput() MdbKafkaClusterPtrOutput {
	return o.ToMdbKafkaClusterPtrOutputWithContext(context.Background())
}

func (o MdbKafkaClusterOutput) ToMdbKafkaClusterPtrOutputWithContext(ctx context.Context) MdbKafkaClusterPtrOutput {
	return o.ApplyT(func(v MdbKafkaCluster) *MdbKafkaCluster {
		return &v
	}).(MdbKafkaClusterPtrOutput)
}

type MdbKafkaClusterPtrOutput struct {
	*pulumi.OutputState
}

func (MdbKafkaClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbKafkaCluster)(nil))
}

func (o MdbKafkaClusterPtrOutput) ToMdbKafkaClusterPtrOutput() MdbKafkaClusterPtrOutput {
	return o
}

func (o MdbKafkaClusterPtrOutput) ToMdbKafkaClusterPtrOutputWithContext(ctx context.Context) MdbKafkaClusterPtrOutput {
	return o
}

type MdbKafkaClusterArrayOutput struct{ *pulumi.OutputState }

func (MdbKafkaClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MdbKafkaCluster)(nil))
}

func (o MdbKafkaClusterArrayOutput) ToMdbKafkaClusterArrayOutput() MdbKafkaClusterArrayOutput {
	return o
}

func (o MdbKafkaClusterArrayOutput) ToMdbKafkaClusterArrayOutputWithContext(ctx context.Context) MdbKafkaClusterArrayOutput {
	return o
}

func (o MdbKafkaClusterArrayOutput) Index(i pulumi.IntInput) MdbKafkaClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MdbKafkaCluster {
		return vs[0].([]MdbKafkaCluster)[vs[1].(int)]
	}).(MdbKafkaClusterOutput)
}

type MdbKafkaClusterMapOutput struct{ *pulumi.OutputState }

func (MdbKafkaClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MdbKafkaCluster)(nil))
}

func (o MdbKafkaClusterMapOutput) ToMdbKafkaClusterMapOutput() MdbKafkaClusterMapOutput {
	return o
}

func (o MdbKafkaClusterMapOutput) ToMdbKafkaClusterMapOutputWithContext(ctx context.Context) MdbKafkaClusterMapOutput {
	return o
}

func (o MdbKafkaClusterMapOutput) MapIndex(k pulumi.StringInput) MdbKafkaClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MdbKafkaCluster {
		return vs[0].(map[string]MdbKafkaCluster)[vs[1].(string)]
	}).(MdbKafkaClusterOutput)
}

func init() {
	pulumi.RegisterOutputType(MdbKafkaClusterOutput{})
	pulumi.RegisterOutputType(MdbKafkaClusterPtrOutput{})
	pulumi.RegisterOutputType(MdbKafkaClusterArrayOutput{})
	pulumi.RegisterOutputType(MdbKafkaClusterMapOutput{})
}
