// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a PostgreSQL cluster within the Yandex.Cloud. For more information, see
// [the official documentation](https://cloud.yandex.com/docs/managed-postgresql/).
//
// ## Example Usage
//
// Example of creating a Single Node PostgreSQL.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooVpcNetwork, err := yandex.NewVpcNetwork(ctx, "fooVpcNetwork", nil)
// 		if err != nil {
// 			return err
// 		}
// 		fooVpcSubnet, err := yandex.NewVpcSubnet(ctx, "fooVpcSubnet", &yandex.VpcSubnetArgs{
// 			Zone:      pulumi.String("ru-central1-a"),
// 			NetworkId: fooVpcNetwork.ID(),
// 			V4CidrBlocks: pulumi.StringArray{
// 				pulumi.String("10.5.0.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewMdbPostgresqlCluster(ctx, "fooMdbPostgresqlCluster", &yandex.MdbPostgresqlClusterArgs{
// 			Environment: pulumi.String("PRESTABLE"),
// 			NetworkId:   fooVpcNetwork.ID(),
// 			Config: &yandex.MdbPostgresqlClusterConfigArgs{
// 				Version: pulumi.String("12"),
// 				Resources: &yandex.MdbPostgresqlClusterConfigResourcesArgs{
// 					ResourcePresetId: pulumi.String("s2.micro"),
// 					DiskTypeId:       pulumi.String("network-ssd"),
// 					DiskSize:         pulumi.Int(16),
// 				},
// 				PostgresqlConfig: pulumi.StringMap{
// 					"max_connections":                   pulumi.String("395"),
// 					"enable_parallel_hash":              pulumi.String("true"),
// 					"vacuum_cleanup_index_scale_factor": pulumi.String("0.2"),
// 					"autovacuum_vacuum_scale_factor":    pulumi.String("0.34"),
// 					"default_transaction_isolation":     pulumi.String("TRANSACTION_ISOLATION_READ_COMMITTED"),
// 					"shared_preload_libraries":          pulumi.String("SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"),
// 				},
// 			},
// 			Databases: yandex.MdbPostgresqlClusterDatabaseArray{
// 				&yandex.MdbPostgresqlClusterDatabaseArgs{
// 					Name:  pulumi.String("db_name"),
// 					Owner: pulumi.String("user_name"),
// 				},
// 			},
// 			Users: yandex.MdbPostgresqlClusterUserArray{
// 				&yandex.MdbPostgresqlClusterUserArgs{
// 					Name:      pulumi.String("user_name"),
// 					Password:  pulumi.String("your_password"),
// 					ConnLimit: pulumi.Int(50),
// 					Permissions: yandex.MdbPostgresqlClusterUserPermissionArray{
// 						&yandex.MdbPostgresqlClusterUserPermissionArgs{
// 							DatabaseName: pulumi.String("db_name"),
// 						},
// 					},
// 					Settings: pulumi.StringMap{
// 						"default_transaction_isolation": pulumi.String("read committed"),
// 						"log_min_duration_statement":    pulumi.String("5000"),
// 					},
// 				},
// 			},
// 			Hosts: yandex.MdbPostgresqlClusterHostArray{
// 				&yandex.MdbPostgresqlClusterHostArgs{
// 					Zone:     pulumi.String("ru-central1-a"),
// 					SubnetId: fooVpcSubnet.ID(),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Example of creating a High-Availability (HA) PostgreSQL Cluster.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooVpcNetwork, err := yandex.NewVpcNetwork(ctx, "fooVpcNetwork", nil)
// 		if err != nil {
// 			return err
// 		}
// 		fooVpcSubnet, err := yandex.NewVpcSubnet(ctx, "fooVpcSubnet", &yandex.VpcSubnetArgs{
// 			Zone:      pulumi.String("ru-central1-a"),
// 			NetworkId: fooVpcNetwork.ID(),
// 			V4CidrBlocks: pulumi.StringArray{
// 				pulumi.String("10.1.0.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		bar, err := yandex.NewVpcSubnet(ctx, "bar", &yandex.VpcSubnetArgs{
// 			Zone:      pulumi.String("ru-central1-b"),
// 			NetworkId: fooVpcNetwork.ID(),
// 			V4CidrBlocks: pulumi.StringArray{
// 				pulumi.String("10.2.0.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewMdbPostgresqlCluster(ctx, "fooMdbPostgresqlCluster", &yandex.MdbPostgresqlClusterArgs{
// 			Environment: pulumi.String("PRESTABLE"),
// 			NetworkId:   fooVpcNetwork.ID(),
// 			Config: &yandex.MdbPostgresqlClusterConfigArgs{
// 				Version: pulumi.String("12"),
// 				Resources: &yandex.MdbPostgresqlClusterConfigResourcesArgs{
// 					ResourcePresetId: pulumi.String("s2.micro"),
// 					DiskTypeId:       pulumi.String("network-ssd"),
// 					DiskSize:         pulumi.Int(16),
// 				},
// 			},
// 			Databases: yandex.MdbPostgresqlClusterDatabaseArray{
// 				&yandex.MdbPostgresqlClusterDatabaseArgs{
// 					Name:  pulumi.String("db_name"),
// 					Owner: pulumi.String("user_name"),
// 				},
// 			},
// 			Users: yandex.MdbPostgresqlClusterUserArray{
// 				&yandex.MdbPostgresqlClusterUserArgs{
// 					Name:     pulumi.String("user_name"),
// 					Password: pulumi.String("password"),
// 					Permissions: yandex.MdbPostgresqlClusterUserPermissionArray{
// 						&yandex.MdbPostgresqlClusterUserPermissionArgs{
// 							DatabaseName: pulumi.String("db_name"),
// 						},
// 					},
// 				},
// 			},
// 			Hosts: yandex.MdbPostgresqlClusterHostArray{
// 				&yandex.MdbPostgresqlClusterHostArgs{
// 					Zone:     pulumi.String("ru-central1-a"),
// 					SubnetId: fooVpcSubnet.ID(),
// 				},
// 				&yandex.MdbPostgresqlClusterHostArgs{
// 					Zone:     pulumi.String("ru-central1-b"),
// 					SubnetId: bar.ID(),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Example of creating a High-Availability (HA) PostgreSQL Cluster with priority and set master.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooVpcNetwork, err := yandex.NewVpcNetwork(ctx, "fooVpcNetwork", nil)
// 		if err != nil {
// 			return err
// 		}
// 		vpcSubnet, err := yandex.NewVpcSubnet(ctx, "vpcSubnet", &yandex.VpcSubnetArgs{
// 			Zone:      pulumi.String("ru-central1-a"),
// 			NetworkId: fooVpcNetwork.ID(),
// 			V4CidrBlocks: pulumi.StringArray{
// 				pulumi.String("10.1.0.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewMdbPostgresqlCluster(ctx, "fooMdbPostgresqlCluster", &yandex.MdbPostgresqlClusterArgs{
// 			Description:    pulumi.String("test High-Availability (HA) PostgreSQL Cluster with priority and set master"),
// 			Environment:    pulumi.String("PRESTABLE"),
// 			NetworkId:      fooVpcNetwork.ID(),
// 			HostMasterName: pulumi.String("host_name_c_2"),
// 			Config: &yandex.MdbPostgresqlClusterConfigArgs{
// 				Version: pulumi.String("12"),
// 				Resources: &yandex.MdbPostgresqlClusterConfigResourcesArgs{
// 					ResourcePresetId: pulumi.String("s2.micro"),
// 					DiskSize:         pulumi.Int(10),
// 					DiskTypeId:       pulumi.String("network-ssd"),
// 				},
// 			},
// 			Users: yandex.MdbPostgresqlClusterUserArray{
// 				&yandex.MdbPostgresqlClusterUserArgs{
// 					Name:     pulumi.String("alice"),
// 					Password: pulumi.String("mysecurepassword"),
// 					Permissions: yandex.MdbPostgresqlClusterUserPermissionArray{
// 						&yandex.MdbPostgresqlClusterUserPermissionArgs{
// 							DatabaseName: pulumi.String("testdb"),
// 						},
// 					},
// 				},
// 			},
// 			Hosts: yandex.MdbPostgresqlClusterHostArray{
// 				&yandex.MdbPostgresqlClusterHostArgs{
// 					Zone:     pulumi.String("ru-central1-a"),
// 					Name:     pulumi.String("host_name_a"),
// 					Priority: pulumi.Int(2),
// 					SubnetId: vpcSubnet.ID(),
// 				},
// 				&yandex.MdbPostgresqlClusterHostArgs{
// 					Zone:                  pulumi.String("ru-central1-b"),
// 					Name:                  pulumi.String("host_name_b"),
// 					ReplicationSourceName: pulumi.String("host_name_c"),
// 					SubnetId:              pulumi.String(index / vpcSubnetVpcSubnet.Id),
// 				},
// 				&yandex.MdbPostgresqlClusterHostArgs{
// 					Zone:     pulumi.String("ru-central1-c"),
// 					Name:     pulumi.String("host_name_c"),
// 					SubnetId: pulumi.String(yandexIndex / vpcSubnetVpcSubnet.Id),
// 				},
// 				&yandex.MdbPostgresqlClusterHostArgs{
// 					Zone:     pulumi.String("ru-central1-c"),
// 					Name:     pulumi.String("host_name_c_2"),
// 					SubnetId: pulumi.String(yandexIndex / vpcSubnetVpcSubnet.Id),
// 				},
// 			},
// 			Databases: yandex.MdbPostgresqlClusterDatabaseArray{
// 				&yandex.MdbPostgresqlClusterDatabaseArgs{
// 					Owner: pulumi.String("alice"),
// 					Name:  pulumi.String("testdb"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewVpcSubnet(ctx, "index_vpcSubnetVpcSubnet", &yandex.VpcSubnetArgs{
// 			Zone:      pulumi.String("ru-central1-b"),
// 			NetworkId: fooVpcNetwork.ID(),
// 			V4CidrBlocks: pulumi.StringArray{
// 				pulumi.String("10.2.0.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewVpcSubnet(ctx, "yandexIndex_vpcSubnetVpcSubnet", &yandex.VpcSubnetArgs{
// 			Zone:      pulumi.String("ru-central1-c"),
// 			NetworkId: fooVpcNetwork.ID(),
// 			V4CidrBlocks: pulumi.StringArray{
// 				pulumi.String("10.3.0.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Example of creating a Single Node PostgreSQL from backup.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooVpcNetwork, err := yandex.NewVpcNetwork(ctx, "fooVpcNetwork", nil)
// 		if err != nil {
// 			return err
// 		}
// 		fooVpcSubnet, err := yandex.NewVpcSubnet(ctx, "fooVpcSubnet", &yandex.VpcSubnetArgs{
// 			Zone:      pulumi.String("ru-central1-a"),
// 			NetworkId: fooVpcNetwork.ID(),
// 			V4CidrBlocks: pulumi.StringArray{
// 				pulumi.String("10.5.0.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewMdbPostgresqlCluster(ctx, "fooMdbPostgresqlCluster", &yandex.MdbPostgresqlClusterArgs{
// 			Environment: pulumi.String("PRESTABLE"),
// 			NetworkId:   fooVpcNetwork.ID(),
// 			Restore: &yandex.MdbPostgresqlClusterRestoreArgs{
// 				BackupId: pulumi.String("c9q99999999999999994cm:base_000000010000005F000000B4"),
// 				Time:     pulumi.String("2021-02-11T15:04:05"),
// 			},
// 			Config: &yandex.MdbPostgresqlClusterConfigArgs{
// 				Version: pulumi.String("12"),
// 				Resources: &yandex.MdbPostgresqlClusterConfigResourcesArgs{
// 					ResourcePresetId: pulumi.String("s2.micro"),
// 					DiskTypeId:       pulumi.String("network-ssd"),
// 					DiskSize:         pulumi.Int(16),
// 				},
// 				PostgresqlConfig: pulumi.StringMap{
// 					"max_connections":                   pulumi.String("395"),
// 					"enable_parallel_hash":              pulumi.String("true"),
// 					"vacuum_cleanup_index_scale_factor": pulumi.String("0.2"),
// 					"autovacuum_vacuum_scale_factor":    pulumi.String("0.34"),
// 					"default_transaction_isolation":     pulumi.String("TRANSACTION_ISOLATION_READ_COMMITTED"),
// 					"shared_preload_libraries":          pulumi.String("SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"),
// 				},
// 			},
// 			Databases: yandex.MdbPostgresqlClusterDatabaseArray{
// 				&yandex.MdbPostgresqlClusterDatabaseArgs{
// 					Name:  pulumi.String("db_name"),
// 					Owner: pulumi.String("user_name"),
// 				},
// 			},
// 			Users: yandex.MdbPostgresqlClusterUserArray{
// 				&yandex.MdbPostgresqlClusterUserArgs{
// 					Name:      pulumi.String("user_name"),
// 					Password:  pulumi.String("your_password"),
// 					ConnLimit: pulumi.Int(50),
// 					Permissions: yandex.MdbPostgresqlClusterUserPermissionArray{
// 						&yandex.MdbPostgresqlClusterUserPermissionArgs{
// 							DatabaseName: pulumi.String("db_name"),
// 						},
// 					},
// 					Settings: pulumi.StringMap{
// 						"default_transaction_isolation": pulumi.String("read committed"),
// 						"log_min_duration_statement":    pulumi.String("5000"),
// 					},
// 				},
// 			},
// 			Hosts: yandex.MdbPostgresqlClusterHostArray{
// 				&yandex.MdbPostgresqlClusterHostArgs{
// 					Zone:     pulumi.String("ru-central1-a"),
// 					SubnetId: fooVpcSubnet.ID(),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Example of creating a High-Availability (HA) PostgreSQL cluster with multiple databases and users.
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-random/sdk/v2/go/random"
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		var passwords []*random.RandomPassword
// 		for key0, _ := range 2 {
// 			__res, err := random.NewRandomPassword(ctx, fmt.Sprintf("passwords-%v", key0), &random.RandomPasswordArgs{
// 				Length:  pulumi.Int(16),
// 				Special: pulumi.Bool(true),
// 			})
// 			if err != nil {
// 				return err
// 			}
// 			passwords = append(passwords, __res)
// 		}
// 		ctx.Export("dbInstanceAlicePassword", passwords[0].Result)
// 		ctx.Export("dbInstanceBobPassword", passwords[1].Result)
// 		fooVpcNetwork, err := yandex.NewVpcNetwork(ctx, "fooVpcNetwork", nil)
// 		if err != nil {
// 			return err
// 		}
// 		vpcSubnet, err := yandex.NewVpcSubnet(ctx, "vpcSubnet", &yandex.VpcSubnetArgs{
// 			Zone:      pulumi.String("ru-central1-a"),
// 			NetworkId: fooVpcNetwork.ID(),
// 			V4CidrBlocks: pulumi.StringArray{
// 				pulumi.String("10.1.0.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewMdbPostgresqlCluster(ctx, "fooMdbPostgresqlCluster", &yandex.MdbPostgresqlClusterArgs{
// 			Description: pulumi.String("Example of multiple databases and users"),
// 			Environment: pulumi.String("PRESTABLE"),
// 			NetworkId:   fooVpcNetwork.ID(),
// 			FolderId:    pulumi.String("b1g24daaaddddffma52u"),
// 			Config: &yandex.MdbPostgresqlClusterConfigArgs{
// 				Version: pulumi.String("13"),
// 				Resources: &yandex.MdbPostgresqlClusterConfigResourcesArgs{
// 					ResourcePresetId: pulumi.String("s2.micro"),
// 					DiskSize:         pulumi.Int(10),
// 					DiskTypeId:       pulumi.String("network-ssd"),
// 				},
// 				Access: &yandex.MdbPostgresqlClusterConfigAccessArgs{
// 					WebSql: pulumi.Bool(true),
// 				},
// 				PostgresqlConfig: pulumi.StringMap{
// 					"max_connections":                   pulumi.String("395"),
// 					"enable_parallel_hash":              pulumi.String("true"),
// 					"vacuum_cleanup_index_scale_factor": pulumi.String("0.2"),
// 					"autovacuum_vacuum_scale_factor":    pulumi.String("0.32"),
// 					"default_transaction_isolation":     pulumi.String("TRANSACTION_ISOLATION_READ_UNCOMMITTED"),
// 					"shared_preload_libraries":          pulumi.String("SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"),
// 				},
// 				PoolerConfig: &yandex.MdbPostgresqlClusterConfigPoolerConfigArgs{
// 					PoolDiscard: pulumi.Bool(true),
// 					PoolingMode: pulumi.String("SESSION"),
// 				},
// 			},
// 			Users: yandex.MdbPostgresqlClusterUserArray{
// 				&yandex.MdbPostgresqlClusterUserArgs{
// 					Name:      pulumi.String("alice"),
// 					Password:  passwords[0].Result,
// 					ConnLimit: pulumi.Int(10),
// 					Permissions: yandex.MdbPostgresqlClusterUserPermissionArray{
// 						&yandex.MdbPostgresqlClusterUserPermissionArgs{
// 							DatabaseName: pulumi.String("testdb"),
// 						},
// 						&yandex.MdbPostgresqlClusterUserPermissionArgs{
// 							DatabaseName: pulumi.String("testdb1"),
// 						},
// 						&yandex.MdbPostgresqlClusterUserPermissionArgs{
// 							DatabaseName: pulumi.String("testdb2"),
// 						},
// 					},
// 				},
// 				&yandex.MdbPostgresqlClusterUserArgs{
// 					Name:     pulumi.String("bob"),
// 					Password: passwords[1].Result,
// 					Permissions: yandex.MdbPostgresqlClusterUserPermissionArray{
// 						&yandex.MdbPostgresqlClusterUserPermissionArgs{
// 							DatabaseName: pulumi.String("testdb2"),
// 						},
// 						&yandex.MdbPostgresqlClusterUserPermissionArgs{
// 							DatabaseName: pulumi.String("testdb1"),
// 						},
// 					},
// 				},
// 				&yandex.MdbPostgresqlClusterUserArgs{
// 					Name:     pulumi.String("chuck"),
// 					Password: pulumi.String("123456789"),
// 					Permissions: yandex.MdbPostgresqlClusterUserPermissionArray{
// 						&yandex.MdbPostgresqlClusterUserPermissionArgs{
// 							DatabaseName: pulumi.String("testdb"),
// 						},
// 					},
// 					Grants: pulumi.StringArray{
// 						pulumi.String("bob"),
// 						pulumi.String("alice"),
// 					},
// 				},
// 			},
// 			Hosts: yandex.MdbPostgresqlClusterHostArray{
// 				&yandex.MdbPostgresqlClusterHostArgs{
// 					Zone:     pulumi.String("ru-central1-b"),
// 					SubnetId: pulumi.String(index / vpcSubnetVpcSubnet.Id),
// 				},
// 				&yandex.MdbPostgresqlClusterHostArgs{
// 					Zone:     pulumi.String("ru-central1-a"),
// 					SubnetId: vpcSubnet.ID(),
// 				},
// 				&yandex.MdbPostgresqlClusterHostArgs{
// 					Zone:     pulumi.String("ru-central1-c"),
// 					SubnetId: pulumi.String(yandexIndex / vpcSubnetVpcSubnet.Id),
// 				},
// 			},
// 			Databases: yandex.MdbPostgresqlClusterDatabaseArray{
// 				&yandex.MdbPostgresqlClusterDatabaseArgs{
// 					Owner: pulumi.String("alice"),
// 					Name:  pulumi.String("testdb"),
// 				},
// 				&yandex.MdbPostgresqlClusterDatabaseArgs{
// 					Owner: pulumi.String("alice"),
// 					Name:  pulumi.String("testdb2"),
// 				},
// 				&yandex.MdbPostgresqlClusterDatabaseArgs{
// 					Owner: pulumi.String("bob"),
// 					Name:  pulumi.String("testdb1"),
// 					Extensions: yandex.MdbPostgresqlClusterDatabaseExtensionArray{
// 						&yandex.MdbPostgresqlClusterDatabaseExtensionArgs{
// 							Name: pulumi.String("postgis"),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewVpcSubnet(ctx, "index_vpcSubnetVpcSubnet", &yandex.VpcSubnetArgs{
// 			Zone:      pulumi.String("ru-central1-b"),
// 			NetworkId: fooVpcNetwork.ID(),
// 			V4CidrBlocks: pulumi.StringArray{
// 				pulumi.String("10.2.0.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewVpcSubnet(ctx, "yandexIndex_vpcSubnetVpcSubnet", &yandex.VpcSubnetArgs{
// 			Zone:      pulumi.String("ru-central1-c"),
// 			NetworkId: fooVpcNetwork.ID(),
// 			V4CidrBlocks: pulumi.StringArray{
// 				pulumi.String("10.3.0.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## postresql config
//
// More information about config:
// * https://www.postgresql.org/docs/current/runtime-config-connection.html
// * https://www.postgresql.org/docs/current/runtime-config-resource.html
// * https://www.postgresql.org/docs/current/runtime-config-wal.html
// * https://www.postgresql.org/docs/current/runtime-config-query.html
// * https://www.postgresql.org/docs/current/runtime-config-logging.html
// * https://www.postgresql.org/docs/current/runtime-config-autovacuum.html
// * https://www.postgresql.org/docs/current/runtime-config-client.html
// * https://www.postgresql.org/docs/current/runtime-config-locks.html
// * https://www.postgresql.org/docs/current/runtime-config-compatible.html
//
// * `sharedPreloadLibraries` override if not set. One of:
// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
// * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
// * * NO value
//
// Other are not owweride if not set.
//
// ### Postgresql 13 config
// * `archiveTimeout` integer
//
// * `arrayNulls` boolean
//
// * `autoExplainLogAnalyze` boolean
//
// * `autoExplainLogBuffers` boolean
//
// * `autoExplainLogMinDuration` integer
//
// * `autoExplainLogNestedStatements` boolean
//
// * `autoExplainLogTiming` boolean
//
// * `autoExplainLogTriggers` boolean
//
// * `autoExplainLogVerbose` boolean
//
// * `autoExplainSampleRate` float
//
// * `autovacuumAnalyzeScaleFactor` float
//
// * `autovacuumMaxWorkers` integer
//
// * `autovacuumNaptime` integer
//
// * `autovacuumVacuumCostDelay` integer
//
// * `autovacuumVacuumCostLimit` integer
//
// * `autovacuumVacuumInsertScaleFactor` float
//
// * `autovacuumVacuumInsertThreshold` integer
//
// * `autovacuumVacuumScaleFactor` float
//
// * `autovacuumWorkMem` integer
//
// * `backendFlushAfter` integer
//
// * `backslashQuote` one of:
//   - 0: "BACKSLASH_QUOTE_UNSPECIFIED"
//   - 1: "BACKSLASH_QUOTE"
//   - 2: "BACKSLASH_QUOTE_ON"
//   - 3: "BACKSLASH_QUOTE_OFF"
//   - 4: "BACKSLASH_QUOTE_SAFE_ENCODING"
//
// * `bgwriterDelay` integer
//
// * `bgwriterFlushAfter` integer
//
// * `bgwriterLruMaxpages` integer
//
// * `bgwriterLruMultiplier` float
//
// * `byteaOutput` one of:
//   - 0: "BYTEA_OUTPUT_UNSPECIFIED"
//   - 1: "BYTEA_OUTPUT_HEX"
//   - 2: "BYTEA_OUTPUT_ESCAPED"
//
// * `checkpointCompletionTarget` float
//
// * `checkpointFlushAfter` integer
//
// * `checkpointTimeout` integer
//
// * `clientMinMessages` one of:
//   - 0: "LOG_LEVEL_UNSPECIFIED"
//   - 1: "LOG_LEVEL_DEBUG5"
//   - 2: "LOG_LEVEL_DEBUG4"
//   - 3: "LOG_LEVEL_DEBUG3"
//   - 4: "LOG_LEVEL_DEBUG2"
//   - 5: "LOG_LEVEL_DEBUG1"
//   - 6: "LOG_LEVEL_LOG"
//   - 7: "LOG_LEVEL_NOTICE"
//   - 8: "LOG_LEVEL_WARNING"
//   - 9: "LOG_LEVEL_ERROR"
//   - 10: "LOG_LEVEL_FATAL"
//   - 11: "LOG_LEVEL_PANIC"
//
// * `constraintExclusion` one of:
//   - 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
//   - 1: "CONSTRAINT_EXCLUSION_ON"
//   - 2: "CONSTRAINT_EXCLUSION_OFF"
//   - 3: "CONSTRAINT_EXCLUSION_PARTITION"
//
// * `cursorTupleFraction` float
//
// * `deadlockTimeout` integer
//
// * `defaultStatisticsTarget` integer
//
// * `defaultTransactionIsolation` one of:
//   - 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
//   - 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
//   - 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
//   - 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
//   - 4: "TRANSACTION_ISOLATION_SERIALIZABLE"
//
// * `defaultTransactionReadOnly` boolean
//
// * `defaultWithOids` boolean
//
// * `effectiveCacheSize` integer
//
// * `effectiveIoConcurrency` integer
//
// * `enableBitmapscan` boolean
//
// * `enableHashagg` boolean
//
// * `enableHashjoin` boolean
//
// * `enableIncrementalSort` boolean
//
// * `enableIndexonlyscan` boolean
//
// * `enableIndexscan` boolean
//
// * `enableMaterial` boolean
//
// * `enableMergejoin` boolean
//
// * `enableNestloop` boolean
//
// * `enableParallelAppend` boolean
//
// * `enableParallelHash` boolean
//
// * `enablePartitionPruning` boolean
//
// * `enablePartitionwiseAggregate` boolean
//
// * `enablePartitionwiseJoin` boolean
//
// * `enableSeqscan` boolean
//
// * `enableSort` boolean
//
// * `enableTidscan` boolean
//
// * `escapeStringWarning` boolean
//
// * `exitOnError` boolean
//
// * `forceParallelMode` one of:
//   - 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
//   - 1: "FORCE_PARALLEL_MODE_ON"
//   - 2: "FORCE_PARALLEL_MODE_OFF"
//   - 3: "FORCE_PARALLEL_MODE_REGRESS"
//
// * `fromCollapseLimit` integer
//
// * `ginPendingListLimit` integer
//
// * `hashMemMultiplier` float
//
// * `idleInTransactionSessionTimeout` integer
//
// * `jit` boolean
//
// * `joinCollapseLimit` integer
//
// * `loCompatPrivileges` boolean
//
// * `lockTimeout` integer
//
// * `logCheckpoints` boolean
//
// * `logConnections` boolean
//
// * `logDisconnections` boolean
//
// * `logDuration` boolean
//
// * `logErrorVerbosity` one of:
//   - 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
//   - 1: "LOG_ERROR_VERBOSITY_TERSE"
//   - 2: "LOG_ERROR_VERBOSITY_DEFAULT"
//   - 3: "LOG_ERROR_VERBOSITY_VERBOSE"
//
// * `logLockWaits` boolean
//
// * `logMinDurationSample` integer
//
// * `logMinDurationStatement` integer
//
// * `logMinErrorStatement` one of:
//   - 0: "LOG_LEVEL_UNSPECIFIED"
//   - 1: "LOG_LEVEL_DEBUG5"
//   - 2: "LOG_LEVEL_DEBUG4"
//   - 3: "LOG_LEVEL_DEBUG3"
//   - 4: "LOG_LEVEL_DEBUG2"
//   - 5: "LOG_LEVEL_DEBUG1"
//   - 6: "LOG_LEVEL_LOG"
//   - 7: "LOG_LEVEL_NOTICE"
//   - 8: "LOG_LEVEL_WARNING"
//   - 9: "LOG_LEVEL_ERROR"
//   - 10: "LOG_LEVEL_FATAL"
//   - 11: "LOG_LEVEL_PANIC"
//
// * `logMinMessages` one of:
//   - 0: "LOG_LEVEL_UNSPECIFIED"
//   - 1: "LOG_LEVEL_DEBUG5"
//   - 2: "LOG_LEVEL_DEBUG4"
//   - 3: "LOG_LEVEL_DEBUG3"
//   - 4: "LOG_LEVEL_DEBUG2"
//   - 5: "LOG_LEVEL_DEBUG1"
//   - 6: "LOG_LEVEL_LOG"
//   - 7: "LOG_LEVEL_NOTICE"
//   - 8: "LOG_LEVEL_WARNING"
//   - 9: "LOG_LEVEL_ERROR"
//   - 10: "LOG_LEVEL_FATAL"
//   - 11: "LOG_LEVEL_PANIC"
//
// * `logParameterMaxLength` integer
//
// * `logParameterMaxLengthOnError` integer
//
// * `logStatement` one of:
//   - 0: "LOG_STATEMENT_UNSPECIFIED"
//   - 1: "LOG_STATEMENT_NONE"
//   - 2: "LOG_STATEMENT_DDL"
//   - 3: "LOG_STATEMENT_MOD"
//   - 4: "LOG_STATEMENT_ALL"
//
// * `logStatementSampleRate` float
//
// * `logTempFiles` integer
//
// * `logTransactionSampleRate` float
//
// * `logicalDecodingWorkMem` integer
//
// * `maintenanceIoConcurrency` integer
//
// * `maintenanceWorkMem` integer
//
// * `maxConnections` integer
//
// * `maxLocksPerTransaction` integer
//
// * `maxParallelMaintenanceWorkers` integer
//
// * `maxParallelWorkers` integer
//
// * `maxParallelWorkersPerGather` integer
//
// * `maxPredLocksPerTransaction` integer
//
// * `maxPreparedTransactions` integer
//
// * `maxSlotWalKeepSize` integer
//
// * `maxStandbyStreamingDelay` integer
//
// * `maxWalSize` integer
//
// * `maxWorkerProcesses` integer
//
// * `minWalSize` integer
//
// * `oldSnapshotThreshold` integer
//
// * `operatorPrecedenceWarning` boolean
//
// * `parallelLeaderParticipation` boolean
//
// * `pgHintPlanDebugPrint` one of:
//   - 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
//   - 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
//   - 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
//   - 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
//   - 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"
//
// * `pgHintPlanEnableHint` boolean
//
// * `pgHintPlanEnableHintTable` boolean
//
// * `pgHintPlanMessageLevel` one of:
//   - 0: "LOG_LEVEL_UNSPECIFIED"
//   - 1: "LOG_LEVEL_DEBUG5"
//   - 2: "LOG_LEVEL_DEBUG4"
//   - 3: "LOG_LEVEL_DEBUG3"
//   - 4: "LOG_LEVEL_DEBUG2"
//   - 5: "LOG_LEVEL_DEBUG1"
//   - 6: "LOG_LEVEL_LOG"
//   - 7: "LOG_LEVEL_NOTICE"
//   - 8: "LOG_LEVEL_WARNING"
//   - 9: "LOG_LEVEL_ERROR"
//   - 10: "LOG_LEVEL_FATAL"
//   - 11: "LOG_LEVEL_PANIC"
//
// * `planCacheMode` one of:
//   - 0: "PLAN_CACHE_MODE_UNSPECIFIED"
//   - 1: "PLAN_CACHE_MODE_AUTO"
//   - 2: "PLAN_CACHE_MODE_FORCE_CUSTOM_PLAN"
//   - 3: "PLAN_CACHE_MODE_FORCE_GENERIC_PLAN"
//
// * `quoteAllIdentifiers` boolean
//
// * `randomPageCost` float
//
// * `rowSecurity` boolean
//
// * `searchPath` text
//
// * `seqPageCost` float
//
// * `sharedBuffers` integer
//
// * `standardConformingStrings` boolean
//
// * `statementTimeout` integer
//
// * `synchronizeSeqscans` boolean
//
// * `synchronousCommit` one of:
//   - 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
//   - 1: "SYNCHRONOUS_COMMIT_ON"
//   - 2: "SYNCHRONOUS_COMMIT_OFF"
//   - 3: "SYNCHRONOUS_COMMIT_LOCAL"
//   - 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
//   - 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"
//
// * `tempBuffers` integer
//
// * `tempFileLimit` integer
//
// * `timezone` text
//
// * `trackActivityQuerySize` integer
//
// * `transformNullEquals` boolean
//
// * `vacuumCleanupIndexScaleFactor` float
//
// * `vacuumCostDelay` integer
//
// * `vacuumCostLimit` integer
//
// * `vacuumCostPageDirty` integer
//
// * `vacuumCostPageHit` integer
//
// * `vacuumCostPageMiss` integer
//
// * `walKeepSize` integer
//
// * `walLevel` one of:
//   - 0: "WAL_LEVEL_UNSPECIFIED"
//   - 1: "WAL_LEVEL_REPLICA"
//   - 2: "WAL_LEVEL_LOGICAL"
//
// * `workMem` integer
//
// * `xmlbinary` one of:
//   - 0: "XML_BINARY_UNSPECIFIED"
//   - 1: "XML_BINARY_BASE64"
//   - 2: "XML_BINARY_HEX"
//
// * `xmloption` one of:
//   - 0: "XML_OPTION_UNSPECIFIED"
//   - 1: "XML_OPTION_DOCUMENT"
//   - 2: "XML_OPTION_CONTENT"
//
// ### Postgresql 12 config
//
// * `archiveTimeout` integer
//
// * `arrayNulls` boolean
//
// * `autoExplainLogAnalyze` boolean
//
// * `autoExplainLogBuffers` boolean
//
// * `autoExplainLogMinDuration` integer
//
// * `autoExplainLogNestedStatements` boolean
//
// * `autoExplainLogTiming` boolean
//
// * `autoExplainLogTriggers` boolean
//
// * `autoExplainLogVerbose` boolean
//
// * `autoExplainSampleRate` float
//
// * `autovacuumAnalyzeScaleFactor` float
//
// * `autovacuumMaxWorkers` integer
//
// * `autovacuumNaptime` integer
//
// * `autovacuumVacuumCostDelay` integer
//
// * `autovacuumVacuumCostLimit` integer
//
// * `autovacuumVacuumScaleFactor` float
//
// * `autovacuumWorkMem` integer
//
// * `backendFlushAfter` integer
//
// * `backslashQuote` one of:
// * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
// * * 1: "BACKSLASH_QUOTE"
// * * 2: "BACKSLASH_QUOTE_ON"
// * * 3: "BACKSLASH_QUOTE_OFF"
// * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"
//
// * `bgwriterDelay` integer
//
// * `bgwriterFlushAfter` integer
//
// * `bgwriterLruMaxpages` integer
//
// * `bgwriterLruMultiplier` float
//
// * `byteaOutput` one of:
// * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
// * * 1: "BYTEA_OUTPUT_HEX"
// * * 2: "BYTEA_OUTPUT_ESCAPED"
//
// * `checkpointCompletionTarget` float
//
// * `checkpointFlushAfter` integer
//
// * `checkpointTimeout` integer
//
// * `clientMinMessages` one of:
// * * 0: "LOG_LEVEL_UNSPECIFIED"
// * * 1: "LOG_LEVEL_DEBUG5"
// * * 2: "LOG_LEVEL_DEBUG4"
// * * 3: "LOG_LEVEL_DEBUG3"
// * * 4: "LOG_LEVEL_DEBUG2"
// * * 5: "LOG_LEVEL_DEBUG1"
// * * 6: "LOG_LEVEL_LOG"
// * * 7: "LOG_LEVEL_NOTICE"
// * * 8: "LOG_LEVEL_WARNING"
// * * 9: "LOG_LEVEL_ERROR"
// * * 10: "LOG_LEVEL_FATAL"
// * * 11: "LOG_LEVEL_PANIC"
//
// * `constraintExclusion` one of:
// * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
// * * 1: "CONSTRAINT_EXCLUSION_ON"
// * * 2: "CONSTRAINT_EXCLUSION_OFF"
// * * 3: "CONSTRAINT_EXCLUSION_PARTITION"
//
// * `cursorTupleFraction` float
//
// * `deadlockTimeout` integer
//
// * `defaultStatisticsTarget` integer
//
// * `defaultTransactionIsolation` one of:
// * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
// * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
// * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
// * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
// * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"
//
// * `defaultTransactionReadOnly` boolean
//
// * `defaultWithOids` boolean
//
// * `effectiveCacheSize` integer
//
// * `effectiveIoConcurrency` integer
//
// * `enableBitmapscan` boolean
//
// * `enableHashagg` boolean
//
// * `enableHashjoin` boolean
//
// * `enableIndexonlyscan` boolean
//
// * `enableIndexscan` boolean
//
// * `enableMaterial` boolean
//
// * `enableMergejoin` boolean
//
// * `enableNestloop` boolean
//
// * `enableParallelAppend` boolean
//
// * `enableParallelHash` boolean
//
// * `enablePartitionPruning` boolean
//
// * `enablePartitionwiseAggregate` boolean
//
// * `enablePartitionwiseJoin` boolean
//
// * `enableSeqscan` boolean
//
// * `enableSort` boolean
//
// * `enableTidscan` boolean
//
// * `escapeStringWarning` boolean
//
// * `exitOnError` boolean
//
// * `forceParallelMode` one of:
// * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
// * * 1: "FORCE_PARALLEL_MODE_ON"
// * * 2: "FORCE_PARALLEL_MODE_OFF"
// * * 3: "FORCE_PARALLEL_MODE_REGRESS"
//
// * `fromCollapseLimit` integer
//
// * `ginPendingListLimit` integer
//
// * `idleInTransactionSessionTimeout` integer
//
// * `jit` boolean
//
// * `joinCollapseLimit` integer
//
// * `loCompatPrivileges` boolean
//
// * `lockTimeout` integer
//
// * `logCheckpoints` boolean
//
// * `logConnections` boolean
//
// * `logDisconnections` boolean
//
// * `logDuration` boolean
//
// * `logErrorVerbosity` one of:
// * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
// * * 1: "LOG_ERROR_VERBOSITY_TERSE"
// * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
// * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"
//
// * `logLockWaits` boolean
//
// * `logMinDurationStatement` integer
//
// * `logMinErrorStatement` one of:
// * * 0: "LOG_LEVEL_UNSPECIFIED"
// * * 1: "LOG_LEVEL_DEBUG5"
// * * 2: "LOG_LEVEL_DEBUG4"
// * * 3: "LOG_LEVEL_DEBUG3"
// * * 4: "LOG_LEVEL_DEBUG2"
// * * 5: "LOG_LEVEL_DEBUG1"
// * * 6: "LOG_LEVEL_LOG"
// * * 7: "LOG_LEVEL_NOTICE"
// * * 8: "LOG_LEVEL_WARNING"
// * * 9: "LOG_LEVEL_ERROR"
// * * 10: "LOG_LEVEL_FATAL"
// * * 11: "LOG_LEVEL_PANIC"
//
// * `logMinMessages` one of:
// * * 0: "LOG_LEVEL_UNSPECIFIED"
// * * 1: "LOG_LEVEL_DEBUG5"
// * * 2: "LOG_LEVEL_DEBUG4"
// * * 3: "LOG_LEVEL_DEBUG3"
// * * 4: "LOG_LEVEL_DEBUG2"
// * * 5: "LOG_LEVEL_DEBUG1"
// * * 6: "LOG_LEVEL_LOG"
// * * 7: "LOG_LEVEL_NOTICE"
// * * 8: "LOG_LEVEL_WARNING"
// * * 9: "LOG_LEVEL_ERROR"
// * * 10: "LOG_LEVEL_FATAL"
// * * 11: "LOG_LEVEL_PANIC"
//
// * `logStatement` one of:
// * * 0: "LOG_STATEMENT_UNSPECIFIED"
// * * 1: "LOG_STATEMENT_NONE"
// * * 2: "LOG_STATEMENT_DDL"
// * * 3: "LOG_STATEMENT_MOD"
// * * 4: "LOG_STATEMENT_ALL"
//
// * `logTempFiles` integer
//
// * `logTransactionSampleRate` float
//
// * `maintenanceWorkMem` integer
//
// * `maxConnections` integer
//
// * `maxLocksPerTransaction` integer
//
// * `maxParallelMaintenanceWorkers` integer
//
// * `maxParallelWorkers` integer
//
// * `maxParallelWorkersPerGather` integer
//
// * `maxPredLocksPerTransaction` integer
//
// * `maxPreparedTransactions` integer
//
// * `maxStandbyStreamingDelay` integer
//
// * `maxWalSize` integer
//
// * `maxWorkerProcesses` integer
//
// * `minWalSize` integer
//
// * `oldSnapshotThreshold` integer
//
// * `operatorPrecedenceWarning` boolean
//
// * `parallelLeaderParticipation` boolean
//
// * `pgHintPlanDebugPrint` one of:
// * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
// * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
// * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
// * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
// * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"
//
// * `pgHintPlanEnableHint` boolean
//
// * `pgHintPlanEnableHintTable` boolean
//
// * `pgHintPlanMessageLevel` one of:
// * * 0: "LOG_LEVEL_UNSPECIFIED"
// * * 1: "LOG_LEVEL_DEBUG5"
// * * 2: "LOG_LEVEL_DEBUG4"
// * * 3: "LOG_LEVEL_DEBUG3"
// * * 4: "LOG_LEVEL_DEBUG2"
// * * 5: "LOG_LEVEL_DEBUG1"
// * * 6: "LOG_LEVEL_LOG"
// * * 7: "LOG_LEVEL_NOTICE"
// * * 8: "LOG_LEVEL_WARNING"
// * * 9: "LOG_LEVEL_ERROR"
// * * 10: "LOG_LEVEL_FATAL"
// * * 11: "LOG_LEVEL_PANIC"
//
// * `planCacheMode` one of:
// * * 0: "PLAN_CACHE_MODE_UNSPECIFIED"
// * * 1: "PLAN_CACHE_MODE_AUTO"
// * * 2: "PLAN_CACHE_MODE_FORCE_CUSTOM_PLAN"
// * * 3: "PLAN_CACHE_MODE_FORCE_GENERIC_PLAN"
//
// * `quoteAllIdentifiers` boolean
//
// * `randomPageCost` float
//
// * `rowSecurity` boolean
//
// * `searchPath` text
//
// * `seqPageCost` float
//
// * `sharedBuffers` integer
//
// * `sharedPreloadLibraries` override if not set. One of:
// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
// * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
// * * NO value
//
// * `standardConformingStrings` boolean
//
// * `statementTimeout` integer
//
// * `synchronizeSeqscans` boolean
//
// * `synchronousCommit` one of:
// * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
// * * 1: "SYNCHRONOUS_COMMIT_ON"
// * * 2: "SYNCHRONOUS_COMMIT_OFF"
// * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
// * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
// * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"
//
// * `tempBuffers` integer
//
// * `tempFileLimit` integer
//
// * `timezone` text
//
// * `trackActivityQuerySize` integer
//
// * `transformNullEquals` boolean
//
// * `vacuumCleanupIndexScaleFactor` float
//
// * `vacuumCostDelay` integer
//
// * `vacuumCostLimit` integer
//
// * `vacuumCostPageDirty` integer
//
// * `vacuumCostPageHit` integer
//
// * `vacuumCostPageMiss` integer
//
// * `walLevel` one of:
// * * 0: "WAL_LEVEL_UNSPECIFIED"
// * * 1: "WAL_LEVEL_REPLICA"
// * * 2: "WAL_LEVEL_LOGICAL"
//
// * `workMem` integer
//
// * `xmlbinary` one of:
// * * 0: "XML_BINARY_UNSPECIFIED"
// * * 1: "XML_BINARY_BASE64"
// * * 2: "XML_BINARY_HEX"
//
// * `xmloption` one of:
// * * 0: "XML_OPTION_UNSPECIFIED"
// * * 1: "XML_OPTION_DOCUMENT"
// * * 2: "XML_OPTION_CONTENT"
//
// ### Postgresql 11 config
//
// * `archiveTimeout` integer
//
// * `arrayNulls` boolean
//
// * `autoExplainLogAnalyze` boolean
//
// * `autoExplainLogBuffers` boolean
//
// * `autoExplainLogMinDuration` integer
//
// * `autoExplainLogNestedStatements` boolean
//
// * `autoExplainLogTiming` boolean
//
// * `autoExplainLogTriggers` boolean
//
// * `autoExplainLogVerbose` boolean
//
// * `autoExplainSampleRate` float
//
// * `autovacuumAnalyzeScaleFactor` float
//
// * `autovacuumMaxWorkers` integer
//
// * `autovacuumNaptime` integer
//
// * `autovacuumVacuumCostDelay` integer
//
// * `autovacuumVacuumCostLimit` integer
//
// * `autovacuumVacuumScaleFactor` float
//
// * `autovacuumWorkMem` integer
//
// * `backendFlushAfter` integer
//
// * `backslashQuote` one of:
// * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
// * * 1: "BACKSLASH_QUOTE"
// * * 2: "BACKSLASH_QUOTE_ON"
// * * 3: "BACKSLASH_QUOTE_OFF"
// * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"
//
// * `bgwriterDelay` integer
//
// * `bgwriterFlushAfter` integer
//
// * `bgwriterLruMaxpages` integer
//
// * `bgwriterLruMultiplier` float
//
// * `byteaOutput` one of:
// * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
// * * 1: "BYTEA_OUTPUT_HEX"
// * * 2: "BYTEA_OUTPUT_ESCAPED"
//
// * `checkpointCompletionTarget` float
//
// * `checkpointFlushAfter` integer
//
// * `checkpointTimeout` integer
//
// * `clientMinMessages` one of:
// * * 0: "LOG_LEVEL_UNSPECIFIED"
// * * 1: "LOG_LEVEL_DEBUG5"
// * * 2: "LOG_LEVEL_DEBUG4"
// * * 3: "LOG_LEVEL_DEBUG3"
// * * 4: "LOG_LEVEL_DEBUG2"
// * * 5: "LOG_LEVEL_DEBUG1"
// * * 6: "LOG_LEVEL_LOG"
// * * 7: "LOG_LEVEL_NOTICE"
// * * 8: "LOG_LEVEL_WARNING"
// * * 9: "LOG_LEVEL_ERROR"
// * * 10: "LOG_LEVEL_FATAL"
// * * 11: "LOG_LEVEL_PANIC"
//
// * `constraintExclusion` one of:
// * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
// * * 1: "CONSTRAINT_EXCLUSION_ON"
// * * 2: "CONSTRAINT_EXCLUSION_OFF"
// * * 3: "CONSTRAINT_EXCLUSION_PARTITION"
//
// * `cursorTupleFraction` float
//
// * `deadlockTimeout` integer
//
// * `defaultStatisticsTarget` integer
//
// * `defaultTransactionIsolation` one of:
// * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
// * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
// * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
// * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
// * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"
//
// * `defaultTransactionReadOnly` boolean
//
// * `defaultWithOids` boolean
//
// * `effectiveCacheSize` integer
//
// * `effectiveIoConcurrency` integer
//
// * `enableBitmapscan` boolean
//
// * `enableHashagg` boolean
//
// * `enableHashjoin` boolean
//
// * `enableIndexonlyscan` boolean
//
// * `enableIndexscan` boolean
//
// * `enableMaterial` boolean
//
// * `enableMergejoin` boolean
//
// * `enableNestloop` boolean
//
// * `enableParallelAppend` boolean
//
// * `enableParallelHash` boolean
//
// * `enablePartitionPruning` boolean
//
// * `enablePartitionwiseAggregate` boolean
//
// * `enablePartitionwiseJoin` boolean
//
// * `enableSeqscan` boolean
//
// * `enableSort` boolean
//
// * `enableTidscan` boolean
//
// * `escapeStringWarning` boolean
//
// * `exitOnError` boolean
//
// * `forceParallelMode` one of:
// * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
// * * 1: "FORCE_PARALLEL_MODE_ON"
// * * 2: "FORCE_PARALLEL_MODE_OFF"
// * * 3: "FORCE_PARALLEL_MODE_REGRESS"
//
// * `fromCollapseLimit` integer
//
// * `ginPendingListLimit` integer
//
// * `idleInTransactionSessionTimeout` integer
//
// * `jit` boolean
//
// * `joinCollapseLimit` integer
//
// * `loCompatPrivileges` boolean
//
// * `lockTimeout` integer
//
// * `logCheckpoints` boolean
//
// * `logConnections` boolean
//
// * `logDisconnections` boolean
//
// * `logDuration` boolean
//
// * `logErrorVerbosity` one of:
// * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
// * * 1: "LOG_ERROR_VERBOSITY_TERSE"
// * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
// * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"
//
// * `logLockWaits` boolean
//
// * `logMinDurationStatement` integer
//
// * `logMinErrorStatement` one of:
// * * 0: "LOG_LEVEL_UNSPECIFIED"
// * * 1: "LOG_LEVEL_DEBUG5"
// * * 2: "LOG_LEVEL_DEBUG4"
// * * 3: "LOG_LEVEL_DEBUG3"
// * * 4: "LOG_LEVEL_DEBUG2"
// * * 5: "LOG_LEVEL_DEBUG1"
// * * 6: "LOG_LEVEL_LOG"
// * * 7: "LOG_LEVEL_NOTICE"
// * * 8: "LOG_LEVEL_WARNING"
// * * 9: "LOG_LEVEL_ERROR"
// * * 10: "LOG_LEVEL_FATAL"
// * * 11: "LOG_LEVEL_PANIC"
//
// * `logMinMessages` one of:
// * * 0: "LOG_LEVEL_UNSPECIFIED"
// * * 1: "LOG_LEVEL_DEBUG5"
// * * 2: "LOG_LEVEL_DEBUG4"
// * * 3: "LOG_LEVEL_DEBUG3"
// * * 4: "LOG_LEVEL_DEBUG2"
// * * 5: "LOG_LEVEL_DEBUG1"
// * * 6: "LOG_LEVEL_LOG"
// * * 7: "LOG_LEVEL_NOTICE"
// * * 8: "LOG_LEVEL_WARNING"
// * * 9: "LOG_LEVEL_ERROR"
// * * 10: "LOG_LEVEL_FATAL"
// * * 11: "LOG_LEVEL_PANIC"
//
// * `logStatement` one of:
// * * 0: "LOG_STATEMENT_UNSPECIFIED"
// * * 1: "LOG_STATEMENT_NONE"
// * * 2: "LOG_STATEMENT_DDL"
// * * 3: "LOG_STATEMENT_MOD"
// * * 4: "LOG_STATEMENT_ALL"
//
// * `logTempFiles` integer
//
// * `maintenanceWorkMem` integer
//
// * `maxConnections` integer
//
// * `maxLocksPerTransaction` integer
//
// * `maxParallelMaintenanceWorkers` integer
//
// * `maxParallelWorkers` integer
//
// * `maxParallelWorkersPerGather` integer
//
// * `maxPredLocksPerTransaction` integer
//
// * `maxPreparedTransactions` integer
//
// * `maxStandbyStreamingDelay` integer
//
// * `maxWalSize` integer
//
// * `maxWorkerProcesses` integer
//
// * `minWalSize` integer
//
// * `oldSnapshotThreshold` integer
//
// * `operatorPrecedenceWarning` boolean
//
// * `parallelLeaderParticipation` boolean
//
// * `pgHintPlanDebugPrint` one of:
// * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
// * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
// * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
// * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
// * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"
//
// * `pgHintPlanEnableHint` boolean
//
// * `pgHintPlanEnableHintTable` boolean
//
// * `pgHintPlanMessageLevel` one of:
// * * 0: "LOG_LEVEL_UNSPECIFIED"
// * * 1: "LOG_LEVEL_DEBUG5"
// * * 2: "LOG_LEVEL_DEBUG4"
// * * 3: "LOG_LEVEL_DEBUG3"
// * * 4: "LOG_LEVEL_DEBUG2"
// * * 5: "LOG_LEVEL_DEBUG1"
// * * 6: "LOG_LEVEL_LOG"
// * * 7: "LOG_LEVEL_NOTICE"
// * * 8: "LOG_LEVEL_WARNING"
// * * 9: "LOG_LEVEL_ERROR"
// * * 10: "LOG_LEVEL_FATAL"
// * * 11: "LOG_LEVEL_PANIC"
//
// * `quoteAllIdentifiers` boolean
//
// * `randomPageCost` float
//
// * `rowSecurity` boolean
//
// * `searchPath` text
//
// * `seqPageCost` float
//
// * `sharedBuffers` integer
//
// * `sharedPreloadLibraries` override if not set. One of:
// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
// * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
// * * NO value
//
// * `standardConformingStrings` boolean
//
// * `statementTimeout` integer
//
// * `synchronizeSeqscans` boolean
//
// * `synchronousCommit` one of:
// * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
// * * 1: "SYNCHRONOUS_COMMIT_ON"
// * * 2: "SYNCHRONOUS_COMMIT_OFF"
// * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
// * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
// * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"
//
// * `tempBuffers` integer
//
// * `tempFileLimit` integer
//
// * `timezone` text
//
// * `trackActivityQuerySize` integer
//
// * `transformNullEquals` boolean
//
// * `vacuumCleanupIndexScaleFactor` float
//
// * `vacuumCostDelay` integer
//
// * `vacuumCostLimit` integer
//
// * `vacuumCostPageDirty` integer
//
// * `vacuumCostPageHit` integer
//
// * `vacuumCostPageMiss` integer
//
// * `walLevel` one of:
// * * 0: "WAL_LEVEL_UNSPECIFIED"
// * * 1: "WAL_LEVEL_REPLICA"
// * * 2: "WAL_LEVEL_LOGICAL"
//
// * `workMem` integer
//
// * `xmlbinary` one of:
// * * 0: "XML_BINARY_UNSPECIFIED"
// * * 1: "XML_BINARY_BASE64"
// * * 2: "XML_BINARY_HEX"
//
// * `xmloption` one of:
// * * 0: "XML_OPTION_UNSPECIFIED"
// * * 1: "XML_OPTION_DOCUMENT"
// * * 2: "XML_OPTION_CONTENT"
//
// ### Postgresql 10 config
//
// * `archiveTimeout` integer
//
// * `arrayNulls` boolean
//
// * `autoExplainLogAnalyze` boolean
//
// * `autoExplainLogBuffers` boolean
//
// * `autoExplainLogMinDuration` integer
//
// * `autoExplainLogNestedStatements` boolean
//
// * `autoExplainLogTiming` boolean
//
// * `autoExplainLogTriggers` boolean
//
// * `autoExplainLogVerbose` boolean
//
// * `autoExplainSampleRate` float
//
// * `autovacuumAnalyzeScaleFactor` float
//
// * `autovacuumMaxWorkers` integer
//
// * `autovacuumNaptime` integer
//
// * `autovacuumVacuumCostDelay` integer
//
// * `autovacuumVacuumCostLimit` integer
//
// * `autovacuumVacuumScaleFactor` float
//
// * `autovacuumWorkMem` integer
//
// * `backendFlushAfter` integer
//
// * `backslashQuote` one of:
// * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
// * * 1: "BACKSLASH_QUOTE"
// * * 2: "BACKSLASH_QUOTE_ON"
// * * 3: "BACKSLASH_QUOTE_OFF"
// * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"
//
// * `bgwriterDelay` integer
//
// * `bgwriterFlushAfter` integer
//
// * `bgwriterLruMaxpages` integer
//
// * `bgwriterLruMultiplier` float
//
// * `byteaOutput` one of:
// * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
// * * 1: "BYTEA_OUTPUT_HEX"
// * * 2: "BYTEA_OUTPUT_ESCAPED"
//
// * `checkpointCompletionTarget` float
//
// * `checkpointFlushAfter` integer
//
// * `checkpointTimeout` integer
//
// * `clientMinMessages` one of:
// * * 0: "LOG_LEVEL_UNSPECIFIED"
// * * 1: "LOG_LEVEL_DEBUG5"
// * * 2: "LOG_LEVEL_DEBUG4"
// * * 3: "LOG_LEVEL_DEBUG3"
// * * 4: "LOG_LEVEL_DEBUG2"
// * * 5: "LOG_LEVEL_DEBUG1"
// * * 6: "LOG_LEVEL_LOG"
// * * 7: "LOG_LEVEL_NOTICE"
// * * 8: "LOG_LEVEL_WARNING"
// * * 9: "LOG_LEVEL_ERROR"
// * * 10: "LOG_LEVEL_FATAL"
// * * 11: "LOG_LEVEL_PANIC"
//
// * `constraintExclusion` one of:
// * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
// * * 1: "CONSTRAINT_EXCLUSION_ON"
// * * 2: "CONSTRAINT_EXCLUSION_OFF"
// * * 3: "CONSTRAINT_EXCLUSION_PARTITION"
//
// * `cursorTupleFraction` float
//
// * `deadlockTimeout` integer
//
// * `defaultStatisticsTarget` integer
//
// * `defaultTransactionIsolation` one of:
// * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
// * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
// * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
// * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
// * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"
//
// * `defaultTransactionReadOnly` boolean
//
// * `defaultWithOids` boolean
//
// * `effectiveCacheSize` integer
//
// * `effectiveIoConcurrency` integer
//
// * `enableBitmapscan` boolean
//
// * `enableHashagg` boolean
//
// * `enableHashjoin` boolean
//
// * `enableIndexonlyscan` boolean
//
// * `enableIndexscan` boolean
//
// * `enableMaterial` boolean
//
// * `enableMergejoin` boolean
//
// * `enableNestloop` boolean
//
// * `enableSeqscan` boolean
//
// * `enableSort` boolean
//
// * `enableTidscan` boolean
//
// * `escapeStringWarning` boolean
//
// * `exitOnError` boolean
//
// * `forceParallelMode` one of:
// * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
// * * 1: "FORCE_PARALLEL_MODE_ON"
// * * 2: "FORCE_PARALLEL_MODE_OFF"
// * * 3: "FORCE_PARALLEL_MODE_REGRESS"
//
// * `fromCollapseLimit` integer
//
// * `ginPendingListLimit` integer
//
// * `idleInTransactionSessionTimeout` integer
//
// * `joinCollapseLimit` integer
//
// * `loCompatPrivileges` boolean
//
// * `lockTimeout` integer
//
// * `logCheckpoints` boolean
//
// * `logConnections` boolean
//
// * `logDisconnections` boolean
//
// * `logDuration` boolean
//
// * `logErrorVerbosity` one of:
// * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
// * * 1: "LOG_ERROR_VERBOSITY_TERSE"
// * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
// * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"
//
// * `logLockWaits` boolean
//
// * `logMinDurationStatement` integer
//
// * `logMinErrorStatement` one of:
// * * 0: "LOG_LEVEL_UNSPECIFIED"
// * * 1: "LOG_LEVEL_DEBUG5"
// * * 2: "LOG_LEVEL_DEBUG4"
// * * 3: "LOG_LEVEL_DEBUG3"
// * * 4: "LOG_LEVEL_DEBUG2"
// * * 5: "LOG_LEVEL_DEBUG1"
// * * 6: "LOG_LEVEL_LOG"
// * * 7: "LOG_LEVEL_NOTICE"
// * * 8: "LOG_LEVEL_WARNING"
// * * 9: "LOG_LEVEL_ERROR"
// * * 10: "LOG_LEVEL_FATAL"
// * * 11: "LOG_LEVEL_PANIC"
//
// * `logMinMessages` one of:
// * * 0: "LOG_LEVEL_UNSPECIFIED"
// * * 1: "LOG_LEVEL_DEBUG5"
// * * 2: "LOG_LEVEL_DEBUG4"
// * * 3: "LOG_LEVEL_DEBUG3"
// * * 4: "LOG_LEVEL_DEBUG2"
// * * 5: "LOG_LEVEL_DEBUG1"
// * * 6: "LOG_LEVEL_LOG"
// * * 7: "LOG_LEVEL_NOTICE"
// * * 8: "LOG_LEVEL_WARNING"
// * * 9: "LOG_LEVEL_ERROR"
// * * 10: "LOG_LEVEL_FATAL"
// * * 11: "LOG_LEVEL_PANIC"
//
// * `logStatement` one of:
// * * 0: "LOG_STATEMENT_UNSPECIFIED"
// * * 1: "LOG_STATEMENT_NONE"
// * * 2: "LOG_STATEMENT_DDL"
// * * 3: "LOG_STATEMENT_MOD"
// * * 4: "LOG_STATEMENT_ALL"
//
// * `logTempFiles` integer
//
// * `maintenanceWorkMem` integer
//
// * `maxConnections` integer
//
// * `maxLocksPerTransaction` integer
//
// * `maxParallelWorkers` integer
//
// * `maxParallelWorkersPerGather` integer
//
// * `maxPredLocksPerTransaction` integer
//
// * `maxPreparedTransactions` integer
//
// * `maxStandbyStreamingDelay` integer
//
// * `maxWalSize` integer
//
// * `maxWorkerProcesses` integer
//
// * `minWalSize` integer
//
// * `oldSnapshotThreshold` integer
//
// * `operatorPrecedenceWarning` boolean
//
// * `pgHintPlanDebugPrint` one of:
// * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
// * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
// * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
// * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
// * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"
//
// * `pgHintPlanEnableHint` boolean
//
// * `pgHintPlanEnableHintTable` boolean
//
// * `pgHintPlanMessageLevel` one of:
// * * 0: "LOG_LEVEL_UNSPECIFIED"
// * * 1: "LOG_LEVEL_DEBUG5"
// * * 2: "LOG_LEVEL_DEBUG4"
// * * 3: "LOG_LEVEL_DEBUG3"
// * * 4: "LOG_LEVEL_DEBUG2"
// * * 5: "LOG_LEVEL_DEBUG1"
// * * 6: "LOG_LEVEL_LOG"
// * * 7: "LOG_LEVEL_NOTICE"
// * * 8: "LOG_LEVEL_WARNING"
// * * 9: "LOG_LEVEL_ERROR"
// * * 10: "LOG_LEVEL_FATAL"
// * * 11: "LOG_LEVEL_PANIC"
//
// * `quoteAllIdentifiers` boolean
//
// * `randomPageCost` float
//
// * `replacementSortTuples` integer
//
// * `rowSecurity` boolean
//
// * `searchPath` text
//
// * `seqPageCost` float
//
// * `sharedBuffers` integer
//
// * `sharedPreloadLibraries` override if not set. One of:
// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
// * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
// * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
// * * NO value
//
// * `standardConformingStrings` boolean
//
// * `statementTimeout` integer
//
// * `synchronizeSeqscans` boolean
//
// * `synchronousCommit` one of:
// * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
// * * 1: "SYNCHRONOUS_COMMIT_ON"
// * * 2: "SYNCHRONOUS_COMMIT_OFF"
// * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
// * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
// * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"
//
// * `tempBuffers` integer
//
// * `tempFileLimit` integer
//
// * `timezone` text
//
// * `trackActivityQuerySize` integer
//
// * `transformNullEquals` boolean
//
// * `vacuumCostDelay` integer
//
// * `vacuumCostLimit` integer
//
// * `vacuumCostPageDirty` integer
//
// * `vacuumCostPageHit` integer
//
// * `vacuumCostPageMiss` integer
//
// * `walLevel` one of:
// * * 0: "WAL_LEVEL_UNSPECIFIED"
// * * 1: "WAL_LEVEL_REPLICA"
// * * 2: "WAL_LEVEL_LOGICAL"
//
// * `workMem` integer
//
// * `xmlbinary` one of:
// * * 0: "XML_BINARY_UNSPECIFIED"
// * * 1: "XML_BINARY_BASE64"
// * * 2: "XML_BINARY_HEX"
//
// * `xmloption` one of:
// * * 0: "XML_OPTION_UNSPECIFIED"
// * * 1: "XML_OPTION_DOCUMENT"
// * * 2: "XML_OPTION_CONTENT"
//
// ## Import
//
// A cluster can be imported using the `id` of the resource, e.g.
//
// ```sh
//  $ pulumi import yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster foo cluster_id
// ```
type MdbPostgresqlCluster struct {
	pulumi.CustomResourceState

	// Configuration of the PostgreSQL cluster. The structure is documented below.
	Config MdbPostgresqlClusterConfigOutput `pulumi:"config"`
	// Timestamp of cluster creation.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A database of the PostgreSQL cluster. The structure is documented below.
	Databases MdbPostgresqlClusterDatabaseArrayOutput `pulumi:"databases"`
	// Description of the PostgreSQL cluster.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Deployment environment of the PostgreSQL cluster.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The ID of the folder that the resource belongs to. If it is unset, the default provider `folderId` is used for create.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// Aggregated health of the cluster.
	Health pulumi.StringOutput `pulumi:"health"`
	// It sets name of master host. It works only when `host.name` is set.
	HostMasterName pulumi.StringOutput `pulumi:"hostMasterName"`
	// A host of the PostgreSQL cluster. The structure is documented below.
	Hosts MdbPostgresqlClusterHostArrayOutput `pulumi:"hosts"`
	// A set of key/value label pairs to assign to the PostgreSQL cluster.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replicationSourceName` parameter.
	// Also, this field is used to select which host will be selected as a master host. Please see `hostMasterName` parameter.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the network, to which the PostgreSQL cluster belongs.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The cluster will be created from the specified backup. The structure is documented below.
	Restore MdbPostgresqlClusterRestorePtrOutput `pulumi:"restore"`
	// A set of ids of security groups assigned to hosts of the cluster.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// Status of the cluster.
	Status pulumi.StringOutput `pulumi:"status"`
	// A user of the PostgreSQL cluster. The structure is documented below.
	Users MdbPostgresqlClusterUserArrayOutput `pulumi:"users"`
}

// NewMdbPostgresqlCluster registers a new resource with the given unique name, arguments, and options.
func NewMdbPostgresqlCluster(ctx *pulumi.Context,
	name string, args *MdbPostgresqlClusterArgs, opts ...pulumi.ResourceOption) (*MdbPostgresqlCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Databases == nil {
		return nil, errors.New("invalid value for required argument 'Databases'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Hosts == nil {
		return nil, errors.New("invalid value for required argument 'Hosts'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	var resource MdbPostgresqlCluster
	err := ctx.RegisterResource("yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMdbPostgresqlCluster gets an existing MdbPostgresqlCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMdbPostgresqlCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MdbPostgresqlClusterState, opts ...pulumi.ResourceOption) (*MdbPostgresqlCluster, error) {
	var resource MdbPostgresqlCluster
	err := ctx.ReadResource("yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MdbPostgresqlCluster resources.
type mdbPostgresqlClusterState struct {
	// Configuration of the PostgreSQL cluster. The structure is documented below.
	Config *MdbPostgresqlClusterConfig `pulumi:"config"`
	// Timestamp of cluster creation.
	CreatedAt *string `pulumi:"createdAt"`
	// A database of the PostgreSQL cluster. The structure is documented below.
	Databases []MdbPostgresqlClusterDatabase `pulumi:"databases"`
	// Description of the PostgreSQL cluster.
	Description *string `pulumi:"description"`
	// Deployment environment of the PostgreSQL cluster.
	Environment *string `pulumi:"environment"`
	// The ID of the folder that the resource belongs to. If it is unset, the default provider `folderId` is used for create.
	FolderId *string `pulumi:"folderId"`
	// Aggregated health of the cluster.
	Health *string `pulumi:"health"`
	// It sets name of master host. It works only when `host.name` is set.
	HostMasterName *string `pulumi:"hostMasterName"`
	// A host of the PostgreSQL cluster. The structure is documented below.
	Hosts []MdbPostgresqlClusterHost `pulumi:"hosts"`
	// A set of key/value label pairs to assign to the PostgreSQL cluster.
	Labels map[string]string `pulumi:"labels"`
	// Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replicationSourceName` parameter.
	// Also, this field is used to select which host will be selected as a master host. Please see `hostMasterName` parameter.
	Name *string `pulumi:"name"`
	// ID of the network, to which the PostgreSQL cluster belongs.
	NetworkId *string `pulumi:"networkId"`
	// The cluster will be created from the specified backup. The structure is documented below.
	Restore *MdbPostgresqlClusterRestore `pulumi:"restore"`
	// A set of ids of security groups assigned to hosts of the cluster.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Status of the cluster.
	Status *string `pulumi:"status"`
	// A user of the PostgreSQL cluster. The structure is documented below.
	Users []MdbPostgresqlClusterUser `pulumi:"users"`
}

type MdbPostgresqlClusterState struct {
	// Configuration of the PostgreSQL cluster. The structure is documented below.
	Config MdbPostgresqlClusterConfigPtrInput
	// Timestamp of cluster creation.
	CreatedAt pulumi.StringPtrInput
	// A database of the PostgreSQL cluster. The structure is documented below.
	Databases MdbPostgresqlClusterDatabaseArrayInput
	// Description of the PostgreSQL cluster.
	Description pulumi.StringPtrInput
	// Deployment environment of the PostgreSQL cluster.
	Environment pulumi.StringPtrInput
	// The ID of the folder that the resource belongs to. If it is unset, the default provider `folderId` is used for create.
	FolderId pulumi.StringPtrInput
	// Aggregated health of the cluster.
	Health pulumi.StringPtrInput
	// It sets name of master host. It works only when `host.name` is set.
	HostMasterName pulumi.StringPtrInput
	// A host of the PostgreSQL cluster. The structure is documented below.
	Hosts MdbPostgresqlClusterHostArrayInput
	// A set of key/value label pairs to assign to the PostgreSQL cluster.
	Labels pulumi.StringMapInput
	// Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replicationSourceName` parameter.
	// Also, this field is used to select which host will be selected as a master host. Please see `hostMasterName` parameter.
	Name pulumi.StringPtrInput
	// ID of the network, to which the PostgreSQL cluster belongs.
	NetworkId pulumi.StringPtrInput
	// The cluster will be created from the specified backup. The structure is documented below.
	Restore MdbPostgresqlClusterRestorePtrInput
	// A set of ids of security groups assigned to hosts of the cluster.
	SecurityGroupIds pulumi.StringArrayInput
	// Status of the cluster.
	Status pulumi.StringPtrInput
	// A user of the PostgreSQL cluster. The structure is documented below.
	Users MdbPostgresqlClusterUserArrayInput
}

func (MdbPostgresqlClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbPostgresqlClusterState)(nil)).Elem()
}

type mdbPostgresqlClusterArgs struct {
	// Configuration of the PostgreSQL cluster. The structure is documented below.
	Config MdbPostgresqlClusterConfig `pulumi:"config"`
	// A database of the PostgreSQL cluster. The structure is documented below.
	Databases []MdbPostgresqlClusterDatabase `pulumi:"databases"`
	// Description of the PostgreSQL cluster.
	Description *string `pulumi:"description"`
	// Deployment environment of the PostgreSQL cluster.
	Environment string `pulumi:"environment"`
	// The ID of the folder that the resource belongs to. If it is unset, the default provider `folderId` is used for create.
	FolderId *string `pulumi:"folderId"`
	// It sets name of master host. It works only when `host.name` is set.
	HostMasterName *string `pulumi:"hostMasterName"`
	// A host of the PostgreSQL cluster. The structure is documented below.
	Hosts []MdbPostgresqlClusterHost `pulumi:"hosts"`
	// A set of key/value label pairs to assign to the PostgreSQL cluster.
	Labels map[string]string `pulumi:"labels"`
	// Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replicationSourceName` parameter.
	// Also, this field is used to select which host will be selected as a master host. Please see `hostMasterName` parameter.
	Name *string `pulumi:"name"`
	// ID of the network, to which the PostgreSQL cluster belongs.
	NetworkId string `pulumi:"networkId"`
	// The cluster will be created from the specified backup. The structure is documented below.
	Restore *MdbPostgresqlClusterRestore `pulumi:"restore"`
	// A set of ids of security groups assigned to hosts of the cluster.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A user of the PostgreSQL cluster. The structure is documented below.
	Users []MdbPostgresqlClusterUser `pulumi:"users"`
}

// The set of arguments for constructing a MdbPostgresqlCluster resource.
type MdbPostgresqlClusterArgs struct {
	// Configuration of the PostgreSQL cluster. The structure is documented below.
	Config MdbPostgresqlClusterConfigInput
	// A database of the PostgreSQL cluster. The structure is documented below.
	Databases MdbPostgresqlClusterDatabaseArrayInput
	// Description of the PostgreSQL cluster.
	Description pulumi.StringPtrInput
	// Deployment environment of the PostgreSQL cluster.
	Environment pulumi.StringInput
	// The ID of the folder that the resource belongs to. If it is unset, the default provider `folderId` is used for create.
	FolderId pulumi.StringPtrInput
	// It sets name of master host. It works only when `host.name` is set.
	HostMasterName pulumi.StringPtrInput
	// A host of the PostgreSQL cluster. The structure is documented below.
	Hosts MdbPostgresqlClusterHostArrayInput
	// A set of key/value label pairs to assign to the PostgreSQL cluster.
	Labels pulumi.StringMapInput
	// Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replicationSourceName` parameter.
	// Also, this field is used to select which host will be selected as a master host. Please see `hostMasterName` parameter.
	Name pulumi.StringPtrInput
	// ID of the network, to which the PostgreSQL cluster belongs.
	NetworkId pulumi.StringInput
	// The cluster will be created from the specified backup. The structure is documented below.
	Restore MdbPostgresqlClusterRestorePtrInput
	// A set of ids of security groups assigned to hosts of the cluster.
	SecurityGroupIds pulumi.StringArrayInput
	// A user of the PostgreSQL cluster. The structure is documented below.
	Users MdbPostgresqlClusterUserArrayInput
}

func (MdbPostgresqlClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbPostgresqlClusterArgs)(nil)).Elem()
}

type MdbPostgresqlClusterInput interface {
	pulumi.Input

	ToMdbPostgresqlClusterOutput() MdbPostgresqlClusterOutput
	ToMdbPostgresqlClusterOutputWithContext(ctx context.Context) MdbPostgresqlClusterOutput
}

func (*MdbPostgresqlCluster) ElementType() reflect.Type {
	return reflect.TypeOf((*MdbPostgresqlCluster)(nil))
}

func (i *MdbPostgresqlCluster) ToMdbPostgresqlClusterOutput() MdbPostgresqlClusterOutput {
	return i.ToMdbPostgresqlClusterOutputWithContext(context.Background())
}

func (i *MdbPostgresqlCluster) ToMdbPostgresqlClusterOutputWithContext(ctx context.Context) MdbPostgresqlClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbPostgresqlClusterOutput)
}

func (i *MdbPostgresqlCluster) ToMdbPostgresqlClusterPtrOutput() MdbPostgresqlClusterPtrOutput {
	return i.ToMdbPostgresqlClusterPtrOutputWithContext(context.Background())
}

func (i *MdbPostgresqlCluster) ToMdbPostgresqlClusterPtrOutputWithContext(ctx context.Context) MdbPostgresqlClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbPostgresqlClusterPtrOutput)
}

type MdbPostgresqlClusterPtrInput interface {
	pulumi.Input

	ToMdbPostgresqlClusterPtrOutput() MdbPostgresqlClusterPtrOutput
	ToMdbPostgresqlClusterPtrOutputWithContext(ctx context.Context) MdbPostgresqlClusterPtrOutput
}

type mdbPostgresqlClusterPtrType MdbPostgresqlClusterArgs

func (*mdbPostgresqlClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbPostgresqlCluster)(nil))
}

func (i *mdbPostgresqlClusterPtrType) ToMdbPostgresqlClusterPtrOutput() MdbPostgresqlClusterPtrOutput {
	return i.ToMdbPostgresqlClusterPtrOutputWithContext(context.Background())
}

func (i *mdbPostgresqlClusterPtrType) ToMdbPostgresqlClusterPtrOutputWithContext(ctx context.Context) MdbPostgresqlClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbPostgresqlClusterPtrOutput)
}

// MdbPostgresqlClusterArrayInput is an input type that accepts MdbPostgresqlClusterArray and MdbPostgresqlClusterArrayOutput values.
// You can construct a concrete instance of `MdbPostgresqlClusterArrayInput` via:
//
//          MdbPostgresqlClusterArray{ MdbPostgresqlClusterArgs{...} }
type MdbPostgresqlClusterArrayInput interface {
	pulumi.Input

	ToMdbPostgresqlClusterArrayOutput() MdbPostgresqlClusterArrayOutput
	ToMdbPostgresqlClusterArrayOutputWithContext(context.Context) MdbPostgresqlClusterArrayOutput
}

type MdbPostgresqlClusterArray []MdbPostgresqlClusterInput

func (MdbPostgresqlClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*MdbPostgresqlCluster)(nil))
}

func (i MdbPostgresqlClusterArray) ToMdbPostgresqlClusterArrayOutput() MdbPostgresqlClusterArrayOutput {
	return i.ToMdbPostgresqlClusterArrayOutputWithContext(context.Background())
}

func (i MdbPostgresqlClusterArray) ToMdbPostgresqlClusterArrayOutputWithContext(ctx context.Context) MdbPostgresqlClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbPostgresqlClusterArrayOutput)
}

// MdbPostgresqlClusterMapInput is an input type that accepts MdbPostgresqlClusterMap and MdbPostgresqlClusterMapOutput values.
// You can construct a concrete instance of `MdbPostgresqlClusterMapInput` via:
//
//          MdbPostgresqlClusterMap{ "key": MdbPostgresqlClusterArgs{...} }
type MdbPostgresqlClusterMapInput interface {
	pulumi.Input

	ToMdbPostgresqlClusterMapOutput() MdbPostgresqlClusterMapOutput
	ToMdbPostgresqlClusterMapOutputWithContext(context.Context) MdbPostgresqlClusterMapOutput
}

type MdbPostgresqlClusterMap map[string]MdbPostgresqlClusterInput

func (MdbPostgresqlClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*MdbPostgresqlCluster)(nil))
}

func (i MdbPostgresqlClusterMap) ToMdbPostgresqlClusterMapOutput() MdbPostgresqlClusterMapOutput {
	return i.ToMdbPostgresqlClusterMapOutputWithContext(context.Background())
}

func (i MdbPostgresqlClusterMap) ToMdbPostgresqlClusterMapOutputWithContext(ctx context.Context) MdbPostgresqlClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbPostgresqlClusterMapOutput)
}

type MdbPostgresqlClusterOutput struct {
	*pulumi.OutputState
}

func (MdbPostgresqlClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MdbPostgresqlCluster)(nil))
}

func (o MdbPostgresqlClusterOutput) ToMdbPostgresqlClusterOutput() MdbPostgresqlClusterOutput {
	return o
}

func (o MdbPostgresqlClusterOutput) ToMdbPostgresqlClusterOutputWithContext(ctx context.Context) MdbPostgresqlClusterOutput {
	return o
}

func (o MdbPostgresqlClusterOutput) ToMdbPostgresqlClusterPtrOutput() MdbPostgresqlClusterPtrOutput {
	return o.ToMdbPostgresqlClusterPtrOutputWithContext(context.Background())
}

func (o MdbPostgresqlClusterOutput) ToMdbPostgresqlClusterPtrOutputWithContext(ctx context.Context) MdbPostgresqlClusterPtrOutput {
	return o.ApplyT(func(v MdbPostgresqlCluster) *MdbPostgresqlCluster {
		return &v
	}).(MdbPostgresqlClusterPtrOutput)
}

type MdbPostgresqlClusterPtrOutput struct {
	*pulumi.OutputState
}

func (MdbPostgresqlClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbPostgresqlCluster)(nil))
}

func (o MdbPostgresqlClusterPtrOutput) ToMdbPostgresqlClusterPtrOutput() MdbPostgresqlClusterPtrOutput {
	return o
}

func (o MdbPostgresqlClusterPtrOutput) ToMdbPostgresqlClusterPtrOutputWithContext(ctx context.Context) MdbPostgresqlClusterPtrOutput {
	return o
}

type MdbPostgresqlClusterArrayOutput struct{ *pulumi.OutputState }

func (MdbPostgresqlClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MdbPostgresqlCluster)(nil))
}

func (o MdbPostgresqlClusterArrayOutput) ToMdbPostgresqlClusterArrayOutput() MdbPostgresqlClusterArrayOutput {
	return o
}

func (o MdbPostgresqlClusterArrayOutput) ToMdbPostgresqlClusterArrayOutputWithContext(ctx context.Context) MdbPostgresqlClusterArrayOutput {
	return o
}

func (o MdbPostgresqlClusterArrayOutput) Index(i pulumi.IntInput) MdbPostgresqlClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MdbPostgresqlCluster {
		return vs[0].([]MdbPostgresqlCluster)[vs[1].(int)]
	}).(MdbPostgresqlClusterOutput)
}

type MdbPostgresqlClusterMapOutput struct{ *pulumi.OutputState }

func (MdbPostgresqlClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MdbPostgresqlCluster)(nil))
}

func (o MdbPostgresqlClusterMapOutput) ToMdbPostgresqlClusterMapOutput() MdbPostgresqlClusterMapOutput {
	return o
}

func (o MdbPostgresqlClusterMapOutput) ToMdbPostgresqlClusterMapOutputWithContext(ctx context.Context) MdbPostgresqlClusterMapOutput {
	return o
}

func (o MdbPostgresqlClusterMapOutput) MapIndex(k pulumi.StringInput) MdbPostgresqlClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MdbPostgresqlCluster {
		return vs[0].(map[string]MdbPostgresqlCluster)[vs[1].(string)]
	}).(MdbPostgresqlClusterOutput)
}

func init() {
	pulumi.RegisterOutputType(MdbPostgresqlClusterOutput{})
	pulumi.RegisterOutputType(MdbPostgresqlClusterPtrOutput{})
	pulumi.RegisterOutputType(MdbPostgresqlClusterArrayOutput{})
	pulumi.RegisterOutputType(MdbPostgresqlClusterMapOutput{})
}
