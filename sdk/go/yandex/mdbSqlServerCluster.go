// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SQLServer cluster within the Yandex Cloud. For more information, see [the official documentation](https://yandex.cloud/docs/managed-sqlserver/).
//
// Please read [Pricing for Managed Service for SQL Server](https://yandex.cloud/docs/managed-sqlserver/pricing#prices) before using SQLServer cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Auxiliary resources
//			fooVpcNetwork, err := yandex.NewVpcNetwork(ctx, "fooVpcNetwork", nil)
//			if err != nil {
//				return err
//			}
//			fooVpcSubnet, err := yandex.NewVpcSubnet(ctx, "fooVpcSubnet", &yandex.VpcSubnetArgs{
//				Zone:      pulumi.String("ru-central1-a"),
//				NetworkId: fooVpcNetwork.ID(),
//				V4CidrBlocks: pulumi.StringArray{
//					pulumi.String("10.5.0.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			test_sg_x, err := yandex.NewVpcSecurityGroup(ctx, "test-sg-x", &yandex.VpcSecurityGroupArgs{
//				NetworkId: fooVpcNetwork.ID(),
//				Ingresses: yandex.VpcSecurityGroupIngressArray{
//					&yandex.VpcSecurityGroupIngressArgs{
//						Protocol:    pulumi.String("ANY"),
//						Description: pulumi.String("Allow incoming traffic from members of the same security group"),
//						FromPort:    pulumi.Int(0),
//						ToPort:      pulumi.Int(65535),
//						V4CidrBlocks: pulumi.StringArray{
//							pulumi.String("0.0.0.0/0"),
//						},
//					},
//				},
//				Egresses: yandex.VpcSecurityGroupEgressArray{
//					&yandex.VpcSecurityGroupEgressArgs{
//						Protocol:    pulumi.String("ANY"),
//						Description: pulumi.String("Allow outgoing traffic to members of the same security group"),
//						FromPort:    pulumi.Int(0),
//						ToPort:      pulumi.Int(65535),
//						V4CidrBlocks: pulumi.StringArray{
//							pulumi.String("0.0.0.0/0"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a new MDB SQL Server Cluster.
//			_, err = yandex.NewMdbSqlServerCluster(ctx, "myCluster", &yandex.MdbSqlServerClusterArgs{
//				Environment: pulumi.String("PRESTABLE"),
//				NetworkId:   fooVpcNetwork.ID(),
//				Version:     pulumi.String("2016sp2std"),
//				Resources: &yandex.MdbSqlServerClusterResourcesArgs{
//					ResourcePresetId: pulumi.String("s2.small"),
//					DiskTypeId:       pulumi.String("network-ssd"),
//					DiskSize:         pulumi.Int(20),
//				},
//				Labels: pulumi.StringMap{
//					"test_key": pulumi.String("test_value"),
//				},
//				BackupWindowStart: &yandex.MdbSqlServerClusterBackupWindowStartArgs{
//					Hours:   pulumi.Int(20),
//					Minutes: pulumi.Int(30),
//				},
//				SqlserverConfig: pulumi.StringMap{
//					"fill_factor_percent":           pulumi.String("49"),
//					"optimize_for_ad_hoc_workloads": pulumi.String("true"),
//				},
//				Databases: yandex.MdbSqlServerClusterDatabaseArray{
//					&yandex.MdbSqlServerClusterDatabaseArgs{
//						Name: pulumi.String("db_name_a"),
//					},
//					&yandex.MdbSqlServerClusterDatabaseArgs{
//						Name: pulumi.String("db_name"),
//					},
//					&yandex.MdbSqlServerClusterDatabaseArgs{
//						Name: pulumi.String("db_name_b"),
//					},
//				},
//				Users: yandex.MdbSqlServerClusterUserArray{
//					&yandex.MdbSqlServerClusterUserArgs{
//						Name:     pulumi.String("bob"),
//						Password: pulumi.String("mysecurepassword"),
//					},
//					&yandex.MdbSqlServerClusterUserArgs{
//						Name:     pulumi.String("alice"),
//						Password: pulumi.String("mysecurepassword"),
//						Permissions: yandex.MdbSqlServerClusterUserPermissionArray{
//							&yandex.MdbSqlServerClusterUserPermissionArgs{
//								DatabaseName: pulumi.String("db_name"),
//								Roles: pulumi.StringArray{
//									pulumi.String("DDLADMIN"),
//								},
//							},
//						},
//					},
//					&yandex.MdbSqlServerClusterUserArgs{
//						Name:     pulumi.String("chuck"),
//						Password: pulumi.String("mysecurepassword"),
//						Permissions: yandex.MdbSqlServerClusterUserPermissionArray{
//							&yandex.MdbSqlServerClusterUserPermissionArgs{
//								DatabaseName: pulumi.String("db_name_a"),
//								Roles: pulumi.StringArray{
//									pulumi.String("OWNER"),
//								},
//							},
//							&yandex.MdbSqlServerClusterUserPermissionArgs{
//								DatabaseName: pulumi.String("db_name"),
//								Roles: pulumi.StringArray{
//									pulumi.String("OWNER"),
//									pulumi.String("DDLADMIN"),
//								},
//							},
//							&yandex.MdbSqlServerClusterUserPermissionArgs{
//								DatabaseName: pulumi.String("db_name_b"),
//								Roles: pulumi.StringArray{
//									pulumi.String("OWNER"),
//									pulumi.String("DDLADMIN"),
//								},
//							},
//						},
//					},
//				},
//				Hosts: yandex.MdbSqlServerClusterHostArray{
//					&yandex.MdbSqlServerClusterHostArgs{
//						Zone:     pulumi.String("ru-central1-a"),
//						SubnetId: fooVpcSubnet.ID(),
//					},
//				},
//				SecurityGroupIds: pulumi.StringArray{
//					test_sg_x.ID(),
//				},
//				HostGroupIds: pulumi.StringArray{
//					pulumi.String("host_group_1"),
//					pulumi.String("host_group_2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
//
// ```sh
// $ pulumi import yandex:index/mdbSqlServerCluster:MdbSqlServerCluster <resource Name> <resource Id>
// ```
//
// ```sh
// $ pulumi import yandex:index/mdbSqlServerCluster:MdbSqlServerCluster my_cluster ...
// ```
type MdbSqlServerCluster struct {
	pulumi.CustomResourceState

	// Time to start the daily backup, in the UTC.
	BackupWindowStart MdbSqlServerClusterBackupWindowStartOutput `pulumi:"backupWindowStart"`
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A database of the SQLServer cluster.
	Databases MdbSqlServerClusterDatabaseArrayOutput `pulumi:"databases"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolOutput `pulumi:"deletionProtection"`
	// The resource description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// Aggregated health of the cluster.
	Health pulumi.StringOutput `pulumi:"health"`
	// A list of IDs of the host groups hosting VMs of the cluster.
	HostGroupIds pulumi.StringArrayOutput `pulumi:"hostGroupIds"`
	// A host of the SQLServer cluster.
	Hosts MdbSqlServerClusterHostArrayOutput `pulumi:"hosts"`
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Resources allocated to hosts of the SQLServer cluster.
	Resources MdbSqlServerClusterResourcesOutput `pulumi:"resources"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
	Sqlcollation pulumi.StringOutput `pulumi:"sqlcollation"`
	// SQLServer cluster config. Detail info in `SQLServer config` section.
	SqlserverConfig pulumi.StringMapOutput `pulumi:"sqlserverConfig"`
	// Status of the cluster.
	Status pulumi.StringOutput `pulumi:"status"`
	// A user of the SQLServer cluster.
	Users MdbSqlServerClusterUserArrayOutput `pulumi:"users"`
	// Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewMdbSqlServerCluster registers a new resource with the given unique name, arguments, and options.
func NewMdbSqlServerCluster(ctx *pulumi.Context,
	name string, args *MdbSqlServerClusterArgs, opts ...pulumi.ResourceOption) (*MdbSqlServerCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Databases == nil {
		return nil, errors.New("invalid value for required argument 'Databases'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Hosts == nil {
		return nil, errors.New("invalid value for required argument 'Hosts'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Resources == nil {
		return nil, errors.New("invalid value for required argument 'Resources'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MdbSqlServerCluster
	err := ctx.RegisterResource("yandex:index/mdbSqlServerCluster:MdbSqlServerCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMdbSqlServerCluster gets an existing MdbSqlServerCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMdbSqlServerCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MdbSqlServerClusterState, opts ...pulumi.ResourceOption) (*MdbSqlServerCluster, error) {
	var resource MdbSqlServerCluster
	err := ctx.ReadResource("yandex:index/mdbSqlServerCluster:MdbSqlServerCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MdbSqlServerCluster resources.
type mdbSqlServerClusterState struct {
	// Time to start the daily backup, in the UTC.
	BackupWindowStart *MdbSqlServerClusterBackupWindowStart `pulumi:"backupWindowStart"`
	// The creation timestamp of the resource.
	CreatedAt *string `pulumi:"createdAt"`
	// A database of the SQLServer cluster.
	Databases []MdbSqlServerClusterDatabase `pulumi:"databases"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The resource description.
	Description *string `pulumi:"description"`
	// Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
	Environment *string `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// Aggregated health of the cluster.
	Health *string `pulumi:"health"`
	// A list of IDs of the host groups hosting VMs of the cluster.
	HostGroupIds []string `pulumi:"hostGroupIds"`
	// A host of the SQLServer cluster.
	Hosts []MdbSqlServerClusterHost `pulumi:"hosts"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId *string `pulumi:"networkId"`
	// Resources allocated to hosts of the SQLServer cluster.
	Resources *MdbSqlServerClusterResources `pulumi:"resources"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
	Sqlcollation *string `pulumi:"sqlcollation"`
	// SQLServer cluster config. Detail info in `SQLServer config` section.
	SqlserverConfig map[string]string `pulumi:"sqlserverConfig"`
	// Status of the cluster.
	Status *string `pulumi:"status"`
	// A user of the SQLServer cluster.
	Users []MdbSqlServerClusterUser `pulumi:"users"`
	// Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
	Version *string `pulumi:"version"`
}

type MdbSqlServerClusterState struct {
	// Time to start the daily backup, in the UTC.
	BackupWindowStart MdbSqlServerClusterBackupWindowStartPtrInput
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringPtrInput
	// A database of the SQLServer cluster.
	Databases MdbSqlServerClusterDatabaseArrayInput
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
	Environment pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// Aggregated health of the cluster.
	Health pulumi.StringPtrInput
	// A list of IDs of the host groups hosting VMs of the cluster.
	HostGroupIds pulumi.StringArrayInput
	// A host of the SQLServer cluster.
	Hosts MdbSqlServerClusterHostArrayInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringPtrInput
	// Resources allocated to hosts of the SQLServer cluster.
	Resources MdbSqlServerClusterResourcesPtrInput
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayInput
	// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
	Sqlcollation pulumi.StringPtrInput
	// SQLServer cluster config. Detail info in `SQLServer config` section.
	SqlserverConfig pulumi.StringMapInput
	// Status of the cluster.
	Status pulumi.StringPtrInput
	// A user of the SQLServer cluster.
	Users MdbSqlServerClusterUserArrayInput
	// Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
	Version pulumi.StringPtrInput
}

func (MdbSqlServerClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbSqlServerClusterState)(nil)).Elem()
}

type mdbSqlServerClusterArgs struct {
	// Time to start the daily backup, in the UTC.
	BackupWindowStart *MdbSqlServerClusterBackupWindowStart `pulumi:"backupWindowStart"`
	// A database of the SQLServer cluster.
	Databases []MdbSqlServerClusterDatabase `pulumi:"databases"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The resource description.
	Description *string `pulumi:"description"`
	// Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
	Environment string `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A list of IDs of the host groups hosting VMs of the cluster.
	HostGroupIds []string `pulumi:"hostGroupIds"`
	// A host of the SQLServer cluster.
	Hosts []MdbSqlServerClusterHost `pulumi:"hosts"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId string `pulumi:"networkId"`
	// Resources allocated to hosts of the SQLServer cluster.
	Resources MdbSqlServerClusterResources `pulumi:"resources"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
	Sqlcollation *string `pulumi:"sqlcollation"`
	// SQLServer cluster config. Detail info in `SQLServer config` section.
	SqlserverConfig map[string]string `pulumi:"sqlserverConfig"`
	// A user of the SQLServer cluster.
	Users []MdbSqlServerClusterUser `pulumi:"users"`
	// Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a MdbSqlServerCluster resource.
type MdbSqlServerClusterArgs struct {
	// Time to start the daily backup, in the UTC.
	BackupWindowStart MdbSqlServerClusterBackupWindowStartPtrInput
	// A database of the SQLServer cluster.
	Databases MdbSqlServerClusterDatabaseArrayInput
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
	Environment pulumi.StringInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// A list of IDs of the host groups hosting VMs of the cluster.
	HostGroupIds pulumi.StringArrayInput
	// A host of the SQLServer cluster.
	Hosts MdbSqlServerClusterHostArrayInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringInput
	// Resources allocated to hosts of the SQLServer cluster.
	Resources MdbSqlServerClusterResourcesInput
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayInput
	// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
	Sqlcollation pulumi.StringPtrInput
	// SQLServer cluster config. Detail info in `SQLServer config` section.
	SqlserverConfig pulumi.StringMapInput
	// A user of the SQLServer cluster.
	Users MdbSqlServerClusterUserArrayInput
	// Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
	Version pulumi.StringInput
}

func (MdbSqlServerClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbSqlServerClusterArgs)(nil)).Elem()
}

type MdbSqlServerClusterInput interface {
	pulumi.Input

	ToMdbSqlServerClusterOutput() MdbSqlServerClusterOutput
	ToMdbSqlServerClusterOutputWithContext(ctx context.Context) MdbSqlServerClusterOutput
}

func (*MdbSqlServerCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbSqlServerCluster)(nil)).Elem()
}

func (i *MdbSqlServerCluster) ToMdbSqlServerClusterOutput() MdbSqlServerClusterOutput {
	return i.ToMdbSqlServerClusterOutputWithContext(context.Background())
}

func (i *MdbSqlServerCluster) ToMdbSqlServerClusterOutputWithContext(ctx context.Context) MdbSqlServerClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbSqlServerClusterOutput)
}

// MdbSqlServerClusterArrayInput is an input type that accepts MdbSqlServerClusterArray and MdbSqlServerClusterArrayOutput values.
// You can construct a concrete instance of `MdbSqlServerClusterArrayInput` via:
//
//	MdbSqlServerClusterArray{ MdbSqlServerClusterArgs{...} }
type MdbSqlServerClusterArrayInput interface {
	pulumi.Input

	ToMdbSqlServerClusterArrayOutput() MdbSqlServerClusterArrayOutput
	ToMdbSqlServerClusterArrayOutputWithContext(context.Context) MdbSqlServerClusterArrayOutput
}

type MdbSqlServerClusterArray []MdbSqlServerClusterInput

func (MdbSqlServerClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbSqlServerCluster)(nil)).Elem()
}

func (i MdbSqlServerClusterArray) ToMdbSqlServerClusterArrayOutput() MdbSqlServerClusterArrayOutput {
	return i.ToMdbSqlServerClusterArrayOutputWithContext(context.Background())
}

func (i MdbSqlServerClusterArray) ToMdbSqlServerClusterArrayOutputWithContext(ctx context.Context) MdbSqlServerClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbSqlServerClusterArrayOutput)
}

// MdbSqlServerClusterMapInput is an input type that accepts MdbSqlServerClusterMap and MdbSqlServerClusterMapOutput values.
// You can construct a concrete instance of `MdbSqlServerClusterMapInput` via:
//
//	MdbSqlServerClusterMap{ "key": MdbSqlServerClusterArgs{...} }
type MdbSqlServerClusterMapInput interface {
	pulumi.Input

	ToMdbSqlServerClusterMapOutput() MdbSqlServerClusterMapOutput
	ToMdbSqlServerClusterMapOutputWithContext(context.Context) MdbSqlServerClusterMapOutput
}

type MdbSqlServerClusterMap map[string]MdbSqlServerClusterInput

func (MdbSqlServerClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbSqlServerCluster)(nil)).Elem()
}

func (i MdbSqlServerClusterMap) ToMdbSqlServerClusterMapOutput() MdbSqlServerClusterMapOutput {
	return i.ToMdbSqlServerClusterMapOutputWithContext(context.Background())
}

func (i MdbSqlServerClusterMap) ToMdbSqlServerClusterMapOutputWithContext(ctx context.Context) MdbSqlServerClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbSqlServerClusterMapOutput)
}

type MdbSqlServerClusterOutput struct{ *pulumi.OutputState }

func (MdbSqlServerClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbSqlServerCluster)(nil)).Elem()
}

func (o MdbSqlServerClusterOutput) ToMdbSqlServerClusterOutput() MdbSqlServerClusterOutput {
	return o
}

func (o MdbSqlServerClusterOutput) ToMdbSqlServerClusterOutputWithContext(ctx context.Context) MdbSqlServerClusterOutput {
	return o
}

// Time to start the daily backup, in the UTC.
func (o MdbSqlServerClusterOutput) BackupWindowStart() MdbSqlServerClusterBackupWindowStartOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) MdbSqlServerClusterBackupWindowStartOutput { return v.BackupWindowStart }).(MdbSqlServerClusterBackupWindowStartOutput)
}

// The creation timestamp of the resource.
func (o MdbSqlServerClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A database of the SQLServer cluster.
func (o MdbSqlServerClusterOutput) Databases() MdbSqlServerClusterDatabaseArrayOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) MdbSqlServerClusterDatabaseArrayOutput { return v.Databases }).(MdbSqlServerClusterDatabaseArrayOutput)
}

// The `true` value means that resource is protected from accidental deletion.
func (o MdbSqlServerClusterOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.BoolOutput { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// The resource description.
func (o MdbSqlServerClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
func (o MdbSqlServerClusterOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o MdbSqlServerClusterOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// Aggregated health of the cluster.
func (o MdbSqlServerClusterOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.Health }).(pulumi.StringOutput)
}

// A list of IDs of the host groups hosting VMs of the cluster.
func (o MdbSqlServerClusterOutput) HostGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringArrayOutput { return v.HostGroupIds }).(pulumi.StringArrayOutput)
}

// A host of the SQLServer cluster.
func (o MdbSqlServerClusterOutput) Hosts() MdbSqlServerClusterHostArrayOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) MdbSqlServerClusterHostArrayOutput { return v.Hosts }).(MdbSqlServerClusterHostArrayOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o MdbSqlServerClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name.
func (o MdbSqlServerClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The `VPC Network ID` of subnets which resource attached to.
func (o MdbSqlServerClusterOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Resources allocated to hosts of the SQLServer cluster.
func (o MdbSqlServerClusterOutput) Resources() MdbSqlServerClusterResourcesOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) MdbSqlServerClusterResourcesOutput { return v.Resources }).(MdbSqlServerClusterResourcesOutput)
}

// The list of security groups applied to resource or their components.
func (o MdbSqlServerClusterOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
func (o MdbSqlServerClusterOutput) Sqlcollation() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.Sqlcollation }).(pulumi.StringOutput)
}

// SQLServer cluster config. Detail info in `SQLServer config` section.
func (o MdbSqlServerClusterOutput) SqlserverConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringMapOutput { return v.SqlserverConfig }).(pulumi.StringMapOutput)
}

// Status of the cluster.
func (o MdbSqlServerClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A user of the SQLServer cluster.
func (o MdbSqlServerClusterOutput) Users() MdbSqlServerClusterUserArrayOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) MdbSqlServerClusterUserArrayOutput { return v.Users }).(MdbSqlServerClusterUserArrayOutput)
}

// Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
func (o MdbSqlServerClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type MdbSqlServerClusterArrayOutput struct{ *pulumi.OutputState }

func (MdbSqlServerClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbSqlServerCluster)(nil)).Elem()
}

func (o MdbSqlServerClusterArrayOutput) ToMdbSqlServerClusterArrayOutput() MdbSqlServerClusterArrayOutput {
	return o
}

func (o MdbSqlServerClusterArrayOutput) ToMdbSqlServerClusterArrayOutputWithContext(ctx context.Context) MdbSqlServerClusterArrayOutput {
	return o
}

func (o MdbSqlServerClusterArrayOutput) Index(i pulumi.IntInput) MdbSqlServerClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MdbSqlServerCluster {
		return vs[0].([]*MdbSqlServerCluster)[vs[1].(int)]
	}).(MdbSqlServerClusterOutput)
}

type MdbSqlServerClusterMapOutput struct{ *pulumi.OutputState }

func (MdbSqlServerClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbSqlServerCluster)(nil)).Elem()
}

func (o MdbSqlServerClusterMapOutput) ToMdbSqlServerClusterMapOutput() MdbSqlServerClusterMapOutput {
	return o
}

func (o MdbSqlServerClusterMapOutput) ToMdbSqlServerClusterMapOutputWithContext(ctx context.Context) MdbSqlServerClusterMapOutput {
	return o
}

func (o MdbSqlServerClusterMapOutput) MapIndex(k pulumi.StringInput) MdbSqlServerClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MdbSqlServerCluster {
		return vs[0].(map[string]*MdbSqlServerCluster)[vs[1].(string)]
	}).(MdbSqlServerClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MdbSqlServerClusterInput)(nil)).Elem(), &MdbSqlServerCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbSqlServerClusterArrayInput)(nil)).Elem(), MdbSqlServerClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbSqlServerClusterMapInput)(nil)).Elem(), MdbSqlServerClusterMap{})
	pulumi.RegisterOutputType(MdbSqlServerClusterOutput{})
	pulumi.RegisterOutputType(MdbSqlServerClusterArrayOutput{})
	pulumi.RegisterOutputType(MdbSqlServerClusterMapOutput{})
}
