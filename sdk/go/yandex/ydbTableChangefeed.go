// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Yandex Database [table changefeed](https://ydb.tech/en/docs/concepts/cdc), or Change Data Capture (CDC) resource, keeps you informed about changes in a given table. When you add, update, or delete a table row, the CDC mechanism generates a change record where it specifies the primary key of the row and writes it to the topic partition corresponding to this key. A [topic](https://ydb.tech/en/docs/concepts/topic) is an entity for storing unstructured messages and delivering them to multiple subscribers. Basically, a topic is a named set of messages.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/airoh-io/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a new YDB Table Change feed.
//			_, err := yandex.NewYdbTableChangefeed(ctx, "ydbChangefeed", &yandex.YdbTableChangefeedArgs{
//				TableId: pulumi.Any(yandex_ydb_table.Test_table_2.Id),
//				Mode:    pulumi.String("NEW_IMAGE"),
//				Format:  pulumi.String("JSON"),
//				Consumers: yandex.YdbTableChangefeedConsumerArray{
//					&yandex.YdbTableChangefeedConsumerArgs{
//						Name: pulumi.String("test_consumer"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
//
// ```sh
// $ pulumi import yandex:index/ydbTableChangefeed:YdbTableChangefeed <resource Name> <resource Id>
// ```
//
// ```sh
// $ pulumi import yandex:index/ydbTableChangefeed:YdbTableChangefeed ydb_changefeed ...
// ```
type YdbTableChangefeed struct {
	pulumi.CustomResourceState

	// Connection string, conflicts with `tableId`.
	ConnectionString pulumi.StringOutput `pulumi:"connectionString"`
	// Changefeed [consumers](https://ydb.tech/en/docs/concepts/topic#consumer) - named entities for reading data from the topic.
	Consumers YdbTableChangefeedConsumerArrayOutput `pulumi:"consumers"`
	// Changefeed format.
	Format pulumi.StringOutput `pulumi:"format"`
	// [Changefeed mode](https://ydb.tech/en/docs/yql/reference/syntax/alter_table#changefeed-options).
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Changefeed name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Time of data retention in the topic, [ISO 8601](https://ru.wikipedia.org/wiki/ISO_8601) format.
	RetentionPeriod pulumi.StringPtrOutput `pulumi:"retentionPeriod"`
	TableId         pulumi.StringOutput    `pulumi:"tableId"`
	// Table path.
	TablePath pulumi.StringOutput `pulumi:"tablePath"`
	// Use [virtual timestamps](https://ydb.tech/en/docs/concepts/cdc#virtual-timestamps).
	VirtualTimestamps pulumi.BoolPtrOutput `pulumi:"virtualTimestamps"`
}

// NewYdbTableChangefeed registers a new resource with the given unique name, arguments, and options.
func NewYdbTableChangefeed(ctx *pulumi.Context,
	name string, args *YdbTableChangefeedArgs, opts ...pulumi.ResourceOption) (*YdbTableChangefeed, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Format == nil {
		return nil, errors.New("invalid value for required argument 'Format'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource YdbTableChangefeed
	err := ctx.RegisterResource("yandex:index/ydbTableChangefeed:YdbTableChangefeed", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetYdbTableChangefeed gets an existing YdbTableChangefeed resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetYdbTableChangefeed(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *YdbTableChangefeedState, opts ...pulumi.ResourceOption) (*YdbTableChangefeed, error) {
	var resource YdbTableChangefeed
	err := ctx.ReadResource("yandex:index/ydbTableChangefeed:YdbTableChangefeed", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering YdbTableChangefeed resources.
type ydbTableChangefeedState struct {
	// Connection string, conflicts with `tableId`.
	ConnectionString *string `pulumi:"connectionString"`
	// Changefeed [consumers](https://ydb.tech/en/docs/concepts/topic#consumer) - named entities for reading data from the topic.
	Consumers []YdbTableChangefeedConsumer `pulumi:"consumers"`
	// Changefeed format.
	Format *string `pulumi:"format"`
	// [Changefeed mode](https://ydb.tech/en/docs/yql/reference/syntax/alter_table#changefeed-options).
	Mode *string `pulumi:"mode"`
	// Changefeed name.
	Name *string `pulumi:"name"`
	// Time of data retention in the topic, [ISO 8601](https://ru.wikipedia.org/wiki/ISO_8601) format.
	RetentionPeriod *string `pulumi:"retentionPeriod"`
	TableId         *string `pulumi:"tableId"`
	// Table path.
	TablePath *string `pulumi:"tablePath"`
	// Use [virtual timestamps](https://ydb.tech/en/docs/concepts/cdc#virtual-timestamps).
	VirtualTimestamps *bool `pulumi:"virtualTimestamps"`
}

type YdbTableChangefeedState struct {
	// Connection string, conflicts with `tableId`.
	ConnectionString pulumi.StringPtrInput
	// Changefeed [consumers](https://ydb.tech/en/docs/concepts/topic#consumer) - named entities for reading data from the topic.
	Consumers YdbTableChangefeedConsumerArrayInput
	// Changefeed format.
	Format pulumi.StringPtrInput
	// [Changefeed mode](https://ydb.tech/en/docs/yql/reference/syntax/alter_table#changefeed-options).
	Mode pulumi.StringPtrInput
	// Changefeed name.
	Name pulumi.StringPtrInput
	// Time of data retention in the topic, [ISO 8601](https://ru.wikipedia.org/wiki/ISO_8601) format.
	RetentionPeriod pulumi.StringPtrInput
	TableId         pulumi.StringPtrInput
	// Table path.
	TablePath pulumi.StringPtrInput
	// Use [virtual timestamps](https://ydb.tech/en/docs/concepts/cdc#virtual-timestamps).
	VirtualTimestamps pulumi.BoolPtrInput
}

func (YdbTableChangefeedState) ElementType() reflect.Type {
	return reflect.TypeOf((*ydbTableChangefeedState)(nil)).Elem()
}

type ydbTableChangefeedArgs struct {
	// Connection string, conflicts with `tableId`.
	ConnectionString *string `pulumi:"connectionString"`
	// Changefeed [consumers](https://ydb.tech/en/docs/concepts/topic#consumer) - named entities for reading data from the topic.
	Consumers []YdbTableChangefeedConsumer `pulumi:"consumers"`
	// Changefeed format.
	Format string `pulumi:"format"`
	// [Changefeed mode](https://ydb.tech/en/docs/yql/reference/syntax/alter_table#changefeed-options).
	Mode string `pulumi:"mode"`
	// Changefeed name.
	Name *string `pulumi:"name"`
	// Time of data retention in the topic, [ISO 8601](https://ru.wikipedia.org/wiki/ISO_8601) format.
	RetentionPeriod *string `pulumi:"retentionPeriod"`
	TableId         *string `pulumi:"tableId"`
	// Table path.
	TablePath *string `pulumi:"tablePath"`
	// Use [virtual timestamps](https://ydb.tech/en/docs/concepts/cdc#virtual-timestamps).
	VirtualTimestamps *bool `pulumi:"virtualTimestamps"`
}

// The set of arguments for constructing a YdbTableChangefeed resource.
type YdbTableChangefeedArgs struct {
	// Connection string, conflicts with `tableId`.
	ConnectionString pulumi.StringPtrInput
	// Changefeed [consumers](https://ydb.tech/en/docs/concepts/topic#consumer) - named entities for reading data from the topic.
	Consumers YdbTableChangefeedConsumerArrayInput
	// Changefeed format.
	Format pulumi.StringInput
	// [Changefeed mode](https://ydb.tech/en/docs/yql/reference/syntax/alter_table#changefeed-options).
	Mode pulumi.StringInput
	// Changefeed name.
	Name pulumi.StringPtrInput
	// Time of data retention in the topic, [ISO 8601](https://ru.wikipedia.org/wiki/ISO_8601) format.
	RetentionPeriod pulumi.StringPtrInput
	TableId         pulumi.StringPtrInput
	// Table path.
	TablePath pulumi.StringPtrInput
	// Use [virtual timestamps](https://ydb.tech/en/docs/concepts/cdc#virtual-timestamps).
	VirtualTimestamps pulumi.BoolPtrInput
}

func (YdbTableChangefeedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ydbTableChangefeedArgs)(nil)).Elem()
}

type YdbTableChangefeedInput interface {
	pulumi.Input

	ToYdbTableChangefeedOutput() YdbTableChangefeedOutput
	ToYdbTableChangefeedOutputWithContext(ctx context.Context) YdbTableChangefeedOutput
}

func (*YdbTableChangefeed) ElementType() reflect.Type {
	return reflect.TypeOf((**YdbTableChangefeed)(nil)).Elem()
}

func (i *YdbTableChangefeed) ToYdbTableChangefeedOutput() YdbTableChangefeedOutput {
	return i.ToYdbTableChangefeedOutputWithContext(context.Background())
}

func (i *YdbTableChangefeed) ToYdbTableChangefeedOutputWithContext(ctx context.Context) YdbTableChangefeedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YdbTableChangefeedOutput)
}

// YdbTableChangefeedArrayInput is an input type that accepts YdbTableChangefeedArray and YdbTableChangefeedArrayOutput values.
// You can construct a concrete instance of `YdbTableChangefeedArrayInput` via:
//
//	YdbTableChangefeedArray{ YdbTableChangefeedArgs{...} }
type YdbTableChangefeedArrayInput interface {
	pulumi.Input

	ToYdbTableChangefeedArrayOutput() YdbTableChangefeedArrayOutput
	ToYdbTableChangefeedArrayOutputWithContext(context.Context) YdbTableChangefeedArrayOutput
}

type YdbTableChangefeedArray []YdbTableChangefeedInput

func (YdbTableChangefeedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*YdbTableChangefeed)(nil)).Elem()
}

func (i YdbTableChangefeedArray) ToYdbTableChangefeedArrayOutput() YdbTableChangefeedArrayOutput {
	return i.ToYdbTableChangefeedArrayOutputWithContext(context.Background())
}

func (i YdbTableChangefeedArray) ToYdbTableChangefeedArrayOutputWithContext(ctx context.Context) YdbTableChangefeedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YdbTableChangefeedArrayOutput)
}

// YdbTableChangefeedMapInput is an input type that accepts YdbTableChangefeedMap and YdbTableChangefeedMapOutput values.
// You can construct a concrete instance of `YdbTableChangefeedMapInput` via:
//
//	YdbTableChangefeedMap{ "key": YdbTableChangefeedArgs{...} }
type YdbTableChangefeedMapInput interface {
	pulumi.Input

	ToYdbTableChangefeedMapOutput() YdbTableChangefeedMapOutput
	ToYdbTableChangefeedMapOutputWithContext(context.Context) YdbTableChangefeedMapOutput
}

type YdbTableChangefeedMap map[string]YdbTableChangefeedInput

func (YdbTableChangefeedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*YdbTableChangefeed)(nil)).Elem()
}

func (i YdbTableChangefeedMap) ToYdbTableChangefeedMapOutput() YdbTableChangefeedMapOutput {
	return i.ToYdbTableChangefeedMapOutputWithContext(context.Background())
}

func (i YdbTableChangefeedMap) ToYdbTableChangefeedMapOutputWithContext(ctx context.Context) YdbTableChangefeedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YdbTableChangefeedMapOutput)
}

type YdbTableChangefeedOutput struct{ *pulumi.OutputState }

func (YdbTableChangefeedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**YdbTableChangefeed)(nil)).Elem()
}

func (o YdbTableChangefeedOutput) ToYdbTableChangefeedOutput() YdbTableChangefeedOutput {
	return o
}

func (o YdbTableChangefeedOutput) ToYdbTableChangefeedOutputWithContext(ctx context.Context) YdbTableChangefeedOutput {
	return o
}

// Connection string, conflicts with `tableId`.
func (o YdbTableChangefeedOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *YdbTableChangefeed) pulumi.StringOutput { return v.ConnectionString }).(pulumi.StringOutput)
}

// Changefeed [consumers](https://ydb.tech/en/docs/concepts/topic#consumer) - named entities for reading data from the topic.
func (o YdbTableChangefeedOutput) Consumers() YdbTableChangefeedConsumerArrayOutput {
	return o.ApplyT(func(v *YdbTableChangefeed) YdbTableChangefeedConsumerArrayOutput { return v.Consumers }).(YdbTableChangefeedConsumerArrayOutput)
}

// Changefeed format.
func (o YdbTableChangefeedOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *YdbTableChangefeed) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// [Changefeed mode](https://ydb.tech/en/docs/yql/reference/syntax/alter_table#changefeed-options).
func (o YdbTableChangefeedOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *YdbTableChangefeed) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Changefeed name.
func (o YdbTableChangefeedOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *YdbTableChangefeed) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Time of data retention in the topic, [ISO 8601](https://ru.wikipedia.org/wiki/ISO_8601) format.
func (o YdbTableChangefeedOutput) RetentionPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *YdbTableChangefeed) pulumi.StringPtrOutput { return v.RetentionPeriod }).(pulumi.StringPtrOutput)
}

func (o YdbTableChangefeedOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v *YdbTableChangefeed) pulumi.StringOutput { return v.TableId }).(pulumi.StringOutput)
}

// Table path.
func (o YdbTableChangefeedOutput) TablePath() pulumi.StringOutput {
	return o.ApplyT(func(v *YdbTableChangefeed) pulumi.StringOutput { return v.TablePath }).(pulumi.StringOutput)
}

// Use [virtual timestamps](https://ydb.tech/en/docs/concepts/cdc#virtual-timestamps).
func (o YdbTableChangefeedOutput) VirtualTimestamps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *YdbTableChangefeed) pulumi.BoolPtrOutput { return v.VirtualTimestamps }).(pulumi.BoolPtrOutput)
}

type YdbTableChangefeedArrayOutput struct{ *pulumi.OutputState }

func (YdbTableChangefeedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*YdbTableChangefeed)(nil)).Elem()
}

func (o YdbTableChangefeedArrayOutput) ToYdbTableChangefeedArrayOutput() YdbTableChangefeedArrayOutput {
	return o
}

func (o YdbTableChangefeedArrayOutput) ToYdbTableChangefeedArrayOutputWithContext(ctx context.Context) YdbTableChangefeedArrayOutput {
	return o
}

func (o YdbTableChangefeedArrayOutput) Index(i pulumi.IntInput) YdbTableChangefeedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *YdbTableChangefeed {
		return vs[0].([]*YdbTableChangefeed)[vs[1].(int)]
	}).(YdbTableChangefeedOutput)
}

type YdbTableChangefeedMapOutput struct{ *pulumi.OutputState }

func (YdbTableChangefeedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*YdbTableChangefeed)(nil)).Elem()
}

func (o YdbTableChangefeedMapOutput) ToYdbTableChangefeedMapOutput() YdbTableChangefeedMapOutput {
	return o
}

func (o YdbTableChangefeedMapOutput) ToYdbTableChangefeedMapOutputWithContext(ctx context.Context) YdbTableChangefeedMapOutput {
	return o
}

func (o YdbTableChangefeedMapOutput) MapIndex(k pulumi.StringInput) YdbTableChangefeedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *YdbTableChangefeed {
		return vs[0].(map[string]*YdbTableChangefeed)[vs[1].(string)]
	}).(YdbTableChangefeedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*YdbTableChangefeedInput)(nil)).Elem(), &YdbTableChangefeed{})
	pulumi.RegisterInputType(reflect.TypeOf((*YdbTableChangefeedArrayInput)(nil)).Elem(), YdbTableChangefeedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*YdbTableChangefeedMapInput)(nil)).Elem(), YdbTableChangefeedMap{})
	pulumi.RegisterOutputType(YdbTableChangefeedOutput{})
	pulumi.RegisterOutputType(YdbTableChangefeedArrayOutput{})
	pulumi.RegisterOutputType(YdbTableChangefeedMapOutput{})
}
