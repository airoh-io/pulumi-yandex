// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Allows management of [trail](https://yandex.cloud/docs/audit-trails/concepts/trail).
 *
 * ## Migration from deprecated filter field
 *
 * In order to migrate from using `filter` to the `filteringPolicy`, you will have to:
 * * Remove the `filter.event_filters.categories` blocks. With the introduction of `includedEvents`/`excludedEvents` you can configure filtering per each event type.
 * * Replace the `filter.event_filters.path_filter` with the appropriate `resourceScope` blocks. You have to account that `resourceScope` does not support specifying relations between resources, so your configuration will simplify to only the actual resources, that will be monitored.
 *
 * * Replace the `filter.path_filter` block with the `filtering_policy.management_events_filter`. New API states management events filtration in a more clear way. The resources, that were specified, must migrate into the `filtering_policy.management_events_filter.resource_scope`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * //
 * // Create a new basic Audit Trails Trail
 * //
 * const basic_trail = new yandex.AuditTrailsTrail("basic-trail", {
 *     description: "Some trail description",
 *     filteringPolicy: {
 *         dataEventsFilters: [
 *             {
 *                 resourceScope: [{
 *                     resourceId: "home-folder",
 *                     resourceType: "resource-manager.folder",
 *                 }],
 *                 service: "storage",
 *             },
 *             {
 *                 dnsFilter: {
 *                     includeNonrecursiveQueries: true,
 *                 },
 *                 resourceScope: [
 *                     {
 *                         resourceId: "vpc-net-id-1",
 *                         resourceType: "vpc.network",
 *                     },
 *                     {
 *                         resourceId: "vpc-net-id-2",
 *                         resourceType: "vpc.network",
 *                     },
 *                 ],
 *                 service: "dns",
 *             },
 *         ],
 *         managementEventsFilter: {
 *             resourceScope: [{
 *                 resourceId: "home-folder",
 *                 resourceType: "resource-manager.folder",
 *             }],
 *         },
 *     },
 *     folderId: "home-folder",
 *     labels: {
 *         key: "value",
 *     },
 *     loggingDestination: {
 *         logGroupId: "some-log-group",
 *     },
 *     serviceAccountId: "trail-service-account",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * //
 * // Create Trail for delivering events to YDS and gathering such events:
 * // * Management events from the 'some-organization' organization.
 * // * DNS data events with only recursive queries from the 'some-organization' organization.
 * // * Object Storage data events from the 'some-organization' organization.
 * //
 * const basicTrail = new yandex.AuditTrailsTrail("basicTrail", {
 *     dataStreamDestination: {
 *         databaseId: "some-database",
 *         streamName: "some-stream",
 *     },
 *     description: "Some trail description",
 *     filteringPolicy: {
 *         dataEventsFilters: [
 *             {
 *                 resourceScope: [{
 *                     resourceId: "some-organization",
 *                     resourceType: "organization-manager.organization",
 *                 }],
 *                 service: "storage",
 *             },
 *             {
 *                 dnsFilter: {
 *                     includeNonrecursiveQueries: true,
 *                 },
 *                 resourceScope: [{
 *                     resourceId: "some-organization",
 *                     resourceType: "organization-manager.organization",
 *                 }],
 *                 service: "dns",
 *             },
 *         ],
 *         managementEventsFilter: {
 *             resourceScope: [{
 *                 resourceId: "some-organization",
 *                 resourceType: "organization-manager.organization",
 *             }],
 *         },
 *     },
 *     folderId: "home-folder",
 *     labels: {
 *         key: "value",
 *     },
 *     serviceAccountId: "trail-service-account",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * bash
 *
 * ```sh
 * $ pulumi import yandex:index/auditTrailsTrail:AuditTrailsTrail <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/auditTrailsTrail:AuditTrailsTrail basic-trail cnpqe**********sh835
 * ```
 */
export class AuditTrailsTrail extends pulumi.CustomResource {
    /**
     * Get an existing AuditTrailsTrail resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuditTrailsTrailState, opts?: pulumi.CustomResourceOptions): AuditTrailsTrail {
        return new AuditTrailsTrail(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/auditTrailsTrail:AuditTrailsTrail';

    /**
     * Returns true if the given object is an instance of AuditTrailsTrail.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuditTrailsTrail {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuditTrailsTrail.__pulumiType;
    }

    /**
     * Structure describing destination data stream of the trail. Mutually exclusive with `loggingDestination` and `storageDestination`.
     */
    declare public readonly dataStreamDestination: pulumi.Output<outputs.AuditTrailsTrailDataStreamDestination | undefined>;
    /**
     * The resource description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Structure is deprecated. Use `filteringPolicy` instead.
     *
     * @deprecated Configure filteringPolicy instead. This attribute will be removed
     */
    declare public readonly filter: pulumi.Output<outputs.AuditTrailsTrailFilter | undefined>;
    /**
     * Structure describing event filtering process for the trail. Mutually exclusive with `filter`. At least one of the `managementEventsFilter` or `dataEventsFilter` fields will be filled.
     */
    declare public readonly filteringPolicy: pulumi.Output<outputs.AuditTrailsTrailFilteringPolicy | undefined>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Structure describing destination log group of the trail. Mutually exclusive with `storageDestination` and `dataStreamDestination`.
     */
    declare public readonly loggingDestination: pulumi.Output<outputs.AuditTrailsTrailLoggingDestination | undefined>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
     */
    declare public readonly serviceAccountId: pulumi.Output<string>;
    /**
     * Status of this trail.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Structure describing destination bucket of the trail. Mutually exclusive with `loggingDestination` and `dataStreamDestination`.
     */
    declare public readonly storageDestination: pulumi.Output<outputs.AuditTrailsTrailStorageDestination | undefined>;
    /**
     * ID of the trail resource.
     */
    declare public /*out*/ readonly trailId: pulumi.Output<string>;

    /**
     * Create a AuditTrailsTrail resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuditTrailsTrailArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuditTrailsTrailArgs | AuditTrailsTrailState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuditTrailsTrailState | undefined;
            resourceInputs["dataStreamDestination"] = state?.dataStreamDestination;
            resourceInputs["description"] = state?.description;
            resourceInputs["filter"] = state?.filter;
            resourceInputs["filteringPolicy"] = state?.filteringPolicy;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["loggingDestination"] = state?.loggingDestination;
            resourceInputs["name"] = state?.name;
            resourceInputs["serviceAccountId"] = state?.serviceAccountId;
            resourceInputs["status"] = state?.status;
            resourceInputs["storageDestination"] = state?.storageDestination;
            resourceInputs["trailId"] = state?.trailId;
        } else {
            const args = argsOrState as AuditTrailsTrailArgs | undefined;
            if (args?.folderId === undefined && !opts.urn) {
                throw new Error("Missing required property 'folderId'");
            }
            if (args?.serviceAccountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            resourceInputs["dataStreamDestination"] = args?.dataStreamDestination;
            resourceInputs["description"] = args?.description;
            resourceInputs["filter"] = args?.filter;
            resourceInputs["filteringPolicy"] = args?.filteringPolicy;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["loggingDestination"] = args?.loggingDestination;
            resourceInputs["name"] = args?.name;
            resourceInputs["serviceAccountId"] = args?.serviceAccountId;
            resourceInputs["storageDestination"] = args?.storageDestination;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["trailId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuditTrailsTrail.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuditTrailsTrail resources.
 */
export interface AuditTrailsTrailState {
    /**
     * Structure describing destination data stream of the trail. Mutually exclusive with `loggingDestination` and `storageDestination`.
     */
    dataStreamDestination?: pulumi.Input<inputs.AuditTrailsTrailDataStreamDestination>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * Structure is deprecated. Use `filteringPolicy` instead.
     *
     * @deprecated Configure filteringPolicy instead. This attribute will be removed
     */
    filter?: pulumi.Input<inputs.AuditTrailsTrailFilter>;
    /**
     * Structure describing event filtering process for the trail. Mutually exclusive with `filter`. At least one of the `managementEventsFilter` or `dataEventsFilter` fields will be filled.
     */
    filteringPolicy?: pulumi.Input<inputs.AuditTrailsTrailFilteringPolicy>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Structure describing destination log group of the trail. Mutually exclusive with `storageDestination` and `dataStreamDestination`.
     */
    loggingDestination?: pulumi.Input<inputs.AuditTrailsTrailLoggingDestination>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
     */
    serviceAccountId?: pulumi.Input<string>;
    /**
     * Status of this trail.
     */
    status?: pulumi.Input<string>;
    /**
     * Structure describing destination bucket of the trail. Mutually exclusive with `loggingDestination` and `dataStreamDestination`.
     */
    storageDestination?: pulumi.Input<inputs.AuditTrailsTrailStorageDestination>;
    /**
     * ID of the trail resource.
     */
    trailId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuditTrailsTrail resource.
 */
export interface AuditTrailsTrailArgs {
    /**
     * Structure describing destination data stream of the trail. Mutually exclusive with `loggingDestination` and `storageDestination`.
     */
    dataStreamDestination?: pulumi.Input<inputs.AuditTrailsTrailDataStreamDestination>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * Structure is deprecated. Use `filteringPolicy` instead.
     *
     * @deprecated Configure filteringPolicy instead. This attribute will be removed
     */
    filter?: pulumi.Input<inputs.AuditTrailsTrailFilter>;
    /**
     * Structure describing event filtering process for the trail. Mutually exclusive with `filter`. At least one of the `managementEventsFilter` or `dataEventsFilter` fields will be filled.
     */
    filteringPolicy?: pulumi.Input<inputs.AuditTrailsTrailFilteringPolicy>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Structure describing destination log group of the trail. Mutually exclusive with `storageDestination` and `dataStreamDestination`.
     */
    loggingDestination?: pulumi.Input<inputs.AuditTrailsTrailLoggingDestination>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
     */
    serviceAccountId: pulumi.Input<string>;
    /**
     * Structure describing destination bucket of the trail. Mutually exclusive with `loggingDestination` and `dataStreamDestination`.
     */
    storageDestination?: pulumi.Input<inputs.AuditTrailsTrailStorageDestination>;
}
