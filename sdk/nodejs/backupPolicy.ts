// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Allows management of [Yandex Cloud Backup Policy](https://yandex.cloud/docs/backup/concepts/policy).
 *
 * > Cloud Backup Provider must be activated in order to manipulate with policies. Active it either by UI Console or by `yc` command.
 *
 * ## Defined types
 *
 * ### intervalType
 *
 *  A string type, that accepts values in the format of: `number` + `time type`, where `time type` might be:
 * * `s` — seconds
 * * `m` — minutes
 * * `h` — hours
 * * `d` — days
 * * `w` — weekdays
 * * `M` — months
 *
 * Example of interval value: `5m`, `10d`, `2M`, `5w`
 *
 * ### dayType
 *
 * A string type, that accepts the following values: `ALWAYS_INCREMENTAL`, `ALWAYS_FULL`, `WEEKLY_FULL_DAILY_INCREMENTAL`, `WEEKLY_INCREMENTAL`.
 *
 * ### backupSetType
 *
 * `TYPE_AUTO`, `TYPE_FULL`, `TYPE_INCREMENTAL`, `TYPE_DIFFERENTIAL`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * //
 * // Create a new basic Cloud Backup Policy
 * //
 * const basicPolicy = new yandex.BackupPolicy("basicPolicy", {
 *     reattempts: {},
 *     retention: {
 *         afterBackup: false,
 *     },
 *     scheduling: {
 *         backupSets: [{
 *             executeByInterval: 86400,
 *         }],
 *         enabled: false,
 *     },
 *     vmSnapshotReattempts: {},
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * //
 * // Create a new full Cloud Backup Policy
 * //
 * const myPolicy = new yandex.BackupPolicy("myPolicy", {
 *     archiveName: "[Machine Name]-[Plan ID]-[Unique ID]a",
 *     cbt: "USE_IF_ENABLED",
 *     compression: "NORMAL",
 *     fastBackupEnabled: true,
 *     format: "AUTO",
 *     multiVolumeSnapshottingEnabled: true,
 *     performanceWindowEnabled: true,
 *     preserveFileSecuritySettings: true,
 *     quiesceSnapshottingEnabled: true,
 *     reattempts: {
 *         enabled: true,
 *         interval: "1m",
 *         maxAttempts: 10,
 *     },
 *     retention: {
 *         afterBackup: false,
 *         rules: [{
 *             maxAge: "365d",
 *             repeatPeriod: [],
 *         }],
 *     },
 *     scheduling: {
 *         backupSets: [{
 *             executeByTime: [{
 *                 includeLastDayOfMonth: true,
 *                 monthdays: [],
 *                 months: [
 *                     1,
 *                     2,
 *                     3,
 *                     4,
 *                     5,
 *                     6,
 *                     7,
 *                     8,
 *                     9,
 *                     10,
 *                     11,
 *                     12,
 *                 ],
 *                 repeatAt: ["04:10"],
 *                 repeatEvery: "30m",
 *                 type: "MONTHLY",
 *                 weekdays: [],
 *             }],
 *         }],
 *         enabled: false,
 *         maxParallelBackups: 0,
 *         randomMaxDelay: "30m",
 *         scheme: "ALWAYS_INCREMENTAL",
 *         weeklyBackupDay: "MONDAY",
 *     },
 *     silentModeEnabled: true,
 *     splittingBytes: "9223372036854775807",
 *     vmSnapshotReattempts: {
 *         enabled: true,
 *         interval: "1m",
 *         maxAttempts: 10,
 *     },
 *     vssProvider: "NATIVE",
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * bash
 *
 * ```sh
 * $ pulumi import yandex:index/backupPolicy:BackupPolicy <resource Name> <Resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/backupPolicy:BackupPolicy my_backup_policy ...
 * ```
 */
export class BackupPolicy extends pulumi.CustomResource {
    /**
     * Get an existing BackupPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupPolicyState, opts?: pulumi.CustomResourceOptions): BackupPolicy {
        return new BackupPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/backupPolicy:BackupPolicy';

    /**
     * Returns true if the given object is an instance of BackupPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupPolicy.__pulumiType;
    }

    /**
     * The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
     */
    declare public readonly archiveName: pulumi.Output<string | undefined>;
    /**
     * Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`. Default `DO_NOT_USE`.
     */
    declare public readonly cbt: pulumi.Output<string | undefined>;
    /**
     * Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
     */
    declare public readonly compression: pulumi.Output<string | undefined>;
    /**
     * The creation timestamp of the resource.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * If this field is true, it means that the policy is enabled.
     */
    declare public /*out*/ readonly enabled: pulumi.Output<boolean>;
    /**
     * If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are compared to those stored in the backup.
     */
    declare public readonly fastBackupEnabled: pulumi.Output<boolean | undefined>;
    /**
     * File filters to specify masks of files to backup or to exclude of backuping.
     */
    declare public readonly fileFilters: pulumi.Output<outputs.BackupPolicyFileFilters | undefined>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`, `VERSION_11`, `VERSION_12`.
     */
    declare public readonly format: pulumi.Output<string | undefined>;
    /**
     * LVM will be used to create the volume snapshot. If LVM fails to create a snapshot (for example, because there is not enough free space), the software will create the snapshot itself.
     */
    declare public readonly lvmSnapshottingEnabled: pulumi.Output<boolean | undefined>;
    /**
     * If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
     */
    declare public readonly multiVolumeSnapshottingEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Time windows for performance limitations of backup. Default `false`.
     */
    declare public readonly performanceWindowEnabled: pulumi.Output<boolean | undefined>;
    /**
     * If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
     *
     * @deprecated This setting is depricated and will be removed in future versions. You can safely delete it.
     */
    declare public readonly preserveFileSecuritySettings: pulumi.Output<boolean | undefined>;
    /**
     * If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
     *
     * @deprecated This setting is depricated and will be removed in future versions. You can safely delete it.
     */
    declare public readonly quiesceSnapshottingEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Amount of reattempts that should be performed while trying to make backup at the host.
     */
    declare public readonly reattempts: pulumi.Output<outputs.BackupPolicyReattempts>;
    /**
     * Retention policy for backups. Allows to setup backups lifecycle.
     */
    declare public readonly retention: pulumi.Output<outputs.BackupPolicyRetention>;
    /**
     * Schedule settings for creating backups on the host.
     */
    declare public readonly scheduling: pulumi.Output<outputs.BackupPolicyScheduling>;
    /**
     * A sector-by-sector backup of a disk or volume creates a backup copy of all sectors of the disk or volume, including those that do not contain data. Therefore, the size of such a backup copy will be equal to the size of the original disk or volume.
     */
    declare public readonly sectorBySector: pulumi.Output<boolean | undefined>;
    /**
     * If true, a user interaction will be avoided when possible. Default `true`.
     */
    declare public readonly silentModeEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
     */
    declare public readonly splittingBytes: pulumi.Output<string | undefined>;
    /**
     * The update timestamp of the resource.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * Validation is a time-consuming process, even with incremental or differential backups of small amounts of data. This is because not only the data physically contained in the backup copy is verified, but all data restored when it is selected. This option requires access to previously created backup copies.
     */
    declare public readonly validationEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Amount of reattempts that should be performed while trying to make snapshot.
     */
    declare public readonly vmSnapshotReattempts: pulumi.Output<outputs.BackupPolicyVmSnapshotReattempts>;
    /**
     * Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
     */
    declare public readonly vssProvider: pulumi.Output<string | undefined>;

    /**
     * Create a BackupPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupPolicyArgs | BackupPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupPolicyState | undefined;
            resourceInputs["archiveName"] = state?.archiveName;
            resourceInputs["cbt"] = state?.cbt;
            resourceInputs["compression"] = state?.compression;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["fastBackupEnabled"] = state?.fastBackupEnabled;
            resourceInputs["fileFilters"] = state?.fileFilters;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["format"] = state?.format;
            resourceInputs["lvmSnapshottingEnabled"] = state?.lvmSnapshottingEnabled;
            resourceInputs["multiVolumeSnapshottingEnabled"] = state?.multiVolumeSnapshottingEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["performanceWindowEnabled"] = state?.performanceWindowEnabled;
            resourceInputs["preserveFileSecuritySettings"] = state?.preserveFileSecuritySettings;
            resourceInputs["quiesceSnapshottingEnabled"] = state?.quiesceSnapshottingEnabled;
            resourceInputs["reattempts"] = state?.reattempts;
            resourceInputs["retention"] = state?.retention;
            resourceInputs["scheduling"] = state?.scheduling;
            resourceInputs["sectorBySector"] = state?.sectorBySector;
            resourceInputs["silentModeEnabled"] = state?.silentModeEnabled;
            resourceInputs["splittingBytes"] = state?.splittingBytes;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["validationEnabled"] = state?.validationEnabled;
            resourceInputs["vmSnapshotReattempts"] = state?.vmSnapshotReattempts;
            resourceInputs["vssProvider"] = state?.vssProvider;
        } else {
            const args = argsOrState as BackupPolicyArgs | undefined;
            if (args?.reattempts === undefined && !opts.urn) {
                throw new Error("Missing required property 'reattempts'");
            }
            if (args?.retention === undefined && !opts.urn) {
                throw new Error("Missing required property 'retention'");
            }
            if (args?.scheduling === undefined && !opts.urn) {
                throw new Error("Missing required property 'scheduling'");
            }
            if (args?.vmSnapshotReattempts === undefined && !opts.urn) {
                throw new Error("Missing required property 'vmSnapshotReattempts'");
            }
            resourceInputs["archiveName"] = args?.archiveName;
            resourceInputs["cbt"] = args?.cbt;
            resourceInputs["compression"] = args?.compression;
            resourceInputs["fastBackupEnabled"] = args?.fastBackupEnabled;
            resourceInputs["fileFilters"] = args?.fileFilters;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["format"] = args?.format;
            resourceInputs["lvmSnapshottingEnabled"] = args?.lvmSnapshottingEnabled;
            resourceInputs["multiVolumeSnapshottingEnabled"] = args?.multiVolumeSnapshottingEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["performanceWindowEnabled"] = args?.performanceWindowEnabled;
            resourceInputs["preserveFileSecuritySettings"] = args?.preserveFileSecuritySettings;
            resourceInputs["quiesceSnapshottingEnabled"] = args?.quiesceSnapshottingEnabled;
            resourceInputs["reattempts"] = args?.reattempts;
            resourceInputs["retention"] = args?.retention;
            resourceInputs["scheduling"] = args?.scheduling;
            resourceInputs["sectorBySector"] = args?.sectorBySector;
            resourceInputs["silentModeEnabled"] = args?.silentModeEnabled;
            resourceInputs["splittingBytes"] = args?.splittingBytes;
            resourceInputs["validationEnabled"] = args?.validationEnabled;
            resourceInputs["vmSnapshotReattempts"] = args?.vmSnapshotReattempts;
            resourceInputs["vssProvider"] = args?.vssProvider;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BackupPolicy resources.
 */
export interface BackupPolicyState {
    /**
     * The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
     */
    archiveName?: pulumi.Input<string>;
    /**
     * Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`. Default `DO_NOT_USE`.
     */
    cbt?: pulumi.Input<string>;
    /**
     * Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
     */
    compression?: pulumi.Input<string>;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * If this field is true, it means that the policy is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are compared to those stored in the backup.
     */
    fastBackupEnabled?: pulumi.Input<boolean>;
    /**
     * File filters to specify masks of files to backup or to exclude of backuping.
     */
    fileFilters?: pulumi.Input<inputs.BackupPolicyFileFilters>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`, `VERSION_11`, `VERSION_12`.
     */
    format?: pulumi.Input<string>;
    /**
     * LVM will be used to create the volume snapshot. If LVM fails to create a snapshot (for example, because there is not enough free space), the software will create the snapshot itself.
     */
    lvmSnapshottingEnabled?: pulumi.Input<boolean>;
    /**
     * If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
     */
    multiVolumeSnapshottingEnabled?: pulumi.Input<boolean>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Time windows for performance limitations of backup. Default `false`.
     */
    performanceWindowEnabled?: pulumi.Input<boolean>;
    /**
     * If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
     *
     * @deprecated This setting is depricated and will be removed in future versions. You can safely delete it.
     */
    preserveFileSecuritySettings?: pulumi.Input<boolean>;
    /**
     * If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
     *
     * @deprecated This setting is depricated and will be removed in future versions. You can safely delete it.
     */
    quiesceSnapshottingEnabled?: pulumi.Input<boolean>;
    /**
     * Amount of reattempts that should be performed while trying to make backup at the host.
     */
    reattempts?: pulumi.Input<inputs.BackupPolicyReattempts>;
    /**
     * Retention policy for backups. Allows to setup backups lifecycle.
     */
    retention?: pulumi.Input<inputs.BackupPolicyRetention>;
    /**
     * Schedule settings for creating backups on the host.
     */
    scheduling?: pulumi.Input<inputs.BackupPolicyScheduling>;
    /**
     * A sector-by-sector backup of a disk or volume creates a backup copy of all sectors of the disk or volume, including those that do not contain data. Therefore, the size of such a backup copy will be equal to the size of the original disk or volume.
     */
    sectorBySector?: pulumi.Input<boolean>;
    /**
     * If true, a user interaction will be avoided when possible. Default `true`.
     */
    silentModeEnabled?: pulumi.Input<boolean>;
    /**
     * Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
     */
    splittingBytes?: pulumi.Input<string>;
    /**
     * The update timestamp of the resource.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Validation is a time-consuming process, even with incremental or differential backups of small amounts of data. This is because not only the data physically contained in the backup copy is verified, but all data restored when it is selected. This option requires access to previously created backup copies.
     */
    validationEnabled?: pulumi.Input<boolean>;
    /**
     * Amount of reattempts that should be performed while trying to make snapshot.
     */
    vmSnapshotReattempts?: pulumi.Input<inputs.BackupPolicyVmSnapshotReattempts>;
    /**
     * Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
     */
    vssProvider?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BackupPolicy resource.
 */
export interface BackupPolicyArgs {
    /**
     * The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
     */
    archiveName?: pulumi.Input<string>;
    /**
     * Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`. Default `DO_NOT_USE`.
     */
    cbt?: pulumi.Input<string>;
    /**
     * Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
     */
    compression?: pulumi.Input<string>;
    /**
     * If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are compared to those stored in the backup.
     */
    fastBackupEnabled?: pulumi.Input<boolean>;
    /**
     * File filters to specify masks of files to backup or to exclude of backuping.
     */
    fileFilters?: pulumi.Input<inputs.BackupPolicyFileFilters>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`, `VERSION_11`, `VERSION_12`.
     */
    format?: pulumi.Input<string>;
    /**
     * LVM will be used to create the volume snapshot. If LVM fails to create a snapshot (for example, because there is not enough free space), the software will create the snapshot itself.
     */
    lvmSnapshottingEnabled?: pulumi.Input<boolean>;
    /**
     * If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
     */
    multiVolumeSnapshottingEnabled?: pulumi.Input<boolean>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Time windows for performance limitations of backup. Default `false`.
     */
    performanceWindowEnabled?: pulumi.Input<boolean>;
    /**
     * If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
     *
     * @deprecated This setting is depricated and will be removed in future versions. You can safely delete it.
     */
    preserveFileSecuritySettings?: pulumi.Input<boolean>;
    /**
     * If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
     *
     * @deprecated This setting is depricated and will be removed in future versions. You can safely delete it.
     */
    quiesceSnapshottingEnabled?: pulumi.Input<boolean>;
    /**
     * Amount of reattempts that should be performed while trying to make backup at the host.
     */
    reattempts: pulumi.Input<inputs.BackupPolicyReattempts>;
    /**
     * Retention policy for backups. Allows to setup backups lifecycle.
     */
    retention: pulumi.Input<inputs.BackupPolicyRetention>;
    /**
     * Schedule settings for creating backups on the host.
     */
    scheduling: pulumi.Input<inputs.BackupPolicyScheduling>;
    /**
     * A sector-by-sector backup of a disk or volume creates a backup copy of all sectors of the disk or volume, including those that do not contain data. Therefore, the size of such a backup copy will be equal to the size of the original disk or volume.
     */
    sectorBySector?: pulumi.Input<boolean>;
    /**
     * If true, a user interaction will be avoided when possible. Default `true`.
     */
    silentModeEnabled?: pulumi.Input<boolean>;
    /**
     * Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
     */
    splittingBytes?: pulumi.Input<string>;
    /**
     * Validation is a time-consuming process, even with incremental or differential backups of small amounts of data. This is because not only the data physically contained in the backup copy is verified, but all data restored when it is selected. This option requires access to previously created backup copies.
     */
    validationEnabled?: pulumi.Input<boolean>;
    /**
     * Amount of reattempts that should be performed while trying to make snapshot.
     */
    vmSnapshotReattempts: pulumi.Input<inputs.BackupPolicyVmSnapshotReattempts>;
    /**
     * Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
     */
    vssProvider?: pulumi.Input<string>;
}
