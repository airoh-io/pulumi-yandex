// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates or requests a TLS certificate in the specified folder. For more information, see [the official documentation](https://yandex.cloud/docs/certificate-manager/concepts/).
 *
 * > At the moment, a resource may not work correctly if it declares the use of a DNS challenge, but the certificate is confirmed using an HTTP challenge. And vice versa.
 *
 * In this case, the service does not provide the parameters of the required type of challenges.
 *
 * > Only one type `managed` or `selfManaged` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * //
 * // Create a new Certificate for specific Domain name.
 * //
 * const example = new yandex.CmCertificate("example", {
 *     domains: ["example.com"],
 *     managed: {
 *         challengeType: "DNS_CNAME",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * bash
 *
 * ```sh
 * $ pulumi import yandex:index/cmCertificate:CmCertificate <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/cmCertificate:CmCertificate my_cm_cert fpqn8********** cg27q
 * ```
 */
export class CmCertificate extends pulumi.CustomResource {
    /**
     * Get an existing CmCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CmCertificateState, opts?: pulumi.CustomResourceOptions): CmCertificate {
        return new CmCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/cmCertificate:CmCertificate';

    /**
     * Returns true if the given object is an instance of CmCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CmCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CmCertificate.__pulumiType;
    }

    /**
     * Array of challenges.
     */
    declare public /*out*/ readonly challenges: pulumi.Output<outputs.CmCertificateChallenge[]>;
    /**
     * The creation timestamp of the resource.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    declare public readonly deletionProtection: pulumi.Output<boolean | undefined>;
    /**
     * The resource description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Domains for this certificate. Should be specified for managed certificates.
     */
    declare public readonly domains: pulumi.Output<string[] | undefined>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * Certificate issue timestamp.
     */
    declare public /*out*/ readonly issuedAt: pulumi.Output<string>;
    /**
     * Certificate Issuer.
     */
    declare public /*out*/ readonly issuer: pulumi.Output<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Managed specification.
     */
    declare public readonly managed: pulumi.Output<outputs.CmCertificateManaged | undefined>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Certificate end valid period.
     */
    declare public /*out*/ readonly notAfter: pulumi.Output<string>;
    /**
     * Certificate start valid period.
     */
    declare public /*out*/ readonly notBefore: pulumi.Output<string>;
    /**
     * Self-managed specification.
     *
     * > Only one type `privateKey` or `privateKeyLockboxSecret` should be specified.
     */
    declare public readonly selfManaged: pulumi.Output<outputs.CmCertificateSelfManaged | undefined>;
    /**
     * Certificate Serial Number.
     */
    declare public /*out*/ readonly serial: pulumi.Output<string>;
    /**
     * Certificate status: `VALIDATING`, `INVALID`, `ISSUED`, `REVOKED`, `RENEWING` or `RENEWAL_FAILED`.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Certificate Subject.
     */
    declare public /*out*/ readonly subject: pulumi.Output<string>;
    /**
     * Certificate type: `MANAGED` or `IMPORTED`.
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * Certificate update timestamp.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a CmCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CmCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CmCertificateArgs | CmCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CmCertificateState | undefined;
            resourceInputs["challenges"] = state?.challenges;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["domains"] = state?.domains;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["issuedAt"] = state?.issuedAt;
            resourceInputs["issuer"] = state?.issuer;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["managed"] = state?.managed;
            resourceInputs["name"] = state?.name;
            resourceInputs["notAfter"] = state?.notAfter;
            resourceInputs["notBefore"] = state?.notBefore;
            resourceInputs["selfManaged"] = state?.selfManaged;
            resourceInputs["serial"] = state?.serial;
            resourceInputs["status"] = state?.status;
            resourceInputs["subject"] = state?.subject;
            resourceInputs["type"] = state?.type;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as CmCertificateArgs | undefined;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["domains"] = args?.domains;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["managed"] = args?.managed;
            resourceInputs["name"] = args?.name;
            resourceInputs["selfManaged"] = args?.selfManaged;
            resourceInputs["challenges"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["issuedAt"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["notAfter"] = undefined /*out*/;
            resourceInputs["notBefore"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subject"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CmCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CmCertificate resources.
 */
export interface CmCertificateState {
    /**
     * Array of challenges.
     */
    challenges?: pulumi.Input<pulumi.Input<inputs.CmCertificateChallenge>[]>;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * Domains for this certificate. Should be specified for managed certificates.
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Certificate issue timestamp.
     */
    issuedAt?: pulumi.Input<string>;
    /**
     * Certificate Issuer.
     */
    issuer?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Managed specification.
     */
    managed?: pulumi.Input<inputs.CmCertificateManaged>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Certificate end valid period.
     */
    notAfter?: pulumi.Input<string>;
    /**
     * Certificate start valid period.
     */
    notBefore?: pulumi.Input<string>;
    /**
     * Self-managed specification.
     *
     * > Only one type `privateKey` or `privateKeyLockboxSecret` should be specified.
     */
    selfManaged?: pulumi.Input<inputs.CmCertificateSelfManaged>;
    /**
     * Certificate Serial Number.
     */
    serial?: pulumi.Input<string>;
    /**
     * Certificate status: `VALIDATING`, `INVALID`, `ISSUED`, `REVOKED`, `RENEWING` or `RENEWAL_FAILED`.
     */
    status?: pulumi.Input<string>;
    /**
     * Certificate Subject.
     */
    subject?: pulumi.Input<string>;
    /**
     * Certificate type: `MANAGED` or `IMPORTED`.
     */
    type?: pulumi.Input<string>;
    /**
     * Certificate update timestamp.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CmCertificate resource.
 */
export interface CmCertificateArgs {
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * Domains for this certificate. Should be specified for managed certificates.
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Managed specification.
     */
    managed?: pulumi.Input<inputs.CmCertificateManaged>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Self-managed specification.
     *
     * > Only one type `privateKey` or `privateKeyLockboxSecret` should be specified.
     */
    selfManaged?: pulumi.Input<inputs.CmCertificateSelfManaged>;
}
