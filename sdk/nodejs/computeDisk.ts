// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Persistent disks are used for data storage and function similarly to physical hard and solid state drives.
 *
 * A disk can be attached or detached from the virtual machine and can be located locally. A disk can be moved between virtual machines within the same availability zone. Each disk can be attached to only one virtual machine at a time.
 *
 * For more information about disks in Yandex Cloud, see:
 * * [Documentation](https://yandex.cloud/docs/compute/concepts/disk)
 * * How-to Guides:
 *   * [Attach and detach a disk](https://yandex.cloud/docs/compute/concepts/disk#attach-detach)
 *   * [Backup operation](https://yandex.cloud/docs/compute/concepts/disk#backup)
 *
 * > Only one of `imageId` or `snapshotId` can be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * //
 * // Create a new Compute Disk.
 * //
 * const myDisk = new yandex.ComputeDisk("myDisk", {
 *     imageId: "ubuntu-16.04-v20180727",
 *     labels: {
 *         environment: "test",
 *     },
 *     type: "network-ssd",
 *     zone: "ru-central1-a",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myPg = new yandex.ComputeDiskPlacementGroup("myPg", {zone: "ru-central1-b"});
 * //
 * // Create a new Compute Disk and put it to the specific Placement Group.
 * //
 * const myVm = new yandex.ComputeDisk("myVm", {
 *     size: 93,
 *     type: "network-ssd-nonreplicated",
 *     zone: "ru-central1-b",
 *     diskPlacementPolicy: {
 *         diskPlacementGroupId: myPg.id,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * bash
 *
 * ```sh
 * $ pulumi import yandex:index/computeDisk:ComputeDisk <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/computeDisk:ComputeDisk my_disk fhmrm**********90r5f
 * ```
 */
export class ComputeDisk extends pulumi.CustomResource {
    /**
     * Get an existing ComputeDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeDiskState, opts?: pulumi.CustomResourceOptions): ComputeDisk {
        return new ComputeDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/computeDisk:ComputeDisk';

    /**
     * Returns true if the given object is an instance of ComputeDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeDisk.__pulumiType;
    }

    declare public readonly allowRecreate: pulumi.Output<boolean | undefined>;
    /**
     * Block size of the disk, specified in bytes.
     */
    declare public readonly blockSize: pulumi.Output<number | undefined>;
    /**
     * The creation timestamp of the resource.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The resource description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Disk placement policy configuration.
     */
    declare public readonly diskPlacementPolicy: pulumi.Output<outputs.ComputeDiskDiskPlacementPolicy>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * Hardware generation and its features, which will be applied to the instance when this disk is used as a boot disk. Provide this property if you wish to override this value, which otherwise is inherited from the source.
     */
    declare public readonly hardwareGeneration: pulumi.Output<outputs.ComputeDiskHardwareGeneration>;
    /**
     * The source image to use for disk creation.
     */
    declare public readonly imageId: pulumi.Output<string | undefined>;
    /**
     * ID of KMS symmetric key used to encrypt disk.
     */
    declare public readonly kmsKeyId: pulumi.Output<string | undefined>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly productIds: pulumi.Output<string[]>;
    /**
     * Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the `imageId` or `snapshotId` parameter, or specify it alone to create an empty persistent disk. If you specify this field along with `imageId` or `snapshotId`, the size value must not be less than the size of the source image or the size of the snapshot.
     */
    declare public readonly size: pulumi.Output<number | undefined>;
    /**
     * The source snapshot to use for disk creation.
     */
    declare public readonly snapshotId: pulumi.Output<string | undefined>;
    /**
     * The status of the disk.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Type of disk to create. Provide this when creating a disk.
     */
    declare public readonly type: pulumi.Output<string | undefined>;
    /**
     * The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
     */
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a ComputeDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ComputeDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeDiskArgs | ComputeDiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeDiskState | undefined;
            resourceInputs["allowRecreate"] = state?.allowRecreate;
            resourceInputs["blockSize"] = state?.blockSize;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["diskPlacementPolicy"] = state?.diskPlacementPolicy;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["hardwareGeneration"] = state?.hardwareGeneration;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["productIds"] = state?.productIds;
            resourceInputs["size"] = state?.size;
            resourceInputs["snapshotId"] = state?.snapshotId;
            resourceInputs["status"] = state?.status;
            resourceInputs["type"] = state?.type;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as ComputeDiskArgs | undefined;
            resourceInputs["allowRecreate"] = args?.allowRecreate;
            resourceInputs["blockSize"] = args?.blockSize;
            resourceInputs["description"] = args?.description;
            resourceInputs["diskPlacementPolicy"] = args?.diskPlacementPolicy;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["hardwareGeneration"] = args?.hardwareGeneration;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["size"] = args?.size;
            resourceInputs["snapshotId"] = args?.snapshotId;
            resourceInputs["type"] = args?.type;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["productIds"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeDisk.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ComputeDisk resources.
 */
export interface ComputeDiskState {
    allowRecreate?: pulumi.Input<boolean>;
    /**
     * Block size of the disk, specified in bytes.
     */
    blockSize?: pulumi.Input<number>;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * Disk placement policy configuration.
     */
    diskPlacementPolicy?: pulumi.Input<inputs.ComputeDiskDiskPlacementPolicy>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Hardware generation and its features, which will be applied to the instance when this disk is used as a boot disk. Provide this property if you wish to override this value, which otherwise is inherited from the source.
     */
    hardwareGeneration?: pulumi.Input<inputs.ComputeDiskHardwareGeneration>;
    /**
     * The source image to use for disk creation.
     */
    imageId?: pulumi.Input<string>;
    /**
     * ID of KMS symmetric key used to encrypt disk.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    productIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the `imageId` or `snapshotId` parameter, or specify it alone to create an empty persistent disk. If you specify this field along with `imageId` or `snapshotId`, the size value must not be less than the size of the source image or the size of the snapshot.
     */
    size?: pulumi.Input<number>;
    /**
     * The source snapshot to use for disk creation.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The status of the disk.
     */
    status?: pulumi.Input<string>;
    /**
     * Type of disk to create. Provide this when creating a disk.
     */
    type?: pulumi.Input<string>;
    /**
     * The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeDisk resource.
 */
export interface ComputeDiskArgs {
    allowRecreate?: pulumi.Input<boolean>;
    /**
     * Block size of the disk, specified in bytes.
     */
    blockSize?: pulumi.Input<number>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * Disk placement policy configuration.
     */
    diskPlacementPolicy?: pulumi.Input<inputs.ComputeDiskDiskPlacementPolicy>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Hardware generation and its features, which will be applied to the instance when this disk is used as a boot disk. Provide this property if you wish to override this value, which otherwise is inherited from the source.
     */
    hardwareGeneration?: pulumi.Input<inputs.ComputeDiskHardwareGeneration>;
    /**
     * The source image to use for disk creation.
     */
    imageId?: pulumi.Input<string>;
    /**
     * ID of KMS symmetric key used to encrypt disk.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the `imageId` or `snapshotId` parameter, or specify it alone to create an empty persistent disk. If you specify this field along with `imageId` or `snapshotId`, the size value must not be less than the size of the source image or the size of the snapshot.
     */
    size?: pulumi.Input<number>;
    /**
     * The source snapshot to use for disk creation.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * Type of disk to create. Provide this when creating a disk.
     */
    type?: pulumi.Input<string>;
    /**
     * The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
     */
    zone?: pulumi.Input<string>;
}
