// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates a virtual machine image resource for the Yandex Compute Cloud service from an existing tarball. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/image).
 *
 * > One of `sourceFamily`, `sourceImage`, `sourceSnapshot`, `sourceDisk` or `sourceUrl` must be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * //
 * // Create a new Compute Image.
 * //
 * const foo_image = new yandex.ComputeImage("foo-image", {sourceUrl: "https://storage.yandexcloud.net/lucky-images/kube-it.img"});
 * // You can use "data.yandex_compute_image.my_image.id" identifier 
 * // as reference to existing resource.
 * const vm = new yandex.ComputeInstance("vm", {bootDisk: {
 *     initializeParams: {
 *         imageId: foo_image.id,
 *     },
 * }});
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * bash
 *
 * ```sh
 * $ pulumi import yandex:index/computeImage:ComputeImage <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/computeImage:ComputeImage my_image fd8go**********trjsd
 * ```
 */
export class ComputeImage extends pulumi.CustomResource {
    /**
     * Get an existing ComputeImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeImageState, opts?: pulumi.CustomResourceOptions): ComputeImage {
        return new ComputeImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/computeImage:ComputeImage';

    /**
     * Returns true if the given object is an instance of ComputeImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeImage.__pulumiType;
    }

    /**
     * The creation timestamp of the resource.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The resource description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the image family to which this image belongs.
     */
    declare public readonly family: pulumi.Output<string | undefined>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * Hardware generation and its features, which will be applied to the instance when this image is used for creating a boot disk. Provide this property if you wish to override this value, which otherwise is inherited from the source.
     */
    declare public readonly hardwareGeneration: pulumi.Output<outputs.ComputeImageHardwareGeneration>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Minimum size in GB of the disk that will be created from this image.
     */
    declare public readonly minDiskSize: pulumi.Output<number>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Operating system type that is contained in the image. Possible values: `LINUX`, `WINDOWS`.
     */
    declare public readonly osType: pulumi.Output<string>;
    /**
     * Optimize the image to create a disk.
     */
    declare public readonly pooled: pulumi.Output<boolean>;
    /**
     * License IDs that indicate which licenses are attached to this image.
     */
    declare public readonly productIds: pulumi.Output<string[]>;
    /**
     * The size of the image, specified in GB.
     */
    declare public /*out*/ readonly size: pulumi.Output<number>;
    /**
     * The ID of a disk to use as the source of the image. Changing this ID forces a new resource to be created.
     */
    declare public readonly sourceDisk: pulumi.Output<string>;
    /**
     * The name of the family to use as the source of the new image. The ID of the latest image is taken from the `standard-images` folder. Changing the family forces a new resource to be created.
     */
    declare public readonly sourceFamily: pulumi.Output<string>;
    /**
     * The ID of an existing image to use as the source of the image. Changing this ID forces a new resource to be created.
     */
    declare public readonly sourceImage: pulumi.Output<string>;
    /**
     * The ID of a snapshot to use as the source of the image. Changing this ID forces a new resource to be created.
     */
    declare public readonly sourceSnapshot: pulumi.Output<string>;
    /**
     * The URL to use as the source of the image. Changing this URL forces a new resource to be created.
     */
    declare public readonly sourceUrl: pulumi.Output<string>;
    /**
     * The status of the image.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a ComputeImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ComputeImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeImageArgs | ComputeImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeImageState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["family"] = state?.family;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["hardwareGeneration"] = state?.hardwareGeneration;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["minDiskSize"] = state?.minDiskSize;
            resourceInputs["name"] = state?.name;
            resourceInputs["osType"] = state?.osType;
            resourceInputs["pooled"] = state?.pooled;
            resourceInputs["productIds"] = state?.productIds;
            resourceInputs["size"] = state?.size;
            resourceInputs["sourceDisk"] = state?.sourceDisk;
            resourceInputs["sourceFamily"] = state?.sourceFamily;
            resourceInputs["sourceImage"] = state?.sourceImage;
            resourceInputs["sourceSnapshot"] = state?.sourceSnapshot;
            resourceInputs["sourceUrl"] = state?.sourceUrl;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as ComputeImageArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["family"] = args?.family;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["hardwareGeneration"] = args?.hardwareGeneration;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["minDiskSize"] = args?.minDiskSize;
            resourceInputs["name"] = args?.name;
            resourceInputs["osType"] = args?.osType;
            resourceInputs["pooled"] = args?.pooled;
            resourceInputs["productIds"] = args?.productIds;
            resourceInputs["sourceDisk"] = args?.sourceDisk;
            resourceInputs["sourceFamily"] = args?.sourceFamily;
            resourceInputs["sourceImage"] = args?.sourceImage;
            resourceInputs["sourceSnapshot"] = args?.sourceSnapshot;
            resourceInputs["sourceUrl"] = args?.sourceUrl;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeImage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ComputeImage resources.
 */
export interface ComputeImageState {
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the image family to which this image belongs.
     */
    family?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Hardware generation and its features, which will be applied to the instance when this image is used for creating a boot disk. Provide this property if you wish to override this value, which otherwise is inherited from the source.
     */
    hardwareGeneration?: pulumi.Input<inputs.ComputeImageHardwareGeneration>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Minimum size in GB of the disk that will be created from this image.
     */
    minDiskSize?: pulumi.Input<number>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Operating system type that is contained in the image. Possible values: `LINUX`, `WINDOWS`.
     */
    osType?: pulumi.Input<string>;
    /**
     * Optimize the image to create a disk.
     */
    pooled?: pulumi.Input<boolean>;
    /**
     * License IDs that indicate which licenses are attached to this image.
     */
    productIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The size of the image, specified in GB.
     */
    size?: pulumi.Input<number>;
    /**
     * The ID of a disk to use as the source of the image. Changing this ID forces a new resource to be created.
     */
    sourceDisk?: pulumi.Input<string>;
    /**
     * The name of the family to use as the source of the new image. The ID of the latest image is taken from the `standard-images` folder. Changing the family forces a new resource to be created.
     */
    sourceFamily?: pulumi.Input<string>;
    /**
     * The ID of an existing image to use as the source of the image. Changing this ID forces a new resource to be created.
     */
    sourceImage?: pulumi.Input<string>;
    /**
     * The ID of a snapshot to use as the source of the image. Changing this ID forces a new resource to be created.
     */
    sourceSnapshot?: pulumi.Input<string>;
    /**
     * The URL to use as the source of the image. Changing this URL forces a new resource to be created.
     */
    sourceUrl?: pulumi.Input<string>;
    /**
     * The status of the image.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeImage resource.
 */
export interface ComputeImageArgs {
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the image family to which this image belongs.
     */
    family?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Hardware generation and its features, which will be applied to the instance when this image is used for creating a boot disk. Provide this property if you wish to override this value, which otherwise is inherited from the source.
     */
    hardwareGeneration?: pulumi.Input<inputs.ComputeImageHardwareGeneration>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Minimum size in GB of the disk that will be created from this image.
     */
    minDiskSize?: pulumi.Input<number>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Operating system type that is contained in the image. Possible values: `LINUX`, `WINDOWS`.
     */
    osType?: pulumi.Input<string>;
    /**
     * Optimize the image to create a disk.
     */
    pooled?: pulumi.Input<boolean>;
    /**
     * License IDs that indicate which licenses are attached to this image.
     */
    productIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of a disk to use as the source of the image. Changing this ID forces a new resource to be created.
     */
    sourceDisk?: pulumi.Input<string>;
    /**
     * The name of the family to use as the source of the new image. The ID of the latest image is taken from the `standard-images` folder. Changing the family forces a new resource to be created.
     */
    sourceFamily?: pulumi.Input<string>;
    /**
     * The ID of an existing image to use as the source of the image. Changing this ID forces a new resource to be created.
     */
    sourceImage?: pulumi.Input<string>;
    /**
     * The ID of a snapshot to use as the source of the image. Changing this ID forces a new resource to be created.
     */
    sourceSnapshot?: pulumi.Input<string>;
    /**
     * The URL to use as the source of the image. Changing this URL forces a new resource to be created.
     */
    sourceUrl?: pulumi.Input<string>;
}
