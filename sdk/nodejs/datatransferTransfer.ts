// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a Data Transfer transfer. For more information, see [the official documentation](https://yandex.cloud/docs/data-transfer/).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * //
 * // Create a new pair of Data Transfer Endpoints Source & Target and Data Transfer.
 * //
 * // Create Data Transfer Endpoint "Source"
 * const pgSource = new yandex.DatatransferEndpoint("pgSource", {settings: {
 *     postgresSource: {
 *         connection: {
 *             onPremise: {
 *                 hosts: ["example.org"],
 *                 port: 5432,
 *             },
 *         },
 *         slotGigabyteLagLimit: 100,
 *         database: "db1",
 *         user: "user1",
 *         password: {
 *             raw: "123",
 *         },
 *     },
 * }});
 * // Create Data Transfer Endpoint "Target"
 * const pgTarget = new yandex.DatatransferEndpoint("pgTarget", {
 *     folderId: "some_folder_id",
 *     settings: {
 *         postgresTarget: {
 *             connection: {
 *                 mdbClusterId: "some_cluster_id",
 *             },
 *             database: "db2",
 *             user: "user2",
 *             password: {
 *                 raw: "321",
 *             },
 *         },
 *     },
 * });
 * // Create Data Transfer from "Source" to "Target"
 * const pgpgTransfer = new yandex.DatatransferTransfer("pgpgTransfer", {
 *     folderId: "some_folder_id",
 *     sourceId: pgSource.id,
 *     targetId: pgTarget.id,
 *     type: "SNAPSHOT_AND_INCREMENT",
 *     runtime: {
 *         ycRuntime: {
 *             jobCount: 1,
 *             uploadShardParams: {
 *                 jobCount: 4,
 *                 processCount: 1,
 *             },
 *         },
 *     },
 *     transformation: {
 *         transformers: [
 *             {},
 *             {},
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * bash
 *
 * ```sh
 * $ pulumi import yandex:index/datatransferTransfer:DatatransferTransfer <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/datatransferTransfer:DatatransferTransfer my_dt_transfer dttnc**********r3bkg
 * ```
 */
export class DatatransferTransfer extends pulumi.CustomResource {
    /**
     * Get an existing DatatransferTransfer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatatransferTransferState, opts?: pulumi.CustomResourceOptions): DatatransferTransfer {
        return new DatatransferTransfer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/datatransferTransfer:DatatransferTransfer';

    /**
     * Returns true if the given object is an instance of DatatransferTransfer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatatransferTransfer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatatransferTransfer.__pulumiType;
    }

    /**
     * The resource description.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Activation action on create a new incremental transfer. It is not part of the transfer parameter and is used only on create. One of `syncActivate`, `asyncActivate`, `dontActivate`. The default is `syncActivate`.
     */
    declare public readonly onCreateActivateMode: pulumi.Output<string | undefined>;
    /**
     * Runtime parameters for the transfer.
     */
    declare public readonly runtime: pulumi.Output<outputs.DatatransferTransferRuntime>;
    /**
     * ID of the source endpoint for the transfer.
     */
    declare public readonly sourceId: pulumi.Output<string>;
    /**
     * ID of the target endpoint for the transfer.
     */
    declare public readonly targetId: pulumi.Output<string>;
    /**
     * Transformation for the transfer.
     */
    declare public readonly transformation: pulumi.Output<outputs.DatatransferTransferTransformation | undefined>;
    /**
     * Type of the transfer. One of `SNAPSHOT_ONLY`, `INCREMENT_ONLY`, `SNAPSHOT_AND_INCREMENT`
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Error description if transfer has any errors.
     */
    declare public /*out*/ readonly warning: pulumi.Output<string>;

    /**
     * Create a DatatransferTransfer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DatatransferTransferArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatatransferTransferArgs | DatatransferTransferState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatatransferTransferState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["onCreateActivateMode"] = state?.onCreateActivateMode;
            resourceInputs["runtime"] = state?.runtime;
            resourceInputs["sourceId"] = state?.sourceId;
            resourceInputs["targetId"] = state?.targetId;
            resourceInputs["transformation"] = state?.transformation;
            resourceInputs["type"] = state?.type;
            resourceInputs["warning"] = state?.warning;
        } else {
            const args = argsOrState as DatatransferTransferArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["onCreateActivateMode"] = args?.onCreateActivateMode;
            resourceInputs["runtime"] = args?.runtime;
            resourceInputs["sourceId"] = args?.sourceId;
            resourceInputs["targetId"] = args?.targetId;
            resourceInputs["transformation"] = args?.transformation;
            resourceInputs["type"] = args?.type;
            resourceInputs["warning"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatatransferTransfer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatatransferTransfer resources.
 */
export interface DatatransferTransferState {
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Activation action on create a new incremental transfer. It is not part of the transfer parameter and is used only on create. One of `syncActivate`, `asyncActivate`, `dontActivate`. The default is `syncActivate`.
     */
    onCreateActivateMode?: pulumi.Input<string>;
    /**
     * Runtime parameters for the transfer.
     */
    runtime?: pulumi.Input<inputs.DatatransferTransferRuntime>;
    /**
     * ID of the source endpoint for the transfer.
     */
    sourceId?: pulumi.Input<string>;
    /**
     * ID of the target endpoint for the transfer.
     */
    targetId?: pulumi.Input<string>;
    /**
     * Transformation for the transfer.
     */
    transformation?: pulumi.Input<inputs.DatatransferTransferTransformation>;
    /**
     * Type of the transfer. One of `SNAPSHOT_ONLY`, `INCREMENT_ONLY`, `SNAPSHOT_AND_INCREMENT`
     */
    type?: pulumi.Input<string>;
    /**
     * Error description if transfer has any errors.
     */
    warning?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatatransferTransfer resource.
 */
export interface DatatransferTransferArgs {
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Activation action on create a new incremental transfer. It is not part of the transfer parameter and is used only on create. One of `syncActivate`, `asyncActivate`, `dontActivate`. The default is `syncActivate`.
     */
    onCreateActivateMode?: pulumi.Input<string>;
    /**
     * Runtime parameters for the transfer.
     */
    runtime?: pulumi.Input<inputs.DatatransferTransferRuntime>;
    /**
     * ID of the source endpoint for the transfer.
     */
    sourceId?: pulumi.Input<string>;
    /**
     * ID of the target endpoint for the transfer.
     */
    targetId?: pulumi.Input<string>;
    /**
     * Transformation for the transfer.
     */
    transformation?: pulumi.Input<inputs.DatatransferTransferTransformation>;
    /**
     * Type of the transfer. One of `SNAPSHOT_ONLY`, `INCREMENT_ONLY`, `SNAPSHOT_AND_INCREMENT`
     */
    type?: pulumi.Input<string>;
}
