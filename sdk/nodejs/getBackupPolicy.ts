// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Backup Policy. For more information, see [the official documentation](https://yandex.cloud/docs/backup/concepts/policy).
 *
 * > One of `policyId` or `name` should be specified.
 *
 * > In case you use `name`, an error will occur if two policies with the same name exist. In this case, rename the policy or use the `policyId`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * const myPolicy = yandex.getBackupPolicy({
 *     name: "some_policy_name",
 * });
 * export const myPolicyName = myPolicy.then(myPolicy => myPolicy.name);
 * ```
 */
export function getBackupPolicy(args?: GetBackupPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetBackupPolicyResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getBackupPolicy:getBackupPolicy", {
        "name": args.name,
        "policyId": args.policyId,
    }, opts);
}

/**
 * A collection of arguments for invoking getBackupPolicy.
 */
export interface GetBackupPolicyArgs {
    /**
     * The resource name.
     */
    name?: string;
    /**
     * ID of the policy.
     */
    policyId?: string;
}

/**
 * A collection of values returned by getBackupPolicy.
 */
export interface GetBackupPolicyResult {
    /**
     * The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
     */
    readonly archiveName: string;
    /**
     * Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`. Default `DO_NOT_USE`.
     */
    readonly cbt: string;
    /**
     * Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
     */
    readonly compression: string;
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * If this field is true, it means that the policy is enabled.
     */
    readonly enabled: boolean;
    /**
     * If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are compared to those stored in the backup.
     */
    readonly fastBackupEnabled: boolean;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    /**
     * Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`, `VERSION_11`, `VERSION_12`.
     */
    readonly format: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
     */
    readonly multiVolumeSnapshottingEnabled: boolean;
    /**
     * The resource name.
     */
    readonly name: string;
    /**
     * Time windows for performance limitations of backup. Default `false`.
     */
    readonly performanceWindowEnabled: boolean;
    /**
     * ID of the policy.
     */
    readonly policyId: string;
    /**
     * If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
     */
    readonly preserveFileSecuritySettings: boolean;
    /**
     * If true, a quiesced snapshot of the virtual machine will be taken. Default `true`.
     */
    readonly quiesceSnapshottingEnabled: boolean;
    readonly reattempts: outputs.GetBackupPolicyReattempt[];
    readonly retentions: outputs.GetBackupPolicyRetention[];
    readonly schedulings: outputs.GetBackupPolicyScheduling[];
    /**
     * If true, a user interaction will be avoided when possible. Default `true`.
     */
    readonly silentModeEnabled: boolean;
    /**
     * Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
     */
    readonly splittingBytes: string;
    /**
     * The update timestamp of the resource.
     */
    readonly updatedAt: string;
    readonly vmSnapshotReattempts: outputs.GetBackupPolicyVmSnapshotReattempt[];
    /**
     * Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
     */
    readonly vssProvider: string;
}
/**
 * Get information about a Yandex Backup Policy. For more information, see [the official documentation](https://yandex.cloud/docs/backup/concepts/policy).
 *
 * > One of `policyId` or `name` should be specified.
 *
 * > In case you use `name`, an error will occur if two policies with the same name exist. In this case, rename the policy or use the `policyId`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * const myPolicy = yandex.getBackupPolicy({
 *     name: "some_policy_name",
 * });
 * export const myPolicyName = myPolicy.then(myPolicy => myPolicy.name);
 * ```
 */
export function getBackupPolicyOutput(args?: GetBackupPolicyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetBackupPolicyResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getBackupPolicy:getBackupPolicy", {
        "name": args.name,
        "policyId": args.policyId,
    }, opts);
}

/**
 * A collection of arguments for invoking getBackupPolicy.
 */
export interface GetBackupPolicyOutputArgs {
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the policy.
     */
    policyId?: pulumi.Input<string>;
}
