// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Allows management of [Yandex Cloud CDN Resource](https://yandex.cloud/docs/cdn/concepts/resource).
 *
 * > CDN provider must be activated prior usage of CDN resources, either via UI console or via yc cli command: `yc cdn provider activate --folder-id <folder-id> --type gcore`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myResource = yandex.getCdnResource({
 *     resourceId: "some resource id",
 * });
 * export const resourceCname = myResource.then(myResource => myResource.cname);
 * ```
 */
export function getCdnResource(args?: GetCdnResourceArgs, opts?: pulumi.InvokeOptions): Promise<GetCdnResourceResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getCdnResource:getCdnResource", {
        "active": args.active,
        "cname": args.cname,
        "folderId": args.folderId,
        "labels": args.labels,
        "options": args.options,
        "originGroupId": args.originGroupId,
        "originGroupName": args.originGroupName,
        "originProtocol": args.originProtocol,
        "resourceId": args.resourceId,
        "secondaryHostnames": args.secondaryHostnames,
        "sslCertificate": args.sslCertificate,
        "updatedAt": args.updatedAt,
    }, opts);
}

/**
 * A collection of arguments for invoking getCdnResource.
 */
export interface GetCdnResourceArgs {
    /**
     * Flag to create Resource either in active or disabled state. `True` - the content from CDN is available to clients.
     */
    active?: boolean;
    /**
     * CDN endpoint CNAME, must be unique among resources.
     */
    cname?: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: {[key: string]: string};
    /**
     * CDN Resource settings and options to tune CDN edge behavior.
     */
    options?: inputs.GetCdnResourceOptions;
    /**
     * The ID of a specific origin group.
     */
    originGroupId?: number;
    /**
     * The name of a specific origin group.
     */
    originGroupName?: string;
    /**
     * Protocol of origin resource. `http` or `https`.
     */
    originProtocol?: string;
    resourceId?: string;
    /**
     * List of secondary hostname strings.
     */
    secondaryHostnames?: string[];
    /**
     * SSL certificate of CDN resource.
     */
    sslCertificate?: inputs.GetCdnResourceSslCertificate;
    /**
     * Last update timestamp. Computed value for read and update operations.
     */
    updatedAt?: string;
}

/**
 * A collection of values returned by getCdnResource.
 */
export interface GetCdnResourceResult {
    /**
     * Flag to create Resource either in active or disabled state. `True` - the content from CDN is available to clients.
     */
    readonly active?: boolean;
    /**
     * CDN endpoint CNAME, must be unique among resources.
     */
    readonly cname: string;
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels?: {[key: string]: string};
    /**
     * CDN Resource settings and options to tune CDN edge behavior.
     */
    readonly options: outputs.GetCdnResourceOptions;
    /**
     * The ID of a specific origin group.
     */
    readonly originGroupId?: number;
    /**
     * The name of a specific origin group.
     */
    readonly originGroupName?: string;
    /**
     * Protocol of origin resource. `http` or `https`.
     */
    readonly originProtocol?: string;
    /**
     * Provider CNAME of CDN resource, computed value for read and update operations.
     */
    readonly providerCname: string;
    readonly resourceId: string;
    /**
     * List of secondary hostname strings.
     */
    readonly secondaryHostnames?: string[];
    /**
     * SSL certificate of CDN resource.
     */
    readonly sslCertificate: outputs.GetCdnResourceSslCertificate;
    /**
     * Last update timestamp. Computed value for read and update operations.
     */
    readonly updatedAt: string;
}
/**
 * Allows management of [Yandex Cloud CDN Resource](https://yandex.cloud/docs/cdn/concepts/resource).
 *
 * > CDN provider must be activated prior usage of CDN resources, either via UI console or via yc cli command: `yc cdn provider activate --folder-id <folder-id> --type gcore`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myResource = yandex.getCdnResource({
 *     resourceId: "some resource id",
 * });
 * export const resourceCname = myResource.then(myResource => myResource.cname);
 * ```
 */
export function getCdnResourceOutput(args?: GetCdnResourceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCdnResourceResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getCdnResource:getCdnResource", {
        "active": args.active,
        "cname": args.cname,
        "folderId": args.folderId,
        "labels": args.labels,
        "options": args.options,
        "originGroupId": args.originGroupId,
        "originGroupName": args.originGroupName,
        "originProtocol": args.originProtocol,
        "resourceId": args.resourceId,
        "secondaryHostnames": args.secondaryHostnames,
        "sslCertificate": args.sslCertificate,
        "updatedAt": args.updatedAt,
    }, opts);
}

/**
 * A collection of arguments for invoking getCdnResource.
 */
export interface GetCdnResourceOutputArgs {
    /**
     * Flag to create Resource either in active or disabled state. `True` - the content from CDN is available to clients.
     */
    active?: pulumi.Input<boolean>;
    /**
     * CDN endpoint CNAME, must be unique among resources.
     */
    cname?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * CDN Resource settings and options to tune CDN edge behavior.
     */
    options?: pulumi.Input<inputs.GetCdnResourceOptionsArgs>;
    /**
     * The ID of a specific origin group.
     */
    originGroupId?: pulumi.Input<number>;
    /**
     * The name of a specific origin group.
     */
    originGroupName?: pulumi.Input<string>;
    /**
     * Protocol of origin resource. `http` or `https`.
     */
    originProtocol?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    /**
     * List of secondary hostname strings.
     */
    secondaryHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SSL certificate of CDN resource.
     */
    sslCertificate?: pulumi.Input<inputs.GetCdnResourceSslCertificateArgs>;
    /**
     * Last update timestamp. Computed value for read and update operations.
     */
    updatedAt?: pulumi.Input<string>;
}
