// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Certificate Manager Certificate. For more information, see [the official documentation](https://yandex.cloud/docs/certificate-manager/concepts/).
 *
 * > One of `certificateId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const exampleById = yandex.getCmCertificate({
 *     certificateId: "certificate-id",
 * });
 * const exampleByName = yandex.getCmCertificate({
 *     folderId: "folder-id",
 *     name: "example",
 * });
 * ```
 */
export function getCmCertificate(args?: GetCmCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetCmCertificateResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getCmCertificate:getCmCertificate", {
        "certificateId": args.certificateId,
        "description": args.description,
        "folderId": args.folderId,
        "labels": args.labels,
        "name": args.name,
        "waitValidation": args.waitValidation,
    }, opts);
}

/**
 * A collection of arguments for invoking getCmCertificate.
 */
export interface GetCmCertificateArgs {
    /**
     * Certificate Id.
     */
    certificateId?: string;
    /**
     * The resource description.
     */
    description?: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: {[key: string]: string};
    /**
     * The resource name.
     */
    name?: string;
    /**
     * If `true`, the operation won't be completed while the certificate is in `VALIDATING`.
     */
    waitValidation?: boolean;
}

/**
 * A collection of values returned by getCmCertificate.
 */
export interface GetCmCertificateResult {
    /**
     * Certificate Id.
     */
    readonly certificateId: string;
    readonly challenges: outputs.GetCmCertificateChallenge[];
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    readonly deletionProtection: boolean;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * Domains for this certificate. Should be specified for managed certificates.
     */
    readonly domains: string[];
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Certificate issue timestamp.
     */
    readonly issuedAt: string;
    /**
     * Certificate Issuer.
     */
    readonly issuer: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * The resource name.
     */
    readonly name: string;
    /**
     * Certificate end valid period.
     */
    readonly notAfter: string;
    /**
     * Certificate start valid period.
     */
    readonly notBefore: string;
    /**
     * Certificate Serial Number.
     */
    readonly serial: string;
    /**
     * Certificate status: `VALIDATING`, `INVALID`, `ISSUED`, `REVOKED`, `RENEWING` or `RENEWAL_FAILED`.
     */
    readonly status: string;
    /**
     * Certificate Subject.
     */
    readonly subject: string;
    /**
     * Certificate type: `MANAGED` or `IMPORTED`.
     */
    readonly type: string;
    /**
     * Certificate update timestamp.
     */
    readonly updatedAt: string;
    /**
     * If `true`, the operation won't be completed while the certificate is in `VALIDATING`.
     */
    readonly waitValidation?: boolean;
}
/**
 * Get information about a Yandex Certificate Manager Certificate. For more information, see [the official documentation](https://yandex.cloud/docs/certificate-manager/concepts/).
 *
 * > One of `certificateId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const exampleById = yandex.getCmCertificate({
 *     certificateId: "certificate-id",
 * });
 * const exampleByName = yandex.getCmCertificate({
 *     folderId: "folder-id",
 *     name: "example",
 * });
 * ```
 */
export function getCmCertificateOutput(args?: GetCmCertificateOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCmCertificateResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getCmCertificate:getCmCertificate", {
        "certificateId": args.certificateId,
        "description": args.description,
        "folderId": args.folderId,
        "labels": args.labels,
        "name": args.name,
        "waitValidation": args.waitValidation,
    }, opts);
}

/**
 * A collection of arguments for invoking getCmCertificate.
 */
export interface GetCmCertificateOutputArgs {
    /**
     * Certificate Id.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * If `true`, the operation won't be completed while the certificate is in `VALIDATING`.
     */
    waitValidation?: pulumi.Input<boolean>;
}
