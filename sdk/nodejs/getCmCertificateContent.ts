// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Get content (certificate, private key) from a Yandex Certificate Manager Certificate. For more information, see [the official documentation](https://yandex.cloud/docs/certificate-manager/concepts/).
 *
 * > One of `certificateId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const exampleById = yandex.getCmCertificateContent({
 *     certificateId: "certificate-id",
 * });
 * const exampleByName = yandex.getCmCertificateContent({
 *     folderId: "folder-id",
 *     name: "example",
 * });
 * ```
 */
export function getCmCertificateContent(args?: GetCmCertificateContentArgs, opts?: pulumi.InvokeOptions): Promise<GetCmCertificateContentResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getCmCertificateContent:getCmCertificateContent", {
        "certificateId": args.certificateId,
        "folderId": args.folderId,
        "name": args.name,
        "privateKeyFormat": args.privateKeyFormat,
        "waitValidation": args.waitValidation,
    }, opts);
}

/**
 * A collection of arguments for invoking getCmCertificateContent.
 */
export interface GetCmCertificateContentArgs {
    /**
     * Certificate Id.
     */
    certificateId?: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * Certificate name.
     */
    name?: string;
    /**
     * Format in which you want to export the private_key: `"PKCS1"` or `"PKCS8"`.
     */
    privateKeyFormat?: string;
    /**
     * If `true`, the operation won't be completed while the certificate is in `VALIDATING`. Default is `false`.
     */
    waitValidation?: boolean;
}

/**
 * A collection of values returned by getCmCertificateContent.
 */
export interface GetCmCertificateContentResult {
    /**
     * Certificate Id.
     */
    readonly certificateId?: string;
    /**
     * List of certificates in chain.
     */
    readonly certificates: string[];
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Certificate name.
     */
    readonly name?: string;
    /**
     * Private key in specified format.
     */
    readonly privateKey: string;
    /**
     * Format in which you want to export the private_key: `"PKCS1"` or `"PKCS8"`.
     */
    readonly privateKeyFormat?: string;
    /**
     * If `true`, the operation won't be completed while the certificate is in `VALIDATING`. Default is `false`.
     */
    readonly waitValidation?: boolean;
}
/**
 * Get content (certificate, private key) from a Yandex Certificate Manager Certificate. For more information, see [the official documentation](https://yandex.cloud/docs/certificate-manager/concepts/).
 *
 * > One of `certificateId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const exampleById = yandex.getCmCertificateContent({
 *     certificateId: "certificate-id",
 * });
 * const exampleByName = yandex.getCmCertificateContent({
 *     folderId: "folder-id",
 *     name: "example",
 * });
 * ```
 */
export function getCmCertificateContentOutput(args?: GetCmCertificateContentOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCmCertificateContentResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getCmCertificateContent:getCmCertificateContent", {
        "certificateId": args.certificateId,
        "folderId": args.folderId,
        "name": args.name,
        "privateKeyFormat": args.privateKeyFormat,
        "waitValidation": args.waitValidation,
    }, opts);
}

/**
 * A collection of arguments for invoking getCmCertificateContent.
 */
export interface GetCmCertificateContentOutputArgs {
    /**
     * Certificate Id.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Certificate name.
     */
    name?: pulumi.Input<string>;
    /**
     * Format in which you want to export the private_key: `"PKCS1"` or `"PKCS8"`.
     */
    privateKeyFormat?: pulumi.Input<string>;
    /**
     * If `true`, the operation won't be completed while the certificate is in `VALIDATING`. Default is `false`.
     */
    waitValidation?: pulumi.Input<boolean>;
}
