// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Compute disk. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/disk).
 *
 * > One of `diskId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myDisk = yandex.getComputeDisk({
 *     diskId: "some_disk_id",
 * });
 * // You can use "data.yandex_compute_disk.my_disk.id" identifier 
 * // as reference to the existing resource.
 * // ...
 * const _default = new yandex.ComputeInstance("default", {secondaryDisks: [{
 *     diskId: myDisk.then(myDisk => myDisk.id),
 * }]});
 * ```
 */
export function getComputeDisk(args?: GetComputeDiskArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeDiskResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getComputeDisk:getComputeDisk", {
        "diskId": args.diskId,
        "diskPlacementPolicy": args.diskPlacementPolicy,
        "folderId": args.folderId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputeDisk.
 */
export interface GetComputeDiskArgs {
    /**
     * The ID of a specific disk.
     */
    diskId?: string;
    diskPlacementPolicy?: inputs.GetComputeDiskDiskPlacementPolicy;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * The resource name.
     */
    name?: string;
}

/**
 * A collection of values returned by getComputeDisk.
 */
export interface GetComputeDiskResult {
    /**
     * Block size of the disk, specified in bytes.
     */
    readonly blockSize: number;
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * The ID of a specific disk.
     */
    readonly diskId: string;
    readonly diskPlacementPolicy?: outputs.GetComputeDiskDiskPlacementPolicy;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    readonly hardwareGenerations: outputs.GetComputeDiskHardwareGeneration[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The source image to use for disk creation.
     */
    readonly imageId: string;
    readonly instanceIds: string[];
    /**
     * ID of KMS symmetric key used to encrypt disk.
     */
    readonly kmsKeyId: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * The resource name.
     */
    readonly name: string;
    readonly productIds: string[];
    /**
     * Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the `imageId` or `snapshotId` parameter, or specify it alone to create an empty persistent disk. If you specify this field along with `imageId` or `snapshotId`, the size value must not be less than the size of the source image or the size of the snapshot.
     */
    readonly size: number;
    /**
     * The source snapshot to use for disk creation.
     */
    readonly snapshotId: string;
    /**
     * The status of the disk.
     */
    readonly status: string;
    /**
     * Type of disk to create. Provide this when creating a disk.
     */
    readonly type: string;
    /**
     * The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
     */
    readonly zone: string;
}
/**
 * Get information about a Yandex Compute disk. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/disk).
 *
 * > One of `diskId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myDisk = yandex.getComputeDisk({
 *     diskId: "some_disk_id",
 * });
 * // You can use "data.yandex_compute_disk.my_disk.id" identifier 
 * // as reference to the existing resource.
 * // ...
 * const _default = new yandex.ComputeInstance("default", {secondaryDisks: [{
 *     diskId: myDisk.then(myDisk => myDisk.id),
 * }]});
 * ```
 */
export function getComputeDiskOutput(args?: GetComputeDiskOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetComputeDiskResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getComputeDisk:getComputeDisk", {
        "diskId": args.diskId,
        "diskPlacementPolicy": args.diskPlacementPolicy,
        "folderId": args.folderId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputeDisk.
 */
export interface GetComputeDiskOutputArgs {
    /**
     * The ID of a specific disk.
     */
    diskId?: pulumi.Input<string>;
    diskPlacementPolicy?: pulumi.Input<inputs.GetComputeDiskDiskPlacementPolicyArgs>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
}
