// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Compute filesystem. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/filesystem).
 *
 * > One of `filesystemId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myFs = yandex.getComputeFilesystem({
 *     filesystemId: "some_fs_id",
 * });
 * // You can use "data.yandex_compute_filesystem.my_fs.id" identifier 
 * // as reference to the existing resource.
 * // ...
 * const _default = new yandex.ComputeInstance("default", {filesystems: [{
 *     filesystemId: myFs.then(myFs => myFs.id),
 * }]});
 * ```
 */
export function getComputeFilesystem(args?: GetComputeFilesystemArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeFilesystemResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getComputeFilesystem:getComputeFilesystem", {
        "filesystemId": args.filesystemId,
        "folderId": args.folderId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputeFilesystem.
 */
export interface GetComputeFilesystemArgs {
    /**
     * ID of the filesystem.
     */
    filesystemId?: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * The resource name.
     */
    name?: string;
}

/**
 * A collection of values returned by getComputeFilesystem.
 */
export interface GetComputeFilesystemResult {
    /**
     * Block size of the filesystem, specified in bytes.
     */
    readonly blockSize: number;
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * ID of the filesystem.
     */
    readonly filesystemId: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * The resource name.
     */
    readonly name: string;
    /**
     * Size of the filesystem, specified in GB.
     */
    readonly size: number;
    /**
     * The status of the filesystem.
     */
    readonly status: string;
    /**
     * Type of filesystem to create. Type `network-hdd` is set by default.
     */
    readonly type: string;
    /**
     * The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
     */
    readonly zone: string;
}
/**
 * Get information about a Yandex Compute filesystem. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/filesystem).
 *
 * > One of `filesystemId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myFs = yandex.getComputeFilesystem({
 *     filesystemId: "some_fs_id",
 * });
 * // You can use "data.yandex_compute_filesystem.my_fs.id" identifier 
 * // as reference to the existing resource.
 * // ...
 * const _default = new yandex.ComputeInstance("default", {filesystems: [{
 *     filesystemId: myFs.then(myFs => myFs.id),
 * }]});
 * ```
 */
export function getComputeFilesystemOutput(args?: GetComputeFilesystemOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetComputeFilesystemResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getComputeFilesystem:getComputeFilesystem", {
        "filesystemId": args.filesystemId,
        "folderId": args.folderId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputeFilesystem.
 */
export interface GetComputeFilesystemOutputArgs {
    /**
     * ID of the filesystem.
     */
    filesystemId?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
}
