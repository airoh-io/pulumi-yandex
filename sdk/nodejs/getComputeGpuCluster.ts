// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Compute GPU cluster. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/gpu-cluster).
 *
 * > One of `gpuClusterId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myGpuCluster = yandex.getComputeGpuCluster({
 *     gpuClusterId: "some_gpu_cluster_id",
 * });
 * // You can use "data.yandex_compute_gpu_cluster.my_gpu_cluster.id" identifier 
 * // as reference to the existing resource.
 * // ...
 * const _default = new yandex.ComputeInstance("default", {gpuClusterId: myGpuCluster.then(myGpuCluster => myGpuCluster.id)});
 * ```
 */
export function getComputeGpuCluster(args?: GetComputeGpuClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeGpuClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getComputeGpuCluster:getComputeGpuCluster", {
        "folderId": args.folderId,
        "gpuClusterId": args.gpuClusterId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputeGpuCluster.
 */
export interface GetComputeGpuClusterArgs {
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * ID of the GPU cluster.
     */
    gpuClusterId?: string;
    /**
     * The resource name.
     */
    name?: string;
}

/**
 * A collection of values returned by getComputeGpuCluster.
 */
export interface GetComputeGpuClusterResult {
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    /**
     * ID of the GPU cluster.
     */
    readonly gpuClusterId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Type of interconnect between nodes to use in GPU cluster. Type `INFINIBAND` is set by default, and it is the only one available at the moment.
     */
    readonly interconnectType: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * The resource name.
     */
    readonly name: string;
    /**
     * The status of the GPU cluster.
     */
    readonly status: string;
    /**
     * The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
     */
    readonly zone: string;
}
/**
 * Get information about a Yandex Compute GPU cluster. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/gpu-cluster).
 *
 * > One of `gpuClusterId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myGpuCluster = yandex.getComputeGpuCluster({
 *     gpuClusterId: "some_gpu_cluster_id",
 * });
 * // You can use "data.yandex_compute_gpu_cluster.my_gpu_cluster.id" identifier 
 * // as reference to the existing resource.
 * // ...
 * const _default = new yandex.ComputeInstance("default", {gpuClusterId: myGpuCluster.then(myGpuCluster => myGpuCluster.id)});
 * ```
 */
export function getComputeGpuClusterOutput(args?: GetComputeGpuClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetComputeGpuClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getComputeGpuCluster:getComputeGpuCluster", {
        "folderId": args.folderId,
        "gpuClusterId": args.gpuClusterId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputeGpuCluster.
 */
export interface GetComputeGpuClusterOutputArgs {
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * ID of the GPU cluster.
     */
    gpuClusterId?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
}
