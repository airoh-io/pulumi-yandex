// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Compute image. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/image).
 *
 * > Either `imageId`, `family` or `name` must be specified.
 *
 * > If you specify `family` without `folderId` then lookup takes place in the 'standard-images' folder.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * const myImage = yandex.getComputeImage({
 *     family: "ubuntu-1804-lts",
 * });
 * // You can use "data.yandex_compute_image.my_image.id" identifier 
 * // as reference to existing resource.
 * const _default = new yandex.ComputeInstance("default", {bootDisk: {
 *     initializeParams: {
 *         imageId: myImage.then(myImage => myImage.id),
 *     },
 * }});
 * ```
 */
export function getComputeImage(args?: GetComputeImageArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeImageResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getComputeImage:getComputeImage", {
        "family": args.family,
        "folderId": args.folderId,
        "imageId": args.imageId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputeImage.
 */
export interface GetComputeImageArgs {
    /**
     * The name of the image family to which this image belongs.
     */
    family?: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * The ID of a specific image.
     */
    imageId?: string;
    /**
     * The resource name.
     */
    name?: string;
}

/**
 * A collection of values returned by getComputeImage.
 */
export interface GetComputeImageResult {
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * The name of the image family to which this image belongs.
     */
    readonly family: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    readonly hardwareGenerations: outputs.GetComputeImageHardwareGeneration[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of a specific image.
     */
    readonly imageId: string;
    /**
     * ID of KMS symmetric key used to encrypt image.
     */
    readonly kmsKeyId: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * Minimum size in GB of the disk that will be created from this image.
     */
    readonly minDiskSize: number;
    /**
     * The resource name.
     */
    readonly name: string;
    /**
     * Operating system type that is contained in the image. Possible values: `LINUX`, `WINDOWS`.
     */
    readonly osType: string;
    /**
     * Optimize the image to create a disk.
     */
    readonly pooled: boolean;
    /**
     * License IDs that indicate which licenses are attached to this image.
     */
    readonly productIds: string[];
    /**
     * The size of the image, specified in GB.
     */
    readonly size: number;
    /**
     * The status of the image.
     */
    readonly status: string;
}
/**
 * Get information about a Yandex Compute image. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/image).
 *
 * > Either `imageId`, `family` or `name` must be specified.
 *
 * > If you specify `family` without `folderId` then lookup takes place in the 'standard-images' folder.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * const myImage = yandex.getComputeImage({
 *     family: "ubuntu-1804-lts",
 * });
 * // You can use "data.yandex_compute_image.my_image.id" identifier 
 * // as reference to existing resource.
 * const _default = new yandex.ComputeInstance("default", {bootDisk: {
 *     initializeParams: {
 *         imageId: myImage.then(myImage => myImage.id),
 *     },
 * }});
 * ```
 */
export function getComputeImageOutput(args?: GetComputeImageOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetComputeImageResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getComputeImage:getComputeImage", {
        "family": args.family,
        "folderId": args.folderId,
        "imageId": args.imageId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputeImage.
 */
export interface GetComputeImageOutputArgs {
    /**
     * The name of the image family to which this image belongs.
     */
    family?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The ID of a specific image.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
}
