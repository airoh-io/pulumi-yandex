// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Compute snapshot. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/snapshot).
 *
 * > One of `snapshotId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const mySnapshot = yandex.getComputeSnapshot({
 *     snapshotId: "some_snapshot_id",
 * });
 * // You can use "data.yandex_compute_snapshot.my_snapshot.id" identifier 
 * // as reference to existing resource.
 * // ...
 * const _default = new yandex.ComputeInstance("default", {bootDisk: {
 *     initializeParams: {
 *         snapshotId: mySnapshot.then(mySnapshot => mySnapshot.id),
 *     },
 * }});
 * ```
 */
export function getComputeSnapshot(args?: GetComputeSnapshotArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeSnapshotResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getComputeSnapshot:getComputeSnapshot", {
        "folderId": args.folderId,
        "name": args.name,
        "snapshotId": args.snapshotId,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputeSnapshot.
 */
export interface GetComputeSnapshotArgs {
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * The resource name.
     */
    name?: string;
    /**
     * The ID of a specific snapshot.
     */
    snapshotId?: string;
}

/**
 * A collection of values returned by getComputeSnapshot.
 */
export interface GetComputeSnapshotResult {
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * Size of the disk when the snapshot was created, specified in GB.
     */
    readonly diskSize: number;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    readonly hardwareGenerations: outputs.GetComputeSnapshotHardwareGeneration[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * ID of KMS symmetric key used to encrypt snapshot.
     */
    readonly kmsKeyId: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * The resource name.
     */
    readonly name: string;
    /**
     * License IDs that indicate which licenses are attached to this snapshot.
     */
    readonly productIds: string[];
    /**
     * The ID of a specific snapshot.
     */
    readonly snapshotId: string;
    /**
     * ID of the disk to create a snapshot from.
     */
    readonly sourceDiskId: string;
    /**
     * The status of the snapshot.
     */
    readonly status: string;
    /**
     * Size of the snapshot, specified in GB.
     */
    readonly storageSize: number;
}
/**
 * Get information about a Yandex Compute snapshot. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/snapshot).
 *
 * > One of `snapshotId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const mySnapshot = yandex.getComputeSnapshot({
 *     snapshotId: "some_snapshot_id",
 * });
 * // You can use "data.yandex_compute_snapshot.my_snapshot.id" identifier 
 * // as reference to existing resource.
 * // ...
 * const _default = new yandex.ComputeInstance("default", {bootDisk: {
 *     initializeParams: {
 *         snapshotId: mySnapshot.then(mySnapshot => mySnapshot.id),
 *     },
 * }});
 * ```
 */
export function getComputeSnapshotOutput(args?: GetComputeSnapshotOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetComputeSnapshotResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getComputeSnapshot:getComputeSnapshot", {
        "folderId": args.folderId,
        "name": args.name,
        "snapshotId": args.snapshotId,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputeSnapshot.
 */
export interface GetComputeSnapshotOutputArgs {
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of a specific snapshot.
     */
    snapshotId?: pulumi.Input<string>;
}
