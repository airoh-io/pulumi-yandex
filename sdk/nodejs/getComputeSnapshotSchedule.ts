// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Compute snapshot schedule. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/snapshot-schedule).
 *
 * > One of `snapshotScheduleId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * const mySnapshotSchedule = yandex.getComputeSnapshotSchedule({
 *     snapshotScheduleId: "some_snapshot_schedule_id",
 * });
 * ```
 */
export function getComputeSnapshotSchedule(args?: GetComputeSnapshotScheduleArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeSnapshotScheduleResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getComputeSnapshotSchedule:getComputeSnapshotSchedule", {
        "description": args.description,
        "diskIds": args.diskIds,
        "folderId": args.folderId,
        "labels": args.labels,
        "name": args.name,
        "retentionPeriod": args.retentionPeriod,
        "schedulePolicies": args.schedulePolicies,
        "snapshotCount": args.snapshotCount,
        "snapshotScheduleId": args.snapshotScheduleId,
        "snapshotSpecs": args.snapshotSpecs,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputeSnapshotSchedule.
 */
export interface GetComputeSnapshotScheduleArgs {
    /**
     * The resource description.
     */
    description?: string;
    /**
     * IDs of the disk for snapshot schedule.
     */
    diskIds?: string[];
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: {[key: string]: string};
    /**
     * The resource name.
     */
    name?: string;
    /**
     * Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Examples: `300ms`, `1.5h` or `2h45m`.
     */
    retentionPeriod?: string;
    schedulePolicies?: inputs.GetComputeSnapshotScheduleSchedulePolicy[];
    /**
     * Maximum number of snapshots for every disk of the snapshot schedule.
     */
    snapshotCount?: number;
    /**
     * The ID of a specific snapshot schedule.
     */
    snapshotScheduleId?: string;
    /**
     * Additional attributes for snapshots created by this snapshot schedule.
     */
    snapshotSpecs?: inputs.GetComputeSnapshotScheduleSnapshotSpec[];
}

/**
 * A collection of values returned by getComputeSnapshotSchedule.
 */
export interface GetComputeSnapshotScheduleResult {
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * IDs of the disk for snapshot schedule.
     */
    readonly diskIds: string[];
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * The resource name.
     */
    readonly name: string;
    /**
     * Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Examples: `300ms`, `1.5h` or `2h45m`.
     */
    readonly retentionPeriod: string;
    readonly schedulePolicies: outputs.GetComputeSnapshotScheduleSchedulePolicy[];
    /**
     * Maximum number of snapshots for every disk of the snapshot schedule.
     */
    readonly snapshotCount: number;
    /**
     * The ID of a specific snapshot schedule.
     */
    readonly snapshotScheduleId: string;
    /**
     * Additional attributes for snapshots created by this snapshot schedule.
     */
    readonly snapshotSpecs: outputs.GetComputeSnapshotScheduleSnapshotSpec[];
    /**
     * The status of the snapshot schedule.
     */
    readonly status: string;
}
/**
 * Get information about a Yandex Compute snapshot schedule. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/snapshot-schedule).
 *
 * > One of `snapshotScheduleId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * const mySnapshotSchedule = yandex.getComputeSnapshotSchedule({
 *     snapshotScheduleId: "some_snapshot_schedule_id",
 * });
 * ```
 */
export function getComputeSnapshotScheduleOutput(args?: GetComputeSnapshotScheduleOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetComputeSnapshotScheduleResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getComputeSnapshotSchedule:getComputeSnapshotSchedule", {
        "description": args.description,
        "diskIds": args.diskIds,
        "folderId": args.folderId,
        "labels": args.labels,
        "name": args.name,
        "retentionPeriod": args.retentionPeriod,
        "schedulePolicies": args.schedulePolicies,
        "snapshotCount": args.snapshotCount,
        "snapshotScheduleId": args.snapshotScheduleId,
        "snapshotSpecs": args.snapshotSpecs,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputeSnapshotSchedule.
 */
export interface GetComputeSnapshotScheduleOutputArgs {
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * IDs of the disk for snapshot schedule.
     */
    diskIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Examples: `300ms`, `1.5h` or `2h45m`.
     */
    retentionPeriod?: pulumi.Input<string>;
    schedulePolicies?: pulumi.Input<pulumi.Input<inputs.GetComputeSnapshotScheduleSchedulePolicyArgs>[]>;
    /**
     * Maximum number of snapshots for every disk of the snapshot schedule.
     */
    snapshotCount?: pulumi.Input<number>;
    /**
     * The ID of a specific snapshot schedule.
     */
    snapshotScheduleId?: pulumi.Input<string>;
    /**
     * Additional attributes for snapshots created by this snapshot schedule.
     */
    snapshotSpecs?: pulumi.Input<pulumi.Input<inputs.GetComputeSnapshotScheduleSnapshotSpecArgs>[]>;
}
