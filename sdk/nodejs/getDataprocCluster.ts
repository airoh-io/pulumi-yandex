// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const foo = yandex.getDataprocCluster({
 *     name: "test",
 * });
 * export const serviceAccountId = foo.then(foo => foo.serviceAccountId);
 * ```
 */
export function getDataprocCluster(args?: GetDataprocClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetDataprocClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getDataprocCluster:getDataprocCluster", {
        "clusterId": args.clusterId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getDataprocCluster.
 */
export interface GetDataprocClusterArgs {
    /**
     * The ID of the Yandex Data Processing cluster.
     */
    clusterId?: string;
    /**
     * The resource name.
     */
    name?: string;
}

/**
 * A collection of values returned by getDataprocCluster.
 */
export interface GetDataprocClusterResult {
    /**
     * Service account to be used for managing hosts in an autoscaled subcluster.
     */
    readonly autoscalingServiceAccountId: string;
    /**
     * Name of the Object Storage bucket to use for Yandex Data Processing jobs. Yandex Data Processing Agent saves output of job driver's process to specified bucket. In order for this to work service account (specified by the `serviceAccountId` argument) should be given permission to create objects within this bucket.
     */
    readonly bucket: string;
    /**
     * Configuration and resources for hosts that should be created with the cluster.
     */
    readonly clusterConfigs: outputs.GetDataprocClusterClusterConfig[];
    /**
     * The ID of the Yandex Data Processing cluster.
     */
    readonly clusterId: string;
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    readonly deletionProtection: boolean;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * Deployment environment of the cluster. Can be either `PRESTABLE` or `PRODUCTION`. The default is `PRESTABLE`.
     */
    readonly environment: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    /**
     * A list of host group IDs to place VMs of the cluster on.
     */
    readonly hostGroupIds: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * ID of the cloud logging group for cluster logs.
     */
    readonly logGroupId: string;
    /**
     * The resource name.
     */
    readonly name: string;
    /**
     * The list of security groups applied to resource or their components.
     */
    readonly securityGroupIds: string[];
    /**
     * Service account to be used by the Yandex Data Processing agent to access resources of Yandex Cloud. Selected service account should have `mdb.dataproc.agent` role on the folder where the Yandex Data Processing cluster will be located.
     */
    readonly serviceAccountId: string;
    /**
     * Whether to enable UI Proxy feature.
     */
    readonly uiProxy: boolean;
    /**
     * The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
     */
    readonly zoneId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const foo = yandex.getDataprocCluster({
 *     name: "test",
 * });
 * export const serviceAccountId = foo.then(foo => foo.serviceAccountId);
 * ```
 */
export function getDataprocClusterOutput(args?: GetDataprocClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDataprocClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getDataprocCluster:getDataprocCluster", {
        "clusterId": args.clusterId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getDataprocCluster.
 */
export interface GetDataprocClusterOutputArgs {
    /**
     * The ID of the Yandex Data Processing cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
}
