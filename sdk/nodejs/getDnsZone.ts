// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Get information about a DNS Zone.
 *
 * > One of `dnsZoneId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * const foo = yandex.getDnsZone({
 *     dnsZoneId: yandex_dns_zone.zone1.id,
 * });
 * export const zone = foo.then(foo => foo.zone);
 * ```
 */
export function getDnsZone(args?: GetDnsZoneArgs, opts?: pulumi.InvokeOptions): Promise<GetDnsZoneResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getDnsZone:getDnsZone", {
        "dnsZoneId": args.dnsZoneId,
        "folderId": args.folderId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getDnsZone.
 */
export interface GetDnsZoneArgs {
    /**
     * The ID of the DNS Zone.
     */
    dnsZoneId?: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * The resource name.
     */
    name?: string;
}

/**
 * A collection of values returned by getDnsZone.
 */
export interface GetDnsZoneResult {
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    readonly deletionProtection: boolean;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * The ID of the DNS Zone.
     */
    readonly dnsZoneId: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * The resource name.
     */
    readonly name: string;
    /**
     * For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
     */
    readonly privateNetworks: string[];
    /**
     * The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
     */
    readonly public: boolean;
    /**
     * The DNS name of this zone, e.g. `example.com.`. Must ends with dot.
     */
    readonly zone: string;
}
/**
 * Get information about a DNS Zone.
 *
 * > One of `dnsZoneId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * const foo = yandex.getDnsZone({
 *     dnsZoneId: yandex_dns_zone.zone1.id,
 * });
 * export const zone = foo.then(foo => foo.zone);
 * ```
 */
export function getDnsZoneOutput(args?: GetDnsZoneOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDnsZoneResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getDnsZone:getDnsZone", {
        "dnsZoneId": args.dnsZoneId,
        "folderId": args.folderId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getDnsZone.
 */
export interface GetDnsZoneOutputArgs {
    /**
     * The ID of the DNS Zone.
     */
    dnsZoneId?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
}
