// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Cloud Function. For more information about Yandex Cloud Functions, see [Yandex Cloud Functions](https://yandex.cloud/docs/functions).
 * This data source is used to define [Yandex Cloud Function](https://yandex.cloud/docs/functions/concepts/function) that can be used by other resources.
 *
 * > Either `functionId` or `name` must be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myFunction = yandex.getFunction({
 *     functionId: "d4e45**********pqvd3",
 * });
 * ```
 */
export function getFunction(args?: GetFunctionArgs, opts?: pulumi.InvokeOptions): Promise<GetFunctionResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getFunction:getFunction", {
        "concurrency": args.concurrency,
        "connectivity": args.connectivity,
        "folderId": args.folderId,
        "functionId": args.functionId,
        "metadataOptions": args.metadataOptions,
        "mounts": args.mounts,
        "name": args.name,
        "secrets": args.secrets,
        "storageMounts": args.storageMounts,
    }, opts);
}

/**
 * A collection of arguments for invoking getFunction.
 */
export interface GetFunctionArgs {
    /**
     * The maximum number of requests processed by a function instance at the same time.
     */
    concurrency?: number;
    connectivity?: inputs.GetFunctionConnectivity;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * Yandex Cloud Function id used to define function.
     */
    functionId?: string;
    metadataOptions?: inputs.GetFunctionMetadataOptions;
    mounts?: inputs.GetFunctionMount[];
    /**
     * The resource name.
     */
    name?: string;
    secrets?: inputs.GetFunctionSecret[];
    /**
     * @deprecated to manage storage_mountss, please switch to using a separate resource type mounts
     */
    storageMounts?: inputs.GetFunctionStorageMount[];
}

/**
 * A collection of values returned by getFunction.
 */
export interface GetFunctionResult {
    readonly asyncInvocations: outputs.GetFunctionAsyncInvocation[];
    /**
     * The maximum number of requests processed by a function instance at the same time.
     */
    readonly concurrency: number;
    readonly connectivity?: outputs.GetFunctionConnectivity;
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * Entrypoint for Yandex Cloud Function.
     */
    readonly entrypoint: string;
    /**
     * A set of key/value environment variables for Yandex Cloud Function. Each key must begin with a letter (A-Z, a-z).
     */
    readonly environment: {[key: string]: string};
    /**
     * Execution timeout in seconds for Yandex Cloud Function.
     */
    readonly executionTimeout: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId?: string;
    /**
     * Yandex Cloud Function id used to define function.
     */
    readonly functionId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Image size for Yandex Cloud Function.
     */
    readonly imageSize: number;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    readonly logOptions: outputs.GetFunctionLogOption[];
    /**
     * Memory in megabytes (**aligned to 128MB**) for Yandex Cloud Function.
     */
    readonly memory: number;
    readonly metadataOptions: outputs.GetFunctionMetadataOptions;
    readonly mounts: outputs.GetFunctionMount[];
    /**
     * The resource name.
     */
    readonly name?: string;
    /**
     * Runtime for Yandex Cloud Function.
     */
    readonly runtime: string;
    readonly secrets: outputs.GetFunctionSecret[];
    /**
     * [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
     */
    readonly serviceAccountId: string;
    /**
     * @deprecated to manage storage_mountss, please switch to using a separate resource type mounts
     */
    readonly storageMounts: outputs.GetFunctionStorageMount[];
    /**
     * Tags for Yandex Cloud Function. Tag `$latest` isn't returned.
     */
    readonly tags: string[];
    /**
     * Tmpfs size for Yandex Cloud Function.
     */
    readonly tmpfsSize: number;
    /**
     * Version of Yandex Cloud Function.
     */
    readonly version: string;
}
/**
 * Get information about a Yandex Cloud Function. For more information about Yandex Cloud Functions, see [Yandex Cloud Functions](https://yandex.cloud/docs/functions).
 * This data source is used to define [Yandex Cloud Function](https://yandex.cloud/docs/functions/concepts/function) that can be used by other resources.
 *
 * > Either `functionId` or `name` must be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myFunction = yandex.getFunction({
 *     functionId: "d4e45**********pqvd3",
 * });
 * ```
 */
export function getFunctionOutput(args?: GetFunctionOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetFunctionResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getFunction:getFunction", {
        "concurrency": args.concurrency,
        "connectivity": args.connectivity,
        "folderId": args.folderId,
        "functionId": args.functionId,
        "metadataOptions": args.metadataOptions,
        "mounts": args.mounts,
        "name": args.name,
        "secrets": args.secrets,
        "storageMounts": args.storageMounts,
    }, opts);
}

/**
 * A collection of arguments for invoking getFunction.
 */
export interface GetFunctionOutputArgs {
    /**
     * The maximum number of requests processed by a function instance at the same time.
     */
    concurrency?: pulumi.Input<number>;
    connectivity?: pulumi.Input<inputs.GetFunctionConnectivityArgs>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Yandex Cloud Function id used to define function.
     */
    functionId?: pulumi.Input<string>;
    metadataOptions?: pulumi.Input<inputs.GetFunctionMetadataOptionsArgs>;
    mounts?: pulumi.Input<pulumi.Input<inputs.GetFunctionMountArgs>[]>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    secrets?: pulumi.Input<pulumi.Input<inputs.GetFunctionSecretArgs>[]>;
    /**
     * @deprecated to manage storage_mountss, please switch to using a separate resource type mounts
     */
    storageMounts?: pulumi.Input<pulumi.Input<inputs.GetFunctionStorageMountArgs>[]>;
}
