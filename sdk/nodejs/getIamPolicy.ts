// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Generates an [IAM](https://yandex.cloud/docs/iam/) policy document that may be referenced by and applied to other Yandex Cloud Platform resources, such as the `yandex.getResourcemanagerFolder` resource.
 *
 * This data source is used to define [IAM](https://yandex.cloud/docs/iam/) policies to apply to other resources. Currently, defining a policy through a data source and referencing that policy from another resource is the only way to apply an IAM policy to a resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const admin = yandex.getIamPolicy({
 *     bindings: [
 *         {
 *             members: ["userAccount:user_id_1"],
 *             role: "admin",
 *         },
 *         {
 *             members: ["userAccount:user_id_2"],
 *             role: "viewer",
 *         },
 *     ],
 * });
 * ```
 */
export function getIamPolicy(args: GetIamPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetIamPolicyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getIamPolicy:getIamPolicy", {
        "bindings": args.bindings,
    }, opts);
}

/**
 * A collection of arguments for invoking getIamPolicy.
 */
export interface GetIamPolicyArgs {
    /**
     * Defines a binding to be included in the policy document. Multiple `binding` arguments are supported.
     */
    bindings: inputs.GetIamPolicyBinding[];
}

/**
 * A collection of values returned by getIamPolicy.
 */
export interface GetIamPolicyResult {
    /**
     * Defines a binding to be included in the policy document. Multiple `binding` arguments are supported.
     */
    readonly bindings: outputs.GetIamPolicyBinding[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The above bindings serialized in a format suitable for referencing from a resource that supports IAM.
     */
    readonly policyData: string;
}
/**
 * Generates an [IAM](https://yandex.cloud/docs/iam/) policy document that may be referenced by and applied to other Yandex Cloud Platform resources, such as the `yandex.getResourcemanagerFolder` resource.
 *
 * This data source is used to define [IAM](https://yandex.cloud/docs/iam/) policies to apply to other resources. Currently, defining a policy through a data source and referencing that policy from another resource is the only way to apply an IAM policy to a resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const admin = yandex.getIamPolicy({
 *     bindings: [
 *         {
 *             members: ["userAccount:user_id_1"],
 *             role: "admin",
 *         },
 *         {
 *             members: ["userAccount:user_id_2"],
 *             role: "viewer",
 *         },
 *     ],
 * });
 * ```
 */
export function getIamPolicyOutput(args: GetIamPolicyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetIamPolicyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getIamPolicy:getIamPolicy", {
        "bindings": args.bindings,
    }, opts);
}

/**
 * A collection of arguments for invoking getIamPolicy.
 */
export interface GetIamPolicyOutputArgs {
    /**
     * Defines a binding to be included in the policy document. Multiple `binding` arguments are supported.
     */
    bindings: pulumi.Input<pulumi.Input<inputs.GetIamPolicyBindingArgs>[]>;
}
