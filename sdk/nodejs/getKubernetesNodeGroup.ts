// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Kubernetes Node Group. For more information, see [the official documentation](https://yandex.cloud/docs/managed-kubernetes/concepts/#node-group).
 *
 * > One of `nodeGroupId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * export = async () => {
 *     const myNodeGroup = await yandex.getKubernetesNodeGroup({
 *         nodeGroupId: "some_k8s_node_group_id",
 *     });
 *     return {
 *         "myNodeGroup.status": myNodeGroup.status,
 *     };
 * }
 * ```
 */
export function getKubernetesNodeGroup(args?: GetKubernetesNodeGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesNodeGroupResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getKubernetesNodeGroup:getKubernetesNodeGroup", {
        "folderId": args.folderId,
        "name": args.name,
        "nodeGroupId": args.nodeGroupId,
    }, opts);
}

/**
 * A collection of arguments for invoking getKubernetesNodeGroup.
 */
export interface GetKubernetesNodeGroupArgs {
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * The resource name.
     */
    name?: string;
    /**
     * ID of a specific Kubernetes node group.
     */
    nodeGroupId?: string;
}

/**
 * A collection of values returned by getKubernetesNodeGroup.
 */
export interface GetKubernetesNodeGroupResult {
    readonly allocationPolicies: outputs.GetKubernetesNodeGroupAllocationPolicy[];
    /**
     * A list of allowed unsafe `sysctl` parameters for this node group. For more details see [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster).
     */
    readonly allowedUnsafeSysctls: string[];
    /**
     * The ID of the Kubernetes cluster that this node group belongs to.
     */
    readonly clusterId: string;
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    readonly deployPolicies: outputs.GetKubernetesNodeGroupDeployPolicy[];
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * ID of instance group that is used to manage this Kubernetes node group.
     */
    readonly instanceGroupId: string;
    readonly instanceTemplates: outputs.GetKubernetesNodeGroupInstanceTemplate[];
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    readonly maintenancePolicies: outputs.GetKubernetesNodeGroupMaintenancePolicy[];
    /**
     * The resource name.
     */
    readonly name: string;
    /**
     * ID of a specific Kubernetes node group.
     */
    readonly nodeGroupId: string;
    /**
     * A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.
     */
    readonly nodeLabels: {[key: string]: string};
    /**
     * A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.
     */
    readonly nodeTaints: string[];
    readonly scalePolicies: outputs.GetKubernetesNodeGroupScalePolicy[];
    /**
     * Status of the Kubernetes node group.
     */
    readonly status: string;
    readonly versionInfos: outputs.GetKubernetesNodeGroupVersionInfo[];
}
/**
 * Get information about a Yandex Kubernetes Node Group. For more information, see [the official documentation](https://yandex.cloud/docs/managed-kubernetes/concepts/#node-group).
 *
 * > One of `nodeGroupId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * export = async () => {
 *     const myNodeGroup = await yandex.getKubernetesNodeGroup({
 *         nodeGroupId: "some_k8s_node_group_id",
 *     });
 *     return {
 *         "myNodeGroup.status": myNodeGroup.status,
 *     };
 * }
 * ```
 */
export function getKubernetesNodeGroupOutput(args?: GetKubernetesNodeGroupOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetKubernetesNodeGroupResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getKubernetesNodeGroup:getKubernetesNodeGroup", {
        "folderId": args.folderId,
        "name": args.name,
        "nodeGroupId": args.nodeGroupId,
    }, opts);
}

/**
 * A collection of arguments for invoking getKubernetesNodeGroup.
 */
export interface GetKubernetesNodeGroupOutputArgs {
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of a specific Kubernetes node group.
     */
    nodeGroupId?: pulumi.Input<string>;
}
