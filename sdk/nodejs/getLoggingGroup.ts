// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Cloud Logging group. For more information, see [the official documentation](https://yandex.cloud/docs/logging/concepts/log-group).
 *
 * > If `groupId` is not specified `name` and `folderId` will be used to designate Yandex Cloud Logging group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * const myGroup = yandex.getLoggingGroup({
 *     groupId: "some_yandex_logging_group_id",
 * });
 * export const logGroupRetentionPeriod = myGroup.then(myGroup => myGroup.retentionPeriod);
 * ```
 */
export function getLoggingGroup(args?: GetLoggingGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetLoggingGroupResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getLoggingGroup:getLoggingGroup", {
        "folderId": args.folderId,
        "groupId": args.groupId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getLoggingGroup.
 */
export interface GetLoggingGroupArgs {
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * The Yandex Cloud Logging group ID.
     */
    groupId?: string;
    /**
     * The resource name.
     */
    name?: string;
}

/**
 * A collection of values returned by getLoggingGroup.
 */
export interface GetLoggingGroupResult {
    /**
     * The `Cloud ID` which resource belongs to. If it is not provided, the default provider `cloud-id` is used.
     */
    readonly cloudId: string;
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * Data Stream.
     */
    readonly dataStream: string;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    /**
     * The Yandex Cloud Logging group ID.
     */
    readonly groupId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * The resource name.
     */
    readonly name: string;
    /**
     * Log entries retention period for the Yandex Cloud Logging group.
     */
    readonly retentionPeriod: string;
    /**
     * The Yandex Cloud Logging group status.
     */
    readonly status: string;
}
/**
 * Get information about a Yandex Cloud Logging group. For more information, see [the official documentation](https://yandex.cloud/docs/logging/concepts/log-group).
 *
 * > If `groupId` is not specified `name` and `folderId` will be used to designate Yandex Cloud Logging group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * const myGroup = yandex.getLoggingGroup({
 *     groupId: "some_yandex_logging_group_id",
 * });
 * export const logGroupRetentionPeriod = myGroup.then(myGroup => myGroup.retentionPeriod);
 * ```
 */
export function getLoggingGroupOutput(args?: GetLoggingGroupOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetLoggingGroupResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getLoggingGroup:getLoggingGroup", {
        "folderId": args.folderId,
        "groupId": args.groupId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getLoggingGroup.
 */
export interface GetLoggingGroupOutputArgs {
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The Yandex Cloud Logging group ID.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
}
