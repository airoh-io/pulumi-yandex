// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Managed Greenplum cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-greenplum/).
 *
 * > Either `clusterId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const foo = yandex.getMdbGreenplumCluster({
 *     name: "test",
 * });
 * export const networkId = foo.then(foo => foo.networkId);
 * ```
 */
export function getMdbGreenplumCluster(args?: GetMdbGreenplumClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetMdbGreenplumClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getMdbGreenplumCluster:getMdbGreenplumCluster", {
        "backgroundActivities": args.backgroundActivities,
        "clusterId": args.clusterId,
        "folderId": args.folderId,
        "greenplumConfig": args.greenplumConfig,
        "masterHostGroupIds": args.masterHostGroupIds,
        "name": args.name,
        "poolerConfig": args.poolerConfig,
        "pxfConfigs": args.pxfConfigs,
        "segmentHostGroupIds": args.segmentHostGroupIds,
    }, opts);
}

/**
 * A collection of arguments for invoking getMdbGreenplumCluster.
 */
export interface GetMdbGreenplumClusterArgs {
    backgroundActivities?: inputs.GetMdbGreenplumClusterBackgroundActivity[];
    /**
     * The ID of the Greenplum cluster.
     */
    clusterId?: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    greenplumConfig?: {[key: string]: string};
    /**
     * A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
     */
    masterHostGroupIds?: string[];
    /**
     * The resource name.
     */
    name?: string;
    poolerConfig?: inputs.GetMdbGreenplumClusterPoolerConfig;
    pxfConfigs?: inputs.GetMdbGreenplumClusterPxfConfig[];
    /**
     * A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
     */
    segmentHostGroupIds?: string[];
}

/**
 * A collection of values returned by getMdbGreenplumCluster.
 */
export interface GetMdbGreenplumClusterResult {
    readonly accesses: outputs.GetMdbGreenplumClusterAccess[];
    /**
     * Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.
     */
    readonly assignPublicIp: boolean;
    readonly backgroundActivities: outputs.GetMdbGreenplumClusterBackgroundActivity[];
    readonly backupWindowStarts: outputs.GetMdbGreenplumClusterBackupWindowStart[];
    readonly cloudStorages: outputs.GetMdbGreenplumClusterCloudStorage[];
    /**
     * The ID of the Greenplum cluster.
     */
    readonly clusterId: string;
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    readonly deletionProtection: boolean;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)
     */
    readonly environment: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    readonly greenplumConfig: {[key: string]: string};
    /**
     * Aggregated health of the cluster.
     */
    readonly health: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    readonly loggings: outputs.GetMdbGreenplumClusterLogging[];
    readonly maintenanceWindows: outputs.GetMdbGreenplumClusterMaintenanceWindow[];
    /**
     * Number of hosts in master subcluster (1 or 2).
     */
    readonly masterHostCount: number;
    /**
     * A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
     */
    readonly masterHostGroupIds: string[];
    readonly masterHosts: outputs.GetMdbGreenplumClusterMasterHost[];
    readonly masterSubclusters: outputs.GetMdbGreenplumClusterMasterSubcluster[];
    /**
     * The resource name.
     */
    readonly name: string;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    readonly networkId: string;
    readonly poolerConfig?: outputs.GetMdbGreenplumClusterPoolerConfig;
    readonly pxfConfigs: outputs.GetMdbGreenplumClusterPxfConfig[];
    /**
     * The list of security groups applied to resource or their components.
     */
    readonly securityGroupIds: string[];
    /**
     * Number of hosts in segment subcluster (from 1 to 32).
     */
    readonly segmentHostCount: number;
    /**
     * A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
     */
    readonly segmentHostGroupIds: string[];
    readonly segmentHosts: outputs.GetMdbGreenplumClusterSegmentHost[];
    /**
     * Number of segments on segment host (not more then 1 + RAM/8).
     */
    readonly segmentInHost: number;
    readonly segmentSubclusters: outputs.GetMdbGreenplumClusterSegmentSubcluster[];
    /**
     * ID of service account to use with Yandex Cloud resources (e.g. S3, Cloud Logging).
     */
    readonly serviceAccountId: string;
    /**
     * Status of the cluster.
     */
    readonly status: string;
    /**
     * The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.
     */
    readonly subnetId: string;
    /**
     * Greenplum cluster admin user name.
     */
    readonly userName: string;
    /**
     * Version of the Greenplum cluster. (`6.25`)
     */
    readonly version: string;
    /**
     * The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
     */
    readonly zone: string;
}
/**
 * Get information about a Yandex Managed Greenplum cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-greenplum/).
 *
 * > Either `clusterId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const foo = yandex.getMdbGreenplumCluster({
 *     name: "test",
 * });
 * export const networkId = foo.then(foo => foo.networkId);
 * ```
 */
export function getMdbGreenplumClusterOutput(args?: GetMdbGreenplumClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMdbGreenplumClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getMdbGreenplumCluster:getMdbGreenplumCluster", {
        "backgroundActivities": args.backgroundActivities,
        "clusterId": args.clusterId,
        "folderId": args.folderId,
        "greenplumConfig": args.greenplumConfig,
        "masterHostGroupIds": args.masterHostGroupIds,
        "name": args.name,
        "poolerConfig": args.poolerConfig,
        "pxfConfigs": args.pxfConfigs,
        "segmentHostGroupIds": args.segmentHostGroupIds,
    }, opts);
}

/**
 * A collection of arguments for invoking getMdbGreenplumCluster.
 */
export interface GetMdbGreenplumClusterOutputArgs {
    backgroundActivities?: pulumi.Input<pulumi.Input<inputs.GetMdbGreenplumClusterBackgroundActivityArgs>[]>;
    /**
     * The ID of the Greenplum cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    greenplumConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
     */
    masterHostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    poolerConfig?: pulumi.Input<inputs.GetMdbGreenplumClusterPoolerConfigArgs>;
    pxfConfigs?: pulumi.Input<pulumi.Input<inputs.GetMdbGreenplumClusterPxfConfigArgs>[]>;
    /**
     * A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
     */
    segmentHostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
