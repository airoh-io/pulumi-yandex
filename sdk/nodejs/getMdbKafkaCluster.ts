// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Managed Kafka cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-kafka/concepts).
 *
 * > Either `clusterId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myCluster = yandex.getMdbKafkaCluster({
 *     name: "test",
 * });
 * export const networkId = myCluster.then(myCluster => myCluster.networkId);
 * ```
 */
export function getMdbKafkaCluster(args?: GetMdbKafkaClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetMdbKafkaClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getMdbKafkaCluster:getMdbKafkaCluster", {
        "clusterId": args.clusterId,
        "config": args.config,
        "deletionProtection": args.deletionProtection,
        "folderId": args.folderId,
        "name": args.name,
        "subnetIds": args.subnetIds,
        "topics": args.topics,
        "users": args.users,
    }, opts);
}

/**
 * A collection of arguments for invoking getMdbKafkaCluster.
 */
export interface GetMdbKafkaClusterArgs {
    /**
     * The ID of the Kafka cluster.
     */
    clusterId?: string;
    /**
     * Configuration of the Kafka cluster.
     */
    config?: inputs.GetMdbKafkaClusterConfig;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: boolean;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * The resource name.
     */
    name?: string;
    /**
     * The list of VPC subnets identifiers which resource is attached.
     */
    subnetIds?: string[];
    /**
     * List of kafka topics.
     *
     * @deprecated to manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic
     */
    topics?: inputs.GetMdbKafkaClusterTopic[];
    /**
     * List of kafka users.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_kafka_user
     */
    users?: inputs.GetMdbKafkaClusterUser[];
}

/**
 * A collection of values returned by getMdbKafkaCluster.
 */
export interface GetMdbKafkaClusterResult {
    /**
     * The ID of the Kafka cluster.
     */
    readonly clusterId: string;
    /**
     * Configuration of the Kafka cluster.
     */
    readonly config?: outputs.GetMdbKafkaClusterConfig;
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    readonly deletionProtection: boolean;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * Deployment environment of the Kafka cluster. Can be either `PRESTABLE` or `PRODUCTION`. The default is `PRODUCTION`.
     */
    readonly environment: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    /**
     * Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-kafka/api-ref/Cluster/).
     */
    readonly health: string;
    /**
     * A list of IDs of the host groups to place VMs of the cluster on.
     */
    readonly hostGroupIds: string[];
    /**
     * A host of the Kafka cluster.
     */
    readonly hosts: outputs.GetMdbKafkaClusterHost[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * Maintenance policy of the Kafka cluster.
     */
    readonly maintenanceWindows: outputs.GetMdbKafkaClusterMaintenanceWindow[];
    /**
     * The resource name.
     */
    readonly name: string;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    readonly networkId: string;
    /**
     * The list of security groups applied to resource or their components.
     */
    readonly securityGroupIds: string[];
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-kafka/api-ref/Cluster/).
     */
    readonly status: string;
    /**
     * The list of VPC subnets identifiers which resource is attached.
     */
    readonly subnetIds?: string[];
    /**
     * List of kafka topics.
     *
     * @deprecated to manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic
     */
    readonly topics?: outputs.GetMdbKafkaClusterTopic[];
    /**
     * List of kafka users.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_kafka_user
     */
    readonly users?: outputs.GetMdbKafkaClusterUser[];
}
/**
 * Get information about a Yandex Managed Kafka cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-kafka/concepts).
 *
 * > Either `clusterId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myCluster = yandex.getMdbKafkaCluster({
 *     name: "test",
 * });
 * export const networkId = myCluster.then(myCluster => myCluster.networkId);
 * ```
 */
export function getMdbKafkaClusterOutput(args?: GetMdbKafkaClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMdbKafkaClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getMdbKafkaCluster:getMdbKafkaCluster", {
        "clusterId": args.clusterId,
        "config": args.config,
        "deletionProtection": args.deletionProtection,
        "folderId": args.folderId,
        "name": args.name,
        "subnetIds": args.subnetIds,
        "topics": args.topics,
        "users": args.users,
    }, opts);
}

/**
 * A collection of arguments for invoking getMdbKafkaCluster.
 */
export interface GetMdbKafkaClusterOutputArgs {
    /**
     * The ID of the Kafka cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Configuration of the Kafka cluster.
     */
    config?: pulumi.Input<inputs.GetMdbKafkaClusterConfigArgs>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The list of VPC subnets identifiers which resource is attached.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of kafka topics.
     *
     * @deprecated to manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic
     */
    topics?: pulumi.Input<pulumi.Input<inputs.GetMdbKafkaClusterTopicArgs>[]>;
    /**
     * List of kafka users.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_kafka_user
     */
    users?: pulumi.Input<pulumi.Input<inputs.GetMdbKafkaClusterUserArgs>[]>;
}
