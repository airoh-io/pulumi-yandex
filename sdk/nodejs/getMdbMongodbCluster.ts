// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Managed MongoDB cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-mongodb/concepts).
 *
 * > Either `clusterId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const foo = yandex.getMdbMongodbCluster({
 *     name: "test",
 * });
 * export const networkId = foo.then(foo => foo.networkId);
 * ```
 */
export function getMdbMongodbCluster(args?: GetMdbMongodbClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetMdbMongodbClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getMdbMongodbCluster:getMdbMongodbCluster", {
        "clusterConfig": args.clusterConfig,
        "clusterId": args.clusterId,
        "createdAt": args.createdAt,
        "databases": args.databases,
        "deletionProtection": args.deletionProtection,
        "description": args.description,
        "diskEncryptionKeyId": args.diskEncryptionKeyId,
        "diskSizeAutoscalingMongocfg": args.diskSizeAutoscalingMongocfg,
        "diskSizeAutoscalingMongod": args.diskSizeAutoscalingMongod,
        "diskSizeAutoscalingMongoinfra": args.diskSizeAutoscalingMongoinfra,
        "diskSizeAutoscalingMongos": args.diskSizeAutoscalingMongos,
        "environment": args.environment,
        "folderId": args.folderId,
        "health": args.health,
        "hosts": args.hosts,
        "labels": args.labels,
        "maintenanceWindow": args.maintenanceWindow,
        "name": args.name,
        "networkId": args.networkId,
        "resources": args.resources,
        "resourcesMongocfg": args.resourcesMongocfg,
        "resourcesMongod": args.resourcesMongod,
        "resourcesMongoinfra": args.resourcesMongoinfra,
        "resourcesMongos": args.resourcesMongos,
        "restore": args.restore,
        "securityGroupIds": args.securityGroupIds,
        "sharded": args.sharded,
        "status": args.status,
        "users": args.users,
    }, opts);
}

/**
 * A collection of arguments for invoking getMdbMongodbCluster.
 */
export interface GetMdbMongodbClusterArgs {
    /**
     * Configuration of the MongoDB subcluster.
     */
    clusterConfig?: inputs.GetMdbMongodbClusterClusterConfig;
    /**
     * The ID of the cluster.
     */
    clusterId?: string;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: string;
    /**
     * A database of the MongoDB cluster.
     *
     * @deprecated to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database
     */
    databases?: inputs.GetMdbMongodbClusterDatabase[];
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: boolean;
    /**
     * The resource description.
     */
    description?: string;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    diskEncryptionKeyId?: string;
    /**
     * Disk size autoscaling settings for mongocfg.
     */
    diskSizeAutoscalingMongocfg?: inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongocfg;
    /**
     * Disk size autoscaling settings for mongod.
     */
    diskSizeAutoscalingMongod?: inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongod;
    /**
     * Disk size autoscaling settings for mongoinfra.
     */
    diskSizeAutoscalingMongoinfra?: inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongoinfra;
    /**
     * Disk size autoscaling settings for mongos.
     */
    diskSizeAutoscalingMongos?: inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongos;
    /**
     * Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    environment?: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
     */
    health?: string;
    /**
     * A host of the MongoDB cluster.
     */
    hosts?: inputs.GetMdbMongodbClusterHost[];
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: {[key: string]: string};
    /**
     * Maintenance window settings of the MongoDB cluster.
     */
    maintenanceWindow?: inputs.GetMdbMongodbClusterMaintenanceWindow;
    /**
     * The resource name.
     */
    name?: string;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId?: string;
    /**
     * (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
     *
     * @deprecated to manage `resources`s, please switch to using a separate resource type `resources_mongo*`
     */
    resources?: inputs.GetMdbMongodbClusterResources;
    /**
     * Resources allocated to `mongocfg` hosts of the MongoDB cluster.
     */
    resourcesMongocfg?: inputs.GetMdbMongodbClusterResourcesMongocfg;
    /**
     * Resources allocated to `mongod` hosts of the MongoDB cluster.
     */
    resourcesMongod?: inputs.GetMdbMongodbClusterResourcesMongod;
    /**
     * Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
     */
    resourcesMongoinfra?: inputs.GetMdbMongodbClusterResourcesMongoinfra;
    /**
     * Resources allocated to `mongos` hosts of the MongoDB cluster.
     */
    resourcesMongos?: inputs.GetMdbMongodbClusterResourcesMongos;
    /**
     * The cluster will be created from the specified backup.
     */
    restore?: inputs.GetMdbMongodbClusterRestore;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: string[];
    /**
     * MongoDB Cluster mode enabled/disabled.
     */
    sharded?: boolean;
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
     */
    status?: string;
    /**
     * A user of the MongoDB cluster.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user
     */
    users?: inputs.GetMdbMongodbClusterUser[];
}

/**
 * A collection of values returned by getMdbMongodbCluster.
 */
export interface GetMdbMongodbClusterResult {
    /**
     * Configuration of the MongoDB subcluster.
     */
    readonly clusterConfig?: outputs.GetMdbMongodbClusterClusterConfig;
    /**
     * The ID of the cluster.
     */
    readonly clusterId: string;
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * A database of the MongoDB cluster.
     *
     * @deprecated to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database
     */
    readonly databases: outputs.GetMdbMongodbClusterDatabase[];
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    readonly deletionProtection: boolean;
    /**
     * The resource description.
     */
    readonly description?: string;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    readonly diskEncryptionKeyId: string;
    /**
     * Disk size autoscaling settings for mongocfg.
     */
    readonly diskSizeAutoscalingMongocfg: outputs.GetMdbMongodbClusterDiskSizeAutoscalingMongocfg;
    /**
     * Disk size autoscaling settings for mongod.
     */
    readonly diskSizeAutoscalingMongod: outputs.GetMdbMongodbClusterDiskSizeAutoscalingMongod;
    /**
     * Disk size autoscaling settings for mongoinfra.
     */
    readonly diskSizeAutoscalingMongoinfra: outputs.GetMdbMongodbClusterDiskSizeAutoscalingMongoinfra;
    /**
     * Disk size autoscaling settings for mongos.
     */
    readonly diskSizeAutoscalingMongos: outputs.GetMdbMongodbClusterDiskSizeAutoscalingMongos;
    /**
     * Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    readonly environment?: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    /**
     * Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
     */
    readonly health: string;
    /**
     * A host of the MongoDB cluster.
     */
    readonly hosts?: outputs.GetMdbMongodbClusterHost[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * Maintenance window settings of the MongoDB cluster.
     */
    readonly maintenanceWindow: outputs.GetMdbMongodbClusterMaintenanceWindow;
    /**
     * The resource name.
     */
    readonly name?: string;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    readonly networkId?: string;
    /**
     * (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
     *
     * @deprecated to manage `resources`s, please switch to using a separate resource type `resources_mongo*`
     */
    readonly resources?: outputs.GetMdbMongodbClusterResources;
    /**
     * Resources allocated to `mongocfg` hosts of the MongoDB cluster.
     */
    readonly resourcesMongocfg?: outputs.GetMdbMongodbClusterResourcesMongocfg;
    /**
     * Resources allocated to `mongod` hosts of the MongoDB cluster.
     */
    readonly resourcesMongod?: outputs.GetMdbMongodbClusterResourcesMongod;
    /**
     * Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
     */
    readonly resourcesMongoinfra?: outputs.GetMdbMongodbClusterResourcesMongoinfra;
    /**
     * Resources allocated to `mongos` hosts of the MongoDB cluster.
     */
    readonly resourcesMongos?: outputs.GetMdbMongodbClusterResourcesMongos;
    /**
     * The cluster will be created from the specified backup.
     */
    readonly restore?: outputs.GetMdbMongodbClusterRestore;
    /**
     * The list of security groups applied to resource or their components.
     */
    readonly securityGroupIds?: string[];
    /**
     * MongoDB Cluster mode enabled/disabled.
     */
    readonly sharded: boolean;
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
     */
    readonly status: string;
    /**
     * A user of the MongoDB cluster.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user
     */
    readonly users: outputs.GetMdbMongodbClusterUser[];
}
/**
 * Get information about a Yandex Managed MongoDB cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-mongodb/concepts).
 *
 * > Either `clusterId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const foo = yandex.getMdbMongodbCluster({
 *     name: "test",
 * });
 * export const networkId = foo.then(foo => foo.networkId);
 * ```
 */
export function getMdbMongodbClusterOutput(args?: GetMdbMongodbClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMdbMongodbClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getMdbMongodbCluster:getMdbMongodbCluster", {
        "clusterConfig": args.clusterConfig,
        "clusterId": args.clusterId,
        "createdAt": args.createdAt,
        "databases": args.databases,
        "deletionProtection": args.deletionProtection,
        "description": args.description,
        "diskEncryptionKeyId": args.diskEncryptionKeyId,
        "diskSizeAutoscalingMongocfg": args.diskSizeAutoscalingMongocfg,
        "diskSizeAutoscalingMongod": args.diskSizeAutoscalingMongod,
        "diskSizeAutoscalingMongoinfra": args.diskSizeAutoscalingMongoinfra,
        "diskSizeAutoscalingMongos": args.diskSizeAutoscalingMongos,
        "environment": args.environment,
        "folderId": args.folderId,
        "health": args.health,
        "hosts": args.hosts,
        "labels": args.labels,
        "maintenanceWindow": args.maintenanceWindow,
        "name": args.name,
        "networkId": args.networkId,
        "resources": args.resources,
        "resourcesMongocfg": args.resourcesMongocfg,
        "resourcesMongod": args.resourcesMongod,
        "resourcesMongoinfra": args.resourcesMongoinfra,
        "resourcesMongos": args.resourcesMongos,
        "restore": args.restore,
        "securityGroupIds": args.securityGroupIds,
        "sharded": args.sharded,
        "status": args.status,
        "users": args.users,
    }, opts);
}

/**
 * A collection of arguments for invoking getMdbMongodbCluster.
 */
export interface GetMdbMongodbClusterOutputArgs {
    /**
     * Configuration of the MongoDB subcluster.
     */
    clusterConfig?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigArgs>;
    /**
     * The ID of the cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A database of the MongoDB cluster.
     *
     * @deprecated to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database
     */
    databases?: pulumi.Input<pulumi.Input<inputs.GetMdbMongodbClusterDatabaseArgs>[]>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    diskEncryptionKeyId?: pulumi.Input<string>;
    /**
     * Disk size autoscaling settings for mongocfg.
     */
    diskSizeAutoscalingMongocfg?: pulumi.Input<inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongocfgArgs>;
    /**
     * Disk size autoscaling settings for mongod.
     */
    diskSizeAutoscalingMongod?: pulumi.Input<inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongodArgs>;
    /**
     * Disk size autoscaling settings for mongoinfra.
     */
    diskSizeAutoscalingMongoinfra?: pulumi.Input<inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongoinfraArgs>;
    /**
     * Disk size autoscaling settings for mongos.
     */
    diskSizeAutoscalingMongos?: pulumi.Input<inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongosArgs>;
    /**
     * Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    environment?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
     */
    health?: pulumi.Input<string>;
    /**
     * A host of the MongoDB cluster.
     */
    hosts?: pulumi.Input<pulumi.Input<inputs.GetMdbMongodbClusterHostArgs>[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maintenance window settings of the MongoDB cluster.
     */
    maintenanceWindow?: pulumi.Input<inputs.GetMdbMongodbClusterMaintenanceWindowArgs>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId?: pulumi.Input<string>;
    /**
     * (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
     *
     * @deprecated to manage `resources`s, please switch to using a separate resource type `resources_mongo*`
     */
    resources?: pulumi.Input<inputs.GetMdbMongodbClusterResourcesArgs>;
    /**
     * Resources allocated to `mongocfg` hosts of the MongoDB cluster.
     */
    resourcesMongocfg?: pulumi.Input<inputs.GetMdbMongodbClusterResourcesMongocfgArgs>;
    /**
     * Resources allocated to `mongod` hosts of the MongoDB cluster.
     */
    resourcesMongod?: pulumi.Input<inputs.GetMdbMongodbClusterResourcesMongodArgs>;
    /**
     * Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
     */
    resourcesMongoinfra?: pulumi.Input<inputs.GetMdbMongodbClusterResourcesMongoinfraArgs>;
    /**
     * Resources allocated to `mongos` hosts of the MongoDB cluster.
     */
    resourcesMongos?: pulumi.Input<inputs.GetMdbMongodbClusterResourcesMongosArgs>;
    /**
     * The cluster will be created from the specified backup.
     */
    restore?: pulumi.Input<inputs.GetMdbMongodbClusterRestoreArgs>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * MongoDB Cluster mode enabled/disabled.
     */
    sharded?: pulumi.Input<boolean>;
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
     */
    status?: pulumi.Input<string>;
    /**
     * A user of the MongoDB cluster.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user
     */
    users?: pulumi.Input<pulumi.Input<inputs.GetMdbMongodbClusterUserArgs>[]>;
}
