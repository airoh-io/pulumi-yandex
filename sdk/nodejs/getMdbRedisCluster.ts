// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Managed Redis cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-redis/concepts).
 *
 * > Either `clusterId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const foo = yandex.getMdbRedisCluster({
 *     name: "test",
 * });
 * export const networkId = foo.then(foo => foo.networkId);
 * ```
 */
export function getMdbRedisCluster(args?: GetMdbRedisClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetMdbRedisClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getMdbRedisCluster:getMdbRedisCluster", {
        "clusterId": args.clusterId,
        "deletionProtection": args.deletionProtection,
        "diskEncryptionKeyId": args.diskEncryptionKeyId,
        "folderId": args.folderId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getMdbRedisCluster.
 */
export interface GetMdbRedisClusterArgs {
    /**
     * The ID of the Redis cluster.
     */
    clusterId?: string;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: boolean;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    diskEncryptionKeyId?: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * The name of the Redis cluster.
     */
    name?: string;
}

/**
 * A collection of values returned by getMdbRedisCluster.
 */
export interface GetMdbRedisClusterResult {
    /**
     * Announce fqdn instead of ip address.
     */
    readonly announceHostnames: boolean;
    /**
     * Allows to use ACL users to auth in sentinel
     */
    readonly authSentinel: boolean;
    /**
     * The ID of the Redis cluster.
     */
    readonly clusterId: string;
    /**
     * Configuration of the Redis cluster.
     */
    readonly configs: outputs.GetMdbRedisClusterConfig[];
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    readonly deletionProtection: boolean;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    readonly diskEncryptionKeyId: string;
    /**
     * Disk size autoscaling settings.
     */
    readonly diskSizeAutoscalings: outputs.GetMdbRedisClusterDiskSizeAutoscaling[];
    /**
     * Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    readonly environment: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    /**
     * Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
     */
    readonly health: string;
    /**
     * A host of the Redis cluster.
     */
    readonly hosts: outputs.GetMdbRedisClusterHost[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * Maintenance window settings.
     */
    readonly maintenanceWindows: outputs.GetMdbRedisClusterMaintenanceWindow[];
    /**
     * The name of the Redis cluster.
     */
    readonly name: string;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    readonly networkId: string;
    /**
     * Persistence mode. Possible values: `ON`, `OFF`.
     */
    readonly persistenceMode: string;
    /**
     * Resources allocated to hosts of the Redis cluster.
     */
    readonly resources: outputs.GetMdbRedisClusterResource[];
    /**
     * The list of security groups applied to resource or their components.
     */
    readonly securityGroupIds: string[];
    /**
     * Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not allowed.
     */
    readonly sharded: boolean;
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
     */
    readonly status: string;
    /**
     * TLS support mode enabled/disabled.
     */
    readonly tlsEnabled: boolean;
}
/**
 * Get information about a Yandex Managed Redis cluster. For more information, see [the official documentation](https://yandex.cloud/docs/managed-redis/concepts).
 *
 * > Either `clusterId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const foo = yandex.getMdbRedisCluster({
 *     name: "test",
 * });
 * export const networkId = foo.then(foo => foo.networkId);
 * ```
 */
export function getMdbRedisClusterOutput(args?: GetMdbRedisClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMdbRedisClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getMdbRedisCluster:getMdbRedisCluster", {
        "clusterId": args.clusterId,
        "deletionProtection": args.deletionProtection,
        "diskEncryptionKeyId": args.diskEncryptionKeyId,
        "folderId": args.folderId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getMdbRedisCluster.
 */
export interface GetMdbRedisClusterOutputArgs {
    /**
     * The ID of the Redis cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    diskEncryptionKeyId?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The name of the Redis cluster.
     */
    name?: pulumi.Input<string>;
}
