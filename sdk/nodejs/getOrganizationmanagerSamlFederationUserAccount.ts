// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * export = async () => {
 *     const account = await yandex.getOrganizationmanagerSamlFederationUserAccount({
 *         federationId: "some_federation_id",
 *         nameId: "example@example.org",
 *     });
 *     return {
 *         "myFederation.id": account.id,
 *     };
 * }
 * ```
 */
export function getOrganizationmanagerSamlFederationUserAccount(args: GetOrganizationmanagerSamlFederationUserAccountArgs, opts?: pulumi.InvokeOptions): Promise<GetOrganizationmanagerSamlFederationUserAccountResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getOrganizationmanagerSamlFederationUserAccount:getOrganizationmanagerSamlFederationUserAccount", {
        "federationId": args.federationId,
        "nameId": args.nameId,
    }, opts);
}

/**
 * A collection of arguments for invoking getOrganizationmanagerSamlFederationUserAccount.
 */
export interface GetOrganizationmanagerSamlFederationUserAccountArgs {
    /**
     * ID of a SAML Federation.
     */
    federationId: string;
    /**
     * Name ID of the SAML federated user.
     */
    nameId: string;
}

/**
 * A collection of values returned by getOrganizationmanagerSamlFederationUserAccount.
 */
export interface GetOrganizationmanagerSamlFederationUserAccountResult {
    /**
     * ID of a SAML Federation.
     */
    readonly federationId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Name ID of the SAML federated user.
     */
    readonly nameId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * export = async () => {
 *     const account = await yandex.getOrganizationmanagerSamlFederationUserAccount({
 *         federationId: "some_federation_id",
 *         nameId: "example@example.org",
 *     });
 *     return {
 *         "myFederation.id": account.id,
 *     };
 * }
 * ```
 */
export function getOrganizationmanagerSamlFederationUserAccountOutput(args: GetOrganizationmanagerSamlFederationUserAccountOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetOrganizationmanagerSamlFederationUserAccountResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getOrganizationmanagerSamlFederationUserAccount:getOrganizationmanagerSamlFederationUserAccount", {
        "federationId": args.federationId,
        "nameId": args.nameId,
    }, opts);
}

/**
 * A collection of arguments for invoking getOrganizationmanagerSamlFederationUserAccount.
 */
export interface GetOrganizationmanagerSamlFederationUserAccountOutputArgs {
    /**
     * ID of a SAML Federation.
     */
    federationId: pulumi.Input<string>;
    /**
     * Name ID of the SAML federated user.
     */
    nameId: pulumi.Input<string>;
}
