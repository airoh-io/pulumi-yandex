// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Cloud Serverless Container. This data source is used to define Yandex Cloud Container that can be used by other resources.
 *
 * > Either `containerId` or `name` must be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * const my_container = yandex.getServerlessContainer({
 *     containerId: "are1samplecontainer11",
 * });
 * ```
 */
export function getServerlessContainer(args?: GetServerlessContainerArgs, opts?: pulumi.InvokeOptions): Promise<GetServerlessContainerResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getServerlessContainer:getServerlessContainer", {
        "connectivity": args.connectivity,
        "containerId": args.containerId,
        "folderId": args.folderId,
        "metadataOptions": args.metadataOptions,
        "mounts": args.mounts,
        "name": args.name,
        "runtime": args.runtime,
        "secrets": args.secrets,
        "storageMounts": args.storageMounts,
    }, opts);
}

/**
 * A collection of arguments for invoking getServerlessContainer.
 */
export interface GetServerlessContainerArgs {
    connectivity?: inputs.GetServerlessContainerConnectivity;
    /**
     * Yandex Cloud Serverless Container ID used to define container.
     */
    containerId?: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    metadataOptions?: inputs.GetServerlessContainerMetadataOptions;
    mounts?: inputs.GetServerlessContainerMount[];
    /**
     * The resource name.
     */
    name?: string;
    runtime?: inputs.GetServerlessContainerRuntime;
    secrets?: inputs.GetServerlessContainerSecret[];
    /**
     * @deprecated to manage storage_mountss, please switch to using a separate resource type mounts
     */
    storageMounts?: inputs.GetServerlessContainerStorageMount[];
}

/**
 * A collection of values returned by getServerlessContainer.
 */
export interface GetServerlessContainerResult {
    readonly asyncInvocations: outputs.GetServerlessContainerAsyncInvocation[];
    /**
     * Concurrency of Yandex Cloud Serverless Container.
     */
    readonly concurrency: number;
    readonly connectivity?: outputs.GetServerlessContainerConnectivity;
    /**
     * Yandex Cloud Serverless Container ID used to define container.
     */
    readonly containerId?: string;
    /**
     * Core fraction (**0...100**) of the Yandex Cloud Serverless Container.
     */
    readonly coreFraction: number;
    /**
     * Cores (**1+**) of the Yandex Cloud Serverless Container.
     */
    readonly cores: number;
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * Execution timeout in seconds (**duration format**) for Yandex Cloud Serverless Container.
     */
    readonly executionTimeout: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly images: outputs.GetServerlessContainerImage[];
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    readonly logOptions: outputs.GetServerlessContainerLogOption[];
    /**
     * Memory in megabytes (**aligned to 128 MB**).
     */
    readonly memory: number;
    readonly metadataOptions: outputs.GetServerlessContainerMetadataOptions;
    readonly mounts: outputs.GetServerlessContainerMount[];
    /**
     * The resource name.
     */
    readonly name?: string;
    /**
     * Last revision ID of the Yandex Cloud Serverless Container.
     */
    readonly revisionId: string;
    readonly runtime: outputs.GetServerlessContainerRuntime;
    readonly secrets: outputs.GetServerlessContainerSecret[];
    /**
     * [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
     */
    readonly serviceAccountId: string;
    /**
     * @deprecated to manage storage_mountss, please switch to using a separate resource type mounts
     */
    readonly storageMounts: outputs.GetServerlessContainerStorageMount[];
    /**
     * Invoke URL for the Yandex Cloud Serverless Container.
     */
    readonly url: string;
}
/**
 * Get information about a Yandex Cloud Serverless Container. This data source is used to define Yandex Cloud Container that can be used by other resources.
 *
 * > Either `containerId` or `name` must be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * const my_container = yandex.getServerlessContainer({
 *     containerId: "are1samplecontainer11",
 * });
 * ```
 */
export function getServerlessContainerOutput(args?: GetServerlessContainerOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetServerlessContainerResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getServerlessContainer:getServerlessContainer", {
        "connectivity": args.connectivity,
        "containerId": args.containerId,
        "folderId": args.folderId,
        "metadataOptions": args.metadataOptions,
        "mounts": args.mounts,
        "name": args.name,
        "runtime": args.runtime,
        "secrets": args.secrets,
        "storageMounts": args.storageMounts,
    }, opts);
}

/**
 * A collection of arguments for invoking getServerlessContainer.
 */
export interface GetServerlessContainerOutputArgs {
    connectivity?: pulumi.Input<inputs.GetServerlessContainerConnectivityArgs>;
    /**
     * Yandex Cloud Serverless Container ID used to define container.
     */
    containerId?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    metadataOptions?: pulumi.Input<inputs.GetServerlessContainerMetadataOptionsArgs>;
    mounts?: pulumi.Input<pulumi.Input<inputs.GetServerlessContainerMountArgs>[]>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    runtime?: pulumi.Input<inputs.GetServerlessContainerRuntimeArgs>;
    secrets?: pulumi.Input<pulumi.Input<inputs.GetServerlessContainerSecretArgs>[]>;
    /**
     * @deprecated to manage storage_mountss, please switch to using a separate resource type mounts
     */
    storageMounts?: pulumi.Input<pulumi.Input<inputs.GetServerlessContainerStorageMountArgs>[]>;
}
