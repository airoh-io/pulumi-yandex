// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about Yandex SmartCaptcha. For more information, see [the official documentation](https://yandex.cloud/docs/smartcaptcha/).This data source is used to define Captcha that can be used by other resources.
 *
 * > One of `captchaId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const by_id = yandex.getSmartcaptchaCaptcha({
 *     captchaId: yandex_smartcaptcha_captcha["my-captcha"].id,
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const by_name = yandex.getSmartcaptchaCaptcha({
 *     name: yandex_smartcaptcha_captcha["my-captcha"].name,
 * });
 * ```
 */
export function getSmartcaptchaCaptcha(args?: GetSmartcaptchaCaptchaArgs, opts?: pulumi.InvokeOptions): Promise<GetSmartcaptchaCaptchaResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getSmartcaptchaCaptcha:getSmartcaptchaCaptcha", {
        "captchaId": args.captchaId,
        "cloudId": args.cloudId,
        "folderId": args.folderId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getSmartcaptchaCaptcha.
 */
export interface GetSmartcaptchaCaptchaArgs {
    /**
     * ID of the Captcha.
     */
    captchaId?: string;
    /**
     * The `Cloud ID` which resource belongs to. If it is not provided, the default provider `cloud-id` is used.
     */
    cloudId?: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * The resource name.
     */
    name?: string;
}

/**
 * A collection of values returned by getSmartcaptchaCaptcha.
 */
export interface GetSmartcaptchaCaptchaResult {
    /**
     * List of allowed host names, see [Domain validation](https://yandex.cloud/docs/smartcaptcha/concepts/domain-validation).
     */
    readonly allowedSites: string[];
    /**
     * ID of the Captcha.
     */
    readonly captchaId?: string;
    /**
     * Additional task type of the captcha. Possible values:
     */
    readonly challengeType: string;
    /**
     * Client key of the captcha, see [CAPTCHA keys](https://yandex.cloud/docs/smartcaptcha/concepts/keys).
     */
    readonly clientKey: string;
    /**
     * The `Cloud ID` which resource belongs to. If it is not provided, the default provider `cloud-id` is used.
     */
    readonly cloudId: string;
    /**
     * Complexity of the captcha. Possible values:
     */
    readonly complexity: string;
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    readonly deletionProtection: boolean;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The resource name.
     */
    readonly name: string;
    readonly overrideVariants: outputs.GetSmartcaptchaCaptchaOverrideVariant[];
    /**
     * Basic check type of the captcha.Possible values:
     */
    readonly preCheckType: string;
    readonly securityRules: outputs.GetSmartcaptchaCaptchaSecurityRule[];
    /**
     * JSON with variables to define the captcha appearance. For more details see generated JSON in cloud console.
     */
    readonly styleJson: string;
    readonly suspend: boolean;
    /**
     * Turn off host name check, see [Domain validation](https://yandex.cloud/docs/smartcaptcha/concepts/domain-validation).
     */
    readonly turnOffHostnameCheck: boolean;
}
/**
 * Get information about Yandex SmartCaptcha. For more information, see [the official documentation](https://yandex.cloud/docs/smartcaptcha/).This data source is used to define Captcha that can be used by other resources.
 *
 * > One of `captchaId` or `name` should be specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const by_id = yandex.getSmartcaptchaCaptcha({
 *     captchaId: yandex_smartcaptcha_captcha["my-captcha"].id,
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const by_name = yandex.getSmartcaptchaCaptcha({
 *     name: yandex_smartcaptcha_captcha["my-captcha"].name,
 * });
 * ```
 */
export function getSmartcaptchaCaptchaOutput(args?: GetSmartcaptchaCaptchaOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSmartcaptchaCaptchaResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getSmartcaptchaCaptcha:getSmartcaptchaCaptcha", {
        "captchaId": args.captchaId,
        "cloudId": args.cloudId,
        "folderId": args.folderId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getSmartcaptchaCaptcha.
 */
export interface GetSmartcaptchaCaptchaOutputArgs {
    /**
     * ID of the Captcha.
     */
    captchaId?: pulumi.Input<string>;
    /**
     * The `Cloud ID` which resource belongs to. If it is not provided, the default provider `cloud-id` is used.
     */
    cloudId?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
}
