// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Database serverless cluster. For more information, see [the official documentation](https://yandex.cloud/docs/ydb/concepts/serverless_and_dedicated).
 *
 * > If `databaseId` is not specified `name` and `folderId` will be used to designate Yandex Database serverless cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myDatabase = yandex.getYdbDatabaseServerless({
 *     databaseId: "some_ydb_serverless_database_id",
 * });
 * export const ydbApiEndpoint = myDatabase.then(myDatabase => myDatabase.ydbApiEndpoint);
 * ```
 */
export function getYdbDatabaseServerless(args?: GetYdbDatabaseServerlessArgs, opts?: pulumi.InvokeOptions): Promise<GetYdbDatabaseServerlessResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getYdbDatabaseServerless:getYdbDatabaseServerless", {
        "databaseId": args.databaseId,
        "deletionProtection": args.deletionProtection,
        "folderId": args.folderId,
        "name": args.name,
        "serverlessDatabases": args.serverlessDatabases,
    }, opts);
}

/**
 * A collection of arguments for invoking getYdbDatabaseServerless.
 */
export interface GetYdbDatabaseServerlessArgs {
    /**
     * ID of the Yandex Database serverless cluster.
     */
    databaseId?: string;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: boolean;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: string;
    /**
     * The resource name.
     */
    name?: string;
    serverlessDatabases?: inputs.GetYdbDatabaseServerlessServerlessDatabase[];
}

/**
 * A collection of values returned by getYdbDatabaseServerless.
 */
export interface GetYdbDatabaseServerlessResult {
    /**
     * The creation timestamp of the resource.
     */
    readonly createdAt: string;
    /**
     * ID of the Yandex Database serverless cluster.
     */
    readonly databaseId?: string;
    /**
     * Full database path of the Yandex Database serverless cluster. Useful for SDK configuration.
     */
    readonly databasePath: string;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    readonly deletionProtection: boolean;
    /**
     * The resource description.
     */
    readonly description: string;
    /**
     * Document API endpoint of the Yandex Database serverless cluster.
     */
    readonly documentApiEndpoint: string;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    readonly folderId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * Location ID for the Yandex Database serverless cluster.
     */
    readonly locationId: string;
    /**
     * The resource name.
     */
    readonly name?: string;
    readonly serverlessDatabases: outputs.GetYdbDatabaseServerlessServerlessDatabase[];
    /**
     * Status of the Yandex Database serverless cluster.
     */
    readonly status: string;
    /**
     * Whether TLS is enabled for the Yandex Database serverless cluster. Useful for SDK configuration.
     */
    readonly tlsEnabled: boolean;
    /**
     * API endpoint of the Yandex Database serverless cluster. Useful for SDK configuration.
     */
    readonly ydbApiEndpoint: string;
    /**
     * Full endpoint of the Yandex Database serverless cluster.
     */
    readonly ydbFullEndpoint: string;
}
/**
 * Get information about a Yandex Database serverless cluster. For more information, see [the official documentation](https://yandex.cloud/docs/ydb/concepts/serverless_and_dedicated).
 *
 * > If `databaseId` is not specified `name` and `folderId` will be used to designate Yandex Database serverless cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const myDatabase = yandex.getYdbDatabaseServerless({
 *     databaseId: "some_ydb_serverless_database_id",
 * });
 * export const ydbApiEndpoint = myDatabase.then(myDatabase => myDatabase.ydbApiEndpoint);
 * ```
 */
export function getYdbDatabaseServerlessOutput(args?: GetYdbDatabaseServerlessOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetYdbDatabaseServerlessResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getYdbDatabaseServerless:getYdbDatabaseServerless", {
        "databaseId": args.databaseId,
        "deletionProtection": args.deletionProtection,
        "folderId": args.folderId,
        "name": args.name,
        "serverlessDatabases": args.serverlessDatabases,
    }, opts);
}

/**
 * A collection of arguments for invoking getYdbDatabaseServerless.
 */
export interface GetYdbDatabaseServerlessOutputArgs {
    /**
     * ID of the Yandex Database serverless cluster.
     */
    databaseId?: pulumi.Input<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    serverlessDatabases?: pulumi.Input<pulumi.Input<inputs.GetYdbDatabaseServerlessServerlessDatabaseArgs>[]>;
}
