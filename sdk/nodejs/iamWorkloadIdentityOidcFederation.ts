// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Allows management of [Yandex Cloud IAM workload identity OIDC federations](https://yandex.cloud/docs/iam/concepts/workload-identity).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * //
 * // Create a new IAM Workload Identity OIDC Federation.
 * //
 * const wlif = new yandex.IamWorkloadIdentityOidcFederation("wlif", {
 *     audiences: [
 *         "aud1",
 *         "aud2",
 *     ],
 *     description: "some description",
 *     disabled: false,
 *     folderId: "some_folder_id",
 *     issuer: "https://example-issuer.com",
 *     jwksUrl: "https://example-issuer.com/jwks",
 *     labels: {
 *         key1: "value1",
 *         key2: "value2",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * ```sh
 * $ pulumi import yandex:index/iamWorkloadIdentityOidcFederation:IamWorkloadIdentityOidcFederation <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/iamWorkloadIdentityOidcFederation:IamWorkloadIdentityOidcFederation wlif ...
 * ```
 */
export class IamWorkloadIdentityOidcFederation extends pulumi.CustomResource {
    /**
     * Get an existing IamWorkloadIdentityOidcFederation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamWorkloadIdentityOidcFederationState, opts?: pulumi.CustomResourceOptions): IamWorkloadIdentityOidcFederation {
        return new IamWorkloadIdentityOidcFederation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/iamWorkloadIdentityOidcFederation:IamWorkloadIdentityOidcFederation';

    /**
     * Returns true if the given object is an instance of IamWorkloadIdentityOidcFederation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamWorkloadIdentityOidcFederation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamWorkloadIdentityOidcFederation.__pulumiType;
    }

    /**
     * List of trusted values for aud claim.
     */
    declare public readonly audiences: pulumi.Output<string[] | undefined>;
    /**
     * Creation timestamp.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Description of the OIDC workload identity federation.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Disabled flag.
     */
    declare public readonly disabled: pulumi.Output<boolean | undefined>;
    /**
     * Enabled flag.
     */
    declare public /*out*/ readonly enabled: pulumi.Output<boolean>;
    /**
     * Id of the OIDC workload identity federation.
     */
    declare public readonly federationId: pulumi.Output<string>;
    /**
     * Id of the folder that the OIDC workload identity federation belongs to.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * Issuer identifier of the external IdP server to be used for authentication.
     */
    declare public readonly issuer: pulumi.Output<string>;
    /**
     * URL reference to trusted keys in format of JSON Web Key Set.
     */
    declare public readonly jwksUrl: pulumi.Output<string>;
    /**
     * Resource labels as key-value pairs.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the OIDC workload identity federation. The name is unique within the folder.
     */
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a IamWorkloadIdentityOidcFederation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamWorkloadIdentityOidcFederationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamWorkloadIdentityOidcFederationArgs | IamWorkloadIdentityOidcFederationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamWorkloadIdentityOidcFederationState | undefined;
            resourceInputs["audiences"] = state?.audiences;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["disabled"] = state?.disabled;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["federationId"] = state?.federationId;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["issuer"] = state?.issuer;
            resourceInputs["jwksUrl"] = state?.jwksUrl;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as IamWorkloadIdentityOidcFederationArgs | undefined;
            if (args?.issuer === undefined && !opts.urn) {
                throw new Error("Missing required property 'issuer'");
            }
            if (args?.jwksUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'jwksUrl'");
            }
            resourceInputs["audiences"] = args?.audiences;
            resourceInputs["description"] = args?.description;
            resourceInputs["disabled"] = args?.disabled;
            resourceInputs["federationId"] = args?.federationId;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["issuer"] = args?.issuer;
            resourceInputs["jwksUrl"] = args?.jwksUrl;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamWorkloadIdentityOidcFederation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamWorkloadIdentityOidcFederation resources.
 */
export interface IamWorkloadIdentityOidcFederationState {
    /**
     * List of trusted values for aud claim.
     */
    audiences?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Creation timestamp.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the OIDC workload identity federation.
     */
    description?: pulumi.Input<string>;
    /**
     * Disabled flag.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Enabled flag.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Id of the OIDC workload identity federation.
     */
    federationId?: pulumi.Input<string>;
    /**
     * Id of the folder that the OIDC workload identity federation belongs to.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Issuer identifier of the external IdP server to be used for authentication.
     */
    issuer?: pulumi.Input<string>;
    /**
     * URL reference to trusted keys in format of JSON Web Key Set.
     */
    jwksUrl?: pulumi.Input<string>;
    /**
     * Resource labels as key-value pairs.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the OIDC workload identity federation. The name is unique within the folder.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamWorkloadIdentityOidcFederation resource.
 */
export interface IamWorkloadIdentityOidcFederationArgs {
    /**
     * List of trusted values for aud claim.
     */
    audiences?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the OIDC workload identity federation.
     */
    description?: pulumi.Input<string>;
    /**
     * Disabled flag.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Id of the OIDC workload identity federation.
     */
    federationId?: pulumi.Input<string>;
    /**
     * Id of the folder that the OIDC workload identity federation belongs to.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Issuer identifier of the external IdP server to be used for authentication.
     */
    issuer: pulumi.Input<string>;
    /**
     * URL reference to trusted keys in format of JSON Web Key Set.
     */
    jwksUrl: pulumi.Input<string>;
    /**
     * Resource labels as key-value pairs.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the OIDC workload identity federation. The name is unique within the folder.
     */
    name?: pulumi.Input<string>;
}
