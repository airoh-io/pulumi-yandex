// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlbBackendGroupArgs, AlbBackendGroupState } from "./albBackendGroup";
export type AlbBackendGroup = import("./albBackendGroup").AlbBackendGroup;
export const AlbBackendGroup: typeof import("./albBackendGroup").AlbBackendGroup = null as any;
utilities.lazyLoad(exports, ["AlbBackendGroup"], () => require("./albBackendGroup"));

export { AlbHttpRouterArgs, AlbHttpRouterState } from "./albHttpRouter";
export type AlbHttpRouter = import("./albHttpRouter").AlbHttpRouter;
export const AlbHttpRouter: typeof import("./albHttpRouter").AlbHttpRouter = null as any;
utilities.lazyLoad(exports, ["AlbHttpRouter"], () => require("./albHttpRouter"));

export { AlbLoadBalancerArgs, AlbLoadBalancerState } from "./albLoadBalancer";
export type AlbLoadBalancer = import("./albLoadBalancer").AlbLoadBalancer;
export const AlbLoadBalancer: typeof import("./albLoadBalancer").AlbLoadBalancer = null as any;
utilities.lazyLoad(exports, ["AlbLoadBalancer"], () => require("./albLoadBalancer"));

export { AlbTargetGroupArgs, AlbTargetGroupState } from "./albTargetGroup";
export type AlbTargetGroup = import("./albTargetGroup").AlbTargetGroup;
export const AlbTargetGroup: typeof import("./albTargetGroup").AlbTargetGroup = null as any;
utilities.lazyLoad(exports, ["AlbTargetGroup"], () => require("./albTargetGroup"));

export { AlbVirtualHostArgs, AlbVirtualHostState } from "./albVirtualHost";
export type AlbVirtualHost = import("./albVirtualHost").AlbVirtualHost;
export const AlbVirtualHost: typeof import("./albVirtualHost").AlbVirtualHost = null as any;
utilities.lazyLoad(exports, ["AlbVirtualHost"], () => require("./albVirtualHost"));

export { ApiGatewayArgs, ApiGatewayState } from "./apiGateway";
export type ApiGateway = import("./apiGateway").ApiGateway;
export const ApiGateway: typeof import("./apiGateway").ApiGateway = null as any;
utilities.lazyLoad(exports, ["ApiGateway"], () => require("./apiGateway"));

export { AuditTrailsTrailArgs, AuditTrailsTrailState } from "./auditTrailsTrail";
export type AuditTrailsTrail = import("./auditTrailsTrail").AuditTrailsTrail;
export const AuditTrailsTrail: typeof import("./auditTrailsTrail").AuditTrailsTrail = null as any;
utilities.lazyLoad(exports, ["AuditTrailsTrail"], () => require("./auditTrailsTrail"));

export { BackupPolicyArgs, BackupPolicyState } from "./backupPolicy";
export type BackupPolicy = import("./backupPolicy").BackupPolicy;
export const BackupPolicy: typeof import("./backupPolicy").BackupPolicy = null as any;
utilities.lazyLoad(exports, ["BackupPolicy"], () => require("./backupPolicy"));

export { BackupPolicyBindingsArgs, BackupPolicyBindingsState } from "./backupPolicyBindings";
export type BackupPolicyBindings = import("./backupPolicyBindings").BackupPolicyBindings;
export const BackupPolicyBindings: typeof import("./backupPolicyBindings").BackupPolicyBindings = null as any;
utilities.lazyLoad(exports, ["BackupPolicyBindings"], () => require("./backupPolicyBindings"));

export { CdnOriginGroupArgs, CdnOriginGroupState } from "./cdnOriginGroup";
export type CdnOriginGroup = import("./cdnOriginGroup").CdnOriginGroup;
export const CdnOriginGroup: typeof import("./cdnOriginGroup").CdnOriginGroup = null as any;
utilities.lazyLoad(exports, ["CdnOriginGroup"], () => require("./cdnOriginGroup"));

export { CdnResourceArgs, CdnResourceState } from "./cdnResource";
export type CdnResource = import("./cdnResource").CdnResource;
export const CdnResource: typeof import("./cdnResource").CdnResource = null as any;
utilities.lazyLoad(exports, ["CdnResource"], () => require("./cdnResource"));

export { CmCertificateArgs, CmCertificateState } from "./cmCertificate";
export type CmCertificate = import("./cmCertificate").CmCertificate;
export const CmCertificate: typeof import("./cmCertificate").CmCertificate = null as any;
utilities.lazyLoad(exports, ["CmCertificate"], () => require("./cmCertificate"));

export { ComputeDiskArgs, ComputeDiskState } from "./computeDisk";
export type ComputeDisk = import("./computeDisk").ComputeDisk;
export const ComputeDisk: typeof import("./computeDisk").ComputeDisk = null as any;
utilities.lazyLoad(exports, ["ComputeDisk"], () => require("./computeDisk"));

export { ComputeDiskPlacementGroupArgs, ComputeDiskPlacementGroupState } from "./computeDiskPlacementGroup";
export type ComputeDiskPlacementGroup = import("./computeDiskPlacementGroup").ComputeDiskPlacementGroup;
export const ComputeDiskPlacementGroup: typeof import("./computeDiskPlacementGroup").ComputeDiskPlacementGroup = null as any;
utilities.lazyLoad(exports, ["ComputeDiskPlacementGroup"], () => require("./computeDiskPlacementGroup"));

export { ComputeFilesystemArgs, ComputeFilesystemState } from "./computeFilesystem";
export type ComputeFilesystem = import("./computeFilesystem").ComputeFilesystem;
export const ComputeFilesystem: typeof import("./computeFilesystem").ComputeFilesystem = null as any;
utilities.lazyLoad(exports, ["ComputeFilesystem"], () => require("./computeFilesystem"));

export { ComputeGpuClusterArgs, ComputeGpuClusterState } from "./computeGpuCluster";
export type ComputeGpuCluster = import("./computeGpuCluster").ComputeGpuCluster;
export const ComputeGpuCluster: typeof import("./computeGpuCluster").ComputeGpuCluster = null as any;
utilities.lazyLoad(exports, ["ComputeGpuCluster"], () => require("./computeGpuCluster"));

export { ComputeImageArgs, ComputeImageState } from "./computeImage";
export type ComputeImage = import("./computeImage").ComputeImage;
export const ComputeImage: typeof import("./computeImage").ComputeImage = null as any;
utilities.lazyLoad(exports, ["ComputeImage"], () => require("./computeImage"));

export { ComputeInstanceArgs, ComputeInstanceState } from "./computeInstance";
export type ComputeInstance = import("./computeInstance").ComputeInstance;
export const ComputeInstance: typeof import("./computeInstance").ComputeInstance = null as any;
utilities.lazyLoad(exports, ["ComputeInstance"], () => require("./computeInstance"));

export { ComputeInstanceGroupArgs, ComputeInstanceGroupState } from "./computeInstanceGroup";
export type ComputeInstanceGroup = import("./computeInstanceGroup").ComputeInstanceGroup;
export const ComputeInstanceGroup: typeof import("./computeInstanceGroup").ComputeInstanceGroup = null as any;
utilities.lazyLoad(exports, ["ComputeInstanceGroup"], () => require("./computeInstanceGroup"));

export { ComputePlacementGroupArgs, ComputePlacementGroupState } from "./computePlacementGroup";
export type ComputePlacementGroup = import("./computePlacementGroup").ComputePlacementGroup;
export const ComputePlacementGroup: typeof import("./computePlacementGroup").ComputePlacementGroup = null as any;
utilities.lazyLoad(exports, ["ComputePlacementGroup"], () => require("./computePlacementGroup"));

export { ComputeSnapshotArgs, ComputeSnapshotState } from "./computeSnapshot";
export type ComputeSnapshot = import("./computeSnapshot").ComputeSnapshot;
export const ComputeSnapshot: typeof import("./computeSnapshot").ComputeSnapshot = null as any;
utilities.lazyLoad(exports, ["ComputeSnapshot"], () => require("./computeSnapshot"));

export { ComputeSnapshotScheduleArgs, ComputeSnapshotScheduleState } from "./computeSnapshotSchedule";
export type ComputeSnapshotSchedule = import("./computeSnapshotSchedule").ComputeSnapshotSchedule;
export const ComputeSnapshotSchedule: typeof import("./computeSnapshotSchedule").ComputeSnapshotSchedule = null as any;
utilities.lazyLoad(exports, ["ComputeSnapshotSchedule"], () => require("./computeSnapshotSchedule"));

export { ContainerRegistryArgs, ContainerRegistryState } from "./containerRegistry";
export type ContainerRegistry = import("./containerRegistry").ContainerRegistry;
export const ContainerRegistry: typeof import("./containerRegistry").ContainerRegistry = null as any;
utilities.lazyLoad(exports, ["ContainerRegistry"], () => require("./containerRegistry"));

export { ContainerRegistryIpPermissionArgs, ContainerRegistryIpPermissionState } from "./containerRegistryIpPermission";
export type ContainerRegistryIpPermission = import("./containerRegistryIpPermission").ContainerRegistryIpPermission;
export const ContainerRegistryIpPermission: typeof import("./containerRegistryIpPermission").ContainerRegistryIpPermission = null as any;
utilities.lazyLoad(exports, ["ContainerRegistryIpPermission"], () => require("./containerRegistryIpPermission"));

export { ContainerRepositoryArgs, ContainerRepositoryState } from "./containerRepository";
export type ContainerRepository = import("./containerRepository").ContainerRepository;
export const ContainerRepository: typeof import("./containerRepository").ContainerRepository = null as any;
utilities.lazyLoad(exports, ["ContainerRepository"], () => require("./containerRepository"));

export { ContainerRepositoryLifecyclePolicyArgs, ContainerRepositoryLifecyclePolicyState } from "./containerRepositoryLifecyclePolicy";
export type ContainerRepositoryLifecyclePolicy = import("./containerRepositoryLifecyclePolicy").ContainerRepositoryLifecyclePolicy;
export const ContainerRepositoryLifecyclePolicy: typeof import("./containerRepositoryLifecyclePolicy").ContainerRepositoryLifecyclePolicy = null as any;
utilities.lazyLoad(exports, ["ContainerRepositoryLifecyclePolicy"], () => require("./containerRepositoryLifecyclePolicy"));

export { DataprocClusterArgs, DataprocClusterState } from "./dataprocCluster";
export type DataprocCluster = import("./dataprocCluster").DataprocCluster;
export const DataprocCluster: typeof import("./dataprocCluster").DataprocCluster = null as any;
utilities.lazyLoad(exports, ["DataprocCluster"], () => require("./dataprocCluster"));

export { DatatransferEndpointArgs, DatatransferEndpointState } from "./datatransferEndpoint";
export type DatatransferEndpoint = import("./datatransferEndpoint").DatatransferEndpoint;
export const DatatransferEndpoint: typeof import("./datatransferEndpoint").DatatransferEndpoint = null as any;
utilities.lazyLoad(exports, ["DatatransferEndpoint"], () => require("./datatransferEndpoint"));

export { DatatransferTransferArgs, DatatransferTransferState } from "./datatransferTransfer";
export type DatatransferTransfer = import("./datatransferTransfer").DatatransferTransfer;
export const DatatransferTransfer: typeof import("./datatransferTransfer").DatatransferTransfer = null as any;
utilities.lazyLoad(exports, ["DatatransferTransfer"], () => require("./datatransferTransfer"));

export { DnsRecordSetArgs, DnsRecordSetState } from "./dnsRecordSet";
export type DnsRecordSet = import("./dnsRecordSet").DnsRecordSet;
export const DnsRecordSet: typeof import("./dnsRecordSet").DnsRecordSet = null as any;
utilities.lazyLoad(exports, ["DnsRecordSet"], () => require("./dnsRecordSet"));

export { DnsZoneArgs, DnsZoneState } from "./dnsZone";
export type DnsZone = import("./dnsZone").DnsZone;
export const DnsZone: typeof import("./dnsZone").DnsZone = null as any;
utilities.lazyLoad(exports, ["DnsZone"], () => require("./dnsZone"));

export { FunctionArgs, FunctionState } from "./function";
export type Function = import("./function").Function;
export const Function: typeof import("./function").Function = null as any;
utilities.lazyLoad(exports, ["Function"], () => require("./function"));

export { FunctionScalingPolicyArgs, FunctionScalingPolicyState } from "./functionScalingPolicy";
export type FunctionScalingPolicy = import("./functionScalingPolicy").FunctionScalingPolicy;
export const FunctionScalingPolicy: typeof import("./functionScalingPolicy").FunctionScalingPolicy = null as any;
utilities.lazyLoad(exports, ["FunctionScalingPolicy"], () => require("./functionScalingPolicy"));

export { FunctionTriggerArgs, FunctionTriggerState } from "./functionTrigger";
export type FunctionTrigger = import("./functionTrigger").FunctionTrigger;
export const FunctionTrigger: typeof import("./functionTrigger").FunctionTrigger = null as any;
utilities.lazyLoad(exports, ["FunctionTrigger"], () => require("./functionTrigger"));

export { GetAlbBackendGroupArgs, GetAlbBackendGroupResult, GetAlbBackendGroupOutputArgs } from "./getAlbBackendGroup";
export const getAlbBackendGroup: typeof import("./getAlbBackendGroup").getAlbBackendGroup = null as any;
export const getAlbBackendGroupOutput: typeof import("./getAlbBackendGroup").getAlbBackendGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAlbBackendGroup","getAlbBackendGroupOutput"], () => require("./getAlbBackendGroup"));

export { GetAlbHttpRouterArgs, GetAlbHttpRouterResult, GetAlbHttpRouterOutputArgs } from "./getAlbHttpRouter";
export const getAlbHttpRouter: typeof import("./getAlbHttpRouter").getAlbHttpRouter = null as any;
export const getAlbHttpRouterOutput: typeof import("./getAlbHttpRouter").getAlbHttpRouterOutput = null as any;
utilities.lazyLoad(exports, ["getAlbHttpRouter","getAlbHttpRouterOutput"], () => require("./getAlbHttpRouter"));

export { GetAlbLoadBalancerArgs, GetAlbLoadBalancerResult, GetAlbLoadBalancerOutputArgs } from "./getAlbLoadBalancer";
export const getAlbLoadBalancer: typeof import("./getAlbLoadBalancer").getAlbLoadBalancer = null as any;
export const getAlbLoadBalancerOutput: typeof import("./getAlbLoadBalancer").getAlbLoadBalancerOutput = null as any;
utilities.lazyLoad(exports, ["getAlbLoadBalancer","getAlbLoadBalancerOutput"], () => require("./getAlbLoadBalancer"));

export { GetAlbTargetGroupArgs, GetAlbTargetGroupResult, GetAlbTargetGroupOutputArgs } from "./getAlbTargetGroup";
export const getAlbTargetGroup: typeof import("./getAlbTargetGroup").getAlbTargetGroup = null as any;
export const getAlbTargetGroupOutput: typeof import("./getAlbTargetGroup").getAlbTargetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAlbTargetGroup","getAlbTargetGroupOutput"], () => require("./getAlbTargetGroup"));

export { GetAlbVirtualHostArgs, GetAlbVirtualHostResult, GetAlbVirtualHostOutputArgs } from "./getAlbVirtualHost";
export const getAlbVirtualHost: typeof import("./getAlbVirtualHost").getAlbVirtualHost = null as any;
export const getAlbVirtualHostOutput: typeof import("./getAlbVirtualHost").getAlbVirtualHostOutput = null as any;
utilities.lazyLoad(exports, ["getAlbVirtualHost","getAlbVirtualHostOutput"], () => require("./getAlbVirtualHost"));

export { GetApiGatewayArgs, GetApiGatewayResult, GetApiGatewayOutputArgs } from "./getApiGateway";
export const getApiGateway: typeof import("./getApiGateway").getApiGateway = null as any;
export const getApiGatewayOutput: typeof import("./getApiGateway").getApiGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getApiGateway","getApiGatewayOutput"], () => require("./getApiGateway"));

export { GetAuditTrailsTrailArgs, GetAuditTrailsTrailResult, GetAuditTrailsTrailOutputArgs } from "./getAuditTrailsTrail";
export const getAuditTrailsTrail: typeof import("./getAuditTrailsTrail").getAuditTrailsTrail = null as any;
export const getAuditTrailsTrailOutput: typeof import("./getAuditTrailsTrail").getAuditTrailsTrailOutput = null as any;
utilities.lazyLoad(exports, ["getAuditTrailsTrail","getAuditTrailsTrailOutput"], () => require("./getAuditTrailsTrail"));

export { GetBackupPolicyArgs, GetBackupPolicyResult, GetBackupPolicyOutputArgs } from "./getBackupPolicy";
export const getBackupPolicy: typeof import("./getBackupPolicy").getBackupPolicy = null as any;
export const getBackupPolicyOutput: typeof import("./getBackupPolicy").getBackupPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBackupPolicy","getBackupPolicyOutput"], () => require("./getBackupPolicy"));

export { GetCdnOriginGroupArgs, GetCdnOriginGroupResult, GetCdnOriginGroupOutputArgs } from "./getCdnOriginGroup";
export const getCdnOriginGroup: typeof import("./getCdnOriginGroup").getCdnOriginGroup = null as any;
export const getCdnOriginGroupOutput: typeof import("./getCdnOriginGroup").getCdnOriginGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCdnOriginGroup","getCdnOriginGroupOutput"], () => require("./getCdnOriginGroup"));

export { GetCdnResourceArgs, GetCdnResourceResult, GetCdnResourceOutputArgs } from "./getCdnResource";
export const getCdnResource: typeof import("./getCdnResource").getCdnResource = null as any;
export const getCdnResourceOutput: typeof import("./getCdnResource").getCdnResourceOutput = null as any;
utilities.lazyLoad(exports, ["getCdnResource","getCdnResourceOutput"], () => require("./getCdnResource"));

export { GetClientConfigResult } from "./getClientConfig";
export const getClientConfig: typeof import("./getClientConfig").getClientConfig = null as any;
export const getClientConfigOutput: typeof import("./getClientConfig").getClientConfigOutput = null as any;
utilities.lazyLoad(exports, ["getClientConfig","getClientConfigOutput"], () => require("./getClientConfig"));

export { GetCmCertificateArgs, GetCmCertificateResult, GetCmCertificateOutputArgs } from "./getCmCertificate";
export const getCmCertificate: typeof import("./getCmCertificate").getCmCertificate = null as any;
export const getCmCertificateOutput: typeof import("./getCmCertificate").getCmCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCmCertificate","getCmCertificateOutput"], () => require("./getCmCertificate"));

export { GetCmCertificateContentArgs, GetCmCertificateContentResult, GetCmCertificateContentOutputArgs } from "./getCmCertificateContent";
export const getCmCertificateContent: typeof import("./getCmCertificateContent").getCmCertificateContent = null as any;
export const getCmCertificateContentOutput: typeof import("./getCmCertificateContent").getCmCertificateContentOutput = null as any;
utilities.lazyLoad(exports, ["getCmCertificateContent","getCmCertificateContentOutput"], () => require("./getCmCertificateContent"));

export { GetComputeDiskArgs, GetComputeDiskResult, GetComputeDiskOutputArgs } from "./getComputeDisk";
export const getComputeDisk: typeof import("./getComputeDisk").getComputeDisk = null as any;
export const getComputeDiskOutput: typeof import("./getComputeDisk").getComputeDiskOutput = null as any;
utilities.lazyLoad(exports, ["getComputeDisk","getComputeDiskOutput"], () => require("./getComputeDisk"));

export { GetComputeDiskPlacementGroupArgs, GetComputeDiskPlacementGroupResult, GetComputeDiskPlacementGroupOutputArgs } from "./getComputeDiskPlacementGroup";
export const getComputeDiskPlacementGroup: typeof import("./getComputeDiskPlacementGroup").getComputeDiskPlacementGroup = null as any;
export const getComputeDiskPlacementGroupOutput: typeof import("./getComputeDiskPlacementGroup").getComputeDiskPlacementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getComputeDiskPlacementGroup","getComputeDiskPlacementGroupOutput"], () => require("./getComputeDiskPlacementGroup"));

export { GetComputeFilesystemArgs, GetComputeFilesystemResult, GetComputeFilesystemOutputArgs } from "./getComputeFilesystem";
export const getComputeFilesystem: typeof import("./getComputeFilesystem").getComputeFilesystem = null as any;
export const getComputeFilesystemOutput: typeof import("./getComputeFilesystem").getComputeFilesystemOutput = null as any;
utilities.lazyLoad(exports, ["getComputeFilesystem","getComputeFilesystemOutput"], () => require("./getComputeFilesystem"));

export { GetComputeGpuClusterArgs, GetComputeGpuClusterResult, GetComputeGpuClusterOutputArgs } from "./getComputeGpuCluster";
export const getComputeGpuCluster: typeof import("./getComputeGpuCluster").getComputeGpuCluster = null as any;
export const getComputeGpuClusterOutput: typeof import("./getComputeGpuCluster").getComputeGpuClusterOutput = null as any;
utilities.lazyLoad(exports, ["getComputeGpuCluster","getComputeGpuClusterOutput"], () => require("./getComputeGpuCluster"));

export { GetComputeImageArgs, GetComputeImageResult, GetComputeImageOutputArgs } from "./getComputeImage";
export const getComputeImage: typeof import("./getComputeImage").getComputeImage = null as any;
export const getComputeImageOutput: typeof import("./getComputeImage").getComputeImageOutput = null as any;
utilities.lazyLoad(exports, ["getComputeImage","getComputeImageOutput"], () => require("./getComputeImage"));

export { GetComputeInstanceArgs, GetComputeInstanceResult, GetComputeInstanceOutputArgs } from "./getComputeInstance";
export const getComputeInstance: typeof import("./getComputeInstance").getComputeInstance = null as any;
export const getComputeInstanceOutput: typeof import("./getComputeInstance").getComputeInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getComputeInstance","getComputeInstanceOutput"], () => require("./getComputeInstance"));

export { GetComputeInstanceGroupArgs, GetComputeInstanceGroupResult, GetComputeInstanceGroupOutputArgs } from "./getComputeInstanceGroup";
export const getComputeInstanceGroup: typeof import("./getComputeInstanceGroup").getComputeInstanceGroup = null as any;
export const getComputeInstanceGroupOutput: typeof import("./getComputeInstanceGroup").getComputeInstanceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getComputeInstanceGroup","getComputeInstanceGroupOutput"], () => require("./getComputeInstanceGroup"));

export { GetComputePlacementGroupArgs, GetComputePlacementGroupResult, GetComputePlacementGroupOutputArgs } from "./getComputePlacementGroup";
export const getComputePlacementGroup: typeof import("./getComputePlacementGroup").getComputePlacementGroup = null as any;
export const getComputePlacementGroupOutput: typeof import("./getComputePlacementGroup").getComputePlacementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getComputePlacementGroup","getComputePlacementGroupOutput"], () => require("./getComputePlacementGroup"));

export { GetComputeSnapshotArgs, GetComputeSnapshotResult, GetComputeSnapshotOutputArgs } from "./getComputeSnapshot";
export const getComputeSnapshot: typeof import("./getComputeSnapshot").getComputeSnapshot = null as any;
export const getComputeSnapshotOutput: typeof import("./getComputeSnapshot").getComputeSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getComputeSnapshot","getComputeSnapshotOutput"], () => require("./getComputeSnapshot"));

export { GetComputeSnapshotScheduleArgs, GetComputeSnapshotScheduleResult, GetComputeSnapshotScheduleOutputArgs } from "./getComputeSnapshotSchedule";
export const getComputeSnapshotSchedule: typeof import("./getComputeSnapshotSchedule").getComputeSnapshotSchedule = null as any;
export const getComputeSnapshotScheduleOutput: typeof import("./getComputeSnapshotSchedule").getComputeSnapshotScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getComputeSnapshotSchedule","getComputeSnapshotScheduleOutput"], () => require("./getComputeSnapshotSchedule"));

export { GetContainerRegistryArgs, GetContainerRegistryResult, GetContainerRegistryOutputArgs } from "./getContainerRegistry";
export const getContainerRegistry: typeof import("./getContainerRegistry").getContainerRegistry = null as any;
export const getContainerRegistryOutput: typeof import("./getContainerRegistry").getContainerRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRegistry","getContainerRegistryOutput"], () => require("./getContainerRegistry"));

export { GetContainerRegistryIpPermissionArgs, GetContainerRegistryIpPermissionResult, GetContainerRegistryIpPermissionOutputArgs } from "./getContainerRegistryIpPermission";
export const getContainerRegistryIpPermission: typeof import("./getContainerRegistryIpPermission").getContainerRegistryIpPermission = null as any;
export const getContainerRegistryIpPermissionOutput: typeof import("./getContainerRegistryIpPermission").getContainerRegistryIpPermissionOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRegistryIpPermission","getContainerRegistryIpPermissionOutput"], () => require("./getContainerRegistryIpPermission"));

export { GetContainerRepositoryArgs, GetContainerRepositoryResult, GetContainerRepositoryOutputArgs } from "./getContainerRepository";
export const getContainerRepository: typeof import("./getContainerRepository").getContainerRepository = null as any;
export const getContainerRepositoryOutput: typeof import("./getContainerRepository").getContainerRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRepository","getContainerRepositoryOutput"], () => require("./getContainerRepository"));

export { GetContainerRepositoryLifecyclePolicyArgs, GetContainerRepositoryLifecyclePolicyResult, GetContainerRepositoryLifecyclePolicyOutputArgs } from "./getContainerRepositoryLifecyclePolicy";
export const getContainerRepositoryLifecyclePolicy: typeof import("./getContainerRepositoryLifecyclePolicy").getContainerRepositoryLifecyclePolicy = null as any;
export const getContainerRepositoryLifecyclePolicyOutput: typeof import("./getContainerRepositoryLifecyclePolicy").getContainerRepositoryLifecyclePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRepositoryLifecyclePolicy","getContainerRepositoryLifecyclePolicyOutput"], () => require("./getContainerRepositoryLifecyclePolicy"));

export { GetDataprocClusterArgs, GetDataprocClusterResult, GetDataprocClusterOutputArgs } from "./getDataprocCluster";
export const getDataprocCluster: typeof import("./getDataprocCluster").getDataprocCluster = null as any;
export const getDataprocClusterOutput: typeof import("./getDataprocCluster").getDataprocClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDataprocCluster","getDataprocClusterOutput"], () => require("./getDataprocCluster"));

export { GetDnsZoneArgs, GetDnsZoneResult, GetDnsZoneOutputArgs } from "./getDnsZone";
export const getDnsZone: typeof import("./getDnsZone").getDnsZone = null as any;
export const getDnsZoneOutput: typeof import("./getDnsZone").getDnsZoneOutput = null as any;
utilities.lazyLoad(exports, ["getDnsZone","getDnsZoneOutput"], () => require("./getDnsZone"));

export { GetFunctionArgs, GetFunctionResult, GetFunctionOutputArgs } from "./getFunction";
export const getFunction: typeof import("./getFunction").getFunction = null as any;
export const getFunctionOutput: typeof import("./getFunction").getFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getFunction","getFunctionOutput"], () => require("./getFunction"));

export { GetFunctionScalingPolicyArgs, GetFunctionScalingPolicyResult, GetFunctionScalingPolicyOutputArgs } from "./getFunctionScalingPolicy";
export const getFunctionScalingPolicy: typeof import("./getFunctionScalingPolicy").getFunctionScalingPolicy = null as any;
export const getFunctionScalingPolicyOutput: typeof import("./getFunctionScalingPolicy").getFunctionScalingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionScalingPolicy","getFunctionScalingPolicyOutput"], () => require("./getFunctionScalingPolicy"));

export { GetFunctionTriggerArgs, GetFunctionTriggerResult, GetFunctionTriggerOutputArgs } from "./getFunctionTrigger";
export const getFunctionTrigger: typeof import("./getFunctionTrigger").getFunctionTrigger = null as any;
export const getFunctionTriggerOutput: typeof import("./getFunctionTrigger").getFunctionTriggerOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionTrigger","getFunctionTriggerOutput"], () => require("./getFunctionTrigger"));

export { GetIamPolicyArgs, GetIamPolicyResult, GetIamPolicyOutputArgs } from "./getIamPolicy";
export const getIamPolicy: typeof import("./getIamPolicy").getIamPolicy = null as any;
export const getIamPolicyOutput: typeof import("./getIamPolicy").getIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicy","getIamPolicyOutput"], () => require("./getIamPolicy"));

export { GetIamRoleArgs, GetIamRoleResult, GetIamRoleOutputArgs } from "./getIamRole";
export const getIamRole: typeof import("./getIamRole").getIamRole = null as any;
export const getIamRoleOutput: typeof import("./getIamRole").getIamRoleOutput = null as any;
utilities.lazyLoad(exports, ["getIamRole","getIamRoleOutput"], () => require("./getIamRole"));

export { GetIamServiceAccountArgs, GetIamServiceAccountResult, GetIamServiceAccountOutputArgs } from "./getIamServiceAccount";
export const getIamServiceAccount: typeof import("./getIamServiceAccount").getIamServiceAccount = null as any;
export const getIamServiceAccountOutput: typeof import("./getIamServiceAccount").getIamServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getIamServiceAccount","getIamServiceAccountOutput"], () => require("./getIamServiceAccount"));

export { GetIamServiceAgentArgs, GetIamServiceAgentResult, GetIamServiceAgentOutputArgs } from "./getIamServiceAgent";
export const getIamServiceAgent: typeof import("./getIamServiceAgent").getIamServiceAgent = null as any;
export const getIamServiceAgentOutput: typeof import("./getIamServiceAgent").getIamServiceAgentOutput = null as any;
utilities.lazyLoad(exports, ["getIamServiceAgent","getIamServiceAgentOutput"], () => require("./getIamServiceAgent"));

export { GetIamUserArgs, GetIamUserResult, GetIamUserOutputArgs } from "./getIamUser";
export const getIamUser: typeof import("./getIamUser").getIamUser = null as any;
export const getIamUserOutput: typeof import("./getIamUser").getIamUserOutput = null as any;
utilities.lazyLoad(exports, ["getIamUser","getIamUserOutput"], () => require("./getIamUser"));

export { GetIamWorkloadIdentityFederatedCredentialArgs, GetIamWorkloadIdentityFederatedCredentialResult, GetIamWorkloadIdentityFederatedCredentialOutputArgs } from "./getIamWorkloadIdentityFederatedCredential";
export const getIamWorkloadIdentityFederatedCredential: typeof import("./getIamWorkloadIdentityFederatedCredential").getIamWorkloadIdentityFederatedCredential = null as any;
export const getIamWorkloadIdentityFederatedCredentialOutput: typeof import("./getIamWorkloadIdentityFederatedCredential").getIamWorkloadIdentityFederatedCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getIamWorkloadIdentityFederatedCredential","getIamWorkloadIdentityFederatedCredentialOutput"], () => require("./getIamWorkloadIdentityFederatedCredential"));

export { GetIamWorkloadIdentityOidcFederationArgs, GetIamWorkloadIdentityOidcFederationResult, GetIamWorkloadIdentityOidcFederationOutputArgs } from "./getIamWorkloadIdentityOidcFederation";
export const getIamWorkloadIdentityOidcFederation: typeof import("./getIamWorkloadIdentityOidcFederation").getIamWorkloadIdentityOidcFederation = null as any;
export const getIamWorkloadIdentityOidcFederationOutput: typeof import("./getIamWorkloadIdentityOidcFederation").getIamWorkloadIdentityOidcFederationOutput = null as any;
utilities.lazyLoad(exports, ["getIamWorkloadIdentityOidcFederation","getIamWorkloadIdentityOidcFederationOutput"], () => require("./getIamWorkloadIdentityOidcFederation"));

export { GetIotCoreBrokerArgs, GetIotCoreBrokerResult, GetIotCoreBrokerOutputArgs } from "./getIotCoreBroker";
export const getIotCoreBroker: typeof import("./getIotCoreBroker").getIotCoreBroker = null as any;
export const getIotCoreBrokerOutput: typeof import("./getIotCoreBroker").getIotCoreBrokerOutput = null as any;
utilities.lazyLoad(exports, ["getIotCoreBroker","getIotCoreBrokerOutput"], () => require("./getIotCoreBroker"));

export { GetIotCoreDeviceArgs, GetIotCoreDeviceResult, GetIotCoreDeviceOutputArgs } from "./getIotCoreDevice";
export const getIotCoreDevice: typeof import("./getIotCoreDevice").getIotCoreDevice = null as any;
export const getIotCoreDeviceOutput: typeof import("./getIotCoreDevice").getIotCoreDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getIotCoreDevice","getIotCoreDeviceOutput"], () => require("./getIotCoreDevice"));

export { GetIotCoreRegistryArgs, GetIotCoreRegistryResult, GetIotCoreRegistryOutputArgs } from "./getIotCoreRegistry";
export const getIotCoreRegistry: typeof import("./getIotCoreRegistry").getIotCoreRegistry = null as any;
export const getIotCoreRegistryOutput: typeof import("./getIotCoreRegistry").getIotCoreRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getIotCoreRegistry","getIotCoreRegistryOutput"], () => require("./getIotCoreRegistry"));

export { GetKmsAsymmetricEncryptionKeyArgs, GetKmsAsymmetricEncryptionKeyResult, GetKmsAsymmetricEncryptionKeyOutputArgs } from "./getKmsAsymmetricEncryptionKey";
export const getKmsAsymmetricEncryptionKey: typeof import("./getKmsAsymmetricEncryptionKey").getKmsAsymmetricEncryptionKey = null as any;
export const getKmsAsymmetricEncryptionKeyOutput: typeof import("./getKmsAsymmetricEncryptionKey").getKmsAsymmetricEncryptionKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsAsymmetricEncryptionKey","getKmsAsymmetricEncryptionKeyOutput"], () => require("./getKmsAsymmetricEncryptionKey"));

export { GetKmsAsymmetricSignatureKeyArgs, GetKmsAsymmetricSignatureKeyResult, GetKmsAsymmetricSignatureKeyOutputArgs } from "./getKmsAsymmetricSignatureKey";
export const getKmsAsymmetricSignatureKey: typeof import("./getKmsAsymmetricSignatureKey").getKmsAsymmetricSignatureKey = null as any;
export const getKmsAsymmetricSignatureKeyOutput: typeof import("./getKmsAsymmetricSignatureKey").getKmsAsymmetricSignatureKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsAsymmetricSignatureKey","getKmsAsymmetricSignatureKeyOutput"], () => require("./getKmsAsymmetricSignatureKey"));

export { GetKmsSymmetricKeyArgs, GetKmsSymmetricKeyResult, GetKmsSymmetricKeyOutputArgs } from "./getKmsSymmetricKey";
export const getKmsSymmetricKey: typeof import("./getKmsSymmetricKey").getKmsSymmetricKey = null as any;
export const getKmsSymmetricKeyOutput: typeof import("./getKmsSymmetricKey").getKmsSymmetricKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsSymmetricKey","getKmsSymmetricKeyOutput"], () => require("./getKmsSymmetricKey"));

export { GetKubernetesClusterArgs, GetKubernetesClusterResult, GetKubernetesClusterOutputArgs } from "./getKubernetesCluster";
export const getKubernetesCluster: typeof import("./getKubernetesCluster").getKubernetesCluster = null as any;
export const getKubernetesClusterOutput: typeof import("./getKubernetesCluster").getKubernetesClusterOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesCluster","getKubernetesClusterOutput"], () => require("./getKubernetesCluster"));

export { GetKubernetesNodeGroupArgs, GetKubernetesNodeGroupResult, GetKubernetesNodeGroupOutputArgs } from "./getKubernetesNodeGroup";
export const getKubernetesNodeGroup: typeof import("./getKubernetesNodeGroup").getKubernetesNodeGroup = null as any;
export const getKubernetesNodeGroupOutput: typeof import("./getKubernetesNodeGroup").getKubernetesNodeGroupOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesNodeGroup","getKubernetesNodeGroupOutput"], () => require("./getKubernetesNodeGroup"));

export { GetLbNetworkLoadBalancerArgs, GetLbNetworkLoadBalancerResult, GetLbNetworkLoadBalancerOutputArgs } from "./getLbNetworkLoadBalancer";
export const getLbNetworkLoadBalancer: typeof import("./getLbNetworkLoadBalancer").getLbNetworkLoadBalancer = null as any;
export const getLbNetworkLoadBalancerOutput: typeof import("./getLbNetworkLoadBalancer").getLbNetworkLoadBalancerOutput = null as any;
utilities.lazyLoad(exports, ["getLbNetworkLoadBalancer","getLbNetworkLoadBalancerOutput"], () => require("./getLbNetworkLoadBalancer"));

export { GetLbTargetGroupArgs, GetLbTargetGroupResult, GetLbTargetGroupOutputArgs } from "./getLbTargetGroup";
export const getLbTargetGroup: typeof import("./getLbTargetGroup").getLbTargetGroup = null as any;
export const getLbTargetGroupOutput: typeof import("./getLbTargetGroup").getLbTargetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLbTargetGroup","getLbTargetGroupOutput"], () => require("./getLbTargetGroup"));

export { GetLoadtestingAgentArgs, GetLoadtestingAgentResult, GetLoadtestingAgentOutputArgs } from "./getLoadtestingAgent";
export const getLoadtestingAgent: typeof import("./getLoadtestingAgent").getLoadtestingAgent = null as any;
export const getLoadtestingAgentOutput: typeof import("./getLoadtestingAgent").getLoadtestingAgentOutput = null as any;
utilities.lazyLoad(exports, ["getLoadtestingAgent","getLoadtestingAgentOutput"], () => require("./getLoadtestingAgent"));

export { GetLockboxSecretArgs, GetLockboxSecretResult, GetLockboxSecretOutputArgs } from "./getLockboxSecret";
export const getLockboxSecret: typeof import("./getLockboxSecret").getLockboxSecret = null as any;
export const getLockboxSecretOutput: typeof import("./getLockboxSecret").getLockboxSecretOutput = null as any;
utilities.lazyLoad(exports, ["getLockboxSecret","getLockboxSecretOutput"], () => require("./getLockboxSecret"));

export { GetLockboxSecretVersionArgs, GetLockboxSecretVersionResult, GetLockboxSecretVersionOutputArgs } from "./getLockboxSecretVersion";
export const getLockboxSecretVersion: typeof import("./getLockboxSecretVersion").getLockboxSecretVersion = null as any;
export const getLockboxSecretVersionOutput: typeof import("./getLockboxSecretVersion").getLockboxSecretVersionOutput = null as any;
utilities.lazyLoad(exports, ["getLockboxSecretVersion","getLockboxSecretVersionOutput"], () => require("./getLockboxSecretVersion"));

export { GetLoggingGroupArgs, GetLoggingGroupResult, GetLoggingGroupOutputArgs } from "./getLoggingGroup";
export const getLoggingGroup: typeof import("./getLoggingGroup").getLoggingGroup = null as any;
export const getLoggingGroupOutput: typeof import("./getLoggingGroup").getLoggingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingGroup","getLoggingGroupOutput"], () => require("./getLoggingGroup"));

export { GetMdbClickhouseClusterArgs, GetMdbClickhouseClusterResult, GetMdbClickhouseClusterOutputArgs } from "./getMdbClickhouseCluster";
export const getMdbClickhouseCluster: typeof import("./getMdbClickhouseCluster").getMdbClickhouseCluster = null as any;
export const getMdbClickhouseClusterOutput: typeof import("./getMdbClickhouseCluster").getMdbClickhouseClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMdbClickhouseCluster","getMdbClickhouseClusterOutput"], () => require("./getMdbClickhouseCluster"));

export { GetMdbGreenplumClusterArgs, GetMdbGreenplumClusterResult, GetMdbGreenplumClusterOutputArgs } from "./getMdbGreenplumCluster";
export const getMdbGreenplumCluster: typeof import("./getMdbGreenplumCluster").getMdbGreenplumCluster = null as any;
export const getMdbGreenplumClusterOutput: typeof import("./getMdbGreenplumCluster").getMdbGreenplumClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMdbGreenplumCluster","getMdbGreenplumClusterOutput"], () => require("./getMdbGreenplumCluster"));

export { GetMdbKafkaClusterArgs, GetMdbKafkaClusterResult, GetMdbKafkaClusterOutputArgs } from "./getMdbKafkaCluster";
export const getMdbKafkaCluster: typeof import("./getMdbKafkaCluster").getMdbKafkaCluster = null as any;
export const getMdbKafkaClusterOutput: typeof import("./getMdbKafkaCluster").getMdbKafkaClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMdbKafkaCluster","getMdbKafkaClusterOutput"], () => require("./getMdbKafkaCluster"));

export { GetMdbKafkaConnectorArgs, GetMdbKafkaConnectorResult, GetMdbKafkaConnectorOutputArgs } from "./getMdbKafkaConnector";
export const getMdbKafkaConnector: typeof import("./getMdbKafkaConnector").getMdbKafkaConnector = null as any;
export const getMdbKafkaConnectorOutput: typeof import("./getMdbKafkaConnector").getMdbKafkaConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getMdbKafkaConnector","getMdbKafkaConnectorOutput"], () => require("./getMdbKafkaConnector"));

export { GetMdbKafkaTopicArgs, GetMdbKafkaTopicResult, GetMdbKafkaTopicOutputArgs } from "./getMdbKafkaTopic";
export const getMdbKafkaTopic: typeof import("./getMdbKafkaTopic").getMdbKafkaTopic = null as any;
export const getMdbKafkaTopicOutput: typeof import("./getMdbKafkaTopic").getMdbKafkaTopicOutput = null as any;
utilities.lazyLoad(exports, ["getMdbKafkaTopic","getMdbKafkaTopicOutput"], () => require("./getMdbKafkaTopic"));

export { GetMdbKafkaUserArgs, GetMdbKafkaUserResult, GetMdbKafkaUserOutputArgs } from "./getMdbKafkaUser";
export const getMdbKafkaUser: typeof import("./getMdbKafkaUser").getMdbKafkaUser = null as any;
export const getMdbKafkaUserOutput: typeof import("./getMdbKafkaUser").getMdbKafkaUserOutput = null as any;
utilities.lazyLoad(exports, ["getMdbKafkaUser","getMdbKafkaUserOutput"], () => require("./getMdbKafkaUser"));

export { GetMdbMongodbClusterArgs, GetMdbMongodbClusterResult, GetMdbMongodbClusterOutputArgs } from "./getMdbMongodbCluster";
export const getMdbMongodbCluster: typeof import("./getMdbMongodbCluster").getMdbMongodbCluster = null as any;
export const getMdbMongodbClusterOutput: typeof import("./getMdbMongodbCluster").getMdbMongodbClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMdbMongodbCluster","getMdbMongodbClusterOutput"], () => require("./getMdbMongodbCluster"));

export { GetMdbMysqlClusterArgs, GetMdbMysqlClusterResult, GetMdbMysqlClusterOutputArgs } from "./getMdbMysqlCluster";
export const getMdbMysqlCluster: typeof import("./getMdbMysqlCluster").getMdbMysqlCluster = null as any;
export const getMdbMysqlClusterOutput: typeof import("./getMdbMysqlCluster").getMdbMysqlClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMdbMysqlCluster","getMdbMysqlClusterOutput"], () => require("./getMdbMysqlCluster"));

export { GetMdbMysqlDatabaseArgs, GetMdbMysqlDatabaseResult, GetMdbMysqlDatabaseOutputArgs } from "./getMdbMysqlDatabase";
export const getMdbMysqlDatabase: typeof import("./getMdbMysqlDatabase").getMdbMysqlDatabase = null as any;
export const getMdbMysqlDatabaseOutput: typeof import("./getMdbMysqlDatabase").getMdbMysqlDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getMdbMysqlDatabase","getMdbMysqlDatabaseOutput"], () => require("./getMdbMysqlDatabase"));

export { GetMdbMysqlUserArgs, GetMdbMysqlUserResult, GetMdbMysqlUserOutputArgs } from "./getMdbMysqlUser";
export const getMdbMysqlUser: typeof import("./getMdbMysqlUser").getMdbMysqlUser = null as any;
export const getMdbMysqlUserOutput: typeof import("./getMdbMysqlUser").getMdbMysqlUserOutput = null as any;
utilities.lazyLoad(exports, ["getMdbMysqlUser","getMdbMysqlUserOutput"], () => require("./getMdbMysqlUser"));

export { GetMdbPostgresqlClusterArgs, GetMdbPostgresqlClusterResult, GetMdbPostgresqlClusterOutputArgs } from "./getMdbPostgresqlCluster";
export const getMdbPostgresqlCluster: typeof import("./getMdbPostgresqlCluster").getMdbPostgresqlCluster = null as any;
export const getMdbPostgresqlClusterOutput: typeof import("./getMdbPostgresqlCluster").getMdbPostgresqlClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMdbPostgresqlCluster","getMdbPostgresqlClusterOutput"], () => require("./getMdbPostgresqlCluster"));

export { GetMdbPostgresqlDatabaseArgs, GetMdbPostgresqlDatabaseResult, GetMdbPostgresqlDatabaseOutputArgs } from "./getMdbPostgresqlDatabase";
export const getMdbPostgresqlDatabase: typeof import("./getMdbPostgresqlDatabase").getMdbPostgresqlDatabase = null as any;
export const getMdbPostgresqlDatabaseOutput: typeof import("./getMdbPostgresqlDatabase").getMdbPostgresqlDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getMdbPostgresqlDatabase","getMdbPostgresqlDatabaseOutput"], () => require("./getMdbPostgresqlDatabase"));

export { GetMdbPostgresqlUserArgs, GetMdbPostgresqlUserResult, GetMdbPostgresqlUserOutputArgs } from "./getMdbPostgresqlUser";
export const getMdbPostgresqlUser: typeof import("./getMdbPostgresqlUser").getMdbPostgresqlUser = null as any;
export const getMdbPostgresqlUserOutput: typeof import("./getMdbPostgresqlUser").getMdbPostgresqlUserOutput = null as any;
utilities.lazyLoad(exports, ["getMdbPostgresqlUser","getMdbPostgresqlUserOutput"], () => require("./getMdbPostgresqlUser"));

export { GetMdbRedisClusterArgs, GetMdbRedisClusterResult, GetMdbRedisClusterOutputArgs } from "./getMdbRedisCluster";
export const getMdbRedisCluster: typeof import("./getMdbRedisCluster").getMdbRedisCluster = null as any;
export const getMdbRedisClusterOutput: typeof import("./getMdbRedisCluster").getMdbRedisClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMdbRedisCluster","getMdbRedisClusterOutput"], () => require("./getMdbRedisCluster"));

export { GetMdbSqlserverClusterArgs, GetMdbSqlserverClusterResult, GetMdbSqlserverClusterOutputArgs } from "./getMdbSqlserverCluster";
export const getMdbSqlserverCluster: typeof import("./getMdbSqlserverCluster").getMdbSqlserverCluster = null as any;
export const getMdbSqlserverClusterOutput: typeof import("./getMdbSqlserverCluster").getMdbSqlserverClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMdbSqlserverCluster","getMdbSqlserverClusterOutput"], () => require("./getMdbSqlserverCluster"));

export { GetMessageQueueArgs, GetMessageQueueResult, GetMessageQueueOutputArgs } from "./getMessageQueue";
export const getMessageQueue: typeof import("./getMessageQueue").getMessageQueue = null as any;
export const getMessageQueueOutput: typeof import("./getMessageQueue").getMessageQueueOutput = null as any;
utilities.lazyLoad(exports, ["getMessageQueue","getMessageQueueOutput"], () => require("./getMessageQueue"));

export { GetMonitoringDashboardArgs, GetMonitoringDashboardResult, GetMonitoringDashboardOutputArgs } from "./getMonitoringDashboard";
export const getMonitoringDashboard: typeof import("./getMonitoringDashboard").getMonitoringDashboard = null as any;
export const getMonitoringDashboardOutput: typeof import("./getMonitoringDashboard").getMonitoringDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringDashboard","getMonitoringDashboardOutput"], () => require("./getMonitoringDashboard"));

export { GetOrganizationmanagerGroupArgs, GetOrganizationmanagerGroupResult, GetOrganizationmanagerGroupOutputArgs } from "./getOrganizationmanagerGroup";
export const getOrganizationmanagerGroup: typeof import("./getOrganizationmanagerGroup").getOrganizationmanagerGroup = null as any;
export const getOrganizationmanagerGroupOutput: typeof import("./getOrganizationmanagerGroup").getOrganizationmanagerGroupOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationmanagerGroup","getOrganizationmanagerGroupOutput"], () => require("./getOrganizationmanagerGroup"));

export { GetOrganizationmanagerOsLoginSettingsArgs, GetOrganizationmanagerOsLoginSettingsResult, GetOrganizationmanagerOsLoginSettingsOutputArgs } from "./getOrganizationmanagerOsLoginSettings";
export const getOrganizationmanagerOsLoginSettings: typeof import("./getOrganizationmanagerOsLoginSettings").getOrganizationmanagerOsLoginSettings = null as any;
export const getOrganizationmanagerOsLoginSettingsOutput: typeof import("./getOrganizationmanagerOsLoginSettings").getOrganizationmanagerOsLoginSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationmanagerOsLoginSettings","getOrganizationmanagerOsLoginSettingsOutput"], () => require("./getOrganizationmanagerOsLoginSettings"));

export { GetOrganizationmanagerSamlFederationArgs, GetOrganizationmanagerSamlFederationResult, GetOrganizationmanagerSamlFederationOutputArgs } from "./getOrganizationmanagerSamlFederation";
export const getOrganizationmanagerSamlFederation: typeof import("./getOrganizationmanagerSamlFederation").getOrganizationmanagerSamlFederation = null as any;
export const getOrganizationmanagerSamlFederationOutput: typeof import("./getOrganizationmanagerSamlFederation").getOrganizationmanagerSamlFederationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationmanagerSamlFederation","getOrganizationmanagerSamlFederationOutput"], () => require("./getOrganizationmanagerSamlFederation"));

export { GetOrganizationmanagerSamlFederationUserAccountArgs, GetOrganizationmanagerSamlFederationUserAccountResult, GetOrganizationmanagerSamlFederationUserAccountOutputArgs } from "./getOrganizationmanagerSamlFederationUserAccount";
export const getOrganizationmanagerSamlFederationUserAccount: typeof import("./getOrganizationmanagerSamlFederationUserAccount").getOrganizationmanagerSamlFederationUserAccount = null as any;
export const getOrganizationmanagerSamlFederationUserAccountOutput: typeof import("./getOrganizationmanagerSamlFederationUserAccount").getOrganizationmanagerSamlFederationUserAccountOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationmanagerSamlFederationUserAccount","getOrganizationmanagerSamlFederationUserAccountOutput"], () => require("./getOrganizationmanagerSamlFederationUserAccount"));

export { GetOrganizationmanagerUserSshKeyArgs, GetOrganizationmanagerUserSshKeyResult, GetOrganizationmanagerUserSshKeyOutputArgs } from "./getOrganizationmanagerUserSshKey";
export const getOrganizationmanagerUserSshKey: typeof import("./getOrganizationmanagerUserSshKey").getOrganizationmanagerUserSshKey = null as any;
export const getOrganizationmanagerUserSshKeyOutput: typeof import("./getOrganizationmanagerUserSshKey").getOrganizationmanagerUserSshKeyOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationmanagerUserSshKey","getOrganizationmanagerUserSshKeyOutput"], () => require("./getOrganizationmanagerUserSshKey"));

export { GetResourcemanagerCloudArgs, GetResourcemanagerCloudResult, GetResourcemanagerCloudOutputArgs } from "./getResourcemanagerCloud";
export const getResourcemanagerCloud: typeof import("./getResourcemanagerCloud").getResourcemanagerCloud = null as any;
export const getResourcemanagerCloudOutput: typeof import("./getResourcemanagerCloud").getResourcemanagerCloudOutput = null as any;
utilities.lazyLoad(exports, ["getResourcemanagerCloud","getResourcemanagerCloudOutput"], () => require("./getResourcemanagerCloud"));

export { GetResourcemanagerFolderArgs, GetResourcemanagerFolderResult, GetResourcemanagerFolderOutputArgs } from "./getResourcemanagerFolder";
export const getResourcemanagerFolder: typeof import("./getResourcemanagerFolder").getResourcemanagerFolder = null as any;
export const getResourcemanagerFolderOutput: typeof import("./getResourcemanagerFolder").getResourcemanagerFolderOutput = null as any;
utilities.lazyLoad(exports, ["getResourcemanagerFolder","getResourcemanagerFolderOutput"], () => require("./getResourcemanagerFolder"));

export { GetServerlessContainerArgs, GetServerlessContainerResult, GetServerlessContainerOutputArgs } from "./getServerlessContainer";
export const getServerlessContainer: typeof import("./getServerlessContainer").getServerlessContainer = null as any;
export const getServerlessContainerOutput: typeof import("./getServerlessContainer").getServerlessContainerOutput = null as any;
utilities.lazyLoad(exports, ["getServerlessContainer","getServerlessContainerOutput"], () => require("./getServerlessContainer"));

export { GetServerlessEventrouterBusArgs, GetServerlessEventrouterBusResult, GetServerlessEventrouterBusOutputArgs } from "./getServerlessEventrouterBus";
export const getServerlessEventrouterBus: typeof import("./getServerlessEventrouterBus").getServerlessEventrouterBus = null as any;
export const getServerlessEventrouterBusOutput: typeof import("./getServerlessEventrouterBus").getServerlessEventrouterBusOutput = null as any;
utilities.lazyLoad(exports, ["getServerlessEventrouterBus","getServerlessEventrouterBusOutput"], () => require("./getServerlessEventrouterBus"));

export { GetServerlessEventrouterConnectorArgs, GetServerlessEventrouterConnectorResult, GetServerlessEventrouterConnectorOutputArgs } from "./getServerlessEventrouterConnector";
export const getServerlessEventrouterConnector: typeof import("./getServerlessEventrouterConnector").getServerlessEventrouterConnector = null as any;
export const getServerlessEventrouterConnectorOutput: typeof import("./getServerlessEventrouterConnector").getServerlessEventrouterConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getServerlessEventrouterConnector","getServerlessEventrouterConnectorOutput"], () => require("./getServerlessEventrouterConnector"));

export { GetServerlessEventrouterRuleArgs, GetServerlessEventrouterRuleResult, GetServerlessEventrouterRuleOutputArgs } from "./getServerlessEventrouterRule";
export const getServerlessEventrouterRule: typeof import("./getServerlessEventrouterRule").getServerlessEventrouterRule = null as any;
export const getServerlessEventrouterRuleOutput: typeof import("./getServerlessEventrouterRule").getServerlessEventrouterRuleOutput = null as any;
utilities.lazyLoad(exports, ["getServerlessEventrouterRule","getServerlessEventrouterRuleOutput"], () => require("./getServerlessEventrouterRule"));

export { GetSmartcaptchaCaptchaArgs, GetSmartcaptchaCaptchaResult, GetSmartcaptchaCaptchaOutputArgs } from "./getSmartcaptchaCaptcha";
export const getSmartcaptchaCaptcha: typeof import("./getSmartcaptchaCaptcha").getSmartcaptchaCaptcha = null as any;
export const getSmartcaptchaCaptchaOutput: typeof import("./getSmartcaptchaCaptcha").getSmartcaptchaCaptchaOutput = null as any;
utilities.lazyLoad(exports, ["getSmartcaptchaCaptcha","getSmartcaptchaCaptchaOutput"], () => require("./getSmartcaptchaCaptcha"));

export { GetSwsAdvancedRateLimiterProfileArgs, GetSwsAdvancedRateLimiterProfileResult, GetSwsAdvancedRateLimiterProfileOutputArgs } from "./getSwsAdvancedRateLimiterProfile";
export const getSwsAdvancedRateLimiterProfile: typeof import("./getSwsAdvancedRateLimiterProfile").getSwsAdvancedRateLimiterProfile = null as any;
export const getSwsAdvancedRateLimiterProfileOutput: typeof import("./getSwsAdvancedRateLimiterProfile").getSwsAdvancedRateLimiterProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSwsAdvancedRateLimiterProfile","getSwsAdvancedRateLimiterProfileOutput"], () => require("./getSwsAdvancedRateLimiterProfile"));

export { GetSwsSecurityProfileArgs, GetSwsSecurityProfileResult, GetSwsSecurityProfileOutputArgs } from "./getSwsSecurityProfile";
export const getSwsSecurityProfile: typeof import("./getSwsSecurityProfile").getSwsSecurityProfile = null as any;
export const getSwsSecurityProfileOutput: typeof import("./getSwsSecurityProfile").getSwsSecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSwsSecurityProfile","getSwsSecurityProfileOutput"], () => require("./getSwsSecurityProfile"));

export { GetSwsWafProfileArgs, GetSwsWafProfileResult, GetSwsWafProfileOutputArgs } from "./getSwsWafProfile";
export const getSwsWafProfile: typeof import("./getSwsWafProfile").getSwsWafProfile = null as any;
export const getSwsWafProfileOutput: typeof import("./getSwsWafProfile").getSwsWafProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSwsWafProfile","getSwsWafProfileOutput"], () => require("./getSwsWafProfile"));

export { GetSwsWafRuleSetDescriptorArgs, GetSwsWafRuleSetDescriptorResult, GetSwsWafRuleSetDescriptorOutputArgs } from "./getSwsWafRuleSetDescriptor";
export const getSwsWafRuleSetDescriptor: typeof import("./getSwsWafRuleSetDescriptor").getSwsWafRuleSetDescriptor = null as any;
export const getSwsWafRuleSetDescriptorOutput: typeof import("./getSwsWafRuleSetDescriptor").getSwsWafRuleSetDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getSwsWafRuleSetDescriptor","getSwsWafRuleSetDescriptorOutput"], () => require("./getSwsWafRuleSetDescriptor"));

export { GetVpcAddressArgs, GetVpcAddressResult, GetVpcAddressOutputArgs } from "./getVpcAddress";
export const getVpcAddress: typeof import("./getVpcAddress").getVpcAddress = null as any;
export const getVpcAddressOutput: typeof import("./getVpcAddress").getVpcAddressOutput = null as any;
utilities.lazyLoad(exports, ["getVpcAddress","getVpcAddressOutput"], () => require("./getVpcAddress"));

export { GetVpcGatewayArgs, GetVpcGatewayResult, GetVpcGatewayOutputArgs } from "./getVpcGateway";
export const getVpcGateway: typeof import("./getVpcGateway").getVpcGateway = null as any;
export const getVpcGatewayOutput: typeof import("./getVpcGateway").getVpcGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getVpcGateway","getVpcGatewayOutput"], () => require("./getVpcGateway"));

export { GetVpcNetworkArgs, GetVpcNetworkResult, GetVpcNetworkOutputArgs } from "./getVpcNetwork";
export const getVpcNetwork: typeof import("./getVpcNetwork").getVpcNetwork = null as any;
export const getVpcNetworkOutput: typeof import("./getVpcNetwork").getVpcNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVpcNetwork","getVpcNetworkOutput"], () => require("./getVpcNetwork"));

export { GetVpcPrivateEndpointArgs, GetVpcPrivateEndpointResult, GetVpcPrivateEndpointOutputArgs } from "./getVpcPrivateEndpoint";
export const getVpcPrivateEndpoint: typeof import("./getVpcPrivateEndpoint").getVpcPrivateEndpoint = null as any;
export const getVpcPrivateEndpointOutput: typeof import("./getVpcPrivateEndpoint").getVpcPrivateEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPrivateEndpoint","getVpcPrivateEndpointOutput"], () => require("./getVpcPrivateEndpoint"));

export { GetVpcRouteTableArgs, GetVpcRouteTableResult, GetVpcRouteTableOutputArgs } from "./getVpcRouteTable";
export const getVpcRouteTable: typeof import("./getVpcRouteTable").getVpcRouteTable = null as any;
export const getVpcRouteTableOutput: typeof import("./getVpcRouteTable").getVpcRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getVpcRouteTable","getVpcRouteTableOutput"], () => require("./getVpcRouteTable"));

export { GetVpcSecurityGroupArgs, GetVpcSecurityGroupResult, GetVpcSecurityGroupOutputArgs } from "./getVpcSecurityGroup";
export const getVpcSecurityGroup: typeof import("./getVpcSecurityGroup").getVpcSecurityGroup = null as any;
export const getVpcSecurityGroupOutput: typeof import("./getVpcSecurityGroup").getVpcSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSecurityGroup","getVpcSecurityGroupOutput"], () => require("./getVpcSecurityGroup"));

export { GetVpcSubnetArgs, GetVpcSubnetResult, GetVpcSubnetOutputArgs } from "./getVpcSubnet";
export const getVpcSubnet: typeof import("./getVpcSubnet").getVpcSubnet = null as any;
export const getVpcSubnetOutput: typeof import("./getVpcSubnet").getVpcSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSubnet","getVpcSubnetOutput"], () => require("./getVpcSubnet"));

export { GetYdbDatabaseDedicatedArgs, GetYdbDatabaseDedicatedResult, GetYdbDatabaseDedicatedOutputArgs } from "./getYdbDatabaseDedicated";
export const getYdbDatabaseDedicated: typeof import("./getYdbDatabaseDedicated").getYdbDatabaseDedicated = null as any;
export const getYdbDatabaseDedicatedOutput: typeof import("./getYdbDatabaseDedicated").getYdbDatabaseDedicatedOutput = null as any;
utilities.lazyLoad(exports, ["getYdbDatabaseDedicated","getYdbDatabaseDedicatedOutput"], () => require("./getYdbDatabaseDedicated"));

export { GetYdbDatabaseServerlessArgs, GetYdbDatabaseServerlessResult, GetYdbDatabaseServerlessOutputArgs } from "./getYdbDatabaseServerless";
export const getYdbDatabaseServerless: typeof import("./getYdbDatabaseServerless").getYdbDatabaseServerless = null as any;
export const getYdbDatabaseServerlessOutput: typeof import("./getYdbDatabaseServerless").getYdbDatabaseServerlessOutput = null as any;
utilities.lazyLoad(exports, ["getYdbDatabaseServerless","getYdbDatabaseServerlessOutput"], () => require("./getYdbDatabaseServerless"));

export { IamServiceAccountArgs, IamServiceAccountState } from "./iamServiceAccount";
export type IamServiceAccount = import("./iamServiceAccount").IamServiceAccount;
export const IamServiceAccount: typeof import("./iamServiceAccount").IamServiceAccount = null as any;
utilities.lazyLoad(exports, ["IamServiceAccount"], () => require("./iamServiceAccount"));

export { IamServiceAccountApiKeyArgs, IamServiceAccountApiKeyState } from "./iamServiceAccountApiKey";
export type IamServiceAccountApiKey = import("./iamServiceAccountApiKey").IamServiceAccountApiKey;
export const IamServiceAccountApiKey: typeof import("./iamServiceAccountApiKey").IamServiceAccountApiKey = null as any;
utilities.lazyLoad(exports, ["IamServiceAccountApiKey"], () => require("./iamServiceAccountApiKey"));

export { IamServiceAccountIamPolicyArgs, IamServiceAccountIamPolicyState } from "./iamServiceAccountIamPolicy";
export type IamServiceAccountIamPolicy = import("./iamServiceAccountIamPolicy").IamServiceAccountIamPolicy;
export const IamServiceAccountIamPolicy: typeof import("./iamServiceAccountIamPolicy").IamServiceAccountIamPolicy = null as any;
utilities.lazyLoad(exports, ["IamServiceAccountIamPolicy"], () => require("./iamServiceAccountIamPolicy"));

export { IamServiceAccountKeyArgs, IamServiceAccountKeyState } from "./iamServiceAccountKey";
export type IamServiceAccountKey = import("./iamServiceAccountKey").IamServiceAccountKey;
export const IamServiceAccountKey: typeof import("./iamServiceAccountKey").IamServiceAccountKey = null as any;
utilities.lazyLoad(exports, ["IamServiceAccountKey"], () => require("./iamServiceAccountKey"));

export { IamServiceAccountStaticAccessKeyArgs, IamServiceAccountStaticAccessKeyState } from "./iamServiceAccountStaticAccessKey";
export type IamServiceAccountStaticAccessKey = import("./iamServiceAccountStaticAccessKey").IamServiceAccountStaticAccessKey;
export const IamServiceAccountStaticAccessKey: typeof import("./iamServiceAccountStaticAccessKey").IamServiceAccountStaticAccessKey = null as any;
utilities.lazyLoad(exports, ["IamServiceAccountStaticAccessKey"], () => require("./iamServiceAccountStaticAccessKey"));

export { IamWorkloadIdentityFederatedCredentialArgs, IamWorkloadIdentityFederatedCredentialState } from "./iamWorkloadIdentityFederatedCredential";
export type IamWorkloadIdentityFederatedCredential = import("./iamWorkloadIdentityFederatedCredential").IamWorkloadIdentityFederatedCredential;
export const IamWorkloadIdentityFederatedCredential: typeof import("./iamWorkloadIdentityFederatedCredential").IamWorkloadIdentityFederatedCredential = null as any;
utilities.lazyLoad(exports, ["IamWorkloadIdentityFederatedCredential"], () => require("./iamWorkloadIdentityFederatedCredential"));

export { IamWorkloadIdentityOidcFederationArgs, IamWorkloadIdentityOidcFederationState } from "./iamWorkloadIdentityOidcFederation";
export type IamWorkloadIdentityOidcFederation = import("./iamWorkloadIdentityOidcFederation").IamWorkloadIdentityOidcFederation;
export const IamWorkloadIdentityOidcFederation: typeof import("./iamWorkloadIdentityOidcFederation").IamWorkloadIdentityOidcFederation = null as any;
utilities.lazyLoad(exports, ["IamWorkloadIdentityOidcFederation"], () => require("./iamWorkloadIdentityOidcFederation"));

export { IotCoreBrokerArgs, IotCoreBrokerState } from "./iotCoreBroker";
export type IotCoreBroker = import("./iotCoreBroker").IotCoreBroker;
export const IotCoreBroker: typeof import("./iotCoreBroker").IotCoreBroker = null as any;
utilities.lazyLoad(exports, ["IotCoreBroker"], () => require("./iotCoreBroker"));

export { IotCoreDeviceArgs, IotCoreDeviceState } from "./iotCoreDevice";
export type IotCoreDevice = import("./iotCoreDevice").IotCoreDevice;
export const IotCoreDevice: typeof import("./iotCoreDevice").IotCoreDevice = null as any;
utilities.lazyLoad(exports, ["IotCoreDevice"], () => require("./iotCoreDevice"));

export { IotCoreRegistryArgs, IotCoreRegistryState } from "./iotCoreRegistry";
export type IotCoreRegistry = import("./iotCoreRegistry").IotCoreRegistry;
export const IotCoreRegistry: typeof import("./iotCoreRegistry").IotCoreRegistry = null as any;
utilities.lazyLoad(exports, ["IotCoreRegistry"], () => require("./iotCoreRegistry"));

export { KmsAsymmetricEncryptionKeyArgs, KmsAsymmetricEncryptionKeyState } from "./kmsAsymmetricEncryptionKey";
export type KmsAsymmetricEncryptionKey = import("./kmsAsymmetricEncryptionKey").KmsAsymmetricEncryptionKey;
export const KmsAsymmetricEncryptionKey: typeof import("./kmsAsymmetricEncryptionKey").KmsAsymmetricEncryptionKey = null as any;
utilities.lazyLoad(exports, ["KmsAsymmetricEncryptionKey"], () => require("./kmsAsymmetricEncryptionKey"));

export { KmsAsymmetricSignatureKeyArgs, KmsAsymmetricSignatureKeyState } from "./kmsAsymmetricSignatureKey";
export type KmsAsymmetricSignatureKey = import("./kmsAsymmetricSignatureKey").KmsAsymmetricSignatureKey;
export const KmsAsymmetricSignatureKey: typeof import("./kmsAsymmetricSignatureKey").KmsAsymmetricSignatureKey = null as any;
utilities.lazyLoad(exports, ["KmsAsymmetricSignatureKey"], () => require("./kmsAsymmetricSignatureKey"));

export { KmsSecretCiphertextArgs, KmsSecretCiphertextState } from "./kmsSecretCiphertext";
export type KmsSecretCiphertext = import("./kmsSecretCiphertext").KmsSecretCiphertext;
export const KmsSecretCiphertext: typeof import("./kmsSecretCiphertext").KmsSecretCiphertext = null as any;
utilities.lazyLoad(exports, ["KmsSecretCiphertext"], () => require("./kmsSecretCiphertext"));

export { KmsSymmetricKeyArgs, KmsSymmetricKeyState } from "./kmsSymmetricKey";
export type KmsSymmetricKey = import("./kmsSymmetricKey").KmsSymmetricKey;
export const KmsSymmetricKey: typeof import("./kmsSymmetricKey").KmsSymmetricKey = null as any;
utilities.lazyLoad(exports, ["KmsSymmetricKey"], () => require("./kmsSymmetricKey"));

export { KubernetesClusterArgs, KubernetesClusterState } from "./kubernetesCluster";
export type KubernetesCluster = import("./kubernetesCluster").KubernetesCluster;
export const KubernetesCluster: typeof import("./kubernetesCluster").KubernetesCluster = null as any;
utilities.lazyLoad(exports, ["KubernetesCluster"], () => require("./kubernetesCluster"));

export { KubernetesNodeGroupArgs, KubernetesNodeGroupState } from "./kubernetesNodeGroup";
export type KubernetesNodeGroup = import("./kubernetesNodeGroup").KubernetesNodeGroup;
export const KubernetesNodeGroup: typeof import("./kubernetesNodeGroup").KubernetesNodeGroup = null as any;
utilities.lazyLoad(exports, ["KubernetesNodeGroup"], () => require("./kubernetesNodeGroup"));

export { LbNetworkLoadBalancerArgs, LbNetworkLoadBalancerState } from "./lbNetworkLoadBalancer";
export type LbNetworkLoadBalancer = import("./lbNetworkLoadBalancer").LbNetworkLoadBalancer;
export const LbNetworkLoadBalancer: typeof import("./lbNetworkLoadBalancer").LbNetworkLoadBalancer = null as any;
utilities.lazyLoad(exports, ["LbNetworkLoadBalancer"], () => require("./lbNetworkLoadBalancer"));

export { LbTargetGroupArgs, LbTargetGroupState } from "./lbTargetGroup";
export type LbTargetGroup = import("./lbTargetGroup").LbTargetGroup;
export const LbTargetGroup: typeof import("./lbTargetGroup").LbTargetGroup = null as any;
utilities.lazyLoad(exports, ["LbTargetGroup"], () => require("./lbTargetGroup"));

export { LoadtestingAgentArgs, LoadtestingAgentState } from "./loadtestingAgent";
export type LoadtestingAgent = import("./loadtestingAgent").LoadtestingAgent;
export const LoadtestingAgent: typeof import("./loadtestingAgent").LoadtestingAgent = null as any;
utilities.lazyLoad(exports, ["LoadtestingAgent"], () => require("./loadtestingAgent"));

export { LockboxSecretArgs, LockboxSecretState } from "./lockboxSecret";
export type LockboxSecret = import("./lockboxSecret").LockboxSecret;
export const LockboxSecret: typeof import("./lockboxSecret").LockboxSecret = null as any;
utilities.lazyLoad(exports, ["LockboxSecret"], () => require("./lockboxSecret"));

export { LockboxSecretVersionArgs, LockboxSecretVersionState } from "./lockboxSecretVersion";
export type LockboxSecretVersion = import("./lockboxSecretVersion").LockboxSecretVersion;
export const LockboxSecretVersion: typeof import("./lockboxSecretVersion").LockboxSecretVersion = null as any;
utilities.lazyLoad(exports, ["LockboxSecretVersion"], () => require("./lockboxSecretVersion"));

export { LockboxSecretVersionHashedArgs, LockboxSecretVersionHashedState } from "./lockboxSecretVersionHashed";
export type LockboxSecretVersionHashed = import("./lockboxSecretVersionHashed").LockboxSecretVersionHashed;
export const LockboxSecretVersionHashed: typeof import("./lockboxSecretVersionHashed").LockboxSecretVersionHashed = null as any;
utilities.lazyLoad(exports, ["LockboxSecretVersionHashed"], () => require("./lockboxSecretVersionHashed"));

export { LoggingGroupArgs, LoggingGroupState } from "./loggingGroup";
export type LoggingGroup = import("./loggingGroup").LoggingGroup;
export const LoggingGroup: typeof import("./loggingGroup").LoggingGroup = null as any;
utilities.lazyLoad(exports, ["LoggingGroup"], () => require("./loggingGroup"));

export { MdbClickhouseClusterArgs, MdbClickhouseClusterState } from "./mdbClickhouseCluster";
export type MdbClickhouseCluster = import("./mdbClickhouseCluster").MdbClickhouseCluster;
export const MdbClickhouseCluster: typeof import("./mdbClickhouseCluster").MdbClickhouseCluster = null as any;
utilities.lazyLoad(exports, ["MdbClickhouseCluster"], () => require("./mdbClickhouseCluster"));

export { MdbGreenplumClusterArgs, MdbGreenplumClusterState } from "./mdbGreenplumCluster";
export type MdbGreenplumCluster = import("./mdbGreenplumCluster").MdbGreenplumCluster;
export const MdbGreenplumCluster: typeof import("./mdbGreenplumCluster").MdbGreenplumCluster = null as any;
utilities.lazyLoad(exports, ["MdbGreenplumCluster"], () => require("./mdbGreenplumCluster"));

export { MdbKafkaClusterArgs, MdbKafkaClusterState } from "./mdbKafkaCluster";
export type MdbKafkaCluster = import("./mdbKafkaCluster").MdbKafkaCluster;
export const MdbKafkaCluster: typeof import("./mdbKafkaCluster").MdbKafkaCluster = null as any;
utilities.lazyLoad(exports, ["MdbKafkaCluster"], () => require("./mdbKafkaCluster"));

export { MdbKafkaConnectorArgs, MdbKafkaConnectorState } from "./mdbKafkaConnector";
export type MdbKafkaConnector = import("./mdbKafkaConnector").MdbKafkaConnector;
export const MdbKafkaConnector: typeof import("./mdbKafkaConnector").MdbKafkaConnector = null as any;
utilities.lazyLoad(exports, ["MdbKafkaConnector"], () => require("./mdbKafkaConnector"));

export { MdbKafkaTopicArgs, MdbKafkaTopicState } from "./mdbKafkaTopic";
export type MdbKafkaTopic = import("./mdbKafkaTopic").MdbKafkaTopic;
export const MdbKafkaTopic: typeof import("./mdbKafkaTopic").MdbKafkaTopic = null as any;
utilities.lazyLoad(exports, ["MdbKafkaTopic"], () => require("./mdbKafkaTopic"));

export { MdbKafkaUserArgs, MdbKafkaUserState } from "./mdbKafkaUser";
export type MdbKafkaUser = import("./mdbKafkaUser").MdbKafkaUser;
export const MdbKafkaUser: typeof import("./mdbKafkaUser").MdbKafkaUser = null as any;
utilities.lazyLoad(exports, ["MdbKafkaUser"], () => require("./mdbKafkaUser"));

export { MdbMongodbClusterArgs, MdbMongodbClusterState } from "./mdbMongodbCluster";
export type MdbMongodbCluster = import("./mdbMongodbCluster").MdbMongodbCluster;
export const MdbMongodbCluster: typeof import("./mdbMongodbCluster").MdbMongodbCluster = null as any;
utilities.lazyLoad(exports, ["MdbMongodbCluster"], () => require("./mdbMongodbCluster"));

export { MdbMysqlClusterArgs, MdbMysqlClusterState } from "./mdbMysqlCluster";
export type MdbMysqlCluster = import("./mdbMysqlCluster").MdbMysqlCluster;
export const MdbMysqlCluster: typeof import("./mdbMysqlCluster").MdbMysqlCluster = null as any;
utilities.lazyLoad(exports, ["MdbMysqlCluster"], () => require("./mdbMysqlCluster"));

export { MdbMysqlDatabaseArgs, MdbMysqlDatabaseState } from "./mdbMysqlDatabase";
export type MdbMysqlDatabase = import("./mdbMysqlDatabase").MdbMysqlDatabase;
export const MdbMysqlDatabase: typeof import("./mdbMysqlDatabase").MdbMysqlDatabase = null as any;
utilities.lazyLoad(exports, ["MdbMysqlDatabase"], () => require("./mdbMysqlDatabase"));

export { MdbMysqlUserArgs, MdbMysqlUserState } from "./mdbMysqlUser";
export type MdbMysqlUser = import("./mdbMysqlUser").MdbMysqlUser;
export const MdbMysqlUser: typeof import("./mdbMysqlUser").MdbMysqlUser = null as any;
utilities.lazyLoad(exports, ["MdbMysqlUser"], () => require("./mdbMysqlUser"));

export { MdbPostgresqlClusterArgs, MdbPostgresqlClusterState } from "./mdbPostgresqlCluster";
export type MdbPostgresqlCluster = import("./mdbPostgresqlCluster").MdbPostgresqlCluster;
export const MdbPostgresqlCluster: typeof import("./mdbPostgresqlCluster").MdbPostgresqlCluster = null as any;
utilities.lazyLoad(exports, ["MdbPostgresqlCluster"], () => require("./mdbPostgresqlCluster"));

export { MdbPostgresqlDatabaseArgs, MdbPostgresqlDatabaseState } from "./mdbPostgresqlDatabase";
export type MdbPostgresqlDatabase = import("./mdbPostgresqlDatabase").MdbPostgresqlDatabase;
export const MdbPostgresqlDatabase: typeof import("./mdbPostgresqlDatabase").MdbPostgresqlDatabase = null as any;
utilities.lazyLoad(exports, ["MdbPostgresqlDatabase"], () => require("./mdbPostgresqlDatabase"));

export { MdbPostgresqlUserArgs, MdbPostgresqlUserState } from "./mdbPostgresqlUser";
export type MdbPostgresqlUser = import("./mdbPostgresqlUser").MdbPostgresqlUser;
export const MdbPostgresqlUser: typeof import("./mdbPostgresqlUser").MdbPostgresqlUser = null as any;
utilities.lazyLoad(exports, ["MdbPostgresqlUser"], () => require("./mdbPostgresqlUser"));

export { MdbRedisClusterArgs, MdbRedisClusterState } from "./mdbRedisCluster";
export type MdbRedisCluster = import("./mdbRedisCluster").MdbRedisCluster;
export const MdbRedisCluster: typeof import("./mdbRedisCluster").MdbRedisCluster = null as any;
utilities.lazyLoad(exports, ["MdbRedisCluster"], () => require("./mdbRedisCluster"));

export { MdbSqlServerClusterArgs, MdbSqlServerClusterState } from "./mdbSqlServerCluster";
export type MdbSqlServerCluster = import("./mdbSqlServerCluster").MdbSqlServerCluster;
export const MdbSqlServerCluster: typeof import("./mdbSqlServerCluster").MdbSqlServerCluster = null as any;
utilities.lazyLoad(exports, ["MdbSqlServerCluster"], () => require("./mdbSqlServerCluster"));

export { MessageQueueArgs, MessageQueueState } from "./messageQueue";
export type MessageQueue = import("./messageQueue").MessageQueue;
export const MessageQueue: typeof import("./messageQueue").MessageQueue = null as any;
utilities.lazyLoad(exports, ["MessageQueue"], () => require("./messageQueue"));

export { MonitoringDashboardArgs, MonitoringDashboardState } from "./monitoringDashboard";
export type MonitoringDashboard = import("./monitoringDashboard").MonitoringDashboard;
export const MonitoringDashboard: typeof import("./monitoringDashboard").MonitoringDashboard = null as any;
utilities.lazyLoad(exports, ["MonitoringDashboard"], () => require("./monitoringDashboard"));

export { OrganizationmanagerGroupArgs, OrganizationmanagerGroupState } from "./organizationmanagerGroup";
export type OrganizationmanagerGroup = import("./organizationmanagerGroup").OrganizationmanagerGroup;
export const OrganizationmanagerGroup: typeof import("./organizationmanagerGroup").OrganizationmanagerGroup = null as any;
utilities.lazyLoad(exports, ["OrganizationmanagerGroup"], () => require("./organizationmanagerGroup"));

export { OrganizationmanagerGroupMappingArgs, OrganizationmanagerGroupMappingState } from "./organizationmanagerGroupMapping";
export type OrganizationmanagerGroupMapping = import("./organizationmanagerGroupMapping").OrganizationmanagerGroupMapping;
export const OrganizationmanagerGroupMapping: typeof import("./organizationmanagerGroupMapping").OrganizationmanagerGroupMapping = null as any;
utilities.lazyLoad(exports, ["OrganizationmanagerGroupMapping"], () => require("./organizationmanagerGroupMapping"));

export { OrganizationmanagerGroupMappingItemArgs, OrganizationmanagerGroupMappingItemState } from "./organizationmanagerGroupMappingItem";
export type OrganizationmanagerGroupMappingItem = import("./organizationmanagerGroupMappingItem").OrganizationmanagerGroupMappingItem;
export const OrganizationmanagerGroupMappingItem: typeof import("./organizationmanagerGroupMappingItem").OrganizationmanagerGroupMappingItem = null as any;
utilities.lazyLoad(exports, ["OrganizationmanagerGroupMappingItem"], () => require("./organizationmanagerGroupMappingItem"));

export { OrganizationmanagerGroupMembershipArgs, OrganizationmanagerGroupMembershipState } from "./organizationmanagerGroupMembership";
export type OrganizationmanagerGroupMembership = import("./organizationmanagerGroupMembership").OrganizationmanagerGroupMembership;
export const OrganizationmanagerGroupMembership: typeof import("./organizationmanagerGroupMembership").OrganizationmanagerGroupMembership = null as any;
utilities.lazyLoad(exports, ["OrganizationmanagerGroupMembership"], () => require("./organizationmanagerGroupMembership"));

export { OrganizationmanagerOsLoginSettingsArgs, OrganizationmanagerOsLoginSettingsState } from "./organizationmanagerOsLoginSettings";
export type OrganizationmanagerOsLoginSettings = import("./organizationmanagerOsLoginSettings").OrganizationmanagerOsLoginSettings;
export const OrganizationmanagerOsLoginSettings: typeof import("./organizationmanagerOsLoginSettings").OrganizationmanagerOsLoginSettings = null as any;
utilities.lazyLoad(exports, ["OrganizationmanagerOsLoginSettings"], () => require("./organizationmanagerOsLoginSettings"));

export { OrganizationmanagerSamlFederationArgs, OrganizationmanagerSamlFederationState } from "./organizationmanagerSamlFederation";
export type OrganizationmanagerSamlFederation = import("./organizationmanagerSamlFederation").OrganizationmanagerSamlFederation;
export const OrganizationmanagerSamlFederation: typeof import("./organizationmanagerSamlFederation").OrganizationmanagerSamlFederation = null as any;
utilities.lazyLoad(exports, ["OrganizationmanagerSamlFederation"], () => require("./organizationmanagerSamlFederation"));

export { OrganizationmanagerSamlFederationUserAccountArgs, OrganizationmanagerSamlFederationUserAccountState } from "./organizationmanagerSamlFederationUserAccount";
export type OrganizationmanagerSamlFederationUserAccount = import("./organizationmanagerSamlFederationUserAccount").OrganizationmanagerSamlFederationUserAccount;
export const OrganizationmanagerSamlFederationUserAccount: typeof import("./organizationmanagerSamlFederationUserAccount").OrganizationmanagerSamlFederationUserAccount = null as any;
utilities.lazyLoad(exports, ["OrganizationmanagerSamlFederationUserAccount"], () => require("./organizationmanagerSamlFederationUserAccount"));

export { OrganizationmanagerUserSshKeyArgs, OrganizationmanagerUserSshKeyState } from "./organizationmanagerUserSshKey";
export type OrganizationmanagerUserSshKey = import("./organizationmanagerUserSshKey").OrganizationmanagerUserSshKey;
export const OrganizationmanagerUserSshKey: typeof import("./organizationmanagerUserSshKey").OrganizationmanagerUserSshKey = null as any;
utilities.lazyLoad(exports, ["OrganizationmanagerUserSshKey"], () => require("./organizationmanagerUserSshKey"));

export * from "./provider";
import { Provider } from "./provider";

export { ResourcemanagerFolderIamPolicyArgs, ResourcemanagerFolderIamPolicyState } from "./resourcemanagerFolderIamPolicy";
export type ResourcemanagerFolderIamPolicy = import("./resourcemanagerFolderIamPolicy").ResourcemanagerFolderIamPolicy;
export const ResourcemanagerFolderIamPolicy: typeof import("./resourcemanagerFolderIamPolicy").ResourcemanagerFolderIamPolicy = null as any;
utilities.lazyLoad(exports, ["ResourcemanagerFolderIamPolicy"], () => require("./resourcemanagerFolderIamPolicy"));

export { ServerlessContainerArgs, ServerlessContainerState } from "./serverlessContainer";
export type ServerlessContainer = import("./serverlessContainer").ServerlessContainer;
export const ServerlessContainer: typeof import("./serverlessContainer").ServerlessContainer = null as any;
utilities.lazyLoad(exports, ["ServerlessContainer"], () => require("./serverlessContainer"));

export { ServerlessEventrouterBusArgs, ServerlessEventrouterBusState } from "./serverlessEventrouterBus";
export type ServerlessEventrouterBus = import("./serverlessEventrouterBus").ServerlessEventrouterBus;
export const ServerlessEventrouterBus: typeof import("./serverlessEventrouterBus").ServerlessEventrouterBus = null as any;
utilities.lazyLoad(exports, ["ServerlessEventrouterBus"], () => require("./serverlessEventrouterBus"));

export { ServerlessEventrouterConnectorArgs, ServerlessEventrouterConnectorState } from "./serverlessEventrouterConnector";
export type ServerlessEventrouterConnector = import("./serverlessEventrouterConnector").ServerlessEventrouterConnector;
export const ServerlessEventrouterConnector: typeof import("./serverlessEventrouterConnector").ServerlessEventrouterConnector = null as any;
utilities.lazyLoad(exports, ["ServerlessEventrouterConnector"], () => require("./serverlessEventrouterConnector"));

export { ServerlessEventrouterRuleArgs, ServerlessEventrouterRuleState } from "./serverlessEventrouterRule";
export type ServerlessEventrouterRule = import("./serverlessEventrouterRule").ServerlessEventrouterRule;
export const ServerlessEventrouterRule: typeof import("./serverlessEventrouterRule").ServerlessEventrouterRule = null as any;
utilities.lazyLoad(exports, ["ServerlessEventrouterRule"], () => require("./serverlessEventrouterRule"));

export { SmartcaptchaCaptchaArgs, SmartcaptchaCaptchaState } from "./smartcaptchaCaptcha";
export type SmartcaptchaCaptcha = import("./smartcaptchaCaptcha").SmartcaptchaCaptcha;
export const SmartcaptchaCaptcha: typeof import("./smartcaptchaCaptcha").SmartcaptchaCaptcha = null as any;
utilities.lazyLoad(exports, ["SmartcaptchaCaptcha"], () => require("./smartcaptchaCaptcha"));

export { StorageBucketArgs, StorageBucketState } from "./storageBucket";
export type StorageBucket = import("./storageBucket").StorageBucket;
export const StorageBucket: typeof import("./storageBucket").StorageBucket = null as any;
utilities.lazyLoad(exports, ["StorageBucket"], () => require("./storageBucket"));

export { StorageObjectArgs, StorageObjectState } from "./storageObject";
export type StorageObject = import("./storageObject").StorageObject;
export const StorageObject: typeof import("./storageObject").StorageObject = null as any;
utilities.lazyLoad(exports, ["StorageObject"], () => require("./storageObject"));

export { SwsAdvancedRateLimiterProfileArgs, SwsAdvancedRateLimiterProfileState } from "./swsAdvancedRateLimiterProfile";
export type SwsAdvancedRateLimiterProfile = import("./swsAdvancedRateLimiterProfile").SwsAdvancedRateLimiterProfile;
export const SwsAdvancedRateLimiterProfile: typeof import("./swsAdvancedRateLimiterProfile").SwsAdvancedRateLimiterProfile = null as any;
utilities.lazyLoad(exports, ["SwsAdvancedRateLimiterProfile"], () => require("./swsAdvancedRateLimiterProfile"));

export { SwsSecurityProfileArgs, SwsSecurityProfileState } from "./swsSecurityProfile";
export type SwsSecurityProfile = import("./swsSecurityProfile").SwsSecurityProfile;
export const SwsSecurityProfile: typeof import("./swsSecurityProfile").SwsSecurityProfile = null as any;
utilities.lazyLoad(exports, ["SwsSecurityProfile"], () => require("./swsSecurityProfile"));

export { SwsWafProfileArgs, SwsWafProfileState } from "./swsWafProfile";
export type SwsWafProfile = import("./swsWafProfile").SwsWafProfile;
export const SwsWafProfile: typeof import("./swsWafProfile").SwsWafProfile = null as any;
utilities.lazyLoad(exports, ["SwsWafProfile"], () => require("./swsWafProfile"));

export { VpcAddressArgs, VpcAddressState } from "./vpcAddress";
export type VpcAddress = import("./vpcAddress").VpcAddress;
export const VpcAddress: typeof import("./vpcAddress").VpcAddress = null as any;
utilities.lazyLoad(exports, ["VpcAddress"], () => require("./vpcAddress"));

export { VpcDefaultSecurityGroupArgs, VpcDefaultSecurityGroupState } from "./vpcDefaultSecurityGroup";
export type VpcDefaultSecurityGroup = import("./vpcDefaultSecurityGroup").VpcDefaultSecurityGroup;
export const VpcDefaultSecurityGroup: typeof import("./vpcDefaultSecurityGroup").VpcDefaultSecurityGroup = null as any;
utilities.lazyLoad(exports, ["VpcDefaultSecurityGroup"], () => require("./vpcDefaultSecurityGroup"));

export { VpcGatewayArgs, VpcGatewayState } from "./vpcGateway";
export type VpcGateway = import("./vpcGateway").VpcGateway;
export const VpcGateway: typeof import("./vpcGateway").VpcGateway = null as any;
utilities.lazyLoad(exports, ["VpcGateway"], () => require("./vpcGateway"));

export { VpcNetworkArgs, VpcNetworkState } from "./vpcNetwork";
export type VpcNetwork = import("./vpcNetwork").VpcNetwork;
export const VpcNetwork: typeof import("./vpcNetwork").VpcNetwork = null as any;
utilities.lazyLoad(exports, ["VpcNetwork"], () => require("./vpcNetwork"));

export { VpcPrivateEndpointArgs, VpcPrivateEndpointState } from "./vpcPrivateEndpoint";
export type VpcPrivateEndpoint = import("./vpcPrivateEndpoint").VpcPrivateEndpoint;
export const VpcPrivateEndpoint: typeof import("./vpcPrivateEndpoint").VpcPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["VpcPrivateEndpoint"], () => require("./vpcPrivateEndpoint"));

export { VpcRouteTableArgs, VpcRouteTableState } from "./vpcRouteTable";
export type VpcRouteTable = import("./vpcRouteTable").VpcRouteTable;
export const VpcRouteTable: typeof import("./vpcRouteTable").VpcRouteTable = null as any;
utilities.lazyLoad(exports, ["VpcRouteTable"], () => require("./vpcRouteTable"));

export { VpcSecurityGroupArgs, VpcSecurityGroupState } from "./vpcSecurityGroup";
export type VpcSecurityGroup = import("./vpcSecurityGroup").VpcSecurityGroup;
export const VpcSecurityGroup: typeof import("./vpcSecurityGroup").VpcSecurityGroup = null as any;
utilities.lazyLoad(exports, ["VpcSecurityGroup"], () => require("./vpcSecurityGroup"));

export { VpcSubnetArgs, VpcSubnetState } from "./vpcSubnet";
export type VpcSubnet = import("./vpcSubnet").VpcSubnet;
export const VpcSubnet: typeof import("./vpcSubnet").VpcSubnet = null as any;
utilities.lazyLoad(exports, ["VpcSubnet"], () => require("./vpcSubnet"));

export { YdbDatabaseDedicatedArgs, YdbDatabaseDedicatedState } from "./ydbDatabaseDedicated";
export type YdbDatabaseDedicated = import("./ydbDatabaseDedicated").YdbDatabaseDedicated;
export const YdbDatabaseDedicated: typeof import("./ydbDatabaseDedicated").YdbDatabaseDedicated = null as any;
utilities.lazyLoad(exports, ["YdbDatabaseDedicated"], () => require("./ydbDatabaseDedicated"));

export { YdbDatabaseServerlessArgs, YdbDatabaseServerlessState } from "./ydbDatabaseServerless";
export type YdbDatabaseServerless = import("./ydbDatabaseServerless").YdbDatabaseServerless;
export const YdbDatabaseServerless: typeof import("./ydbDatabaseServerless").YdbDatabaseServerless = null as any;
utilities.lazyLoad(exports, ["YdbDatabaseServerless"], () => require("./ydbDatabaseServerless"));

export { YdbTableArgs, YdbTableState } from "./ydbTable";
export type YdbTable = import("./ydbTable").YdbTable;
export const YdbTable: typeof import("./ydbTable").YdbTable = null as any;
utilities.lazyLoad(exports, ["YdbTable"], () => require("./ydbTable"));

export { YdbTableChangefeedArgs, YdbTableChangefeedState } from "./ydbTableChangefeed";
export type YdbTableChangefeed = import("./ydbTableChangefeed").YdbTableChangefeed;
export const YdbTableChangefeed: typeof import("./ydbTableChangefeed").YdbTableChangefeed = null as any;
utilities.lazyLoad(exports, ["YdbTableChangefeed"], () => require("./ydbTableChangefeed"));

export { YdbTableIndexArgs, YdbTableIndexState } from "./ydbTableIndex";
export type YdbTableIndex = import("./ydbTableIndex").YdbTableIndex;
export const YdbTableIndex: typeof import("./ydbTableIndex").YdbTableIndex = null as any;
utilities.lazyLoad(exports, ["YdbTableIndex"], () => require("./ydbTableIndex"));

export { YdbTopicArgs, YdbTopicState } from "./ydbTopic";
export type YdbTopic = import("./ydbTopic").YdbTopic;
export const YdbTopic: typeof import("./ydbTopic").YdbTopic = null as any;
utilities.lazyLoad(exports, ["YdbTopic"], () => require("./ydbTopic"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "yandex:index/albBackendGroup:AlbBackendGroup":
                return new AlbBackendGroup(name, <any>undefined, { urn })
            case "yandex:index/albHttpRouter:AlbHttpRouter":
                return new AlbHttpRouter(name, <any>undefined, { urn })
            case "yandex:index/albLoadBalancer:AlbLoadBalancer":
                return new AlbLoadBalancer(name, <any>undefined, { urn })
            case "yandex:index/albTargetGroup:AlbTargetGroup":
                return new AlbTargetGroup(name, <any>undefined, { urn })
            case "yandex:index/albVirtualHost:AlbVirtualHost":
                return new AlbVirtualHost(name, <any>undefined, { urn })
            case "yandex:index/apiGateway:ApiGateway":
                return new ApiGateway(name, <any>undefined, { urn })
            case "yandex:index/auditTrailsTrail:AuditTrailsTrail":
                return new AuditTrailsTrail(name, <any>undefined, { urn })
            case "yandex:index/backupPolicy:BackupPolicy":
                return new BackupPolicy(name, <any>undefined, { urn })
            case "yandex:index/backupPolicyBindings:BackupPolicyBindings":
                return new BackupPolicyBindings(name, <any>undefined, { urn })
            case "yandex:index/cdnOriginGroup:CdnOriginGroup":
                return new CdnOriginGroup(name, <any>undefined, { urn })
            case "yandex:index/cdnResource:CdnResource":
                return new CdnResource(name, <any>undefined, { urn })
            case "yandex:index/cmCertificate:CmCertificate":
                return new CmCertificate(name, <any>undefined, { urn })
            case "yandex:index/computeDisk:ComputeDisk":
                return new ComputeDisk(name, <any>undefined, { urn })
            case "yandex:index/computeDiskPlacementGroup:ComputeDiskPlacementGroup":
                return new ComputeDiskPlacementGroup(name, <any>undefined, { urn })
            case "yandex:index/computeFilesystem:ComputeFilesystem":
                return new ComputeFilesystem(name, <any>undefined, { urn })
            case "yandex:index/computeGpuCluster:ComputeGpuCluster":
                return new ComputeGpuCluster(name, <any>undefined, { urn })
            case "yandex:index/computeImage:ComputeImage":
                return new ComputeImage(name, <any>undefined, { urn })
            case "yandex:index/computeInstance:ComputeInstance":
                return new ComputeInstance(name, <any>undefined, { urn })
            case "yandex:index/computeInstanceGroup:ComputeInstanceGroup":
                return new ComputeInstanceGroup(name, <any>undefined, { urn })
            case "yandex:index/computePlacementGroup:ComputePlacementGroup":
                return new ComputePlacementGroup(name, <any>undefined, { urn })
            case "yandex:index/computeSnapshot:ComputeSnapshot":
                return new ComputeSnapshot(name, <any>undefined, { urn })
            case "yandex:index/computeSnapshotSchedule:ComputeSnapshotSchedule":
                return new ComputeSnapshotSchedule(name, <any>undefined, { urn })
            case "yandex:index/containerRegistry:ContainerRegistry":
                return new ContainerRegistry(name, <any>undefined, { urn })
            case "yandex:index/containerRegistryIpPermission:ContainerRegistryIpPermission":
                return new ContainerRegistryIpPermission(name, <any>undefined, { urn })
            case "yandex:index/containerRepository:ContainerRepository":
                return new ContainerRepository(name, <any>undefined, { urn })
            case "yandex:index/containerRepositoryLifecyclePolicy:ContainerRepositoryLifecyclePolicy":
                return new ContainerRepositoryLifecyclePolicy(name, <any>undefined, { urn })
            case "yandex:index/dataprocCluster:DataprocCluster":
                return new DataprocCluster(name, <any>undefined, { urn })
            case "yandex:index/datatransferEndpoint:DatatransferEndpoint":
                return new DatatransferEndpoint(name, <any>undefined, { urn })
            case "yandex:index/datatransferTransfer:DatatransferTransfer":
                return new DatatransferTransfer(name, <any>undefined, { urn })
            case "yandex:index/dnsRecordSet:DnsRecordSet":
                return new DnsRecordSet(name, <any>undefined, { urn })
            case "yandex:index/dnsZone:DnsZone":
                return new DnsZone(name, <any>undefined, { urn })
            case "yandex:index/function:Function":
                return new Function(name, <any>undefined, { urn })
            case "yandex:index/functionScalingPolicy:FunctionScalingPolicy":
                return new FunctionScalingPolicy(name, <any>undefined, { urn })
            case "yandex:index/functionTrigger:FunctionTrigger":
                return new FunctionTrigger(name, <any>undefined, { urn })
            case "yandex:index/iamServiceAccount:IamServiceAccount":
                return new IamServiceAccount(name, <any>undefined, { urn })
            case "yandex:index/iamServiceAccountApiKey:IamServiceAccountApiKey":
                return new IamServiceAccountApiKey(name, <any>undefined, { urn })
            case "yandex:index/iamServiceAccountIamPolicy:IamServiceAccountIamPolicy":
                return new IamServiceAccountIamPolicy(name, <any>undefined, { urn })
            case "yandex:index/iamServiceAccountKey:IamServiceAccountKey":
                return new IamServiceAccountKey(name, <any>undefined, { urn })
            case "yandex:index/iamServiceAccountStaticAccessKey:IamServiceAccountStaticAccessKey":
                return new IamServiceAccountStaticAccessKey(name, <any>undefined, { urn })
            case "yandex:index/iamWorkloadIdentityFederatedCredential:IamWorkloadIdentityFederatedCredential":
                return new IamWorkloadIdentityFederatedCredential(name, <any>undefined, { urn })
            case "yandex:index/iamWorkloadIdentityOidcFederation:IamWorkloadIdentityOidcFederation":
                return new IamWorkloadIdentityOidcFederation(name, <any>undefined, { urn })
            case "yandex:index/iotCoreBroker:IotCoreBroker":
                return new IotCoreBroker(name, <any>undefined, { urn })
            case "yandex:index/iotCoreDevice:IotCoreDevice":
                return new IotCoreDevice(name, <any>undefined, { urn })
            case "yandex:index/iotCoreRegistry:IotCoreRegistry":
                return new IotCoreRegistry(name, <any>undefined, { urn })
            case "yandex:index/kmsAsymmetricEncryptionKey:KmsAsymmetricEncryptionKey":
                return new KmsAsymmetricEncryptionKey(name, <any>undefined, { urn })
            case "yandex:index/kmsAsymmetricSignatureKey:KmsAsymmetricSignatureKey":
                return new KmsAsymmetricSignatureKey(name, <any>undefined, { urn })
            case "yandex:index/kmsSecretCiphertext:KmsSecretCiphertext":
                return new KmsSecretCiphertext(name, <any>undefined, { urn })
            case "yandex:index/kmsSymmetricKey:KmsSymmetricKey":
                return new KmsSymmetricKey(name, <any>undefined, { urn })
            case "yandex:index/kubernetesCluster:KubernetesCluster":
                return new KubernetesCluster(name, <any>undefined, { urn })
            case "yandex:index/kubernetesNodeGroup:KubernetesNodeGroup":
                return new KubernetesNodeGroup(name, <any>undefined, { urn })
            case "yandex:index/lbNetworkLoadBalancer:LbNetworkLoadBalancer":
                return new LbNetworkLoadBalancer(name, <any>undefined, { urn })
            case "yandex:index/lbTargetGroup:LbTargetGroup":
                return new LbTargetGroup(name, <any>undefined, { urn })
            case "yandex:index/loadtestingAgent:LoadtestingAgent":
                return new LoadtestingAgent(name, <any>undefined, { urn })
            case "yandex:index/lockboxSecret:LockboxSecret":
                return new LockboxSecret(name, <any>undefined, { urn })
            case "yandex:index/lockboxSecretVersion:LockboxSecretVersion":
                return new LockboxSecretVersion(name, <any>undefined, { urn })
            case "yandex:index/lockboxSecretVersionHashed:LockboxSecretVersionHashed":
                return new LockboxSecretVersionHashed(name, <any>undefined, { urn })
            case "yandex:index/loggingGroup:LoggingGroup":
                return new LoggingGroup(name, <any>undefined, { urn })
            case "yandex:index/mdbClickhouseCluster:MdbClickhouseCluster":
                return new MdbClickhouseCluster(name, <any>undefined, { urn })
            case "yandex:index/mdbGreenplumCluster:MdbGreenplumCluster":
                return new MdbGreenplumCluster(name, <any>undefined, { urn })
            case "yandex:index/mdbKafkaCluster:MdbKafkaCluster":
                return new MdbKafkaCluster(name, <any>undefined, { urn })
            case "yandex:index/mdbKafkaConnector:MdbKafkaConnector":
                return new MdbKafkaConnector(name, <any>undefined, { urn })
            case "yandex:index/mdbKafkaTopic:MdbKafkaTopic":
                return new MdbKafkaTopic(name, <any>undefined, { urn })
            case "yandex:index/mdbKafkaUser:MdbKafkaUser":
                return new MdbKafkaUser(name, <any>undefined, { urn })
            case "yandex:index/mdbMongodbCluster:MdbMongodbCluster":
                return new MdbMongodbCluster(name, <any>undefined, { urn })
            case "yandex:index/mdbMysqlCluster:MdbMysqlCluster":
                return new MdbMysqlCluster(name, <any>undefined, { urn })
            case "yandex:index/mdbMysqlDatabase:MdbMysqlDatabase":
                return new MdbMysqlDatabase(name, <any>undefined, { urn })
            case "yandex:index/mdbMysqlUser:MdbMysqlUser":
                return new MdbMysqlUser(name, <any>undefined, { urn })
            case "yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster":
                return new MdbPostgresqlCluster(name, <any>undefined, { urn })
            case "yandex:index/mdbPostgresqlDatabase:MdbPostgresqlDatabase":
                return new MdbPostgresqlDatabase(name, <any>undefined, { urn })
            case "yandex:index/mdbPostgresqlUser:MdbPostgresqlUser":
                return new MdbPostgresqlUser(name, <any>undefined, { urn })
            case "yandex:index/mdbRedisCluster:MdbRedisCluster":
                return new MdbRedisCluster(name, <any>undefined, { urn })
            case "yandex:index/mdbSqlServerCluster:MdbSqlServerCluster":
                return new MdbSqlServerCluster(name, <any>undefined, { urn })
            case "yandex:index/messageQueue:MessageQueue":
                return new MessageQueue(name, <any>undefined, { urn })
            case "yandex:index/monitoringDashboard:MonitoringDashboard":
                return new MonitoringDashboard(name, <any>undefined, { urn })
            case "yandex:index/organizationmanagerGroup:OrganizationmanagerGroup":
                return new OrganizationmanagerGroup(name, <any>undefined, { urn })
            case "yandex:index/organizationmanagerGroupMapping:OrganizationmanagerGroupMapping":
                return new OrganizationmanagerGroupMapping(name, <any>undefined, { urn })
            case "yandex:index/organizationmanagerGroupMappingItem:OrganizationmanagerGroupMappingItem":
                return new OrganizationmanagerGroupMappingItem(name, <any>undefined, { urn })
            case "yandex:index/organizationmanagerGroupMembership:OrganizationmanagerGroupMembership":
                return new OrganizationmanagerGroupMembership(name, <any>undefined, { urn })
            case "yandex:index/organizationmanagerOsLoginSettings:OrganizationmanagerOsLoginSettings":
                return new OrganizationmanagerOsLoginSettings(name, <any>undefined, { urn })
            case "yandex:index/organizationmanagerSamlFederation:OrganizationmanagerSamlFederation":
                return new OrganizationmanagerSamlFederation(name, <any>undefined, { urn })
            case "yandex:index/organizationmanagerSamlFederationUserAccount:OrganizationmanagerSamlFederationUserAccount":
                return new OrganizationmanagerSamlFederationUserAccount(name, <any>undefined, { urn })
            case "yandex:index/organizationmanagerUserSshKey:OrganizationmanagerUserSshKey":
                return new OrganizationmanagerUserSshKey(name, <any>undefined, { urn })
            case "yandex:index/resourcemanagerFolderIamPolicy:ResourcemanagerFolderIamPolicy":
                return new ResourcemanagerFolderIamPolicy(name, <any>undefined, { urn })
            case "yandex:index/serverlessContainer:ServerlessContainer":
                return new ServerlessContainer(name, <any>undefined, { urn })
            case "yandex:index/serverlessEventrouterBus:ServerlessEventrouterBus":
                return new ServerlessEventrouterBus(name, <any>undefined, { urn })
            case "yandex:index/serverlessEventrouterConnector:ServerlessEventrouterConnector":
                return new ServerlessEventrouterConnector(name, <any>undefined, { urn })
            case "yandex:index/serverlessEventrouterRule:ServerlessEventrouterRule":
                return new ServerlessEventrouterRule(name, <any>undefined, { urn })
            case "yandex:index/smartcaptchaCaptcha:SmartcaptchaCaptcha":
                return new SmartcaptchaCaptcha(name, <any>undefined, { urn })
            case "yandex:index/storageBucket:StorageBucket":
                return new StorageBucket(name, <any>undefined, { urn })
            case "yandex:index/storageObject:StorageObject":
                return new StorageObject(name, <any>undefined, { urn })
            case "yandex:index/swsAdvancedRateLimiterProfile:SwsAdvancedRateLimiterProfile":
                return new SwsAdvancedRateLimiterProfile(name, <any>undefined, { urn })
            case "yandex:index/swsSecurityProfile:SwsSecurityProfile":
                return new SwsSecurityProfile(name, <any>undefined, { urn })
            case "yandex:index/swsWafProfile:SwsWafProfile":
                return new SwsWafProfile(name, <any>undefined, { urn })
            case "yandex:index/vpcAddress:VpcAddress":
                return new VpcAddress(name, <any>undefined, { urn })
            case "yandex:index/vpcDefaultSecurityGroup:VpcDefaultSecurityGroup":
                return new VpcDefaultSecurityGroup(name, <any>undefined, { urn })
            case "yandex:index/vpcGateway:VpcGateway":
                return new VpcGateway(name, <any>undefined, { urn })
            case "yandex:index/vpcNetwork:VpcNetwork":
                return new VpcNetwork(name, <any>undefined, { urn })
            case "yandex:index/vpcPrivateEndpoint:VpcPrivateEndpoint":
                return new VpcPrivateEndpoint(name, <any>undefined, { urn })
            case "yandex:index/vpcRouteTable:VpcRouteTable":
                return new VpcRouteTable(name, <any>undefined, { urn })
            case "yandex:index/vpcSecurityGroup:VpcSecurityGroup":
                return new VpcSecurityGroup(name, <any>undefined, { urn })
            case "yandex:index/vpcSubnet:VpcSubnet":
                return new VpcSubnet(name, <any>undefined, { urn })
            case "yandex:index/ydbDatabaseDedicated:YdbDatabaseDedicated":
                return new YdbDatabaseDedicated(name, <any>undefined, { urn })
            case "yandex:index/ydbDatabaseServerless:YdbDatabaseServerless":
                return new YdbDatabaseServerless(name, <any>undefined, { urn })
            case "yandex:index/ydbTable:YdbTable":
                return new YdbTable(name, <any>undefined, { urn })
            case "yandex:index/ydbTableChangefeed:YdbTableChangefeed":
                return new YdbTableChangefeed(name, <any>undefined, { urn })
            case "yandex:index/ydbTableIndex:YdbTableIndex":
                return new YdbTableIndex(name, <any>undefined, { urn })
            case "yandex:index/ydbTopic:YdbTopic":
                return new YdbTopic(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("yandex", "index/albBackendGroup", _module)
pulumi.runtime.registerResourceModule("yandex", "index/albHttpRouter", _module)
pulumi.runtime.registerResourceModule("yandex", "index/albLoadBalancer", _module)
pulumi.runtime.registerResourceModule("yandex", "index/albTargetGroup", _module)
pulumi.runtime.registerResourceModule("yandex", "index/albVirtualHost", _module)
pulumi.runtime.registerResourceModule("yandex", "index/apiGateway", _module)
pulumi.runtime.registerResourceModule("yandex", "index/auditTrailsTrail", _module)
pulumi.runtime.registerResourceModule("yandex", "index/backupPolicy", _module)
pulumi.runtime.registerResourceModule("yandex", "index/backupPolicyBindings", _module)
pulumi.runtime.registerResourceModule("yandex", "index/cdnOriginGroup", _module)
pulumi.runtime.registerResourceModule("yandex", "index/cdnResource", _module)
pulumi.runtime.registerResourceModule("yandex", "index/cmCertificate", _module)
pulumi.runtime.registerResourceModule("yandex", "index/computeDisk", _module)
pulumi.runtime.registerResourceModule("yandex", "index/computeDiskPlacementGroup", _module)
pulumi.runtime.registerResourceModule("yandex", "index/computeFilesystem", _module)
pulumi.runtime.registerResourceModule("yandex", "index/computeGpuCluster", _module)
pulumi.runtime.registerResourceModule("yandex", "index/computeImage", _module)
pulumi.runtime.registerResourceModule("yandex", "index/computeInstance", _module)
pulumi.runtime.registerResourceModule("yandex", "index/computeInstanceGroup", _module)
pulumi.runtime.registerResourceModule("yandex", "index/computePlacementGroup", _module)
pulumi.runtime.registerResourceModule("yandex", "index/computeSnapshot", _module)
pulumi.runtime.registerResourceModule("yandex", "index/computeSnapshotSchedule", _module)
pulumi.runtime.registerResourceModule("yandex", "index/containerRegistry", _module)
pulumi.runtime.registerResourceModule("yandex", "index/containerRegistryIpPermission", _module)
pulumi.runtime.registerResourceModule("yandex", "index/containerRepository", _module)
pulumi.runtime.registerResourceModule("yandex", "index/containerRepositoryLifecyclePolicy", _module)
pulumi.runtime.registerResourceModule("yandex", "index/dataprocCluster", _module)
pulumi.runtime.registerResourceModule("yandex", "index/datatransferEndpoint", _module)
pulumi.runtime.registerResourceModule("yandex", "index/datatransferTransfer", _module)
pulumi.runtime.registerResourceModule("yandex", "index/dnsRecordSet", _module)
pulumi.runtime.registerResourceModule("yandex", "index/dnsZone", _module)
pulumi.runtime.registerResourceModule("yandex", "index/function", _module)
pulumi.runtime.registerResourceModule("yandex", "index/functionScalingPolicy", _module)
pulumi.runtime.registerResourceModule("yandex", "index/functionTrigger", _module)
pulumi.runtime.registerResourceModule("yandex", "index/iamServiceAccount", _module)
pulumi.runtime.registerResourceModule("yandex", "index/iamServiceAccountApiKey", _module)
pulumi.runtime.registerResourceModule("yandex", "index/iamServiceAccountIamPolicy", _module)
pulumi.runtime.registerResourceModule("yandex", "index/iamServiceAccountKey", _module)
pulumi.runtime.registerResourceModule("yandex", "index/iamServiceAccountStaticAccessKey", _module)
pulumi.runtime.registerResourceModule("yandex", "index/iamWorkloadIdentityFederatedCredential", _module)
pulumi.runtime.registerResourceModule("yandex", "index/iamWorkloadIdentityOidcFederation", _module)
pulumi.runtime.registerResourceModule("yandex", "index/iotCoreBroker", _module)
pulumi.runtime.registerResourceModule("yandex", "index/iotCoreDevice", _module)
pulumi.runtime.registerResourceModule("yandex", "index/iotCoreRegistry", _module)
pulumi.runtime.registerResourceModule("yandex", "index/kmsAsymmetricEncryptionKey", _module)
pulumi.runtime.registerResourceModule("yandex", "index/kmsAsymmetricSignatureKey", _module)
pulumi.runtime.registerResourceModule("yandex", "index/kmsSecretCiphertext", _module)
pulumi.runtime.registerResourceModule("yandex", "index/kmsSymmetricKey", _module)
pulumi.runtime.registerResourceModule("yandex", "index/kubernetesCluster", _module)
pulumi.runtime.registerResourceModule("yandex", "index/kubernetesNodeGroup", _module)
pulumi.runtime.registerResourceModule("yandex", "index/lbNetworkLoadBalancer", _module)
pulumi.runtime.registerResourceModule("yandex", "index/lbTargetGroup", _module)
pulumi.runtime.registerResourceModule("yandex", "index/loadtestingAgent", _module)
pulumi.runtime.registerResourceModule("yandex", "index/lockboxSecret", _module)
pulumi.runtime.registerResourceModule("yandex", "index/lockboxSecretVersion", _module)
pulumi.runtime.registerResourceModule("yandex", "index/lockboxSecretVersionHashed", _module)
pulumi.runtime.registerResourceModule("yandex", "index/loggingGroup", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbClickhouseCluster", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbGreenplumCluster", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbKafkaCluster", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbKafkaConnector", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbKafkaTopic", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbKafkaUser", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbMongodbCluster", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbMysqlCluster", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbMysqlDatabase", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbMysqlUser", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbPostgresqlCluster", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbPostgresqlDatabase", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbPostgresqlUser", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbRedisCluster", _module)
pulumi.runtime.registerResourceModule("yandex", "index/mdbSqlServerCluster", _module)
pulumi.runtime.registerResourceModule("yandex", "index/messageQueue", _module)
pulumi.runtime.registerResourceModule("yandex", "index/monitoringDashboard", _module)
pulumi.runtime.registerResourceModule("yandex", "index/organizationmanagerGroup", _module)
pulumi.runtime.registerResourceModule("yandex", "index/organizationmanagerGroupMapping", _module)
pulumi.runtime.registerResourceModule("yandex", "index/organizationmanagerGroupMappingItem", _module)
pulumi.runtime.registerResourceModule("yandex", "index/organizationmanagerGroupMembership", _module)
pulumi.runtime.registerResourceModule("yandex", "index/organizationmanagerOsLoginSettings", _module)
pulumi.runtime.registerResourceModule("yandex", "index/organizationmanagerSamlFederation", _module)
pulumi.runtime.registerResourceModule("yandex", "index/organizationmanagerSamlFederationUserAccount", _module)
pulumi.runtime.registerResourceModule("yandex", "index/organizationmanagerUserSshKey", _module)
pulumi.runtime.registerResourceModule("yandex", "index/resourcemanagerFolderIamPolicy", _module)
pulumi.runtime.registerResourceModule("yandex", "index/serverlessContainer", _module)
pulumi.runtime.registerResourceModule("yandex", "index/serverlessEventrouterBus", _module)
pulumi.runtime.registerResourceModule("yandex", "index/serverlessEventrouterConnector", _module)
pulumi.runtime.registerResourceModule("yandex", "index/serverlessEventrouterRule", _module)
pulumi.runtime.registerResourceModule("yandex", "index/smartcaptchaCaptcha", _module)
pulumi.runtime.registerResourceModule("yandex", "index/storageBucket", _module)
pulumi.runtime.registerResourceModule("yandex", "index/storageObject", _module)
pulumi.runtime.registerResourceModule("yandex", "index/swsAdvancedRateLimiterProfile", _module)
pulumi.runtime.registerResourceModule("yandex", "index/swsSecurityProfile", _module)
pulumi.runtime.registerResourceModule("yandex", "index/swsWafProfile", _module)
pulumi.runtime.registerResourceModule("yandex", "index/vpcAddress", _module)
pulumi.runtime.registerResourceModule("yandex", "index/vpcDefaultSecurityGroup", _module)
pulumi.runtime.registerResourceModule("yandex", "index/vpcGateway", _module)
pulumi.runtime.registerResourceModule("yandex", "index/vpcNetwork", _module)
pulumi.runtime.registerResourceModule("yandex", "index/vpcPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("yandex", "index/vpcRouteTable", _module)
pulumi.runtime.registerResourceModule("yandex", "index/vpcSecurityGroup", _module)
pulumi.runtime.registerResourceModule("yandex", "index/vpcSubnet", _module)
pulumi.runtime.registerResourceModule("yandex", "index/ydbDatabaseDedicated", _module)
pulumi.runtime.registerResourceModule("yandex", "index/ydbDatabaseServerless", _module)
pulumi.runtime.registerResourceModule("yandex", "index/ydbTable", _module)
pulumi.runtime.registerResourceModule("yandex", "index/ydbTableChangefeed", _module)
pulumi.runtime.registerResourceModule("yandex", "index/ydbTableIndex", _module)
pulumi.runtime.registerResourceModule("yandex", "index/ydbTopic", _module)
pulumi.runtime.registerResourcePackage("yandex", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:yandex") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
