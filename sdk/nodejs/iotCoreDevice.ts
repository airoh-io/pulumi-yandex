// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Allows management of [Yandex Cloud IoT Device](https://yandex.cloud/docs/iot-core/quickstart).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * //
 * // Create a new IoT Core Device.
 * //
 * const myDevice = new yandex.IotCoreDevice("myDevice", {
 *     aliases: {
 *         "some_alias1/subtopic": "$devices/{id}/events/somesubtopic",
 *         "some_alias2/subtopic": "$devices/{id}/events/aaa/bbb",
 *     },
 *     certificates: [
 *         "public part of certificate1",
 *         "public part of certificate2",
 *     ],
 *     description: "any description",
 *     passwords: [
 *         "my-password1",
 *         "my-password2",
 *     ],
 *     registryId: "are1sampleregistryid11",
 * });
 * ```
 *
 * ## Import
 *
 * ~> Import for this resource is not implemented yet.
 */
export class IotCoreDevice extends pulumi.CustomResource {
    /**
     * Get an existing IotCoreDevice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IotCoreDeviceState, opts?: pulumi.CustomResourceOptions): IotCoreDevice {
        return new IotCoreDevice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/iotCoreDevice:IotCoreDevice';

    /**
     * Returns true if the given object is an instance of IotCoreDevice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IotCoreDevice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IotCoreDevice.__pulumiType;
    }

    /**
     * A set of key/value aliases pairs to assign to the IoT Core Device.
     */
    declare public readonly aliases: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A set of certificate's fingerprints for the IoT Core Device.
     */
    declare public readonly certificates: pulumi.Output<string[] | undefined>;
    /**
     * The creation timestamp of the resource.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The resource description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A set of passwords's id for the IoT Core Device.
     */
    declare public readonly passwords: pulumi.Output<string[] | undefined>;
    /**
     * IoT Core Registry ID for the IoT Core Device.
     */
    declare public readonly registryId: pulumi.Output<string>;

    /**
     * Create a IotCoreDevice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IotCoreDeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IotCoreDeviceArgs | IotCoreDeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IotCoreDeviceState | undefined;
            resourceInputs["aliases"] = state?.aliases;
            resourceInputs["certificates"] = state?.certificates;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["passwords"] = state?.passwords;
            resourceInputs["registryId"] = state?.registryId;
        } else {
            const args = argsOrState as IotCoreDeviceArgs | undefined;
            if (args?.registryId === undefined && !opts.urn) {
                throw new Error("Missing required property 'registryId'");
            }
            resourceInputs["aliases"] = args?.aliases;
            resourceInputs["certificates"] = args?.certificates;
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["passwords"] = args?.passwords ? pulumi.secret(args.passwords) : undefined;
            resourceInputs["registryId"] = args?.registryId;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passwords"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IotCoreDevice.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IotCoreDevice resources.
 */
export interface IotCoreDeviceState {
    /**
     * A set of key/value aliases pairs to assign to the IoT Core Device.
     */
    aliases?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of certificate's fingerprints for the IoT Core Device.
     */
    certificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * A set of passwords's id for the IoT Core Device.
     */
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IoT Core Registry ID for the IoT Core Device.
     */
    registryId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IotCoreDevice resource.
 */
export interface IotCoreDeviceArgs {
    /**
     * A set of key/value aliases pairs to assign to the IoT Core Device.
     */
    aliases?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of certificate's fingerprints for the IoT Core Device.
     */
    certificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * A set of passwords's id for the IoT Core Device.
     */
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IoT Core Registry ID for the IoT Core Device.
     */
    registryId: pulumi.Input<string>;
}
