// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a ClickHouse cluster within the Yandex Cloud. For more information, see [the official documentation](https://yandex.cloud/docs/managed-clickhouse/concepts).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.5.0.0/24"],
 * });
 * //
 * // Create a new MDB Clickhouse Cluster.
 * //
 * const myCluster = new yandex.MdbClickhouseCluster("myCluster", {
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     clickhouse: {
 *         resources: {
 *             resourcePresetId: "s2.micro",
 *             diskTypeId: "network-ssd",
 *             diskSize: 32,
 *         },
 *         config: {
 *             logLevel: "TRACE",
 *             maxConnections: 100,
 *             maxConcurrentQueries: 50,
 *             keepAliveTimeout: 3000,
 *             uncompressedCacheSize: 8589934592,
 *             markCacheSize: 5368709120,
 *             maxTableSizeToDrop: 53687091200,
 *             maxPartitionSizeToDrop: 53687091200,
 *             timezone: "UTC",
 *             geobaseUri: "",
 *             queryLogRetentionSize: 1073741824,
 *             queryLogRetentionTime: 2592000,
 *             queryThreadLogEnabled: true,
 *             queryThreadLogRetentionSize: 536870912,
 *             queryThreadLogRetentionTime: 2592000,
 *             partLogRetentionSize: 536870912,
 *             partLogRetentionTime: 2592000,
 *             metricLogEnabled: true,
 *             metricLogRetentionSize: 536870912,
 *             metricLogRetentionTime: 2592000,
 *             traceLogEnabled: true,
 *             traceLogRetentionSize: 536870912,
 *             traceLogRetentionTime: 2592000,
 *             textLogEnabled: true,
 *             textLogRetentionSize: 536870912,
 *             textLogRetentionTime: 2592000,
 *             textLogLevel: "TRACE",
 *             backgroundPoolSize: 16,
 *             backgroundSchedulePoolSize: 16,
 *             mergeTree: {
 *                 replicatedDeduplicationWindow: 100,
 *                 replicatedDeduplicationWindowSeconds: 604800,
 *                 partsToDelayInsert: 150,
 *                 partsToThrowInsert: 300,
 *                 maxReplicatedMergesInQueue: 16,
 *                 numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge: 8,
 *                 maxBytesToMergeAtMinSpaceInPool: 1048576,
 *                 maxBytesToMergeAtMaxSpaceInPool: 161061273600,
 *             },
 *             kafka: {
 *                 securityProtocol: "SECURITY_PROTOCOL_PLAINTEXT",
 *                 saslMechanism: "SASL_MECHANISM_GSSAPI",
 *                 saslUsername: "user1",
 *                 saslPassword: "pass1",
 *             },
 *             kafkaTopics: [
 *                 {
 *                     name: "topic1",
 *                     settings: {
 *                         securityProtocol: "SECURITY_PROTOCOL_SSL",
 *                         saslMechanism: "SASL_MECHANISM_SCRAM_SHA_256",
 *                         saslUsername: "user2",
 *                         saslPassword: "pass2",
 *                     },
 *                 },
 *                 {
 *                     name: "topic2",
 *                     settings: {
 *                         securityProtocol: "SECURITY_PROTOCOL_SASL_PLAINTEXT",
 *                         saslMechanism: "SASL_MECHANISM_PLAIN",
 *                     },
 *                 },
 *             ],
 *             rabbitmq: {
 *                 username: "rabbit_user",
 *                 password: "rabbit_pass",
 *             },
 *             compressions: [
 *                 {
 *                     method: "LZ4",
 *                     minPartSize: 1024,
 *                     minPartSizeRatio: 0.5,
 *                 },
 *                 {
 *                     method: "ZSTD",
 *                     minPartSize: 2048,
 *                     minPartSizeRatio: 0.7,
 *                 },
 *             ],
 *             graphiteRollups: [
 *                 {
 *                     name: "rollup1",
 *                     patterns: [{
 *                         regexp: "abc",
 *                         "function": "func1",
 *                         retentions: [{
 *                             age: 1000,
 *                             precision: 3,
 *                         }],
 *                     }],
 *                 },
 *                 {
 *                     name: "rollup2",
 *                     patterns: [{
 *                         "function": "func2",
 *                         retentions: [{
 *                             age: 2000,
 *                             precision: 5,
 *                         }],
 *                     }],
 *                 },
 *             ],
 *         },
 *     },
 *     databases: [{
 *         name: "db_name",
 *     }],
 *     users: [{
 *         name: "user",
 *         password: "your_password",
 *         permissions: [{
 *             databaseName: "db_name",
 *         }],
 *         settings: {
 *             maxMemoryUsageForUser: 1000000000,
 *             readOverflowMode: "throw",
 *             outputFormatJsonQuote64bitIntegers: true,
 *         },
 *         quotas: [
 *             {
 *                 intervalDuration: 3600000,
 *                 queries: 10000,
 *                 errors: 1000,
 *             },
 *             {
 *                 intervalDuration: 79800000,
 *                 queries: 50000,
 *                 errors: 5000,
 *             },
 *         ],
 *     }],
 *     hosts: [{
 *         type: "CLICKHOUSE",
 *         zone: "ru-central1-a",
 *         subnetId: fooVpcSubnet.id,
 *     }],
 *     formatSchemas: [{
 *         name: "test_schema",
 *         type: "FORMAT_SCHEMA_TYPE_CAPNPROTO",
 *         uri: "https://storage.yandexcloud.net/ch-data/schema.proto",
 *     }],
 *     mlModels: [{
 *         name: "test_model",
 *         type: "ML_MODEL_TYPE_CATBOOST",
 *         uri: "https://storage.yandexcloud.net/ch-data/train.csv",
 *     }],
 *     serviceAccountId: "your_service_account_id",
 *     cloudStorage: {
 *         enabled: false,
 *     },
 *     maintenanceWindow: {
 *         type: "ANYTIME",
 *     },
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * // Auxiliary resources
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.1.0.0/24"],
 * });
 * const bar = new yandex.VpcSubnet("bar", {
 *     zone: "ru-central1-b",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.2.0.0/24"],
 * });
 * const baz = new yandex.VpcSubnet("baz", {
 *     zone: "ru-central1-d",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.3.0.0/24"],
 * });
 * //
 * // Create a new MDB High Availability Clickhouse Cluster.
 * //
 * const myCluster = new yandex.MdbClickhouseCluster("myCluster", {
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     clickhouse: {
 *         resources: {
 *             resourcePresetId: "s2.micro",
 *             diskTypeId: "network-ssd",
 *             diskSize: 16,
 *         },
 *     },
 *     zookeeper: {
 *         resources: {
 *             resourcePresetId: "s2.micro",
 *             diskTypeId: "network-ssd",
 *             diskSize: 10,
 *         },
 *     },
 *     databases: [{
 *         name: "db_name",
 *     }],
 *     users: [{
 *         name: "user",
 *         password: "password",
 *         permissions: [{
 *             databaseName: "db_name",
 *         }],
 *         settings: {
 *             maxMemoryUsageForUser: 1000000000,
 *             readOverflowMode: "throw",
 *             outputFormatJsonQuote64bitIntegers: true,
 *         },
 *         quotas: [
 *             {
 *                 intervalDuration: 3600000,
 *                 queries: 10000,
 *                 errors: 1000,
 *             },
 *             {
 *                 intervalDuration: 79800000,
 *                 queries: 50000,
 *                 errors: 5000,
 *             },
 *         ],
 *     }],
 *     hosts: [
 *         {
 *             type: "CLICKHOUSE",
 *             zone: "ru-central1-a",
 *             subnetId: fooVpcSubnet.id,
 *         },
 *         {
 *             type: "CLICKHOUSE",
 *             zone: "ru-central1-b",
 *             subnetId: bar.id,
 *         },
 *         {
 *             type: "ZOOKEEPER",
 *             zone: "ru-central1-a",
 *             subnetId: fooVpcSubnet.id,
 *         },
 *         {
 *             type: "ZOOKEEPER",
 *             zone: "ru-central1-b",
 *             subnetId: bar.id,
 *         },
 *         {
 *             type: "ZOOKEEPER",
 *             zone: "ru-central1-d",
 *             subnetId: baz.id,
 *         },
 *     ],
 *     cloudStorage: {
 *         enabled: false,
 *     },
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * // Auxiliary resources
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.1.0.0/24"],
 * });
 * const bar = new yandex.VpcSubnet("bar", {
 *     zone: "ru-central1-b",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.2.0.0/24"],
 * });
 * const baz = new yandex.VpcSubnet("baz", {
 *     zone: "ru-central1-d",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.3.0.0/24"],
 * });
 * //
 * // Create a new MDB Sharded Clickhouse Cluster.
 * //
 * const myCluster = new yandex.MdbClickhouseCluster("myCluster", {
 *     environment: "PRODUCTION",
 *     networkId: fooVpcNetwork.id,
 *     clickhouse: {
 *         resources: {
 *             resourcePresetId: "s2.micro",
 *             diskTypeId: "network-ssd",
 *             diskSize: 16,
 *         },
 *     },
 *     zookeeper: {
 *         resources: {
 *             resourcePresetId: "s2.micro",
 *             diskTypeId: "network-ssd",
 *             diskSize: 10,
 *         },
 *     },
 *     databases: [{
 *         name: "db_name",
 *     }],
 *     users: [{
 *         name: "user",
 *         password: "password",
 *         permissions: [{
 *             databaseName: "db_name",
 *         }],
 *         settings: {
 *             maxMemoryUsageForUser: 1000000000,
 *             readOverflowMode: "throw",
 *             outputFormatJsonQuote64bitIntegers: true,
 *         },
 *         quotas: [
 *             {
 *                 intervalDuration: 3600000,
 *                 queries: 10000,
 *                 errors: 1000,
 *             },
 *             {
 *                 intervalDuration: 79800000,
 *                 queries: 50000,
 *                 errors: 5000,
 *             },
 *         ],
 *     }],
 *     shards: [
 *         {
 *             name: "shard1",
 *             weight: 110,
 *         },
 *         {
 *             name: "shard2",
 *             weight: 300,
 *         },
 *     ],
 *     hosts: [
 *         {
 *             type: "CLICKHOUSE",
 *             zone: "ru-central1-a",
 *             subnetId: fooVpcSubnet.id,
 *             shardName: "shard1",
 *         },
 *         {
 *             type: "CLICKHOUSE",
 *             zone: "ru-central1-b",
 *             subnetId: bar.id,
 *             shardName: "shard1",
 *         },
 *         {
 *             type: "CLICKHOUSE",
 *             zone: "ru-central1-b",
 *             subnetId: bar.id,
 *             shardName: "shard2",
 *         },
 *         {
 *             type: "CLICKHOUSE",
 *             zone: "ru-central1-d",
 *             subnetId: baz.id,
 *             shardName: "shard2",
 *         },
 *     ],
 *     shardGroups: [{
 *         name: "single_shard_group",
 *         description: "Cluster configuration that contain only shard1",
 *         shardNames: ["shard1"],
 *     }],
 *     cloudStorage: {
 *         enabled: false,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * ```sh
 * $ pulumi import yandex:index/mdbClickhouseCluster:MdbClickhouseCluster <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/mdbClickhouseCluster:MdbClickhouseCluster my_cluster ...
 * ```
 */
export class MdbClickhouseCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdbClickhouseCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbClickhouseClusterState, opts?: pulumi.CustomResourceOptions): MdbClickhouseCluster {
        return new MdbClickhouseCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbClickhouseCluster:MdbClickhouseCluster';

    /**
     * Returns true if the given object is an instance of MdbClickhouseCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbClickhouseCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbClickhouseCluster.__pulumiType;
    }

    /**
     * Access policy to the ClickHouse cluster.
     */
    declare public readonly access: pulumi.Output<outputs.MdbClickhouseClusterAccess>;
    /**
     * A password used to authorize as user `admin` when `sqlUserManagement` enabled.
     */
    declare public readonly adminPassword: pulumi.Output<string | undefined>;
    /**
     * The period in days during which backups are stored.
     */
    declare public readonly backupRetainPeriodDays: pulumi.Output<number | undefined>;
    /**
     * Time to start the daily backup, in the UTC timezone.
     */
    declare public readonly backupWindowStart: pulumi.Output<outputs.MdbClickhouseClusterBackupWindowStart>;
    /**
     * Configuration of the ClickHouse subcluster.
     */
    declare public readonly clickhouse: pulumi.Output<outputs.MdbClickhouseClusterClickhouse>;
    /**
     * Cloud Storage settings.
     */
    declare public readonly cloudStorage: pulumi.Output<outputs.MdbClickhouseClusterCloudStorage>;
    /**
     * The cluster identifier.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * Whether to copy schema on new ClickHouse hosts.
     */
    declare public readonly copySchemaOnNewHosts: pulumi.Output<boolean | undefined>;
    /**
     * The creation timestamp of the resource.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * A database of the ClickHouse cluster.
     *
     * @deprecated to manage databases, please switch to using a separate resource type yandex_mdb_clickhouse_database
     */
    declare public readonly databases: pulumi.Output<outputs.MdbClickhouseClusterDatabase[] | undefined>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    declare public readonly deletionProtection: pulumi.Output<boolean>;
    /**
     * The resource description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    declare public readonly diskEncryptionKeyId: pulumi.Output<string>;
    /**
     * Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.
     */
    declare public readonly embeddedKeeper: pulumi.Output<boolean>;
    /**
     * Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    declare public readonly environment: pulumi.Output<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * A set of `protobuf` or `capnproto` format schemas.
     */
    declare public readonly formatSchemas: pulumi.Output<outputs.MdbClickhouseClusterFormatSchema[] | undefined>;
    /**
     * Aggregated health of the cluster. Can be `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
     */
    declare public /*out*/ readonly health: pulumi.Output<string>;
    /**
     * A host of the ClickHouse cluster.
     */
    declare public readonly hosts: pulumi.Output<outputs.MdbClickhouseClusterHost[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    declare public readonly maintenanceWindow: pulumi.Output<outputs.MdbClickhouseClusterMaintenanceWindow>;
    /**
     * A group of machine learning models.
     */
    declare public readonly mlModels: pulumi.Output<outputs.MdbClickhouseClusterMlModel[] | undefined>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * The list of security groups applied to resource or their components.
     */
    declare public readonly securityGroupIds: pulumi.Output<string[]>;
    /**
     * [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
     */
    declare public readonly serviceAccountId: pulumi.Output<string | undefined>;
    /**
     * A group of clickhouse shards.
     */
    declare public readonly shardGroups: pulumi.Output<outputs.MdbClickhouseClusterShardGroup[] | undefined>;
    /**
     * A shard of the ClickHouse cluster.
     */
    declare public readonly shards: pulumi.Output<outputs.MdbClickhouseClusterShard[]>;
    /**
     * Grants `admin` user database management permission.
     */
    declare public readonly sqlDatabaseManagement: pulumi.Output<boolean>;
    /**
     * Enables `admin` user with user management permission.
     */
    declare public readonly sqlUserManagement: pulumi.Output<boolean>;
    /**
     * Status of the cluster. Can be `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * A user of the ClickHouse cluster.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_clickhouse_user
     */
    declare public readonly users: pulumi.Output<outputs.MdbClickhouseClusterUser[] | undefined>;
    /**
     * Version of the ClickHouse server software.
     */
    declare public readonly version: pulumi.Output<string>;
    /**
     * Configuration of the ZooKeeper subcluster.
     */
    declare public readonly zookeeper: pulumi.Output<outputs.MdbClickhouseClusterZookeeper>;

    /**
     * Create a MdbClickhouseCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbClickhouseClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbClickhouseClusterArgs | MdbClickhouseClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbClickhouseClusterState | undefined;
            resourceInputs["access"] = state?.access;
            resourceInputs["adminPassword"] = state?.adminPassword;
            resourceInputs["backupRetainPeriodDays"] = state?.backupRetainPeriodDays;
            resourceInputs["backupWindowStart"] = state?.backupWindowStart;
            resourceInputs["clickhouse"] = state?.clickhouse;
            resourceInputs["cloudStorage"] = state?.cloudStorage;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["copySchemaOnNewHosts"] = state?.copySchemaOnNewHosts;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["databases"] = state?.databases;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["diskEncryptionKeyId"] = state?.diskEncryptionKeyId;
            resourceInputs["embeddedKeeper"] = state?.embeddedKeeper;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["formatSchemas"] = state?.formatSchemas;
            resourceInputs["health"] = state?.health;
            resourceInputs["hosts"] = state?.hosts;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["maintenanceWindow"] = state?.maintenanceWindow;
            resourceInputs["mlModels"] = state?.mlModels;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["serviceAccountId"] = state?.serviceAccountId;
            resourceInputs["shardGroups"] = state?.shardGroups;
            resourceInputs["shards"] = state?.shards;
            resourceInputs["sqlDatabaseManagement"] = state?.sqlDatabaseManagement;
            resourceInputs["sqlUserManagement"] = state?.sqlUserManagement;
            resourceInputs["status"] = state?.status;
            resourceInputs["users"] = state?.users;
            resourceInputs["version"] = state?.version;
            resourceInputs["zookeeper"] = state?.zookeeper;
        } else {
            const args = argsOrState as MdbClickhouseClusterArgs | undefined;
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if (args?.hosts === undefined && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["access"] = args?.access;
            resourceInputs["adminPassword"] = args?.adminPassword ? pulumi.secret(args.adminPassword) : undefined;
            resourceInputs["backupRetainPeriodDays"] = args?.backupRetainPeriodDays;
            resourceInputs["backupWindowStart"] = args?.backupWindowStart;
            resourceInputs["clickhouse"] = args?.clickhouse;
            resourceInputs["cloudStorage"] = args?.cloudStorage;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["copySchemaOnNewHosts"] = args?.copySchemaOnNewHosts;
            resourceInputs["databases"] = args?.databases;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["diskEncryptionKeyId"] = args?.diskEncryptionKeyId;
            resourceInputs["embeddedKeeper"] = args?.embeddedKeeper;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["formatSchemas"] = args?.formatSchemas;
            resourceInputs["hosts"] = args?.hosts;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["maintenanceWindow"] = args?.maintenanceWindow;
            resourceInputs["mlModels"] = args?.mlModels;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["serviceAccountId"] = args?.serviceAccountId;
            resourceInputs["shardGroups"] = args?.shardGroups;
            resourceInputs["shards"] = args?.shards;
            resourceInputs["sqlDatabaseManagement"] = args?.sqlDatabaseManagement;
            resourceInputs["sqlUserManagement"] = args?.sqlUserManagement;
            resourceInputs["users"] = args?.users;
            resourceInputs["version"] = args?.version;
            resourceInputs["zookeeper"] = args?.zookeeper;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MdbClickhouseCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbClickhouseCluster resources.
 */
export interface MdbClickhouseClusterState {
    /**
     * Access policy to the ClickHouse cluster.
     */
    access?: pulumi.Input<inputs.MdbClickhouseClusterAccess>;
    /**
     * A password used to authorize as user `admin` when `sqlUserManagement` enabled.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * The period in days during which backups are stored.
     */
    backupRetainPeriodDays?: pulumi.Input<number>;
    /**
     * Time to start the daily backup, in the UTC timezone.
     */
    backupWindowStart?: pulumi.Input<inputs.MdbClickhouseClusterBackupWindowStart>;
    /**
     * Configuration of the ClickHouse subcluster.
     */
    clickhouse?: pulumi.Input<inputs.MdbClickhouseClusterClickhouse>;
    /**
     * Cloud Storage settings.
     */
    cloudStorage?: pulumi.Input<inputs.MdbClickhouseClusterCloudStorage>;
    /**
     * The cluster identifier.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Whether to copy schema on new ClickHouse hosts.
     */
    copySchemaOnNewHosts?: pulumi.Input<boolean>;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A database of the ClickHouse cluster.
     *
     * @deprecated to manage databases, please switch to using a separate resource type yandex_mdb_clickhouse_database
     */
    databases?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterDatabase>[]>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    diskEncryptionKeyId?: pulumi.Input<string>;
    /**
     * Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.
     */
    embeddedKeeper?: pulumi.Input<boolean>;
    /**
     * Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    environment?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of `protobuf` or `capnproto` format schemas.
     */
    formatSchemas?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterFormatSchema>[]>;
    /**
     * Aggregated health of the cluster. Can be `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
     */
    health?: pulumi.Input<string>;
    /**
     * A host of the ClickHouse cluster.
     */
    hosts?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterHost>[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintenanceWindow?: pulumi.Input<inputs.MdbClickhouseClusterMaintenanceWindow>;
    /**
     * A group of machine learning models.
     */
    mlModels?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterMlModel>[]>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId?: pulumi.Input<string>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
     */
    serviceAccountId?: pulumi.Input<string>;
    /**
     * A group of clickhouse shards.
     */
    shardGroups?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterShardGroup>[]>;
    /**
     * A shard of the ClickHouse cluster.
     */
    shards?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterShard>[]>;
    /**
     * Grants `admin` user database management permission.
     */
    sqlDatabaseManagement?: pulumi.Input<boolean>;
    /**
     * Enables `admin` user with user management permission.
     */
    sqlUserManagement?: pulumi.Input<boolean>;
    /**
     * Status of the cluster. Can be `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-clickhouse/api-ref/Cluster/).
     */
    status?: pulumi.Input<string>;
    /**
     * A user of the ClickHouse cluster.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_clickhouse_user
     */
    users?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterUser>[]>;
    /**
     * Version of the ClickHouse server software.
     */
    version?: pulumi.Input<string>;
    /**
     * Configuration of the ZooKeeper subcluster.
     */
    zookeeper?: pulumi.Input<inputs.MdbClickhouseClusterZookeeper>;
}

/**
 * The set of arguments for constructing a MdbClickhouseCluster resource.
 */
export interface MdbClickhouseClusterArgs {
    /**
     * Access policy to the ClickHouse cluster.
     */
    access?: pulumi.Input<inputs.MdbClickhouseClusterAccess>;
    /**
     * A password used to authorize as user `admin` when `sqlUserManagement` enabled.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * The period in days during which backups are stored.
     */
    backupRetainPeriodDays?: pulumi.Input<number>;
    /**
     * Time to start the daily backup, in the UTC timezone.
     */
    backupWindowStart?: pulumi.Input<inputs.MdbClickhouseClusterBackupWindowStart>;
    /**
     * Configuration of the ClickHouse subcluster.
     */
    clickhouse?: pulumi.Input<inputs.MdbClickhouseClusterClickhouse>;
    /**
     * Cloud Storage settings.
     */
    cloudStorage?: pulumi.Input<inputs.MdbClickhouseClusterCloudStorage>;
    /**
     * The cluster identifier.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Whether to copy schema on new ClickHouse hosts.
     */
    copySchemaOnNewHosts?: pulumi.Input<boolean>;
    /**
     * A database of the ClickHouse cluster.
     *
     * @deprecated to manage databases, please switch to using a separate resource type yandex_mdb_clickhouse_database
     */
    databases?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterDatabase>[]>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    diskEncryptionKeyId?: pulumi.Input<string>;
    /**
     * Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.
     */
    embeddedKeeper?: pulumi.Input<boolean>;
    /**
     * Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    environment: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of `protobuf` or `capnproto` format schemas.
     */
    formatSchemas?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterFormatSchema>[]>;
    /**
     * A host of the ClickHouse cluster.
     */
    hosts: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterHost>[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintenanceWindow?: pulumi.Input<inputs.MdbClickhouseClusterMaintenanceWindow>;
    /**
     * A group of machine learning models.
     */
    mlModels?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterMlModel>[]>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId: pulumi.Input<string>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
     */
    serviceAccountId?: pulumi.Input<string>;
    /**
     * A group of clickhouse shards.
     */
    shardGroups?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterShardGroup>[]>;
    /**
     * A shard of the ClickHouse cluster.
     */
    shards?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterShard>[]>;
    /**
     * Grants `admin` user database management permission.
     */
    sqlDatabaseManagement?: pulumi.Input<boolean>;
    /**
     * Enables `admin` user with user management permission.
     */
    sqlUserManagement?: pulumi.Input<boolean>;
    /**
     * A user of the ClickHouse cluster.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_clickhouse_user
     */
    users?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterUser>[]>;
    /**
     * Version of the ClickHouse server software.
     */
    version?: pulumi.Input<string>;
    /**
     * Configuration of the ZooKeeper subcluster.
     */
    zookeeper?: pulumi.Input<inputs.MdbClickhouseClusterZookeeper>;
}
