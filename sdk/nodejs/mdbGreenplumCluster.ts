// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a Greenplum cluster within the Yandex Cloud. For more information, see [the official documentation](https://yandex.cloud/docs/managed-greenplum/).
 *
 * Please read [Pricing for Managed Service for Greenplum](https://yandex.cloud/docs/managed-greenplum/) before using Greenplum cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.5.0.0/24"],
 * });
 * const test_sg_x = new yandex.VpcSecurityGroup("test-sg-x", {
 *     networkId: fooVpcNetwork.id,
 *     ingresses: [{
 *         protocol: "ANY",
 *         description: "Allow incoming traffic from members of the same security group",
 *         fromPort: 0,
 *         toPort: 65535,
 *         v4CidrBlocks: ["0.0.0.0/0"],
 *     }],
 *     egresses: [{
 *         protocol: "ANY",
 *         description: "Allow outgoing traffic to members of the same security group",
 *         fromPort: 0,
 *         toPort: 65535,
 *         v4CidrBlocks: ["0.0.0.0/0"],
 *     }],
 * });
 * //
 * // Create a new MDB Greenplum Cluster.
 * //
 * const myCluster = new yandex.MdbGreenplumCluster("myCluster", {
 *     description: "test greenplum cluster",
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     zoneId: "ru-central1-a",
 *     subnetId: fooVpcSubnet.id,
 *     assignPublicIp: true,
 *     version: "6.25",
 *     masterHostCount: 2,
 *     segmentHostCount: 5,
 *     segmentInHost: 1,
 *     masterSubcluster: {
 *         resources: {
 *             resourcePresetId: "s2.micro",
 *             diskSize: 24,
 *             diskTypeId: "network-ssd",
 *         },
 *     },
 *     segmentSubcluster: {
 *         resources: {
 *             resourcePresetId: "s2.micro",
 *             diskSize: 24,
 *             diskTypeId: "network-ssd",
 *         },
 *     },
 *     access: {
 *         webSql: true,
 *     },
 *     greenplumConfig: {
 *         max_connections: "395",
 *         max_slot_wal_keep_size: "1048576",
 *         gp_workfile_limit_per_segment: "0",
 *         gp_workfile_limit_per_query: "0",
 *         gp_workfile_limit_files_per_query: "100000",
 *         max_prepared_transactions: "500",
 *         gp_workfile_compression: "false",
 *         max_statement_mem: "2147483648",
 *         log_statement: "2",
 *         gp_add_column_inherits_table_setting: "true",
 *         gp_enable_global_deadlock_detector: "true",
 *         gp_global_deadlock_detector_period: "120",
 *     },
 *     userName: "admin_user",
 *     userPassword: "your_super_secret_password",
 *     securityGroupIds: [test_sg_x.id],
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * ```sh
 * $ pulumi import yandex:index/mdbGreenplumCluster:MdbGreenplumCluster <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/mdbGreenplumCluster:MdbGreenplumCluster my_cluster ...
 * ```
 */
export class MdbGreenplumCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdbGreenplumCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbGreenplumClusterState, opts?: pulumi.CustomResourceOptions): MdbGreenplumCluster {
        return new MdbGreenplumCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbGreenplumCluster:MdbGreenplumCluster';

    /**
     * Returns true if the given object is an instance of MdbGreenplumCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbGreenplumCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbGreenplumCluster.__pulumiType;
    }

    /**
     * Access policy to the Greenplum cluster.
     */
    declare public readonly access: pulumi.Output<outputs.MdbGreenplumClusterAccess>;
    /**
     * Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.
     */
    declare public readonly assignPublicIp: pulumi.Output<boolean>;
    /**
     * Background activities settings.
     */
    declare public readonly backgroundActivities: pulumi.Output<outputs.MdbGreenplumClusterBackgroundActivity[] | undefined>;
    /**
     * Time to start the daily backup, in the UTC timezone.
     */
    declare public readonly backupWindowStart: pulumi.Output<outputs.MdbGreenplumClusterBackupWindowStart>;
    /**
     * Cloud Storage settings of the Greenplum cluster.
     */
    declare public readonly cloudStorage: pulumi.Output<outputs.MdbGreenplumClusterCloudStorage>;
    /**
     * The creation timestamp of the resource.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    declare public readonly deletionProtection: pulumi.Output<boolean>;
    /**
     * The resource description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)
     */
    declare public readonly environment: pulumi.Output<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * Greenplum cluster config. Detail info in `Greenplum cluster settings` block.
     */
    declare public readonly greenplumConfig: pulumi.Output<{[key: string]: string}>;
    /**
     * Aggregated health of the cluster.
     */
    declare public /*out*/ readonly health: pulumi.Output<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Cloud Logging settings.
     */
    declare public readonly logging: pulumi.Output<outputs.MdbGreenplumClusterLogging>;
    /**
     * Maintenance policy of the Greenplum cluster.
     */
    declare public readonly maintenanceWindow: pulumi.Output<outputs.MdbGreenplumClusterMaintenanceWindow>;
    /**
     * Number of hosts in master subcluster (1 or 2).
     */
    declare public readonly masterHostCount: pulumi.Output<number>;
    /**
     * A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
     */
    declare public readonly masterHostGroupIds: pulumi.Output<string[]>;
    /**
     * Info about hosts in master subcluster.
     */
    declare public /*out*/ readonly masterHosts: pulumi.Output<outputs.MdbGreenplumClusterMasterHost[]>;
    /**
     * Settings for master subcluster.
     */
    declare public readonly masterSubcluster: pulumi.Output<outputs.MdbGreenplumClusterMasterSubcluster>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * Configuration of the connection pooler.
     */
    declare public readonly poolerConfig: pulumi.Output<outputs.MdbGreenplumClusterPoolerConfig>;
    /**
     * Configuration of the PXF daemon.
     */
    declare public readonly pxfConfig: pulumi.Output<outputs.MdbGreenplumClusterPxfConfig>;
    /**
     * The list of security groups applied to resource or their components.
     */
    declare public readonly securityGroupIds: pulumi.Output<string[] | undefined>;
    /**
     * Number of hosts in segment subcluster (from 1 to 32).
     */
    declare public readonly segmentHostCount: pulumi.Output<number>;
    /**
     * A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
     */
    declare public readonly segmentHostGroupIds: pulumi.Output<string[]>;
    /**
     * Info about hosts in segment subcluster.
     */
    declare public /*out*/ readonly segmentHosts: pulumi.Output<outputs.MdbGreenplumClusterSegmentHost[]>;
    /**
     * Number of segments on segment host (not more then 1 + RAM/8).
     */
    declare public readonly segmentInHost: pulumi.Output<number>;
    /**
     * Settings for segment subcluster.
     */
    declare public readonly segmentSubcluster: pulumi.Output<outputs.MdbGreenplumClusterSegmentSubcluster>;
    /**
     * ID of service account to use with Yandex Cloud resources (e.g. S3, Cloud Logging).
     */
    declare public readonly serviceAccountId: pulumi.Output<string | undefined>;
    /**
     * Status of the cluster.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.
     */
    declare public readonly subnetId: pulumi.Output<string>;
    /**
     * Greenplum cluster admin user name.
     */
    declare public readonly userName: pulumi.Output<string>;
    /**
     * Greenplum cluster admin password name.
     */
    declare public readonly userPassword: pulumi.Output<string>;
    /**
     * Version of the Greenplum cluster. (`6.25`)
     */
    declare public readonly version: pulumi.Output<string>;
    /**
     * The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
     */
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a MdbGreenplumCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbGreenplumClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbGreenplumClusterArgs | MdbGreenplumClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbGreenplumClusterState | undefined;
            resourceInputs["access"] = state?.access;
            resourceInputs["assignPublicIp"] = state?.assignPublicIp;
            resourceInputs["backgroundActivities"] = state?.backgroundActivities;
            resourceInputs["backupWindowStart"] = state?.backupWindowStart;
            resourceInputs["cloudStorage"] = state?.cloudStorage;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["greenplumConfig"] = state?.greenplumConfig;
            resourceInputs["health"] = state?.health;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["logging"] = state?.logging;
            resourceInputs["maintenanceWindow"] = state?.maintenanceWindow;
            resourceInputs["masterHostCount"] = state?.masterHostCount;
            resourceInputs["masterHostGroupIds"] = state?.masterHostGroupIds;
            resourceInputs["masterHosts"] = state?.masterHosts;
            resourceInputs["masterSubcluster"] = state?.masterSubcluster;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["poolerConfig"] = state?.poolerConfig;
            resourceInputs["pxfConfig"] = state?.pxfConfig;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["segmentHostCount"] = state?.segmentHostCount;
            resourceInputs["segmentHostGroupIds"] = state?.segmentHostGroupIds;
            resourceInputs["segmentHosts"] = state?.segmentHosts;
            resourceInputs["segmentInHost"] = state?.segmentInHost;
            resourceInputs["segmentSubcluster"] = state?.segmentSubcluster;
            resourceInputs["serviceAccountId"] = state?.serviceAccountId;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["userName"] = state?.userName;
            resourceInputs["userPassword"] = state?.userPassword;
            resourceInputs["version"] = state?.version;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as MdbGreenplumClusterArgs | undefined;
            if (args?.assignPublicIp === undefined && !opts.urn) {
                throw new Error("Missing required property 'assignPublicIp'");
            }
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if (args?.masterHostCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterHostCount'");
            }
            if (args?.masterSubcluster === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterSubcluster'");
            }
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.segmentHostCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'segmentHostCount'");
            }
            if (args?.segmentInHost === undefined && !opts.urn) {
                throw new Error("Missing required property 'segmentInHost'");
            }
            if (args?.segmentSubcluster === undefined && !opts.urn) {
                throw new Error("Missing required property 'segmentSubcluster'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (args?.userName === undefined && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            if (args?.userPassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'userPassword'");
            }
            if (args?.version === undefined && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            if (args?.zone === undefined && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["access"] = args?.access;
            resourceInputs["assignPublicIp"] = args?.assignPublicIp;
            resourceInputs["backgroundActivities"] = args?.backgroundActivities;
            resourceInputs["backupWindowStart"] = args?.backupWindowStart;
            resourceInputs["cloudStorage"] = args?.cloudStorage;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["greenplumConfig"] = args?.greenplumConfig;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["logging"] = args?.logging;
            resourceInputs["maintenanceWindow"] = args?.maintenanceWindow;
            resourceInputs["masterHostCount"] = args?.masterHostCount;
            resourceInputs["masterHostGroupIds"] = args?.masterHostGroupIds;
            resourceInputs["masterSubcluster"] = args?.masterSubcluster;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["poolerConfig"] = args?.poolerConfig;
            resourceInputs["pxfConfig"] = args?.pxfConfig;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["segmentHostCount"] = args?.segmentHostCount;
            resourceInputs["segmentHostGroupIds"] = args?.segmentHostGroupIds;
            resourceInputs["segmentInHost"] = args?.segmentInHost;
            resourceInputs["segmentSubcluster"] = args?.segmentSubcluster;
            resourceInputs["serviceAccountId"] = args?.serviceAccountId;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["userName"] = args?.userName;
            resourceInputs["userPassword"] = args?.userPassword ? pulumi.secret(args.userPassword) : undefined;
            resourceInputs["version"] = args?.version;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["masterHosts"] = undefined /*out*/;
            resourceInputs["segmentHosts"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["userPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MdbGreenplumCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbGreenplumCluster resources.
 */
export interface MdbGreenplumClusterState {
    /**
     * Access policy to the Greenplum cluster.
     */
    access?: pulumi.Input<inputs.MdbGreenplumClusterAccess>;
    /**
     * Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.
     */
    assignPublicIp?: pulumi.Input<boolean>;
    /**
     * Background activities settings.
     */
    backgroundActivities?: pulumi.Input<pulumi.Input<inputs.MdbGreenplumClusterBackgroundActivity>[]>;
    /**
     * Time to start the daily backup, in the UTC timezone.
     */
    backupWindowStart?: pulumi.Input<inputs.MdbGreenplumClusterBackupWindowStart>;
    /**
     * Cloud Storage settings of the Greenplum cluster.
     */
    cloudStorage?: pulumi.Input<inputs.MdbGreenplumClusterCloudStorage>;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)
     */
    environment?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Greenplum cluster config. Detail info in `Greenplum cluster settings` block.
     */
    greenplumConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Aggregated health of the cluster.
     */
    health?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Cloud Logging settings.
     */
    logging?: pulumi.Input<inputs.MdbGreenplumClusterLogging>;
    /**
     * Maintenance policy of the Greenplum cluster.
     */
    maintenanceWindow?: pulumi.Input<inputs.MdbGreenplumClusterMaintenanceWindow>;
    /**
     * Number of hosts in master subcluster (1 or 2).
     */
    masterHostCount?: pulumi.Input<number>;
    /**
     * A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
     */
    masterHostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Info about hosts in master subcluster.
     */
    masterHosts?: pulumi.Input<pulumi.Input<inputs.MdbGreenplumClusterMasterHost>[]>;
    /**
     * Settings for master subcluster.
     */
    masterSubcluster?: pulumi.Input<inputs.MdbGreenplumClusterMasterSubcluster>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId?: pulumi.Input<string>;
    /**
     * Configuration of the connection pooler.
     */
    poolerConfig?: pulumi.Input<inputs.MdbGreenplumClusterPoolerConfig>;
    /**
     * Configuration of the PXF daemon.
     */
    pxfConfig?: pulumi.Input<inputs.MdbGreenplumClusterPxfConfig>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of hosts in segment subcluster (from 1 to 32).
     */
    segmentHostCount?: pulumi.Input<number>;
    /**
     * A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
     */
    segmentHostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Info about hosts in segment subcluster.
     */
    segmentHosts?: pulumi.Input<pulumi.Input<inputs.MdbGreenplumClusterSegmentHost>[]>;
    /**
     * Number of segments on segment host (not more then 1 + RAM/8).
     */
    segmentInHost?: pulumi.Input<number>;
    /**
     * Settings for segment subcluster.
     */
    segmentSubcluster?: pulumi.Input<inputs.MdbGreenplumClusterSegmentSubcluster>;
    /**
     * ID of service account to use with Yandex Cloud resources (e.g. S3, Cloud Logging).
     */
    serviceAccountId?: pulumi.Input<string>;
    /**
     * Status of the cluster.
     */
    status?: pulumi.Input<string>;
    /**
     * The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Greenplum cluster admin user name.
     */
    userName?: pulumi.Input<string>;
    /**
     * Greenplum cluster admin password name.
     */
    userPassword?: pulumi.Input<string>;
    /**
     * Version of the Greenplum cluster. (`6.25`)
     */
    version?: pulumi.Input<string>;
    /**
     * The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MdbGreenplumCluster resource.
 */
export interface MdbGreenplumClusterArgs {
    /**
     * Access policy to the Greenplum cluster.
     */
    access?: pulumi.Input<inputs.MdbGreenplumClusterAccess>;
    /**
     * Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.
     */
    assignPublicIp: pulumi.Input<boolean>;
    /**
     * Background activities settings.
     */
    backgroundActivities?: pulumi.Input<pulumi.Input<inputs.MdbGreenplumClusterBackgroundActivity>[]>;
    /**
     * Time to start the daily backup, in the UTC timezone.
     */
    backupWindowStart?: pulumi.Input<inputs.MdbGreenplumClusterBackupWindowStart>;
    /**
     * Cloud Storage settings of the Greenplum cluster.
     */
    cloudStorage?: pulumi.Input<inputs.MdbGreenplumClusterCloudStorage>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)
     */
    environment: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Greenplum cluster config. Detail info in `Greenplum cluster settings` block.
     */
    greenplumConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Cloud Logging settings.
     */
    logging?: pulumi.Input<inputs.MdbGreenplumClusterLogging>;
    /**
     * Maintenance policy of the Greenplum cluster.
     */
    maintenanceWindow?: pulumi.Input<inputs.MdbGreenplumClusterMaintenanceWindow>;
    /**
     * Number of hosts in master subcluster (1 or 2).
     */
    masterHostCount: pulumi.Input<number>;
    /**
     * A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
     */
    masterHostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Settings for master subcluster.
     */
    masterSubcluster: pulumi.Input<inputs.MdbGreenplumClusterMasterSubcluster>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId: pulumi.Input<string>;
    /**
     * Configuration of the connection pooler.
     */
    poolerConfig?: pulumi.Input<inputs.MdbGreenplumClusterPoolerConfig>;
    /**
     * Configuration of the PXF daemon.
     */
    pxfConfig?: pulumi.Input<inputs.MdbGreenplumClusterPxfConfig>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of hosts in segment subcluster (from 1 to 32).
     */
    segmentHostCount: pulumi.Input<number>;
    /**
     * A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
     */
    segmentHostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of segments on segment host (not more then 1 + RAM/8).
     */
    segmentInHost: pulumi.Input<number>;
    /**
     * Settings for segment subcluster.
     */
    segmentSubcluster: pulumi.Input<inputs.MdbGreenplumClusterSegmentSubcluster>;
    /**
     * ID of service account to use with Yandex Cloud resources (e.g. S3, Cloud Logging).
     */
    serviceAccountId?: pulumi.Input<string>;
    /**
     * The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Greenplum cluster admin user name.
     */
    userName: pulumi.Input<string>;
    /**
     * Greenplum cluster admin password name.
     */
    userPassword: pulumi.Input<string>;
    /**
     * Version of the Greenplum cluster. (`6.25`)
     */
    version: pulumi.Input<string>;
    /**
     * The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
     */
    zone: pulumi.Input<string>;
}
