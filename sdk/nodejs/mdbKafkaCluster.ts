// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * // Auxiliary resources
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.5.0.0/24"],
 * });
 * //
 * // Create a new MDB Kafka Cluster.
 * //
 * const myCluster = new yandex.MdbKafkaCluster("myCluster", {
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     subnetIds: [fooVpcSubnet.id],
 *     config: {
 *         version: "2.8",
 *         brokersCount: 1,
 *         zones: ["ru-central1-a"],
 *         assignPublicIp: false,
 *         schemaRegistry: false,
 *         restApi: {
 *             enabled: true,
 *         },
 *         kafkaUi: {
 *             enabled: true,
 *         },
 *         kafka: {
 *             resources: {
 *                 resourcePresetId: "s2.micro",
 *                 diskTypeId: "network-ssd",
 *                 diskSize: 32,
 *             },
 *             kafkaConfig: {
 *                 compressionType: "COMPRESSION_TYPE_ZSTD",
 *                 logFlushIntervalMessages: "1024",
 *                 logFlushIntervalMs: "1000",
 *                 logFlushSchedulerIntervalMs: "1000",
 *                 logRetentionBytes: "1073741824",
 *                 logRetentionHours: "168",
 *                 logRetentionMinutes: "10080",
 *                 logRetentionMs: "86400000",
 *                 logSegmentBytes: "134217728",
 *                 numPartitions: "10",
 *                 defaultReplicationFactor: "1",
 *                 messageMaxBytes: "1048588",
 *                 replicaFetchMaxBytes: "1048576",
 *                 sslCipherSuites: [
 *                     "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
 *                     "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
 *                 ],
 *                 offsetsRetentionMinutes: "10080",
 *                 saslEnabledMechanisms: [
 *                     "SASL_MECHANISM_SCRAM_SHA_256",
 *                     "SASL_MECHANISM_SCRAM_SHA_512",
 *                 ],
 *             },
 *         },
 *     },
 *     users: [
 *         {
 *             name: "producer-application",
 *             password: "password",
 *             permissions: [{
 *                 topicName: "input",
 *                 role: "ACCESS_ROLE_PRODUCER",
 *                 allowHosts: [
 *                     "host1.db.yandex.net",
 *                     "host2.db.yandex.net",
 *                 ],
 *             }],
 *         },
 *         {
 *             name: "worker",
 *             password: "password",
 *             permissions: [
 *                 {
 *                     topicName: "input",
 *                     role: "ACCESS_ROLE_CONSUMER",
 *                 },
 *                 {
 *                     topicName: "output",
 *                     role: "ACCESS_ROLE_PRODUCER",
 *                 },
 *             ],
 *         },
 *     ],
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * // Auxiliary resources
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.1.0.0/24"],
 * });
 * const bar = new yandex.VpcSubnet("bar", {
 *     zone: "ru-central1-b",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.2.0.0/24"],
 * });
 * const baz = new yandex.VpcSubnet("baz", {
 *     zone: "ru-central1-d",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.3.0.0/24"],
 * });
 * //
 * // Create a new MDB HA Kafka Cluster with two brokers per AZ.
 * // (6 brokers & 3 Zookeepers)
 * //
 * const myCluster = new yandex.MdbKafkaCluster("myCluster", {
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     subnetIds: [
 *         fooVpcSubnet.id,
 *         bar.id,
 *         baz.id,
 *     ],
 *     config: {
 *         version: "2.8",
 *         brokersCount: 2,
 *         zones: [
 *             "ru-central1-a",
 *             "ru-central1-b",
 *             "ru-central1-d",
 *         ],
 *         assignPublicIp: true,
 *         schemaRegistry: false,
 *         restApi: {
 *             enabled: true,
 *         },
 *         kafkaUi: {
 *             enabled: true,
 *         },
 *         kafka: {
 *             resources: {
 *                 resourcePresetId: "s2.medium",
 *                 diskTypeId: "network-ssd",
 *                 diskSize: 128,
 *             },
 *             kafkaConfig: {
 *                 compressionType: "COMPRESSION_TYPE_ZSTD",
 *                 logFlushIntervalMessages: "1024",
 *                 logFlushIntervalMs: "1000",
 *                 logFlushSchedulerIntervalMs: "1000",
 *                 logRetentionBytes: "1073741824",
 *                 logRetentionHours: "168",
 *                 logRetentionMinutes: "10080",
 *                 logRetentionMs: "86400000",
 *                 logSegmentBytes: "134217728",
 *                 numPartitions: "10",
 *                 defaultReplicationFactor: "6",
 *                 messageMaxBytes: "1048588",
 *                 replicaFetchMaxBytes: "1048576",
 *                 sslCipherSuites: [
 *                     "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
 *                     "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
 *                 ],
 *                 offsetsRetentionMinutes: "10080",
 *                 saslEnabledMechanisms: [
 *                     "SASL_MECHANISM_SCRAM_SHA_256",
 *                     "SASL_MECHANISM_SCRAM_SHA_512",
 *                 ],
 *             },
 *         },
 *         zookeeper: {
 *             resources: {
 *                 resourcePresetId: "s2.micro",
 *                 diskTypeId: "network-ssd",
 *                 diskSize: 20,
 *             },
 *         },
 *     },
 *     users: [
 *         {
 *             name: "producer-application",
 *             password: "password",
 *             permissions: [{
 *                 topicName: "input",
 *                 role: "ACCESS_ROLE_PRODUCER",
 *                 allowHosts: [
 *                     "host1.db.yandex.net",
 *                     "host2.db.yandex.net",
 *                 ],
 *             }],
 *         },
 *         {
 *             name: "worker",
 *             password: "password",
 *             permissions: [
 *                 {
 *                     topicName: "input",
 *                     role: "ACCESS_ROLE_CONSUMER",
 *                 },
 *                 {
 *                     topicName: "output",
 *                     role: "ACCESS_ROLE_PRODUCER",
 *                 },
 *             ],
 *         },
 *     ],
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * // Auxiliary resources
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.1.0.0/24"],
 * });
 * const bar = new yandex.VpcSubnet("bar", {
 *     zone: "ru-central1-b",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.2.0.0/24"],
 * });
 * const baz = new yandex.VpcSubnet("baz", {
 *     zone: "ru-central1-d",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.3.0.0/24"],
 * });
 * //
 * // Create a new MDB Kafka Cluster with
 * // KRaft-controller sub-cluster instead of Zookeeper sub-cluster.
 * //
 * const kraft_split = new yandex.MdbKafkaCluster("kraft-split", {
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     subnetIds: [
 *         fooVpcSubnet.id,
 *         bar.id,
 *         baz.id,
 *     ],
 *     config: {
 *         version: "3.6",
 *         brokersCount: 2,
 *         zones: [
 *             "ru-central1-a",
 *             "ru-central1-b",
 *             "ru-central1-d",
 *         ],
 *         assignPublicIp: true,
 *         schemaRegistry: false,
 *         restApi: {
 *             enabled: true,
 *         },
 *         kafkaUi: {
 *             enabled: true,
 *         },
 *         kafka: {
 *             resources: {
 *                 resourcePresetId: "s2.medium",
 *                 diskTypeId: "network-ssd",
 *                 diskSize: 128,
 *             },
 *             kafkaConfig: {
 *                 compressionType: "COMPRESSION_TYPE_ZSTD",
 *                 logFlushIntervalMessages: "1024",
 *                 logFlushIntervalMs: "1000",
 *                 logFlushSchedulerIntervalMs: "1000",
 *                 logRetentionBytes: "1073741824",
 *                 logRetentionHours: "168",
 *                 logRetentionMinutes: "10080",
 *                 logRetentionMs: "86400000",
 *                 logSegmentBytes: "134217728",
 *                 numPartitions: "10",
 *                 defaultReplicationFactor: "6",
 *                 messageMaxBytes: "1048588",
 *                 replicaFetchMaxBytes: "1048576",
 *                 sslCipherSuites: [
 *                     "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
 *                     "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
 *                 ],
 *                 offsetsRetentionMinutes: "10080",
 *                 saslEnabledMechanisms: [
 *                     "SASL_MECHANISM_SCRAM_SHA_256",
 *                     "SASL_MECHANISM_SCRAM_SHA_512",
 *                 ],
 *             },
 *         },
 *         kraft: {
 *             resources: {
 *                 resourcePresetId: "s2.micro",
 *                 diskTypeId: "network-ssd",
 *                 diskSize: 20,
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * // Auxiliary resources
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.1.0.0/24"],
 * });
 * const bar = new yandex.VpcSubnet("bar", {
 *     zone: "ru-central1-b",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.2.0.0/24"],
 * });
 * const baz = new yandex.VpcSubnet("baz", {
 *     zone: "ru-central1-d",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.3.0.0/24"],
 * });
 * //
 * // Creating multi-host Kafka Cluster without sub-cluster of controllers, 
 * // using KRaft-combine quorum.
 * //
 * const kraft_combine = new yandex.MdbKafkaCluster("kraft-combine", {
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     subnetIds: [
 *         fooVpcSubnet.id,
 *         bar.id,
 *         baz.id,
 *     ],
 *     config: {
 *         version: "3.6",
 *         brokersCount: 1,
 *         zones: [
 *             "ru-central1-a",
 *             "ru-central1-b",
 *             "ru-central1-d",
 *         ],
 *         assignPublicIp: true,
 *         schemaRegistry: false,
 *         restApi: {
 *             enabled: true,
 *         },
 *         kafkaUi: {
 *             enabled: true,
 *         },
 *         kafka: {
 *             resources: {
 *                 resourcePresetId: "s2.medium",
 *                 diskTypeId: "network-ssd",
 *                 diskSize: 128,
 *             },
 *             kafkaConfig: {
 *                 compressionType: "COMPRESSION_TYPE_ZSTD",
 *                 logFlushIntervalMessages: "1024",
 *                 logFlushIntervalMs: "1000",
 *                 logFlushSchedulerIntervalMs: "1000",
 *                 logRetentionBytes: "1073741824",
 *                 logRetentionHours: "168",
 *                 logRetentionMinutes: "10080",
 *                 logRetentionMs: "86400000",
 *                 logSegmentBytes: "134217728",
 *                 numPartitions: "10",
 *                 defaultReplicationFactor: "6",
 *                 messageMaxBytes: "1048588",
 *                 replicaFetchMaxBytes: "1048576",
 *                 sslCipherSuites: [
 *                     "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
 *                     "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
 *                 ],
 *                 offsetsRetentionMinutes: "10080",
 *                 saslEnabledMechanisms: [
 *                     "SASL_MECHANISM_SCRAM_SHA_256",
 *                     "SASL_MECHANISM_SCRAM_SHA_512",
 *                 ],
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * ```sh
 * $ pulumi import yandex:index/mdbKafkaCluster:MdbKafkaCluster <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/mdbKafkaCluster:MdbKafkaCluster my_cluster ...
 * ```
 */
export class MdbKafkaCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdbKafkaCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbKafkaClusterState, opts?: pulumi.CustomResourceOptions): MdbKafkaCluster {
        return new MdbKafkaCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbKafkaCluster:MdbKafkaCluster';

    /**
     * Returns true if the given object is an instance of MdbKafkaCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbKafkaCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbKafkaCluster.__pulumiType;
    }

    /**
     * Configuration of the Kafka cluster.
     */
    declare public readonly config: pulumi.Output<outputs.MdbKafkaClusterConfig>;
    /**
     * The creation timestamp of the resource.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    declare public readonly deletionProtection: pulumi.Output<boolean>;
    /**
     * The resource description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Deployment environment of the Kafka cluster. Can be either `PRESTABLE` or `PRODUCTION`. The default is `PRODUCTION`.
     */
    declare public readonly environment: pulumi.Output<string | undefined>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-kafka/api-ref/Cluster/).
     */
    declare public /*out*/ readonly health: pulumi.Output<string>;
    /**
     * A list of IDs of the host groups to place VMs of the cluster on.
     */
    declare public readonly hostGroupIds: pulumi.Output<string[]>;
    /**
     * A host of the Kafka cluster.
     */
    declare public /*out*/ readonly hosts: pulumi.Output<outputs.MdbKafkaClusterHost[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * Maintenance policy of the Kafka cluster.
     */
    declare public readonly maintenanceWindow: pulumi.Output<outputs.MdbKafkaClusterMaintenanceWindow>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * The list of security groups applied to resource or their components.
     */
    declare public readonly securityGroupIds: pulumi.Output<string[]>;
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-kafka/api-ref/Cluster/).
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The list of VPC subnets identifiers which resource is attached.
     */
    declare public readonly subnetIds: pulumi.Output<string[] | undefined>;
    /**
     * To manage topics, please switch to using a separate resource type `yandex.MdbKafkaTopic`.
     *
     * @deprecated to manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic
     */
    declare public readonly topics: pulumi.Output<outputs.MdbKafkaClusterTopic[] | undefined>;
    /**
     * To manage users, please switch to using a separate resource type `yandex.MdbKafkaUser`.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_kafka_user
     */
    declare public readonly users: pulumi.Output<outputs.MdbKafkaClusterUser[] | undefined>;

    /**
     * Create a MdbKafkaCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbKafkaClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbKafkaClusterArgs | MdbKafkaClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbKafkaClusterState | undefined;
            resourceInputs["config"] = state?.config;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["health"] = state?.health;
            resourceInputs["hostGroupIds"] = state?.hostGroupIds;
            resourceInputs["hosts"] = state?.hosts;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["maintenanceWindow"] = state?.maintenanceWindow;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetIds"] = state?.subnetIds;
            resourceInputs["topics"] = state?.topics;
            resourceInputs["users"] = state?.users;
        } else {
            const args = argsOrState as MdbKafkaClusterArgs | undefined;
            if (args?.config === undefined && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["config"] = args?.config;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["hostGroupIds"] = args?.hostGroupIds;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["maintenanceWindow"] = args?.maintenanceWindow;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["subnetIds"] = args?.subnetIds;
            resourceInputs["topics"] = args?.topics;
            resourceInputs["users"] = args?.users;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["hosts"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MdbKafkaCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbKafkaCluster resources.
 */
export interface MdbKafkaClusterState {
    /**
     * Configuration of the Kafka cluster.
     */
    config?: pulumi.Input<inputs.MdbKafkaClusterConfig>;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * Deployment environment of the Kafka cluster. Can be either `PRESTABLE` or `PRODUCTION`. The default is `PRODUCTION`.
     */
    environment?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-kafka/api-ref/Cluster/).
     */
    health?: pulumi.Input<string>;
    /**
     * A list of IDs of the host groups to place VMs of the cluster on.
     */
    hostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A host of the Kafka cluster.
     */
    hosts?: pulumi.Input<pulumi.Input<inputs.MdbKafkaClusterHost>[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maintenance policy of the Kafka cluster.
     */
    maintenanceWindow?: pulumi.Input<inputs.MdbKafkaClusterMaintenanceWindow>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId?: pulumi.Input<string>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-kafka/api-ref/Cluster/).
     */
    status?: pulumi.Input<string>;
    /**
     * The list of VPC subnets identifiers which resource is attached.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * To manage topics, please switch to using a separate resource type `yandex.MdbKafkaTopic`.
     *
     * @deprecated to manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic
     */
    topics?: pulumi.Input<pulumi.Input<inputs.MdbKafkaClusterTopic>[]>;
    /**
     * To manage users, please switch to using a separate resource type `yandex.MdbKafkaUser`.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_kafka_user
     */
    users?: pulumi.Input<pulumi.Input<inputs.MdbKafkaClusterUser>[]>;
}

/**
 * The set of arguments for constructing a MdbKafkaCluster resource.
 */
export interface MdbKafkaClusterArgs {
    /**
     * Configuration of the Kafka cluster.
     */
    config: pulumi.Input<inputs.MdbKafkaClusterConfig>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * Deployment environment of the Kafka cluster. Can be either `PRESTABLE` or `PRODUCTION`. The default is `PRODUCTION`.
     */
    environment?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A list of IDs of the host groups to place VMs of the cluster on.
     */
    hostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maintenance policy of the Kafka cluster.
     */
    maintenanceWindow?: pulumi.Input<inputs.MdbKafkaClusterMaintenanceWindow>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId: pulumi.Input<string>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of VPC subnets identifiers which resource is attached.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * To manage topics, please switch to using a separate resource type `yandex.MdbKafkaTopic`.
     *
     * @deprecated to manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic
     */
    topics?: pulumi.Input<pulumi.Input<inputs.MdbKafkaClusterTopic>[]>;
    /**
     * To manage users, please switch to using a separate resource type `yandex.MdbKafkaUser`.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_kafka_user
     */
    users?: pulumi.Input<pulumi.Input<inputs.MdbKafkaClusterUser>[]>;
}
