// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a connector of a Kafka cluster within the Yandex Cloud. For more information, see [the official documentation](https://yandex.cloud/docs/managed-kafka/concepts).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * const myCluster = new yandex.MdbKafkaCluster("myCluster", {
 *     networkId: "c64vs98keiqc7f24pvkd",
 *     config: {
 *         version: "2.8",
 *         zones: ["ru-central1-a"],
 *         kafka: {
 *             resources: {
 *                 resourcePresetId: "s2.micro",
 *                 diskTypeId: "network-hdd",
 *                 diskSize: 16,
 *             },
 *         },
 *     },
 * });
 * //
 * // Create a new MDB Kafka Connector.
 * //
 * const myConn = new yandex.MdbKafkaConnector("myConn", {
 *     clusterId: myCluster.id,
 *     tasksMax: 3,
 *     properties: {
 *         [refresh.topics.enabled]: "true",
 *     },
 *     connectorConfigMirrormakers: [{
 *         topics: "data.*",
 *         replicationFactor: 1,
 *         sourceCluster: {
 *             alias: "source",
 *             externalClusters: [{
 *                 bootstrapServers: "somebroker1:9091,somebroker2:9091",
 *                 saslUsername: "someuser",
 *                 saslPassword: "somepassword",
 *                 saslMechanism: "SCRAM-SHA-512",
 *                 securityProtocol: "SASL_SSL",
 *             }],
 *         },
 *         targetCluster: {
 *             alias: "target",
 *             thisClusters: [{}],
 *         },
 *     }],
 * });
 * const connector = new yandex.MdbKafkaConnector("connector", {
 *     clusterId: myCluster.id,
 *     tasksMax: 3,
 *     properties: {
 *         "key.converter": "org.apache.kafka.connect.storage.StringConverter",
 *         "value.converter": "org.apache.kafka.connect.json.JsonConverter",
 *         "value.converter.schemas.enable": "false",
 *         "format.output.type": "jsonl",
 *         "file.name.template": "dir1/dir2/{{topic}}-{{partition:padding=true}}-{{start_offset:padding=true}}.gz",
 *         "timestamp.timezone": "Europe/Moscow",
 *     },
 *     connectorConfigS3Sinks: [{
 *         topics: "data.*",
 *         fileCompressionType: "gzip",
 *         fileMaxRecords: 100,
 *         s3Connection: {
 *             bucketName: "somebucket",
 *             externalS3s: [{
 *                 endpoint: "storage.yandexcloud.net",
 *                 accessKeyId: "some_access_key_id",
 *                 secretAccessKey: "some_secret_access_key",
 *             }],
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * ```sh
 * $ pulumi import yandex:index/mdbKafkaConnector:MdbKafkaConnector <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/mdbKafkaConnector:MdbKafkaConnector my_conn ...
 * ```
 */
export class MdbKafkaConnector extends pulumi.CustomResource {
    /**
     * Get an existing MdbKafkaConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbKafkaConnectorState, opts?: pulumi.CustomResourceOptions): MdbKafkaConnector {
        return new MdbKafkaConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbKafkaConnector:MdbKafkaConnector';

    /**
     * Returns true if the given object is an instance of MdbKafkaConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbKafkaConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbKafkaConnector.__pulumiType;
    }

    /**
     * The ID of the Kafka cluster.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * Settings for MirrorMaker2 connector.
     */
    declare public readonly connectorConfigMirrormakers: pulumi.Output<outputs.MdbKafkaConnectorConnectorConfigMirrormaker[] | undefined>;
    /**
     * Settings for S3 Sink connector.
     */
    declare public readonly connectorConfigS3Sinks: pulumi.Output<outputs.MdbKafkaConnectorConnectorConfigS3Sink[] | undefined>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Additional properties for connector.
     */
    declare public readonly properties: pulumi.Output<{[key: string]: string}>;
    /**
     * The number of the connector's parallel working tasks. Default is the number of brokers.
     */
    declare public readonly tasksMax: pulumi.Output<number | undefined>;

    /**
     * Create a MdbKafkaConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbKafkaConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbKafkaConnectorArgs | MdbKafkaConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbKafkaConnectorState | undefined;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["connectorConfigMirrormakers"] = state?.connectorConfigMirrormakers;
            resourceInputs["connectorConfigS3Sinks"] = state?.connectorConfigS3Sinks;
            resourceInputs["name"] = state?.name;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["tasksMax"] = state?.tasksMax;
        } else {
            const args = argsOrState as MdbKafkaConnectorArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["connectorConfigMirrormakers"] = args?.connectorConfigMirrormakers;
            resourceInputs["connectorConfigS3Sinks"] = args?.connectorConfigS3Sinks;
            resourceInputs["name"] = args?.name;
            resourceInputs["properties"] = args?.properties;
            resourceInputs["tasksMax"] = args?.tasksMax;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MdbKafkaConnector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbKafkaConnector resources.
 */
export interface MdbKafkaConnectorState {
    /**
     * The ID of the Kafka cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Settings for MirrorMaker2 connector.
     */
    connectorConfigMirrormakers?: pulumi.Input<pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigMirrormaker>[]>;
    /**
     * Settings for S3 Sink connector.
     */
    connectorConfigS3Sinks?: pulumi.Input<pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigS3Sink>[]>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Additional properties for connector.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The number of the connector's parallel working tasks. Default is the number of brokers.
     */
    tasksMax?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MdbKafkaConnector resource.
 */
export interface MdbKafkaConnectorArgs {
    /**
     * The ID of the Kafka cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Settings for MirrorMaker2 connector.
     */
    connectorConfigMirrormakers?: pulumi.Input<pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigMirrormaker>[]>;
    /**
     * Settings for S3 Sink connector.
     */
    connectorConfigS3Sinks?: pulumi.Input<pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigS3Sink>[]>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Additional properties for connector.
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The number of the connector's parallel working tasks. Default is the number of brokers.
     */
    tasksMax?: pulumi.Input<number>;
}
