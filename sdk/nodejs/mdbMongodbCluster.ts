// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Manages a MongoDB cluster within the Yandex.Cloud. For more information, see
 * [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/concepts).
 *
 * ## Example Usage
 *
 * Example of creating a Single Node MongoDB.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const fooVpcNetwork = new yandex.VpcNetwork("foo", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("foo", {
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.1.0.0/24"],
 *     zone: "ru-central1-a",
 * });
 * const fooMdbMongodbCluster = new yandex.MdbMongodbCluster("foo", {
 *     clusterConfig: {
 *         version: "4.2",
 *     },
 *     databases: [{
 *         name: "testdb",
 *     }],
 *     environment: "PRESTABLE",
 *     hosts: [{
 *         subnetId: fooVpcSubnet.id,
 *         zoneId: "ru-central1-a",
 *     }],
 *     labels: {
 *         test_key: "test_value",
 *     },
 *     maintenanceWindow: {
 *         type: "ANYTIME",
 *     },
 *     networkId: fooVpcNetwork.id,
 *     resources: {
 *         diskSize: 16,
 *         diskTypeId: "network-hdd",
 *         resourcePresetId: "b1.nano",
 *     },
 *     users: [{
 *         name: "john",
 *         password: "password",
 *         permissions: [{
 *             databaseName: "testdb",
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * A cluster can be imported using the `id` of the resource, e.g.
 *
 * ```sh
 *  $ pulumi import yandex:index/mdbMongodbCluster:MdbMongodbCluster foo cluster_id
 * ```
 */
export class MdbMongodbCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdbMongodbCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbMongodbClusterState, opts?: pulumi.CustomResourceOptions): MdbMongodbCluster {
        return new MdbMongodbCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbMongodbCluster:MdbMongodbCluster';

    /**
     * Returns true if the given object is an instance of MdbMongodbCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbMongodbCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbMongodbCluster.__pulumiType;
    }

    /**
     * Configuration of the MongoDB subcluster. The structure is documented below.
     */
    public readonly clusterConfig!: pulumi.Output<outputs.MdbMongodbClusterClusterConfig>;
    /**
     * The ID of the cluster.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Creation timestamp of the key.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * A database of the MongoDB cluster. The structure is documented below.
     */
    public readonly databases!: pulumi.Output<outputs.MdbMongodbClusterDatabase[]>;
    /**
     * Description of the MongoDB cluster.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * The ID of the folder that the resource belongs to. If it
     * is not provided, the default provider folder is used.
     */
    public readonly folderId!: pulumi.Output<string>;
    /**
     * The health of the host.
     */
    public /*out*/ readonly health!: pulumi.Output<string>;
    /**
     * A host of the MongoDB cluster. The structure is documented below.
     */
    public readonly hosts!: pulumi.Output<outputs.MdbMongodbClusterHost[]>;
    /**
     * A set of key/value label pairs to assign to the MongoDB cluster.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly maintenanceWindow!: pulumi.Output<outputs.MdbMongodbClusterMaintenanceWindow>;
    /**
     * The fully qualified domain name of the host. Computed on server side.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the network, to which the MongoDB cluster belongs.
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * Resources allocated to hosts of the MongoDB cluster. The structure is documented below.
     */
    public readonly resources!: pulumi.Output<outputs.MdbMongodbClusterResources>;
    /**
     * A set of ids of security groups assigned to hosts of the cluster.
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * MongoDB Cluster mode enabled/disabled.
     */
    public /*out*/ readonly sharded!: pulumi.Output<boolean>;
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.
     * For more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/api-ref/Cluster/).
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A user of the MongoDB cluster. The structure is documented below.
     */
    public readonly users!: pulumi.Output<outputs.MdbMongodbClusterUser[]>;

    /**
     * Create a MdbMongodbCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbMongodbClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbMongodbClusterArgs | MdbMongodbClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbMongodbClusterState | undefined;
            inputs["clusterConfig"] = state ? state.clusterConfig : undefined;
            inputs["clusterId"] = state ? state.clusterId : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["databases"] = state ? state.databases : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["environment"] = state ? state.environment : undefined;
            inputs["folderId"] = state ? state.folderId : undefined;
            inputs["health"] = state ? state.health : undefined;
            inputs["hosts"] = state ? state.hosts : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkId"] = state ? state.networkId : undefined;
            inputs["resources"] = state ? state.resources : undefined;
            inputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            inputs["sharded"] = state ? state.sharded : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as MdbMongodbClusterArgs | undefined;
            if ((!args || args.clusterConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterConfig'");
            }
            if ((!args || args.databases === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databases'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.hosts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.resources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            if ((!args || args.users === undefined) && !opts.urn) {
                throw new Error("Missing required property 'users'");
            }
            inputs["clusterConfig"] = args ? args.clusterConfig : undefined;
            inputs["clusterId"] = args ? args.clusterId : undefined;
            inputs["databases"] = args ? args.databases : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["environment"] = args ? args.environment : undefined;
            inputs["folderId"] = args ? args.folderId : undefined;
            inputs["hosts"] = args ? args.hosts : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkId"] = args ? args.networkId : undefined;
            inputs["resources"] = args ? args.resources : undefined;
            inputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            inputs["users"] = args ? args.users : undefined;
            inputs["createdAt"] = undefined /*out*/;
            inputs["health"] = undefined /*out*/;
            inputs["sharded"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(MdbMongodbCluster.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbMongodbCluster resources.
 */
export interface MdbMongodbClusterState {
    /**
     * Configuration of the MongoDB subcluster. The structure is documented below.
     */
    readonly clusterConfig?: pulumi.Input<inputs.MdbMongodbClusterClusterConfig>;
    /**
     * The ID of the cluster.
     */
    readonly clusterId?: pulumi.Input<string>;
    /**
     * Creation timestamp of the key.
     */
    readonly createdAt?: pulumi.Input<string>;
    /**
     * A database of the MongoDB cluster. The structure is documented below.
     */
    readonly databases?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterDatabase>[]>;
    /**
     * Description of the MongoDB cluster.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    readonly environment?: pulumi.Input<string>;
    /**
     * The ID of the folder that the resource belongs to. If it
     * is not provided, the default provider folder is used.
     */
    readonly folderId?: pulumi.Input<string>;
    /**
     * The health of the host.
     */
    readonly health?: pulumi.Input<string>;
    /**
     * A host of the MongoDB cluster. The structure is documented below.
     */
    readonly hosts?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterHost>[]>;
    /**
     * A set of key/value label pairs to assign to the MongoDB cluster.
     */
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly maintenanceWindow?: pulumi.Input<inputs.MdbMongodbClusterMaintenanceWindow>;
    /**
     * The fully qualified domain name of the host. Computed on server side.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * ID of the network, to which the MongoDB cluster belongs.
     */
    readonly networkId?: pulumi.Input<string>;
    /**
     * Resources allocated to hosts of the MongoDB cluster. The structure is documented below.
     */
    readonly resources?: pulumi.Input<inputs.MdbMongodbClusterResources>;
    /**
     * A set of ids of security groups assigned to hosts of the cluster.
     */
    readonly securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * MongoDB Cluster mode enabled/disabled.
     */
    readonly sharded?: pulumi.Input<boolean>;
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.
     * For more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/api-ref/Cluster/).
     */
    readonly status?: pulumi.Input<string>;
    /**
     * A user of the MongoDB cluster. The structure is documented below.
     */
    readonly users?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterUser>[]>;
}

/**
 * The set of arguments for constructing a MdbMongodbCluster resource.
 */
export interface MdbMongodbClusterArgs {
    /**
     * Configuration of the MongoDB subcluster. The structure is documented below.
     */
    readonly clusterConfig: pulumi.Input<inputs.MdbMongodbClusterClusterConfig>;
    /**
     * The ID of the cluster.
     */
    readonly clusterId?: pulumi.Input<string>;
    /**
     * A database of the MongoDB cluster. The structure is documented below.
     */
    readonly databases: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterDatabase>[]>;
    /**
     * Description of the MongoDB cluster.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    readonly environment: pulumi.Input<string>;
    /**
     * The ID of the folder that the resource belongs to. If it
     * is not provided, the default provider folder is used.
     */
    readonly folderId?: pulumi.Input<string>;
    /**
     * A host of the MongoDB cluster. The structure is documented below.
     */
    readonly hosts: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterHost>[]>;
    /**
     * A set of key/value label pairs to assign to the MongoDB cluster.
     */
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly maintenanceWindow?: pulumi.Input<inputs.MdbMongodbClusterMaintenanceWindow>;
    /**
     * The fully qualified domain name of the host. Computed on server side.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * ID of the network, to which the MongoDB cluster belongs.
     */
    readonly networkId: pulumi.Input<string>;
    /**
     * Resources allocated to hosts of the MongoDB cluster. The structure is documented below.
     */
    readonly resources: pulumi.Input<inputs.MdbMongodbClusterResources>;
    /**
     * A set of ids of security groups assigned to hosts of the cluster.
     */
    readonly securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A user of the MongoDB cluster. The structure is documented below.
     */
    readonly users: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterUser>[]>;
}
