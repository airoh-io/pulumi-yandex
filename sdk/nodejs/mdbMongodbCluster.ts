// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a MongoDB cluster within the Yandex Cloud. For more information, see [the official documentation](https://yandex.cloud/docs/managed-mongodb/concepts).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * // Auxiliary resources
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-d",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.1.0.0/24"],
 * });
 * //
 * // Create a new MDB MongoDB Cluster.
 * //
 * const myCluster = new yandex.MdbMongodbCluster("myCluster", {
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     clusterConfig: {
 *         version: "4.2",
 *     },
 *     labels: {
 *         test_key: "test_value",
 *     },
 *     databases: [{
 *         name: "testdb",
 *     }],
 *     users: [{
 *         name: "john",
 *         password: "password",
 *         permissions: [{
 *             databaseName: "testdb",
 *         }],
 *     }],
 *     resourcesMongod: {
 *         resourcePresetId: "s2.small",
 *         diskSize: 16,
 *         diskTypeId: "network-hdd",
 *     },
 *     resourcesMongos: {
 *         resourcePresetId: "s2.small",
 *         diskSize: 14,
 *         diskTypeId: "network-hdd",
 *     },
 *     resourcesMongocfg: {
 *         resourcePresetId: "s2.small",
 *         diskSize: 14,
 *         diskTypeId: "network-hdd",
 *     },
 *     hosts: [{
 *         zoneId: "ru-central1-d",
 *         subnetId: fooVpcSubnet.id,
 *     }],
 *     maintenanceWindow: {
 *         type: "ANYTIME",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * ```sh
 * $ pulumi import yandex:index/mdbMongodbCluster:MdbMongodbCluster <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/mdbMongodbCluster:MdbMongodbCluster my_cluster ...
 * ```
 */
export class MdbMongodbCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdbMongodbCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbMongodbClusterState, opts?: pulumi.CustomResourceOptions): MdbMongodbCluster {
        return new MdbMongodbCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbMongodbCluster:MdbMongodbCluster';

    /**
     * Returns true if the given object is an instance of MdbMongodbCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbMongodbCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbMongodbCluster.__pulumiType;
    }

    /**
     * Configuration of the MongoDB subcluster.
     */
    declare public readonly clusterConfig: pulumi.Output<outputs.MdbMongodbClusterClusterConfig>;
    /**
     * The ID of the cluster.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * The creation timestamp of the resource.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * A database of the MongoDB cluster.
     *
     * @deprecated to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database
     */
    declare public readonly databases: pulumi.Output<outputs.MdbMongodbClusterDatabase[]>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    declare public readonly deletionProtection: pulumi.Output<boolean>;
    /**
     * The resource description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    declare public readonly diskEncryptionKeyId: pulumi.Output<string>;
    /**
     * Disk size autoscaling settings for mongocfg.
     */
    declare public readonly diskSizeAutoscalingMongocfg: pulumi.Output<outputs.MdbMongodbClusterDiskSizeAutoscalingMongocfg>;
    /**
     * Disk size autoscaling settings for mongod.
     */
    declare public readonly diskSizeAutoscalingMongod: pulumi.Output<outputs.MdbMongodbClusterDiskSizeAutoscalingMongod>;
    /**
     * Disk size autoscaling settings for mongoinfra.
     */
    declare public readonly diskSizeAutoscalingMongoinfra: pulumi.Output<outputs.MdbMongodbClusterDiskSizeAutoscalingMongoinfra>;
    /**
     * Disk size autoscaling settings for mongos.
     */
    declare public readonly diskSizeAutoscalingMongos: pulumi.Output<outputs.MdbMongodbClusterDiskSizeAutoscalingMongos>;
    /**
     * Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    declare public readonly environment: pulumi.Output<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
     */
    declare public /*out*/ readonly health: pulumi.Output<string>;
    /**
     * A host of the MongoDB cluster.
     */
    declare public readonly hosts: pulumi.Output<outputs.MdbMongodbClusterHost[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * Maintenance window settings of the MongoDB cluster.
     */
    declare public readonly maintenanceWindow: pulumi.Output<outputs.MdbMongodbClusterMaintenanceWindow>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
     *
     * @deprecated to manage `resources`s, please switch to using a separate resource type `resources_mongo*`
     */
    declare public readonly resources: pulumi.Output<outputs.MdbMongodbClusterResources | undefined>;
    /**
     * Resources allocated to `mongocfg` hosts of the MongoDB cluster.
     */
    declare public readonly resourcesMongocfg: pulumi.Output<outputs.MdbMongodbClusterResourcesMongocfg | undefined>;
    /**
     * Resources allocated to `mongod` hosts of the MongoDB cluster.
     */
    declare public readonly resourcesMongod: pulumi.Output<outputs.MdbMongodbClusterResourcesMongod | undefined>;
    /**
     * Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
     */
    declare public readonly resourcesMongoinfra: pulumi.Output<outputs.MdbMongodbClusterResourcesMongoinfra | undefined>;
    /**
     * Resources allocated to `mongos` hosts of the MongoDB cluster.
     */
    declare public readonly resourcesMongos: pulumi.Output<outputs.MdbMongodbClusterResourcesMongos | undefined>;
    /**
     * The cluster will be created from the specified backup.
     */
    declare public readonly restore: pulumi.Output<outputs.MdbMongodbClusterRestore | undefined>;
    /**
     * The list of security groups applied to resource or their components.
     */
    declare public readonly securityGroupIds: pulumi.Output<string[] | undefined>;
    /**
     * MongoDB Cluster mode enabled/disabled.
     */
    declare public /*out*/ readonly sharded: pulumi.Output<boolean>;
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * A user of the MongoDB cluster.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user
     */
    declare public readonly users: pulumi.Output<outputs.MdbMongodbClusterUser[]>;

    /**
     * Create a MdbMongodbCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbMongodbClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbMongodbClusterArgs | MdbMongodbClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbMongodbClusterState | undefined;
            resourceInputs["clusterConfig"] = state?.clusterConfig;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["databases"] = state?.databases;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["diskEncryptionKeyId"] = state?.diskEncryptionKeyId;
            resourceInputs["diskSizeAutoscalingMongocfg"] = state?.diskSizeAutoscalingMongocfg;
            resourceInputs["diskSizeAutoscalingMongod"] = state?.diskSizeAutoscalingMongod;
            resourceInputs["diskSizeAutoscalingMongoinfra"] = state?.diskSizeAutoscalingMongoinfra;
            resourceInputs["diskSizeAutoscalingMongos"] = state?.diskSizeAutoscalingMongos;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["health"] = state?.health;
            resourceInputs["hosts"] = state?.hosts;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["maintenanceWindow"] = state?.maintenanceWindow;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["resources"] = state?.resources;
            resourceInputs["resourcesMongocfg"] = state?.resourcesMongocfg;
            resourceInputs["resourcesMongod"] = state?.resourcesMongod;
            resourceInputs["resourcesMongoinfra"] = state?.resourcesMongoinfra;
            resourceInputs["resourcesMongos"] = state?.resourcesMongos;
            resourceInputs["restore"] = state?.restore;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["sharded"] = state?.sharded;
            resourceInputs["status"] = state?.status;
            resourceInputs["users"] = state?.users;
        } else {
            const args = argsOrState as MdbMongodbClusterArgs | undefined;
            if (args?.clusterConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterConfig'");
            }
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if (args?.hosts === undefined && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["clusterConfig"] = args?.clusterConfig;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["databases"] = args?.databases;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["diskEncryptionKeyId"] = args?.diskEncryptionKeyId;
            resourceInputs["diskSizeAutoscalingMongocfg"] = args?.diskSizeAutoscalingMongocfg;
            resourceInputs["diskSizeAutoscalingMongod"] = args?.diskSizeAutoscalingMongod;
            resourceInputs["diskSizeAutoscalingMongoinfra"] = args?.diskSizeAutoscalingMongoinfra;
            resourceInputs["diskSizeAutoscalingMongos"] = args?.diskSizeAutoscalingMongos;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["hosts"] = args?.hosts;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["maintenanceWindow"] = args?.maintenanceWindow;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["resources"] = args?.resources;
            resourceInputs["resourcesMongocfg"] = args?.resourcesMongocfg;
            resourceInputs["resourcesMongod"] = args?.resourcesMongod;
            resourceInputs["resourcesMongoinfra"] = args?.resourcesMongoinfra;
            resourceInputs["resourcesMongos"] = args?.resourcesMongos;
            resourceInputs["restore"] = args?.restore;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["users"] = args?.users;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["sharded"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MdbMongodbCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbMongodbCluster resources.
 */
export interface MdbMongodbClusterState {
    /**
     * Configuration of the MongoDB subcluster.
     */
    clusterConfig?: pulumi.Input<inputs.MdbMongodbClusterClusterConfig>;
    /**
     * The ID of the cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A database of the MongoDB cluster.
     *
     * @deprecated to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database
     */
    databases?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterDatabase>[]>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    diskEncryptionKeyId?: pulumi.Input<string>;
    /**
     * Disk size autoscaling settings for mongocfg.
     */
    diskSizeAutoscalingMongocfg?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongocfg>;
    /**
     * Disk size autoscaling settings for mongod.
     */
    diskSizeAutoscalingMongod?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongod>;
    /**
     * Disk size autoscaling settings for mongoinfra.
     */
    diskSizeAutoscalingMongoinfra?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongoinfra>;
    /**
     * Disk size autoscaling settings for mongos.
     */
    diskSizeAutoscalingMongos?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongos>;
    /**
     * Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    environment?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
     */
    health?: pulumi.Input<string>;
    /**
     * A host of the MongoDB cluster.
     */
    hosts?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterHost>[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maintenance window settings of the MongoDB cluster.
     */
    maintenanceWindow?: pulumi.Input<inputs.MdbMongodbClusterMaintenanceWindow>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId?: pulumi.Input<string>;
    /**
     * (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
     *
     * @deprecated to manage `resources`s, please switch to using a separate resource type `resources_mongo*`
     */
    resources?: pulumi.Input<inputs.MdbMongodbClusterResources>;
    /**
     * Resources allocated to `mongocfg` hosts of the MongoDB cluster.
     */
    resourcesMongocfg?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongocfg>;
    /**
     * Resources allocated to `mongod` hosts of the MongoDB cluster.
     */
    resourcesMongod?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongod>;
    /**
     * Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
     */
    resourcesMongoinfra?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongoinfra>;
    /**
     * Resources allocated to `mongos` hosts of the MongoDB cluster.
     */
    resourcesMongos?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongos>;
    /**
     * The cluster will be created from the specified backup.
     */
    restore?: pulumi.Input<inputs.MdbMongodbClusterRestore>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * MongoDB Cluster mode enabled/disabled.
     */
    sharded?: pulumi.Input<boolean>;
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
     */
    status?: pulumi.Input<string>;
    /**
     * A user of the MongoDB cluster.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user
     */
    users?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterUser>[]>;
}

/**
 * The set of arguments for constructing a MdbMongodbCluster resource.
 */
export interface MdbMongodbClusterArgs {
    /**
     * Configuration of the MongoDB subcluster.
     */
    clusterConfig: pulumi.Input<inputs.MdbMongodbClusterClusterConfig>;
    /**
     * The ID of the cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * A database of the MongoDB cluster.
     *
     * @deprecated to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database
     */
    databases?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterDatabase>[]>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    diskEncryptionKeyId?: pulumi.Input<string>;
    /**
     * Disk size autoscaling settings for mongocfg.
     */
    diskSizeAutoscalingMongocfg?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongocfg>;
    /**
     * Disk size autoscaling settings for mongod.
     */
    diskSizeAutoscalingMongod?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongod>;
    /**
     * Disk size autoscaling settings for mongoinfra.
     */
    diskSizeAutoscalingMongoinfra?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongoinfra>;
    /**
     * Disk size autoscaling settings for mongos.
     */
    diskSizeAutoscalingMongos?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongos>;
    /**
     * Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    environment: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A host of the MongoDB cluster.
     */
    hosts: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterHost>[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maintenance window settings of the MongoDB cluster.
     */
    maintenanceWindow?: pulumi.Input<inputs.MdbMongodbClusterMaintenanceWindow>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId: pulumi.Input<string>;
    /**
     * (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
     *
     * @deprecated to manage `resources`s, please switch to using a separate resource type `resources_mongo*`
     */
    resources?: pulumi.Input<inputs.MdbMongodbClusterResources>;
    /**
     * Resources allocated to `mongocfg` hosts of the MongoDB cluster.
     */
    resourcesMongocfg?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongocfg>;
    /**
     * Resources allocated to `mongod` hosts of the MongoDB cluster.
     */
    resourcesMongod?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongod>;
    /**
     * Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
     */
    resourcesMongoinfra?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongoinfra>;
    /**
     * Resources allocated to `mongos` hosts of the MongoDB cluster.
     */
    resourcesMongos?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongos>;
    /**
     * The cluster will be created from the specified backup.
     */
    restore?: pulumi.Input<inputs.MdbMongodbClusterRestore>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A user of the MongoDB cluster.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user
     */
    users?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterUser>[]>;
}
