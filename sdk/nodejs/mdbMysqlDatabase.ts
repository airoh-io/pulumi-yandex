// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a MySQL database within the Yandex Cloud. For more information, see [the official documentation](https://yandex.cloud/docs/managed-mysql/).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * // Auxiliary resources
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-d",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.5.0.0/24"],
 * });
 * const myCluster = new yandex.MdbMysqlCluster("myCluster", {
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     version: "8.0",
 *     resources: {
 *         resourcePresetId: "s2.micro",
 *         diskTypeId: "network-ssd",
 *         diskSize: 16,
 *     },
 *     hosts: [{
 *         zone: "ru-central1-d",
 *         subnetId: fooVpcSubnet.id,
 *     }],
 * });
 * //
 * // Create a new MDB MySQL Database.
 * //
 * const myDb = new yandex.MdbMysqlDatabase("myDb", {clusterId: myCluster.id});
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * ```sh
 * $ pulumi import yandex:index/mdbMysqlDatabase:MdbMysqlDatabase <resource Name> "<cluster Id>:<database Name>"
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/mdbMysqlDatabase:MdbMysqlDatabase my_db ...
 * ```
 */
export class MdbMysqlDatabase extends pulumi.CustomResource {
    /**
     * Get an existing MdbMysqlDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbMysqlDatabaseState, opts?: pulumi.CustomResourceOptions): MdbMysqlDatabase {
        return new MdbMysqlDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbMysqlDatabase:MdbMysqlDatabase';

    /**
     * Returns true if the given object is an instance of MdbMysqlDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbMysqlDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbMysqlDatabase.__pulumiType;
    }

    /**
     * The MySQL cluster ID.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * The name of the database.
     */
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a MdbMysqlDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbMysqlDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbMysqlDatabaseArgs | MdbMysqlDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbMysqlDatabaseState | undefined;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as MdbMysqlDatabaseArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["name"] = args?.name;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MdbMysqlDatabase.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbMysqlDatabase resources.
 */
export interface MdbMysqlDatabaseState {
    /**
     * The MySQL cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The name of the database.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MdbMysqlDatabase resource.
 */
export interface MdbMysqlDatabaseArgs {
    /**
     * The MySQL cluster ID.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The name of the database.
     */
    name?: pulumi.Input<string>;
}
