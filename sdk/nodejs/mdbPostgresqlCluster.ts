// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Manages a PostgreSQL cluster within the Yandex.Cloud. For more information, see
 * [the official documentation](https://cloud.yandex.com/docs/managed-postgresql/).
 *
 * ## Example Usage
 *
 * Example of creating a Single Node PostgreSQL.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.5.0.0/24"],
 * });
 * const fooMdbPostgresqlCluster = new yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster", {
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     config: {
 *         version: 12,
 *         resources: {
 *             resourcePresetId: "s2.micro",
 *             diskTypeId: "network-ssd",
 *             diskSize: 16,
 *         },
 *         postgresqlConfig: {
 *             max_connections: 395,
 *             enable_parallel_hash: true,
 *             vacuum_cleanup_index_scale_factor: 0.2,
 *             autovacuum_vacuum_scale_factor: 0.34,
 *             default_transaction_isolation: "TRANSACTION_ISOLATION_READ_COMMITTED",
 *             shared_preload_libraries: "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN",
 *         },
 *     },
 *     databases: [{
 *         name: "db_name",
 *         owner: "user_name",
 *     }],
 *     users: [{
 *         name: "user_name",
 *         password: "your_password",
 *         connLimit: 50,
 *         permissions: [{
 *             databaseName: "db_name",
 *         }],
 *         settings: {
 *             default_transaction_isolation: "read committed",
 *             log_min_duration_statement: 5000,
 *         },
 *     }],
 *     hosts: [{
 *         zone: "ru-central1-a",
 *         subnetId: fooVpcSubnet.id,
 *     }],
 * });
 * ```
 *
 * Example of creating a High-Availability (HA) PostgreSQL Cluster.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.1.0.0/24"],
 * });
 * const bar = new yandex.VpcSubnet("bar", {
 *     zone: "ru-central1-b",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.2.0.0/24"],
 * });
 * const fooMdbPostgresqlCluster = new yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster", {
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     config: {
 *         version: 12,
 *         resources: {
 *             resourcePresetId: "s2.micro",
 *             diskTypeId: "network-ssd",
 *             diskSize: 16,
 *         },
 *     },
 *     databases: [{
 *         name: "db_name",
 *         owner: "user_name",
 *     }],
 *     users: [{
 *         name: "user_name",
 *         password: "password",
 *         permissions: [{
 *             databaseName: "db_name",
 *         }],
 *     }],
 *     hosts: [
 *         {
 *             zone: "ru-central1-a",
 *             subnetId: fooVpcSubnet.id,
 *         },
 *         {
 *             zone: "ru-central1-b",
 *             subnetId: bar.id,
 *         },
 *     ],
 * });
 * ```
 *
 * Example of creating a High-Availability (HA) PostgreSQL Cluster with priority and set master.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const vpcSubnet = new yandex.VpcSubnet("vpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.1.0.0/24"],
 * });
 * const fooMdbPostgresqlCluster = new yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster", {
 *     description: "test High-Availability (HA) PostgreSQL Cluster with priority and set master",
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     hostMasterName: "host_name_c_2",
 *     config: {
 *         version: "12",
 *         resources: {
 *             resourcePresetId: "s2.micro",
 *             diskSize: 10,
 *             diskTypeId: "network-ssd",
 *         },
 *     },
 *     users: [{
 *         name: "alice",
 *         password: "mysecurepassword",
 *         permissions: [{
 *             databaseName: "testdb",
 *         }],
 *     }],
 *     hosts: [
 *         {
 *             zone: "ru-central1-a",
 *             name: "host_name_a",
 *             priority: 2,
 *             subnetId: vpcSubnet.id,
 *         },
 *         {
 *             zone: "ru-central1-b",
 *             name: "host_name_b",
 *             replicationSourceName: "host_name_c",
 *             subnetId: index / vpcSubnetVpcSubnet.id,
 *         },
 *         {
 *             zone: "ru-central1-c",
 *             name: "host_name_c",
 *             subnetId: yandexIndex / vpcSubnetVpcSubnet.id,
 *         },
 *         {
 *             zone: "ru-central1-c",
 *             name: "host_name_c_2",
 *             subnetId: yandexIndex / vpcSubnetVpcSubnet.id,
 *         },
 *     ],
 *     databases: [{
 *         owner: "alice",
 *         name: "testdb",
 *     }],
 * });
 * const index_vpcSubnetVpcSubnet = new yandex.VpcSubnet("index/vpcSubnetVpcSubnet", {
 *     zone: "ru-central1-b",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.2.0.0/24"],
 * });
 * const yandexIndex_vpcSubnetVpcSubnet = new yandex.VpcSubnet("yandexIndex/vpcSubnetVpcSubnet", {
 *     zone: "ru-central1-c",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.3.0.0/24"],
 * });
 * ```
 *
 * Example of creating a Single Node PostgreSQL from backup.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.5.0.0/24"],
 * });
 * const fooMdbPostgresqlCluster = new yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster", {
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     restore: {
 *         backupId: "c9q99999999999999994cm:base_000000010000005F000000B4",
 *         time: "2021-02-11T15:04:05",
 *     },
 *     config: {
 *         version: 12,
 *         resources: {
 *             resourcePresetId: "s2.micro",
 *             diskTypeId: "network-ssd",
 *             diskSize: 16,
 *         },
 *         postgresqlConfig: {
 *             max_connections: 395,
 *             enable_parallel_hash: true,
 *             vacuum_cleanup_index_scale_factor: 0.2,
 *             autovacuum_vacuum_scale_factor: 0.34,
 *             default_transaction_isolation: "TRANSACTION_ISOLATION_READ_COMMITTED",
 *             shared_preload_libraries: "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN",
 *         },
 *     },
 *     databases: [{
 *         name: "db_name",
 *         owner: "user_name",
 *     }],
 *     users: [{
 *         name: "user_name",
 *         password: "your_password",
 *         connLimit: 50,
 *         permissions: [{
 *             databaseName: "db_name",
 *         }],
 *         settings: {
 *             default_transaction_isolation: "read committed",
 *             log_min_duration_statement: 5000,
 *         },
 *     }],
 *     hosts: [{
 *         zone: "ru-central1-a",
 *         subnetId: fooVpcSubnet.id,
 *     }],
 * });
 * ```
 *
 * Example of creating a High-Availability (HA) PostgreSQL cluster with multiple databases and users.
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as random from "@pulumi/random";
 * import * as yandex from "@pulumi/yandex";
 *
 * const passwords: random.RandomPassword[];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     passwords.push(new random.RandomPassword(`passwords-${range.value}`, {
 *         length: 16,
 *         special: true,
 *     }));
 * }
 * export const dbInstanceAlicePassword = passwords[0].result;
 * export const dbInstanceBobPassword = passwords[1].result;
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const vpcSubnet = new yandex.VpcSubnet("vpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.1.0.0/24"],
 * });
 * const fooMdbPostgresqlCluster = new yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster", {
 *     description: "Example of multiple databases and users",
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     folderId: "b1g24daaaddddffma52u",
 *     config: {
 *         version: "13",
 *         resources: {
 *             resourcePresetId: "s2.micro",
 *             diskSize: 10,
 *             diskTypeId: "network-ssd",
 *         },
 *         access: {
 *             webSql: true,
 *         },
 *         postgresqlConfig: {
 *             max_connections: 395,
 *             enable_parallel_hash: true,
 *             vacuum_cleanup_index_scale_factor: 0.2,
 *             autovacuum_vacuum_scale_factor: 0.32,
 *             default_transaction_isolation: "TRANSACTION_ISOLATION_READ_UNCOMMITTED",
 *             shared_preload_libraries: "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN",
 *         },
 *         poolerConfig: {
 *             poolDiscard: true,
 *             poolingMode: "SESSION",
 *         },
 *     },
 *     users: [
 *         {
 *             name: "alice",
 *             password: passwords[0].result,
 *             connLimit: 10,
 *             permissions: [
 *                 {
 *                     databaseName: "testdb",
 *                 },
 *                 {
 *                     databaseName: "testdb1",
 *                 },
 *                 {
 *                     databaseName: "testdb2",
 *                 },
 *             ],
 *         },
 *         {
 *             name: "bob",
 *             password: passwords[1].result,
 *             permissions: [
 *                 {
 *                     databaseName: "testdb2",
 *                 },
 *                 {
 *                     databaseName: "testdb1",
 *                 },
 *             ],
 *         },
 *         {
 *             name: "chuck",
 *             password: "123456789",
 *             permissions: [{
 *                 databaseName: "testdb",
 *             }],
 *             grants: [
 *                 "bob",
 *                 "alice",
 *             ],
 *         },
 *     ],
 *     hosts: [
 *         {
 *             zone: "ru-central1-b",
 *             subnetId: index / vpcSubnetVpcSubnet.id,
 *         },
 *         {
 *             zone: "ru-central1-a",
 *             subnetId: vpcSubnet.id,
 *         },
 *         {
 *             zone: "ru-central1-c",
 *             subnetId: yandexIndex / vpcSubnetVpcSubnet.id,
 *         },
 *     ],
 *     databases: [
 *         {
 *             owner: "alice",
 *             name: "testdb",
 *         },
 *         {
 *             owner: "alice",
 *             name: "testdb2",
 *         },
 *         {
 *             owner: "bob",
 *             name: "testdb1",
 *             extensions: [{
 *                 name: "postgis",
 *             }],
 *         },
 *     ],
 * });
 * const index_vpcSubnetVpcSubnet = new yandex.VpcSubnet("index/vpcSubnetVpcSubnet", {
 *     zone: "ru-central1-b",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.2.0.0/24"],
 * });
 * const yandexIndex_vpcSubnetVpcSubnet = new yandex.VpcSubnet("yandexIndex/vpcSubnetVpcSubnet", {
 *     zone: "ru-central1-c",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.3.0.0/24"],
 * });
 * ```
 * ## postresql config
 *
 * More information about config:
 * * https://www.postgresql.org/docs/current/runtime-config-connection.html
 * * https://www.postgresql.org/docs/current/runtime-config-resource.html
 * * https://www.postgresql.org/docs/current/runtime-config-wal.html
 * * https://www.postgresql.org/docs/current/runtime-config-query.html
 * * https://www.postgresql.org/docs/current/runtime-config-logging.html
 * * https://www.postgresql.org/docs/current/runtime-config-autovacuum.html
 * * https://www.postgresql.org/docs/current/runtime-config-client.html
 * * https://www.postgresql.org/docs/current/runtime-config-locks.html
 * * https://www.postgresql.org/docs/current/runtime-config-compatible.html
 *
 * * `sharedPreloadLibraries` override if not set. One of:
 * * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
 * * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
 * * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
 * * * NO value
 *
 * Other are not owweride if not set.
 *
 * ### Postgresql 13 config
 * * `archiveTimeout` integer
 *
 * * `arrayNulls` boolean
 *
 * * `autoExplainLogAnalyze` boolean
 *
 * * `autoExplainLogBuffers` boolean
 *
 * * `autoExplainLogMinDuration` integer
 *
 * * `autoExplainLogNestedStatements` boolean
 *
 * * `autoExplainLogTiming` boolean
 *
 * * `autoExplainLogTriggers` boolean
 *
 * * `autoExplainLogVerbose` boolean
 *
 * * `autoExplainSampleRate` float
 *
 * * `autovacuumAnalyzeScaleFactor` float
 *
 * * `autovacuumMaxWorkers` integer
 *
 * * `autovacuumNaptime` integer
 *
 * * `autovacuumVacuumCostDelay` integer
 *
 * * `autovacuumVacuumCostLimit` integer
 *
 * * `autovacuumVacuumInsertScaleFactor` float
 *
 * * `autovacuumVacuumInsertThreshold` integer
 *
 * * `autovacuumVacuumScaleFactor` float
 *
 * * `autovacuumWorkMem` integer
 *
 * * `backendFlushAfter` integer
 *
 * * `backslashQuote` one of:
 *   - 0: "BACKSLASH_QUOTE_UNSPECIFIED"
 *   - 1: "BACKSLASH_QUOTE"
 *   - 2: "BACKSLASH_QUOTE_ON"
 *   - 3: "BACKSLASH_QUOTE_OFF"
 *   - 4: "BACKSLASH_QUOTE_SAFE_ENCODING"
 *
 * * `bgwriterDelay` integer
 *
 * * `bgwriterFlushAfter` integer
 *
 * * `bgwriterLruMaxpages` integer
 *
 * * `bgwriterLruMultiplier` float
 *
 * * `byteaOutput` one of:
 *   - 0: "BYTEA_OUTPUT_UNSPECIFIED"
 *   - 1: "BYTEA_OUTPUT_HEX"
 *   - 2: "BYTEA_OUTPUT_ESCAPED"
 *
 * * `checkpointCompletionTarget` float
 *
 * * `checkpointFlushAfter` integer
 *
 * * `checkpointTimeout` integer
 *
 * * `clientMinMessages` one of:
 *   - 0: "LOG_LEVEL_UNSPECIFIED"
 *   - 1: "LOG_LEVEL_DEBUG5"
 *   - 2: "LOG_LEVEL_DEBUG4"
 *   - 3: "LOG_LEVEL_DEBUG3"
 *   - 4: "LOG_LEVEL_DEBUG2"
 *   - 5: "LOG_LEVEL_DEBUG1"
 *   - 6: "LOG_LEVEL_LOG"
 *   - 7: "LOG_LEVEL_NOTICE"
 *   - 8: "LOG_LEVEL_WARNING"
 *   - 9: "LOG_LEVEL_ERROR"
 *   - 10: "LOG_LEVEL_FATAL"
 *   - 11: "LOG_LEVEL_PANIC"
 *
 * * `constraintExclusion` one of:
 *   - 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
 *   - 1: "CONSTRAINT_EXCLUSION_ON"
 *   - 2: "CONSTRAINT_EXCLUSION_OFF"
 *   - 3: "CONSTRAINT_EXCLUSION_PARTITION"
 *
 * * `cursorTupleFraction` float
 *
 * * `deadlockTimeout` integer
 *
 * * `defaultStatisticsTarget` integer
 *
 * * `defaultTransactionIsolation` one of:
 *   - 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
 *   - 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
 *   - 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
 *   - 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
 *   - 4: "TRANSACTION_ISOLATION_SERIALIZABLE"
 *
 * * `defaultTransactionReadOnly` boolean
 *
 * * `defaultWithOids` boolean
 *
 * * `effectiveCacheSize` integer
 *
 * * `effectiveIoConcurrency` integer
 *
 * * `enableBitmapscan` boolean
 *
 * * `enableHashagg` boolean
 *
 * * `enableHashjoin` boolean
 *
 * * `enableIncrementalSort` boolean
 *
 * * `enableIndexonlyscan` boolean
 *
 * * `enableIndexscan` boolean
 *
 * * `enableMaterial` boolean
 *
 * * `enableMergejoin` boolean
 *
 * * `enableNestloop` boolean
 *
 * * `enableParallelAppend` boolean
 *
 * * `enableParallelHash` boolean
 *
 * * `enablePartitionPruning` boolean
 *
 * * `enablePartitionwiseAggregate` boolean
 *
 * * `enablePartitionwiseJoin` boolean
 *
 * * `enableSeqscan` boolean
 *
 * * `enableSort` boolean
 *
 * * `enableTidscan` boolean
 *
 * * `escapeStringWarning` boolean
 *
 * * `exitOnError` boolean
 *
 * * `forceParallelMode` one of:
 *   - 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
 *   - 1: "FORCE_PARALLEL_MODE_ON"
 *   - 2: "FORCE_PARALLEL_MODE_OFF"
 *   - 3: "FORCE_PARALLEL_MODE_REGRESS"
 *
 * * `fromCollapseLimit` integer
 *
 * * `ginPendingListLimit` integer
 *
 * * `hashMemMultiplier` float
 *
 * * `idleInTransactionSessionTimeout` integer
 *
 * * `jit` boolean
 *
 * * `joinCollapseLimit` integer
 *
 * * `loCompatPrivileges` boolean
 *
 * * `lockTimeout` integer
 *
 * * `logCheckpoints` boolean
 *
 * * `logConnections` boolean
 *
 * * `logDisconnections` boolean
 *
 * * `logDuration` boolean
 *
 * * `logErrorVerbosity` one of:
 *   - 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
 *   - 1: "LOG_ERROR_VERBOSITY_TERSE"
 *   - 2: "LOG_ERROR_VERBOSITY_DEFAULT"
 *   - 3: "LOG_ERROR_VERBOSITY_VERBOSE"
 *
 * * `logLockWaits` boolean
 *
 * * `logMinDurationSample` integer
 *
 * * `logMinDurationStatement` integer
 *
 * * `logMinErrorStatement` one of:
 *   - 0: "LOG_LEVEL_UNSPECIFIED"
 *   - 1: "LOG_LEVEL_DEBUG5"
 *   - 2: "LOG_LEVEL_DEBUG4"
 *   - 3: "LOG_LEVEL_DEBUG3"
 *   - 4: "LOG_LEVEL_DEBUG2"
 *   - 5: "LOG_LEVEL_DEBUG1"
 *   - 6: "LOG_LEVEL_LOG"
 *   - 7: "LOG_LEVEL_NOTICE"
 *   - 8: "LOG_LEVEL_WARNING"
 *   - 9: "LOG_LEVEL_ERROR"
 *   - 10: "LOG_LEVEL_FATAL"
 *   - 11: "LOG_LEVEL_PANIC"
 *
 * * `logMinMessages` one of:
 *   - 0: "LOG_LEVEL_UNSPECIFIED"
 *   - 1: "LOG_LEVEL_DEBUG5"
 *   - 2: "LOG_LEVEL_DEBUG4"
 *   - 3: "LOG_LEVEL_DEBUG3"
 *   - 4: "LOG_LEVEL_DEBUG2"
 *   - 5: "LOG_LEVEL_DEBUG1"
 *   - 6: "LOG_LEVEL_LOG"
 *   - 7: "LOG_LEVEL_NOTICE"
 *   - 8: "LOG_LEVEL_WARNING"
 *   - 9: "LOG_LEVEL_ERROR"
 *   - 10: "LOG_LEVEL_FATAL"
 *   - 11: "LOG_LEVEL_PANIC"
 *
 * * `logParameterMaxLength` integer
 *
 * * `logParameterMaxLengthOnError` integer
 *
 * * `logStatement` one of:
 *   - 0: "LOG_STATEMENT_UNSPECIFIED"
 *   - 1: "LOG_STATEMENT_NONE"
 *   - 2: "LOG_STATEMENT_DDL"
 *   - 3: "LOG_STATEMENT_MOD"
 *   - 4: "LOG_STATEMENT_ALL"
 *
 * * `logStatementSampleRate` float
 *
 * * `logTempFiles` integer
 *
 * * `logTransactionSampleRate` float
 *
 * * `logicalDecodingWorkMem` integer
 *
 * * `maintenanceIoConcurrency` integer
 *
 * * `maintenanceWorkMem` integer
 *
 * * `maxConnections` integer
 *
 * * `maxLocksPerTransaction` integer
 *
 * * `maxParallelMaintenanceWorkers` integer
 *
 * * `maxParallelWorkers` integer
 *
 * * `maxParallelWorkersPerGather` integer
 *
 * * `maxPredLocksPerTransaction` integer
 *
 * * `maxPreparedTransactions` integer
 *
 * * `maxSlotWalKeepSize` integer
 *
 * * `maxStandbyStreamingDelay` integer
 *
 * * `maxWalSize` integer
 *
 * * `maxWorkerProcesses` integer
 *
 * * `minWalSize` integer
 *
 * * `oldSnapshotThreshold` integer
 *
 * * `operatorPrecedenceWarning` boolean
 *
 * * `parallelLeaderParticipation` boolean
 *
 * * `pgHintPlanDebugPrint` one of:
 *   - 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
 *   - 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
 *   - 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
 *   - 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
 *   - 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"
 *
 * * `pgHintPlanEnableHint` boolean
 *
 * * `pgHintPlanEnableHintTable` boolean
 *
 * * `pgHintPlanMessageLevel` one of:
 *   - 0: "LOG_LEVEL_UNSPECIFIED"
 *   - 1: "LOG_LEVEL_DEBUG5"
 *   - 2: "LOG_LEVEL_DEBUG4"
 *   - 3: "LOG_LEVEL_DEBUG3"
 *   - 4: "LOG_LEVEL_DEBUG2"
 *   - 5: "LOG_LEVEL_DEBUG1"
 *   - 6: "LOG_LEVEL_LOG"
 *   - 7: "LOG_LEVEL_NOTICE"
 *   - 8: "LOG_LEVEL_WARNING"
 *   - 9: "LOG_LEVEL_ERROR"
 *   - 10: "LOG_LEVEL_FATAL"
 *   - 11: "LOG_LEVEL_PANIC"
 *
 * * `planCacheMode` one of:
 *   - 0: "PLAN_CACHE_MODE_UNSPECIFIED"
 *   - 1: "PLAN_CACHE_MODE_AUTO"
 *   - 2: "PLAN_CACHE_MODE_FORCE_CUSTOM_PLAN"
 *   - 3: "PLAN_CACHE_MODE_FORCE_GENERIC_PLAN"
 *
 * * `quoteAllIdentifiers` boolean
 *
 * * `randomPageCost` float
 *
 * * `rowSecurity` boolean
 *
 * * `searchPath` text
 *
 * * `seqPageCost` float
 *
 * * `sharedBuffers` integer
 *
 * * `standardConformingStrings` boolean
 *
 * * `statementTimeout` integer
 *
 * * `synchronizeSeqscans` boolean
 *
 * * `synchronousCommit` one of:
 *   - 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
 *   - 1: "SYNCHRONOUS_COMMIT_ON"
 *   - 2: "SYNCHRONOUS_COMMIT_OFF"
 *   - 3: "SYNCHRONOUS_COMMIT_LOCAL"
 *   - 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
 *   - 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"
 *
 * * `tempBuffers` integer
 *
 * * `tempFileLimit` integer
 *
 * * `timezone` text
 *
 * * `trackActivityQuerySize` integer
 *
 * * `transformNullEquals` boolean
 *
 * * `vacuumCleanupIndexScaleFactor` float
 *
 * * `vacuumCostDelay` integer
 *
 * * `vacuumCostLimit` integer
 *
 * * `vacuumCostPageDirty` integer
 *
 * * `vacuumCostPageHit` integer
 *
 * * `vacuumCostPageMiss` integer
 *
 * * `walKeepSize` integer
 *
 * * `walLevel` one of:
 *   - 0: "WAL_LEVEL_UNSPECIFIED"
 *   - 1: "WAL_LEVEL_REPLICA"
 *   - 2: "WAL_LEVEL_LOGICAL"
 *
 * * `workMem` integer
 *
 * * `xmlbinary` one of:
 *   - 0: "XML_BINARY_UNSPECIFIED"
 *   - 1: "XML_BINARY_BASE64"
 *   - 2: "XML_BINARY_HEX"
 *
 * * `xmloption` one of:
 *   - 0: "XML_OPTION_UNSPECIFIED"
 *   - 1: "XML_OPTION_DOCUMENT"
 *   - 2: "XML_OPTION_CONTENT"
 *
 * ### Postgresql 12 config
 *
 * * `archiveTimeout` integer
 *
 * * `arrayNulls` boolean
 *
 * * `autoExplainLogAnalyze` boolean
 *
 * * `autoExplainLogBuffers` boolean
 *
 * * `autoExplainLogMinDuration` integer
 *
 * * `autoExplainLogNestedStatements` boolean
 *
 * * `autoExplainLogTiming` boolean
 *
 * * `autoExplainLogTriggers` boolean
 *
 * * `autoExplainLogVerbose` boolean
 *
 * * `autoExplainSampleRate` float
 *
 * * `autovacuumAnalyzeScaleFactor` float
 *
 * * `autovacuumMaxWorkers` integer
 *
 * * `autovacuumNaptime` integer
 *
 * * `autovacuumVacuumCostDelay` integer
 *
 * * `autovacuumVacuumCostLimit` integer
 *
 * * `autovacuumVacuumScaleFactor` float
 *
 * * `autovacuumWorkMem` integer
 *
 * * `backendFlushAfter` integer
 *
 * * `backslashQuote` one of:
 * * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
 * * * 1: "BACKSLASH_QUOTE"
 * * * 2: "BACKSLASH_QUOTE_ON"
 * * * 3: "BACKSLASH_QUOTE_OFF"
 * * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"
 *
 * * `bgwriterDelay` integer
 *
 * * `bgwriterFlushAfter` integer
 *
 * * `bgwriterLruMaxpages` integer
 *
 * * `bgwriterLruMultiplier` float
 *
 * * `byteaOutput` one of:
 * * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
 * * * 1: "BYTEA_OUTPUT_HEX"
 * * * 2: "BYTEA_OUTPUT_ESCAPED"
 *
 * * `checkpointCompletionTarget` float
 *
 * * `checkpointFlushAfter` integer
 *
 * * `checkpointTimeout` integer
 *
 * * `clientMinMessages` one of:
 * * * 0: "LOG_LEVEL_UNSPECIFIED"
 * * * 1: "LOG_LEVEL_DEBUG5"
 * * * 2: "LOG_LEVEL_DEBUG4"
 * * * 3: "LOG_LEVEL_DEBUG3"
 * * * 4: "LOG_LEVEL_DEBUG2"
 * * * 5: "LOG_LEVEL_DEBUG1"
 * * * 6: "LOG_LEVEL_LOG"
 * * * 7: "LOG_LEVEL_NOTICE"
 * * * 8: "LOG_LEVEL_WARNING"
 * * * 9: "LOG_LEVEL_ERROR"
 * * * 10: "LOG_LEVEL_FATAL"
 * * * 11: "LOG_LEVEL_PANIC"
 *
 * * `constraintExclusion` one of:
 * * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
 * * * 1: "CONSTRAINT_EXCLUSION_ON"
 * * * 2: "CONSTRAINT_EXCLUSION_OFF"
 * * * 3: "CONSTRAINT_EXCLUSION_PARTITION"
 *
 * * `cursorTupleFraction` float
 *
 * * `deadlockTimeout` integer
 *
 * * `defaultStatisticsTarget` integer
 *
 * * `defaultTransactionIsolation` one of:
 * * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
 * * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
 * * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
 * * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
 * * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"
 *
 * * `defaultTransactionReadOnly` boolean
 *
 * * `defaultWithOids` boolean
 *
 * * `effectiveCacheSize` integer
 *
 * * `effectiveIoConcurrency` integer
 *
 * * `enableBitmapscan` boolean
 *
 * * `enableHashagg` boolean
 *
 * * `enableHashjoin` boolean
 *
 * * `enableIndexonlyscan` boolean
 *
 * * `enableIndexscan` boolean
 *
 * * `enableMaterial` boolean
 *
 * * `enableMergejoin` boolean
 *
 * * `enableNestloop` boolean
 *
 * * `enableParallelAppend` boolean
 *
 * * `enableParallelHash` boolean
 *
 * * `enablePartitionPruning` boolean
 *
 * * `enablePartitionwiseAggregate` boolean
 *
 * * `enablePartitionwiseJoin` boolean
 *
 * * `enableSeqscan` boolean
 *
 * * `enableSort` boolean
 *
 * * `enableTidscan` boolean
 *
 * * `escapeStringWarning` boolean
 *
 * * `exitOnError` boolean
 *
 * * `forceParallelMode` one of:
 * * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
 * * * 1: "FORCE_PARALLEL_MODE_ON"
 * * * 2: "FORCE_PARALLEL_MODE_OFF"
 * * * 3: "FORCE_PARALLEL_MODE_REGRESS"
 *
 * * `fromCollapseLimit` integer
 *
 * * `ginPendingListLimit` integer
 *
 * * `idleInTransactionSessionTimeout` integer
 *
 * * `jit` boolean
 *
 * * `joinCollapseLimit` integer
 *
 * * `loCompatPrivileges` boolean
 *
 * * `lockTimeout` integer
 *
 * * `logCheckpoints` boolean
 *
 * * `logConnections` boolean
 *
 * * `logDisconnections` boolean
 *
 * * `logDuration` boolean
 *
 * * `logErrorVerbosity` one of:
 * * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
 * * * 1: "LOG_ERROR_VERBOSITY_TERSE"
 * * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
 * * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"
 *
 * * `logLockWaits` boolean
 *
 * * `logMinDurationStatement` integer
 *
 * * `logMinErrorStatement` one of:
 * * * 0: "LOG_LEVEL_UNSPECIFIED"
 * * * 1: "LOG_LEVEL_DEBUG5"
 * * * 2: "LOG_LEVEL_DEBUG4"
 * * * 3: "LOG_LEVEL_DEBUG3"
 * * * 4: "LOG_LEVEL_DEBUG2"
 * * * 5: "LOG_LEVEL_DEBUG1"
 * * * 6: "LOG_LEVEL_LOG"
 * * * 7: "LOG_LEVEL_NOTICE"
 * * * 8: "LOG_LEVEL_WARNING"
 * * * 9: "LOG_LEVEL_ERROR"
 * * * 10: "LOG_LEVEL_FATAL"
 * * * 11: "LOG_LEVEL_PANIC"
 *
 * * `logMinMessages` one of:
 * * * 0: "LOG_LEVEL_UNSPECIFIED"
 * * * 1: "LOG_LEVEL_DEBUG5"
 * * * 2: "LOG_LEVEL_DEBUG4"
 * * * 3: "LOG_LEVEL_DEBUG3"
 * * * 4: "LOG_LEVEL_DEBUG2"
 * * * 5: "LOG_LEVEL_DEBUG1"
 * * * 6: "LOG_LEVEL_LOG"
 * * * 7: "LOG_LEVEL_NOTICE"
 * * * 8: "LOG_LEVEL_WARNING"
 * * * 9: "LOG_LEVEL_ERROR"
 * * * 10: "LOG_LEVEL_FATAL"
 * * * 11: "LOG_LEVEL_PANIC"
 *
 * * `logStatement` one of:
 * * * 0: "LOG_STATEMENT_UNSPECIFIED"
 * * * 1: "LOG_STATEMENT_NONE"
 * * * 2: "LOG_STATEMENT_DDL"
 * * * 3: "LOG_STATEMENT_MOD"
 * * * 4: "LOG_STATEMENT_ALL"
 *
 * * `logTempFiles` integer
 *
 * * `logTransactionSampleRate` float
 *
 * * `maintenanceWorkMem` integer
 *
 * * `maxConnections` integer
 *
 * * `maxLocksPerTransaction` integer
 *
 * * `maxParallelMaintenanceWorkers` integer
 *
 * * `maxParallelWorkers` integer
 *
 * * `maxParallelWorkersPerGather` integer
 *
 * * `maxPredLocksPerTransaction` integer
 *
 * * `maxPreparedTransactions` integer
 *
 * * `maxStandbyStreamingDelay` integer
 *
 * * `maxWalSize` integer
 *
 * * `maxWorkerProcesses` integer
 *
 * * `minWalSize` integer
 *
 * * `oldSnapshotThreshold` integer
 *
 * * `operatorPrecedenceWarning` boolean
 *
 * * `parallelLeaderParticipation` boolean
 *
 * * `pgHintPlanDebugPrint` one of:
 * * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
 * * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
 * * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
 * * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
 * * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"
 *
 * * `pgHintPlanEnableHint` boolean
 *
 * * `pgHintPlanEnableHintTable` boolean
 *
 * * `pgHintPlanMessageLevel` one of:
 * * * 0: "LOG_LEVEL_UNSPECIFIED"
 * * * 1: "LOG_LEVEL_DEBUG5"
 * * * 2: "LOG_LEVEL_DEBUG4"
 * * * 3: "LOG_LEVEL_DEBUG3"
 * * * 4: "LOG_LEVEL_DEBUG2"
 * * * 5: "LOG_LEVEL_DEBUG1"
 * * * 6: "LOG_LEVEL_LOG"
 * * * 7: "LOG_LEVEL_NOTICE"
 * * * 8: "LOG_LEVEL_WARNING"
 * * * 9: "LOG_LEVEL_ERROR"
 * * * 10: "LOG_LEVEL_FATAL"
 * * * 11: "LOG_LEVEL_PANIC"
 *
 * * `planCacheMode` one of:
 * * * 0: "PLAN_CACHE_MODE_UNSPECIFIED"
 * * * 1: "PLAN_CACHE_MODE_AUTO"
 * * * 2: "PLAN_CACHE_MODE_FORCE_CUSTOM_PLAN"
 * * * 3: "PLAN_CACHE_MODE_FORCE_GENERIC_PLAN"
 *
 * * `quoteAllIdentifiers` boolean
 *
 * * `randomPageCost` float
 *
 * * `rowSecurity` boolean
 *
 * * `searchPath` text
 *
 * * `seqPageCost` float
 *
 * * `sharedBuffers` integer
 *
 * * `sharedPreloadLibraries` override if not set. One of:
 * * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
 * * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
 * * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
 * * * NO value
 *
 * * `standardConformingStrings` boolean
 *
 * * `statementTimeout` integer
 *
 * * `synchronizeSeqscans` boolean
 *
 * * `synchronousCommit` one of:
 * * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
 * * * 1: "SYNCHRONOUS_COMMIT_ON"
 * * * 2: "SYNCHRONOUS_COMMIT_OFF"
 * * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
 * * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
 * * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"
 *
 * * `tempBuffers` integer
 *
 * * `tempFileLimit` integer
 *
 * * `timezone` text
 *
 * * `trackActivityQuerySize` integer
 *
 * * `transformNullEquals` boolean
 *
 * * `vacuumCleanupIndexScaleFactor` float
 *
 * * `vacuumCostDelay` integer
 *
 * * `vacuumCostLimit` integer
 *
 * * `vacuumCostPageDirty` integer
 *
 * * `vacuumCostPageHit` integer
 *
 * * `vacuumCostPageMiss` integer
 *
 * * `walLevel` one of:
 * * * 0: "WAL_LEVEL_UNSPECIFIED"
 * * * 1: "WAL_LEVEL_REPLICA"
 * * * 2: "WAL_LEVEL_LOGICAL"
 *
 * * `workMem` integer
 *
 * * `xmlbinary` one of:
 * * * 0: "XML_BINARY_UNSPECIFIED"
 * * * 1: "XML_BINARY_BASE64"
 * * * 2: "XML_BINARY_HEX"
 *
 * * `xmloption` one of:
 * * * 0: "XML_OPTION_UNSPECIFIED"
 * * * 1: "XML_OPTION_DOCUMENT"
 * * * 2: "XML_OPTION_CONTENT"
 *
 * ### Postgresql 11 config
 *
 * * `archiveTimeout` integer
 *
 * * `arrayNulls` boolean
 *
 * * `autoExplainLogAnalyze` boolean
 *
 * * `autoExplainLogBuffers` boolean
 *
 * * `autoExplainLogMinDuration` integer
 *
 * * `autoExplainLogNestedStatements` boolean
 *
 * * `autoExplainLogTiming` boolean
 *
 * * `autoExplainLogTriggers` boolean
 *
 * * `autoExplainLogVerbose` boolean
 *
 * * `autoExplainSampleRate` float
 *
 * * `autovacuumAnalyzeScaleFactor` float
 *
 * * `autovacuumMaxWorkers` integer
 *
 * * `autovacuumNaptime` integer
 *
 * * `autovacuumVacuumCostDelay` integer
 *
 * * `autovacuumVacuumCostLimit` integer
 *
 * * `autovacuumVacuumScaleFactor` float
 *
 * * `autovacuumWorkMem` integer
 *
 * * `backendFlushAfter` integer
 *
 * * `backslashQuote` one of:
 * * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
 * * * 1: "BACKSLASH_QUOTE"
 * * * 2: "BACKSLASH_QUOTE_ON"
 * * * 3: "BACKSLASH_QUOTE_OFF"
 * * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"
 *
 * * `bgwriterDelay` integer
 *
 * * `bgwriterFlushAfter` integer
 *
 * * `bgwriterLruMaxpages` integer
 *
 * * `bgwriterLruMultiplier` float
 *
 * * `byteaOutput` one of:
 * * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
 * * * 1: "BYTEA_OUTPUT_HEX"
 * * * 2: "BYTEA_OUTPUT_ESCAPED"
 *
 * * `checkpointCompletionTarget` float
 *
 * * `checkpointFlushAfter` integer
 *
 * * `checkpointTimeout` integer
 *
 * * `clientMinMessages` one of:
 * * * 0: "LOG_LEVEL_UNSPECIFIED"
 * * * 1: "LOG_LEVEL_DEBUG5"
 * * * 2: "LOG_LEVEL_DEBUG4"
 * * * 3: "LOG_LEVEL_DEBUG3"
 * * * 4: "LOG_LEVEL_DEBUG2"
 * * * 5: "LOG_LEVEL_DEBUG1"
 * * * 6: "LOG_LEVEL_LOG"
 * * * 7: "LOG_LEVEL_NOTICE"
 * * * 8: "LOG_LEVEL_WARNING"
 * * * 9: "LOG_LEVEL_ERROR"
 * * * 10: "LOG_LEVEL_FATAL"
 * * * 11: "LOG_LEVEL_PANIC"
 *
 * * `constraintExclusion` one of:
 * * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
 * * * 1: "CONSTRAINT_EXCLUSION_ON"
 * * * 2: "CONSTRAINT_EXCLUSION_OFF"
 * * * 3: "CONSTRAINT_EXCLUSION_PARTITION"
 *
 * * `cursorTupleFraction` float
 *
 * * `deadlockTimeout` integer
 *
 * * `defaultStatisticsTarget` integer
 *
 * * `defaultTransactionIsolation` one of:
 * * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
 * * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
 * * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
 * * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
 * * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"
 *
 * * `defaultTransactionReadOnly` boolean
 *
 * * `defaultWithOids` boolean
 *
 * * `effectiveCacheSize` integer
 *
 * * `effectiveIoConcurrency` integer
 *
 * * `enableBitmapscan` boolean
 *
 * * `enableHashagg` boolean
 *
 * * `enableHashjoin` boolean
 *
 * * `enableIndexonlyscan` boolean
 *
 * * `enableIndexscan` boolean
 *
 * * `enableMaterial` boolean
 *
 * * `enableMergejoin` boolean
 *
 * * `enableNestloop` boolean
 *
 * * `enableParallelAppend` boolean
 *
 * * `enableParallelHash` boolean
 *
 * * `enablePartitionPruning` boolean
 *
 * * `enablePartitionwiseAggregate` boolean
 *
 * * `enablePartitionwiseJoin` boolean
 *
 * * `enableSeqscan` boolean
 *
 * * `enableSort` boolean
 *
 * * `enableTidscan` boolean
 *
 * * `escapeStringWarning` boolean
 *
 * * `exitOnError` boolean
 *
 * * `forceParallelMode` one of:
 * * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
 * * * 1: "FORCE_PARALLEL_MODE_ON"
 * * * 2: "FORCE_PARALLEL_MODE_OFF"
 * * * 3: "FORCE_PARALLEL_MODE_REGRESS"
 *
 * * `fromCollapseLimit` integer
 *
 * * `ginPendingListLimit` integer
 *
 * * `idleInTransactionSessionTimeout` integer
 *
 * * `jit` boolean
 *
 * * `joinCollapseLimit` integer
 *
 * * `loCompatPrivileges` boolean
 *
 * * `lockTimeout` integer
 *
 * * `logCheckpoints` boolean
 *
 * * `logConnections` boolean
 *
 * * `logDisconnections` boolean
 *
 * * `logDuration` boolean
 *
 * * `logErrorVerbosity` one of:
 * * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
 * * * 1: "LOG_ERROR_VERBOSITY_TERSE"
 * * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
 * * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"
 *
 * * `logLockWaits` boolean
 *
 * * `logMinDurationStatement` integer
 *
 * * `logMinErrorStatement` one of:
 * * * 0: "LOG_LEVEL_UNSPECIFIED"
 * * * 1: "LOG_LEVEL_DEBUG5"
 * * * 2: "LOG_LEVEL_DEBUG4"
 * * * 3: "LOG_LEVEL_DEBUG3"
 * * * 4: "LOG_LEVEL_DEBUG2"
 * * * 5: "LOG_LEVEL_DEBUG1"
 * * * 6: "LOG_LEVEL_LOG"
 * * * 7: "LOG_LEVEL_NOTICE"
 * * * 8: "LOG_LEVEL_WARNING"
 * * * 9: "LOG_LEVEL_ERROR"
 * * * 10: "LOG_LEVEL_FATAL"
 * * * 11: "LOG_LEVEL_PANIC"
 *
 * * `logMinMessages` one of:
 * * * 0: "LOG_LEVEL_UNSPECIFIED"
 * * * 1: "LOG_LEVEL_DEBUG5"
 * * * 2: "LOG_LEVEL_DEBUG4"
 * * * 3: "LOG_LEVEL_DEBUG3"
 * * * 4: "LOG_LEVEL_DEBUG2"
 * * * 5: "LOG_LEVEL_DEBUG1"
 * * * 6: "LOG_LEVEL_LOG"
 * * * 7: "LOG_LEVEL_NOTICE"
 * * * 8: "LOG_LEVEL_WARNING"
 * * * 9: "LOG_LEVEL_ERROR"
 * * * 10: "LOG_LEVEL_FATAL"
 * * * 11: "LOG_LEVEL_PANIC"
 *
 * * `logStatement` one of:
 * * * 0: "LOG_STATEMENT_UNSPECIFIED"
 * * * 1: "LOG_STATEMENT_NONE"
 * * * 2: "LOG_STATEMENT_DDL"
 * * * 3: "LOG_STATEMENT_MOD"
 * * * 4: "LOG_STATEMENT_ALL"
 *
 * * `logTempFiles` integer
 *
 * * `maintenanceWorkMem` integer
 *
 * * `maxConnections` integer
 *
 * * `maxLocksPerTransaction` integer
 *
 * * `maxParallelMaintenanceWorkers` integer
 *
 * * `maxParallelWorkers` integer
 *
 * * `maxParallelWorkersPerGather` integer
 *
 * * `maxPredLocksPerTransaction` integer
 *
 * * `maxPreparedTransactions` integer
 *
 * * `maxStandbyStreamingDelay` integer
 *
 * * `maxWalSize` integer
 *
 * * `maxWorkerProcesses` integer
 *
 * * `minWalSize` integer
 *
 * * `oldSnapshotThreshold` integer
 *
 * * `operatorPrecedenceWarning` boolean
 *
 * * `parallelLeaderParticipation` boolean
 *
 * * `pgHintPlanDebugPrint` one of:
 * * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
 * * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
 * * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
 * * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
 * * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"
 *
 * * `pgHintPlanEnableHint` boolean
 *
 * * `pgHintPlanEnableHintTable` boolean
 *
 * * `pgHintPlanMessageLevel` one of:
 * * * 0: "LOG_LEVEL_UNSPECIFIED"
 * * * 1: "LOG_LEVEL_DEBUG5"
 * * * 2: "LOG_LEVEL_DEBUG4"
 * * * 3: "LOG_LEVEL_DEBUG3"
 * * * 4: "LOG_LEVEL_DEBUG2"
 * * * 5: "LOG_LEVEL_DEBUG1"
 * * * 6: "LOG_LEVEL_LOG"
 * * * 7: "LOG_LEVEL_NOTICE"
 * * * 8: "LOG_LEVEL_WARNING"
 * * * 9: "LOG_LEVEL_ERROR"
 * * * 10: "LOG_LEVEL_FATAL"
 * * * 11: "LOG_LEVEL_PANIC"
 *
 * * `quoteAllIdentifiers` boolean
 *
 * * `randomPageCost` float
 *
 * * `rowSecurity` boolean
 *
 * * `searchPath` text
 *
 * * `seqPageCost` float
 *
 * * `sharedBuffers` integer
 *
 * * `sharedPreloadLibraries` override if not set. One of:
 * * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
 * * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
 * * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
 * * * NO value
 *
 * * `standardConformingStrings` boolean
 *
 * * `statementTimeout` integer
 *
 * * `synchronizeSeqscans` boolean
 *
 * * `synchronousCommit` one of:
 * * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
 * * * 1: "SYNCHRONOUS_COMMIT_ON"
 * * * 2: "SYNCHRONOUS_COMMIT_OFF"
 * * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
 * * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
 * * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"
 *
 * * `tempBuffers` integer
 *
 * * `tempFileLimit` integer
 *
 * * `timezone` text
 *
 * * `trackActivityQuerySize` integer
 *
 * * `transformNullEquals` boolean
 *
 * * `vacuumCleanupIndexScaleFactor` float
 *
 * * `vacuumCostDelay` integer
 *
 * * `vacuumCostLimit` integer
 *
 * * `vacuumCostPageDirty` integer
 *
 * * `vacuumCostPageHit` integer
 *
 * * `vacuumCostPageMiss` integer
 *
 * * `walLevel` one of:
 * * * 0: "WAL_LEVEL_UNSPECIFIED"
 * * * 1: "WAL_LEVEL_REPLICA"
 * * * 2: "WAL_LEVEL_LOGICAL"
 *
 * * `workMem` integer
 *
 * * `xmlbinary` one of:
 * * * 0: "XML_BINARY_UNSPECIFIED"
 * * * 1: "XML_BINARY_BASE64"
 * * * 2: "XML_BINARY_HEX"
 *
 * * `xmloption` one of:
 * * * 0: "XML_OPTION_UNSPECIFIED"
 * * * 1: "XML_OPTION_DOCUMENT"
 * * * 2: "XML_OPTION_CONTENT"
 *
 * ### Postgresql 10 config
 *
 * * `archiveTimeout` integer
 *
 * * `arrayNulls` boolean
 *
 * * `autoExplainLogAnalyze` boolean
 *
 * * `autoExplainLogBuffers` boolean
 *
 * * `autoExplainLogMinDuration` integer
 *
 * * `autoExplainLogNestedStatements` boolean
 *
 * * `autoExplainLogTiming` boolean
 *
 * * `autoExplainLogTriggers` boolean
 *
 * * `autoExplainLogVerbose` boolean
 *
 * * `autoExplainSampleRate` float
 *
 * * `autovacuumAnalyzeScaleFactor` float
 *
 * * `autovacuumMaxWorkers` integer
 *
 * * `autovacuumNaptime` integer
 *
 * * `autovacuumVacuumCostDelay` integer
 *
 * * `autovacuumVacuumCostLimit` integer
 *
 * * `autovacuumVacuumScaleFactor` float
 *
 * * `autovacuumWorkMem` integer
 *
 * * `backendFlushAfter` integer
 *
 * * `backslashQuote` one of:
 * * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
 * * * 1: "BACKSLASH_QUOTE"
 * * * 2: "BACKSLASH_QUOTE_ON"
 * * * 3: "BACKSLASH_QUOTE_OFF"
 * * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"
 *
 * * `bgwriterDelay` integer
 *
 * * `bgwriterFlushAfter` integer
 *
 * * `bgwriterLruMaxpages` integer
 *
 * * `bgwriterLruMultiplier` float
 *
 * * `byteaOutput` one of:
 * * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
 * * * 1: "BYTEA_OUTPUT_HEX"
 * * * 2: "BYTEA_OUTPUT_ESCAPED"
 *
 * * `checkpointCompletionTarget` float
 *
 * * `checkpointFlushAfter` integer
 *
 * * `checkpointTimeout` integer
 *
 * * `clientMinMessages` one of:
 * * * 0: "LOG_LEVEL_UNSPECIFIED"
 * * * 1: "LOG_LEVEL_DEBUG5"
 * * * 2: "LOG_LEVEL_DEBUG4"
 * * * 3: "LOG_LEVEL_DEBUG3"
 * * * 4: "LOG_LEVEL_DEBUG2"
 * * * 5: "LOG_LEVEL_DEBUG1"
 * * * 6: "LOG_LEVEL_LOG"
 * * * 7: "LOG_LEVEL_NOTICE"
 * * * 8: "LOG_LEVEL_WARNING"
 * * * 9: "LOG_LEVEL_ERROR"
 * * * 10: "LOG_LEVEL_FATAL"
 * * * 11: "LOG_LEVEL_PANIC"
 *
 * * `constraintExclusion` one of:
 * * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
 * * * 1: "CONSTRAINT_EXCLUSION_ON"
 * * * 2: "CONSTRAINT_EXCLUSION_OFF"
 * * * 3: "CONSTRAINT_EXCLUSION_PARTITION"
 *
 * * `cursorTupleFraction` float
 *
 * * `deadlockTimeout` integer
 *
 * * `defaultStatisticsTarget` integer
 *
 * * `defaultTransactionIsolation` one of:
 * * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
 * * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
 * * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
 * * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
 * * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"
 *
 * * `defaultTransactionReadOnly` boolean
 *
 * * `defaultWithOids` boolean
 *
 * * `effectiveCacheSize` integer
 *
 * * `effectiveIoConcurrency` integer
 *
 * * `enableBitmapscan` boolean
 *
 * * `enableHashagg` boolean
 *
 * * `enableHashjoin` boolean
 *
 * * `enableIndexonlyscan` boolean
 *
 * * `enableIndexscan` boolean
 *
 * * `enableMaterial` boolean
 *
 * * `enableMergejoin` boolean
 *
 * * `enableNestloop` boolean
 *
 * * `enableSeqscan` boolean
 *
 * * `enableSort` boolean
 *
 * * `enableTidscan` boolean
 *
 * * `escapeStringWarning` boolean
 *
 * * `exitOnError` boolean
 *
 * * `forceParallelMode` one of:
 * * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
 * * * 1: "FORCE_PARALLEL_MODE_ON"
 * * * 2: "FORCE_PARALLEL_MODE_OFF"
 * * * 3: "FORCE_PARALLEL_MODE_REGRESS"
 *
 * * `fromCollapseLimit` integer
 *
 * * `ginPendingListLimit` integer
 *
 * * `idleInTransactionSessionTimeout` integer
 *
 * * `joinCollapseLimit` integer
 *
 * * `loCompatPrivileges` boolean
 *
 * * `lockTimeout` integer
 *
 * * `logCheckpoints` boolean
 *
 * * `logConnections` boolean
 *
 * * `logDisconnections` boolean
 *
 * * `logDuration` boolean
 *
 * * `logErrorVerbosity` one of:
 * * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
 * * * 1: "LOG_ERROR_VERBOSITY_TERSE"
 * * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
 * * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"
 *
 * * `logLockWaits` boolean
 *
 * * `logMinDurationStatement` integer
 *
 * * `logMinErrorStatement` one of:
 * * * 0: "LOG_LEVEL_UNSPECIFIED"
 * * * 1: "LOG_LEVEL_DEBUG5"
 * * * 2: "LOG_LEVEL_DEBUG4"
 * * * 3: "LOG_LEVEL_DEBUG3"
 * * * 4: "LOG_LEVEL_DEBUG2"
 * * * 5: "LOG_LEVEL_DEBUG1"
 * * * 6: "LOG_LEVEL_LOG"
 * * * 7: "LOG_LEVEL_NOTICE"
 * * * 8: "LOG_LEVEL_WARNING"
 * * * 9: "LOG_LEVEL_ERROR"
 * * * 10: "LOG_LEVEL_FATAL"
 * * * 11: "LOG_LEVEL_PANIC"
 *
 * * `logMinMessages` one of:
 * * * 0: "LOG_LEVEL_UNSPECIFIED"
 * * * 1: "LOG_LEVEL_DEBUG5"
 * * * 2: "LOG_LEVEL_DEBUG4"
 * * * 3: "LOG_LEVEL_DEBUG3"
 * * * 4: "LOG_LEVEL_DEBUG2"
 * * * 5: "LOG_LEVEL_DEBUG1"
 * * * 6: "LOG_LEVEL_LOG"
 * * * 7: "LOG_LEVEL_NOTICE"
 * * * 8: "LOG_LEVEL_WARNING"
 * * * 9: "LOG_LEVEL_ERROR"
 * * * 10: "LOG_LEVEL_FATAL"
 * * * 11: "LOG_LEVEL_PANIC"
 *
 * * `logStatement` one of:
 * * * 0: "LOG_STATEMENT_UNSPECIFIED"
 * * * 1: "LOG_STATEMENT_NONE"
 * * * 2: "LOG_STATEMENT_DDL"
 * * * 3: "LOG_STATEMENT_MOD"
 * * * 4: "LOG_STATEMENT_ALL"
 *
 * * `logTempFiles` integer
 *
 * * `maintenanceWorkMem` integer
 *
 * * `maxConnections` integer
 *
 * * `maxLocksPerTransaction` integer
 *
 * * `maxParallelWorkers` integer
 *
 * * `maxParallelWorkersPerGather` integer
 *
 * * `maxPredLocksPerTransaction` integer
 *
 * * `maxPreparedTransactions` integer
 *
 * * `maxStandbyStreamingDelay` integer
 *
 * * `maxWalSize` integer
 *
 * * `maxWorkerProcesses` integer
 *
 * * `minWalSize` integer
 *
 * * `oldSnapshotThreshold` integer
 *
 * * `operatorPrecedenceWarning` boolean
 *
 * * `pgHintPlanDebugPrint` one of:
 * * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
 * * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
 * * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
 * * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
 * * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"
 *
 * * `pgHintPlanEnableHint` boolean
 *
 * * `pgHintPlanEnableHintTable` boolean
 *
 * * `pgHintPlanMessageLevel` one of:
 * * * 0: "LOG_LEVEL_UNSPECIFIED"
 * * * 1: "LOG_LEVEL_DEBUG5"
 * * * 2: "LOG_LEVEL_DEBUG4"
 * * * 3: "LOG_LEVEL_DEBUG3"
 * * * 4: "LOG_LEVEL_DEBUG2"
 * * * 5: "LOG_LEVEL_DEBUG1"
 * * * 6: "LOG_LEVEL_LOG"
 * * * 7: "LOG_LEVEL_NOTICE"
 * * * 8: "LOG_LEVEL_WARNING"
 * * * 9: "LOG_LEVEL_ERROR"
 * * * 10: "LOG_LEVEL_FATAL"
 * * * 11: "LOG_LEVEL_PANIC"
 *
 * * `quoteAllIdentifiers` boolean
 *
 * * `randomPageCost` float
 *
 * * `replacementSortTuples` integer
 *
 * * `rowSecurity` boolean
 *
 * * `searchPath` text
 *
 * * `seqPageCost` float
 *
 * * `sharedBuffers` integer
 *
 * * `sharedPreloadLibraries` override if not set. One of:
 * * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
 * * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
 * * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
 * * * NO value
 *
 * * `standardConformingStrings` boolean
 *
 * * `statementTimeout` integer
 *
 * * `synchronizeSeqscans` boolean
 *
 * * `synchronousCommit` one of:
 * * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
 * * * 1: "SYNCHRONOUS_COMMIT_ON"
 * * * 2: "SYNCHRONOUS_COMMIT_OFF"
 * * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
 * * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
 * * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"
 *
 * * `tempBuffers` integer
 *
 * * `tempFileLimit` integer
 *
 * * `timezone` text
 *
 * * `trackActivityQuerySize` integer
 *
 * * `transformNullEquals` boolean
 *
 * * `vacuumCostDelay` integer
 *
 * * `vacuumCostLimit` integer
 *
 * * `vacuumCostPageDirty` integer
 *
 * * `vacuumCostPageHit` integer
 *
 * * `vacuumCostPageMiss` integer
 *
 * * `walLevel` one of:
 * * * 0: "WAL_LEVEL_UNSPECIFIED"
 * * * 1: "WAL_LEVEL_REPLICA"
 * * * 2: "WAL_LEVEL_LOGICAL"
 *
 * * `workMem` integer
 *
 * * `xmlbinary` one of:
 * * * 0: "XML_BINARY_UNSPECIFIED"
 * * * 1: "XML_BINARY_BASE64"
 * * * 2: "XML_BINARY_HEX"
 *
 * * `xmloption` one of:
 * * * 0: "XML_OPTION_UNSPECIFIED"
 * * * 1: "XML_OPTION_DOCUMENT"
 * * * 2: "XML_OPTION_CONTENT"
 *
 * ## Import
 *
 * A cluster can be imported using the `id` of the resource, e.g.
 *
 * ```sh
 *  $ pulumi import yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster foo cluster_id
 * ```
 */
export class MdbPostgresqlCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdbPostgresqlCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbPostgresqlClusterState, opts?: pulumi.CustomResourceOptions): MdbPostgresqlCluster {
        return new MdbPostgresqlCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster';

    /**
     * Returns true if the given object is an instance of MdbPostgresqlCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbPostgresqlCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbPostgresqlCluster.__pulumiType;
    }

    /**
     * Configuration of the PostgreSQL cluster. The structure is documented below.
     */
    public readonly config!: pulumi.Output<outputs.MdbPostgresqlClusterConfig>;
    /**
     * Timestamp of cluster creation.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * A database of the PostgreSQL cluster. The structure is documented below.
     */
    public readonly databases!: pulumi.Output<outputs.MdbPostgresqlClusterDatabase[]>;
    /**
     * Description of the PostgreSQL cluster.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Deployment environment of the PostgreSQL cluster.
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * The ID of the folder that the resource belongs to. If it is unset, the default provider `folderId` is used for create.
     */
    public readonly folderId!: pulumi.Output<string>;
    /**
     * Aggregated health of the cluster.
     */
    public /*out*/ readonly health!: pulumi.Output<string>;
    /**
     * It sets name of master host. It works only when `host.name` is set.
     */
    public readonly hostMasterName!: pulumi.Output<string>;
    /**
     * A host of the PostgreSQL cluster. The structure is documented below.
     */
    public readonly hosts!: pulumi.Output<outputs.MdbPostgresqlClusterHost[]>;
    /**
     * A set of key/value label pairs to assign to the PostgreSQL cluster.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replicationSourceName` parameter.
     * Also, this field is used to select which host will be selected as a master host. Please see `hostMasterName` parameter.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the network, to which the PostgreSQL cluster belongs.
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * The cluster will be created from the specified backup. The structure is documented below.
     */
    public readonly restore!: pulumi.Output<outputs.MdbPostgresqlClusterRestore | undefined>;
    /**
     * A set of ids of security groups assigned to hosts of the cluster.
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * Status of the cluster.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A user of the PostgreSQL cluster. The structure is documented below.
     */
    public readonly users!: pulumi.Output<outputs.MdbPostgresqlClusterUser[]>;

    /**
     * Create a MdbPostgresqlCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbPostgresqlClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbPostgresqlClusterArgs | MdbPostgresqlClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbPostgresqlClusterState | undefined;
            inputs["config"] = state ? state.config : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["databases"] = state ? state.databases : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["environment"] = state ? state.environment : undefined;
            inputs["folderId"] = state ? state.folderId : undefined;
            inputs["health"] = state ? state.health : undefined;
            inputs["hostMasterName"] = state ? state.hostMasterName : undefined;
            inputs["hosts"] = state ? state.hosts : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkId"] = state ? state.networkId : undefined;
            inputs["restore"] = state ? state.restore : undefined;
            inputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as MdbPostgresqlClusterArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.databases === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databases'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.hosts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.users === undefined) && !opts.urn) {
                throw new Error("Missing required property 'users'");
            }
            inputs["config"] = args ? args.config : undefined;
            inputs["databases"] = args ? args.databases : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["environment"] = args ? args.environment : undefined;
            inputs["folderId"] = args ? args.folderId : undefined;
            inputs["hostMasterName"] = args ? args.hostMasterName : undefined;
            inputs["hosts"] = args ? args.hosts : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkId"] = args ? args.networkId : undefined;
            inputs["restore"] = args ? args.restore : undefined;
            inputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            inputs["users"] = args ? args.users : undefined;
            inputs["createdAt"] = undefined /*out*/;
            inputs["health"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(MdbPostgresqlCluster.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbPostgresqlCluster resources.
 */
export interface MdbPostgresqlClusterState {
    /**
     * Configuration of the PostgreSQL cluster. The structure is documented below.
     */
    readonly config?: pulumi.Input<inputs.MdbPostgresqlClusterConfig>;
    /**
     * Timestamp of cluster creation.
     */
    readonly createdAt?: pulumi.Input<string>;
    /**
     * A database of the PostgreSQL cluster. The structure is documented below.
     */
    readonly databases?: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlClusterDatabase>[]>;
    /**
     * Description of the PostgreSQL cluster.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Deployment environment of the PostgreSQL cluster.
     */
    readonly environment?: pulumi.Input<string>;
    /**
     * The ID of the folder that the resource belongs to. If it is unset, the default provider `folderId` is used for create.
     */
    readonly folderId?: pulumi.Input<string>;
    /**
     * Aggregated health of the cluster.
     */
    readonly health?: pulumi.Input<string>;
    /**
     * It sets name of master host. It works only when `host.name` is set.
     */
    readonly hostMasterName?: pulumi.Input<string>;
    /**
     * A host of the PostgreSQL cluster. The structure is documented below.
     */
    readonly hosts?: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlClusterHost>[]>;
    /**
     * A set of key/value label pairs to assign to the PostgreSQL cluster.
     */
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replicationSourceName` parameter.
     * Also, this field is used to select which host will be selected as a master host. Please see `hostMasterName` parameter.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * ID of the network, to which the PostgreSQL cluster belongs.
     */
    readonly networkId?: pulumi.Input<string>;
    /**
     * The cluster will be created from the specified backup. The structure is documented below.
     */
    readonly restore?: pulumi.Input<inputs.MdbPostgresqlClusterRestore>;
    /**
     * A set of ids of security groups assigned to hosts of the cluster.
     */
    readonly securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status of the cluster.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * A user of the PostgreSQL cluster. The structure is documented below.
     */
    readonly users?: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlClusterUser>[]>;
}

/**
 * The set of arguments for constructing a MdbPostgresqlCluster resource.
 */
export interface MdbPostgresqlClusterArgs {
    /**
     * Configuration of the PostgreSQL cluster. The structure is documented below.
     */
    readonly config: pulumi.Input<inputs.MdbPostgresqlClusterConfig>;
    /**
     * A database of the PostgreSQL cluster. The structure is documented below.
     */
    readonly databases: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlClusterDatabase>[]>;
    /**
     * Description of the PostgreSQL cluster.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Deployment environment of the PostgreSQL cluster.
     */
    readonly environment: pulumi.Input<string>;
    /**
     * The ID of the folder that the resource belongs to. If it is unset, the default provider `folderId` is used for create.
     */
    readonly folderId?: pulumi.Input<string>;
    /**
     * It sets name of master host. It works only when `host.name` is set.
     */
    readonly hostMasterName?: pulumi.Input<string>;
    /**
     * A host of the PostgreSQL cluster. The structure is documented below.
     */
    readonly hosts: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlClusterHost>[]>;
    /**
     * A set of key/value label pairs to assign to the PostgreSQL cluster.
     */
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replicationSourceName` parameter.
     * Also, this field is used to select which host will be selected as a master host. Please see `hostMasterName` parameter.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * ID of the network, to which the PostgreSQL cluster belongs.
     */
    readonly networkId: pulumi.Input<string>;
    /**
     * The cluster will be created from the specified backup. The structure is documented below.
     */
    readonly restore?: pulumi.Input<inputs.MdbPostgresqlClusterRestore>;
    /**
     * A set of ids of security groups assigned to hosts of the cluster.
     */
    readonly securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A user of the PostgreSQL cluster. The structure is documented below.
     */
    readonly users: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlClusterUser>[]>;
}
