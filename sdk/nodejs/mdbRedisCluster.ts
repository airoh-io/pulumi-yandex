// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a Redis cluster within the Yandex Cloud. For more information, see [the official documentation](https://yandex.cloud/docs/managed-redis/concepts).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-d",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.5.0.0/24"],
 * });
 * //
 * // Create a new MDB Redis Cluster.
 * //
 * const myCluster = new yandex.MdbRedisCluster("myCluster", {
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     config: {
 *         password: "your_password",
 *         version: "6.2",
 *     },
 *     resources: {
 *         resourcePresetId: "hm1.nano",
 *         diskSize: 16,
 *     },
 *     hosts: [{
 *         zone: "ru-central1-d",
 *         subnetId: fooVpcSubnet.id,
 *     }],
 *     maintenanceWindow: {
 *         type: "ANYTIME",
 *     },
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * // Auxiliary resources
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.1.0.0/24"],
 * });
 * const bar = new yandex.VpcSubnet("bar", {
 *     zone: "ru-central1-b",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.2.0.0/24"],
 * });
 * const baz = new yandex.VpcSubnet("baz", {
 *     zone: "ru-central1-d",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.3.0.0/24"],
 * });
 * //
 * // Create a new MDB Sharded Redis Cluster.
 * //
 * const fooMdbRedisCluster = new yandex.MdbRedisCluster("fooMdbRedisCluster", {
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     sharded: true,
 *     config: {
 *         version: "6.2",
 *         password: "your_password",
 *     },
 *     resources: {
 *         resourcePresetId: "hm1.nano",
 *         diskSize: 16,
 *     },
 *     hosts: [
 *         {
 *             zone: "ru-central1-a",
 *             subnetId: fooVpcSubnet.id,
 *             shardName: "first",
 *         },
 *         {
 *             zone: "ru-central1-b",
 *             subnetId: bar.id,
 *             shardName: "second",
 *         },
 *         {
 *             zone: "ru-central1-d",
 *             subnetId: baz.id,
 *             shardName: "third",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * ```sh
 * $ pulumi import yandex:index/mdbRedisCluster:MdbRedisCluster <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/mdbRedisCluster:MdbRedisCluster my_cluster ...
 * ```
 */
export class MdbRedisCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdbRedisCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbRedisClusterState, opts?: pulumi.CustomResourceOptions): MdbRedisCluster {
        return new MdbRedisCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbRedisCluster:MdbRedisCluster';

    /**
     * Returns true if the given object is an instance of MdbRedisCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbRedisCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbRedisCluster.__pulumiType;
    }

    /**
     * Access policy to the Redis cluster.
     */
    declare public readonly access: pulumi.Output<outputs.MdbRedisClusterAccess>;
    /**
     * Announce fqdn instead of ip address.
     */
    declare public readonly announceHostnames: pulumi.Output<boolean | undefined>;
    /**
     * Allows to use ACL users to auth in sentinel
     */
    declare public readonly authSentinel: pulumi.Output<boolean | undefined>;
    /**
     * Configuration of the Redis cluster.
     */
    declare public readonly config: pulumi.Output<outputs.MdbRedisClusterConfig>;
    /**
     * The creation timestamp of the resource.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    declare public readonly deletionProtection: pulumi.Output<boolean>;
    /**
     * The resource description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    declare public readonly diskEncryptionKeyId: pulumi.Output<string>;
    /**
     * Disk size autoscaling settings.
     */
    declare public readonly diskSizeAutoscaling: pulumi.Output<outputs.MdbRedisClusterDiskSizeAutoscaling>;
    /**
     * Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    declare public readonly environment: pulumi.Output<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
     */
    declare public /*out*/ readonly health: pulumi.Output<string>;
    /**
     * A host of the Redis cluster.
     */
    declare public readonly hosts: pulumi.Output<outputs.MdbRedisClusterHost[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Maintenance window settings.
     */
    declare public readonly maintenanceWindow: pulumi.Output<outputs.MdbRedisClusterMaintenanceWindow>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * Persistence mode. Possible values: `ON`, `OFF`.
     */
    declare public readonly persistenceMode: pulumi.Output<string>;
    /**
     * Resources allocated to hosts of the Redis cluster.
     */
    declare public readonly resources: pulumi.Output<outputs.MdbRedisClusterResources>;
    /**
     * The list of security groups applied to resource or their components.
     */
    declare public readonly securityGroupIds: pulumi.Output<string[] | undefined>;
    /**
     * Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not allowed.
     */
    declare public readonly sharded: pulumi.Output<boolean | undefined>;
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * TLS support mode enabled/disabled.
     */
    declare public readonly tlsEnabled: pulumi.Output<boolean>;

    /**
     * Create a MdbRedisCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbRedisClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbRedisClusterArgs | MdbRedisClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbRedisClusterState | undefined;
            resourceInputs["access"] = state?.access;
            resourceInputs["announceHostnames"] = state?.announceHostnames;
            resourceInputs["authSentinel"] = state?.authSentinel;
            resourceInputs["config"] = state?.config;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["diskEncryptionKeyId"] = state?.diskEncryptionKeyId;
            resourceInputs["diskSizeAutoscaling"] = state?.diskSizeAutoscaling;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["health"] = state?.health;
            resourceInputs["hosts"] = state?.hosts;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["maintenanceWindow"] = state?.maintenanceWindow;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["persistenceMode"] = state?.persistenceMode;
            resourceInputs["resources"] = state?.resources;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["sharded"] = state?.sharded;
            resourceInputs["status"] = state?.status;
            resourceInputs["tlsEnabled"] = state?.tlsEnabled;
        } else {
            const args = argsOrState as MdbRedisClusterArgs | undefined;
            if (args?.config === undefined && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if (args?.hosts === undefined && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.resources === undefined && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            resourceInputs["access"] = args?.access;
            resourceInputs["announceHostnames"] = args?.announceHostnames;
            resourceInputs["authSentinel"] = args?.authSentinel;
            resourceInputs["config"] = args?.config;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["diskEncryptionKeyId"] = args?.diskEncryptionKeyId;
            resourceInputs["diskSizeAutoscaling"] = args?.diskSizeAutoscaling;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["hosts"] = args?.hosts;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["maintenanceWindow"] = args?.maintenanceWindow;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["persistenceMode"] = args?.persistenceMode;
            resourceInputs["resources"] = args?.resources;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["sharded"] = args?.sharded;
            resourceInputs["tlsEnabled"] = args?.tlsEnabled;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MdbRedisCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbRedisCluster resources.
 */
export interface MdbRedisClusterState {
    /**
     * Access policy to the Redis cluster.
     */
    access?: pulumi.Input<inputs.MdbRedisClusterAccess>;
    /**
     * Announce fqdn instead of ip address.
     */
    announceHostnames?: pulumi.Input<boolean>;
    /**
     * Allows to use ACL users to auth in sentinel
     */
    authSentinel?: pulumi.Input<boolean>;
    /**
     * Configuration of the Redis cluster.
     */
    config?: pulumi.Input<inputs.MdbRedisClusterConfig>;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    diskEncryptionKeyId?: pulumi.Input<string>;
    /**
     * Disk size autoscaling settings.
     */
    diskSizeAutoscaling?: pulumi.Input<inputs.MdbRedisClusterDiskSizeAutoscaling>;
    /**
     * Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    environment?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
     */
    health?: pulumi.Input<string>;
    /**
     * A host of the Redis cluster.
     */
    hosts?: pulumi.Input<pulumi.Input<inputs.MdbRedisClusterHost>[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maintenance window settings.
     */
    maintenanceWindow?: pulumi.Input<inputs.MdbRedisClusterMaintenanceWindow>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId?: pulumi.Input<string>;
    /**
     * Persistence mode. Possible values: `ON`, `OFF`.
     */
    persistenceMode?: pulumi.Input<string>;
    /**
     * Resources allocated to hosts of the Redis cluster.
     */
    resources?: pulumi.Input<inputs.MdbRedisClusterResources>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not allowed.
     */
    sharded?: pulumi.Input<boolean>;
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
     */
    status?: pulumi.Input<string>;
    /**
     * TLS support mode enabled/disabled.
     */
    tlsEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MdbRedisCluster resource.
 */
export interface MdbRedisClusterArgs {
    /**
     * Access policy to the Redis cluster.
     */
    access?: pulumi.Input<inputs.MdbRedisClusterAccess>;
    /**
     * Announce fqdn instead of ip address.
     */
    announceHostnames?: pulumi.Input<boolean>;
    /**
     * Allows to use ACL users to auth in sentinel
     */
    authSentinel?: pulumi.Input<boolean>;
    /**
     * Configuration of the Redis cluster.
     */
    config: pulumi.Input<inputs.MdbRedisClusterConfig>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the KMS key for cluster disk encryption.
     */
    diskEncryptionKeyId?: pulumi.Input<string>;
    /**
     * Disk size autoscaling settings.
     */
    diskSizeAutoscaling?: pulumi.Input<inputs.MdbRedisClusterDiskSizeAutoscaling>;
    /**
     * Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    environment: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A host of the Redis cluster.
     */
    hosts: pulumi.Input<pulumi.Input<inputs.MdbRedisClusterHost>[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maintenance window settings.
     */
    maintenanceWindow?: pulumi.Input<inputs.MdbRedisClusterMaintenanceWindow>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId: pulumi.Input<string>;
    /**
     * Persistence mode. Possible values: `ON`, `OFF`.
     */
    persistenceMode?: pulumi.Input<string>;
    /**
     * Resources allocated to hosts of the Redis cluster.
     */
    resources: pulumi.Input<inputs.MdbRedisClusterResources>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not allowed.
     */
    sharded?: pulumi.Input<boolean>;
    /**
     * TLS support mode enabled/disabled.
     */
    tlsEnabled?: pulumi.Input<boolean>;
}
