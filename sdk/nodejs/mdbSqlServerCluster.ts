// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a SQLServer cluster within the Yandex Cloud. For more information, see [the official documentation](https://yandex.cloud/docs/managed-sqlserver/).
 *
 * Please read [Pricing for Managed Service for SQL Server](https://yandex.cloud/docs/managed-sqlserver/pricing#prices) before using SQLServer cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * // Auxiliary resources
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-a",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.5.0.0/24"],
 * });
 * const test_sg_x = new yandex.VpcSecurityGroup("test-sg-x", {
 *     networkId: fooVpcNetwork.id,
 *     ingresses: [{
 *         protocol: "ANY",
 *         description: "Allow incoming traffic from members of the same security group",
 *         fromPort: 0,
 *         toPort: 65535,
 *         v4CidrBlocks: ["0.0.0.0/0"],
 *     }],
 *     egresses: [{
 *         protocol: "ANY",
 *         description: "Allow outgoing traffic to members of the same security group",
 *         fromPort: 0,
 *         toPort: 65535,
 *         v4CidrBlocks: ["0.0.0.0/0"],
 *     }],
 * });
 * //
 * // Create a new MDB SQL Server Cluster.
 * //
 * const myCluster = new yandex.MdbSqlServerCluster("myCluster", {
 *     environment: "PRESTABLE",
 *     networkId: fooVpcNetwork.id,
 *     version: "2016sp2std",
 *     resources: {
 *         resourcePresetId: "s2.small",
 *         diskTypeId: "network-ssd",
 *         diskSize: 20,
 *     },
 *     labels: {
 *         test_key: "test_value",
 *     },
 *     backupWindowStart: {
 *         hours: 20,
 *         minutes: 30,
 *     },
 *     sqlserverConfig: {
 *         fill_factor_percent: "49",
 *         optimize_for_ad_hoc_workloads: "true",
 *     },
 *     databases: [
 *         {
 *             name: "db_name_a",
 *         },
 *         {
 *             name: "db_name",
 *         },
 *         {
 *             name: "db_name_b",
 *         },
 *     ],
 *     users: [
 *         {
 *             name: "bob",
 *             password: "mysecurepassword",
 *         },
 *         {
 *             name: "alice",
 *             password: "mysecurepassword",
 *             permissions: [{
 *                 databaseName: "db_name",
 *                 roles: ["DDLADMIN"],
 *             }],
 *         },
 *         {
 *             name: "chuck",
 *             password: "mysecurepassword",
 *             permissions: [
 *                 {
 *                     databaseName: "db_name_a",
 *                     roles: ["OWNER"],
 *                 },
 *                 {
 *                     databaseName: "db_name",
 *                     roles: [
 *                         "OWNER",
 *                         "DDLADMIN",
 *                     ],
 *                 },
 *                 {
 *                     databaseName: "db_name_b",
 *                     roles: [
 *                         "OWNER",
 *                         "DDLADMIN",
 *                     ],
 *                 },
 *             ],
 *         },
 *     ],
 *     hosts: [{
 *         zone: "ru-central1-a",
 *         subnetId: fooVpcSubnet.id,
 *     }],
 *     securityGroupIds: [test_sg_x.id],
 *     hostGroupIds: [
 *         "host_group_1",
 *         "host_group_2",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * ```sh
 * $ pulumi import yandex:index/mdbSqlServerCluster:MdbSqlServerCluster <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/mdbSqlServerCluster:MdbSqlServerCluster my_cluster ...
 * ```
 */
export class MdbSqlServerCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdbSqlServerCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbSqlServerClusterState, opts?: pulumi.CustomResourceOptions): MdbSqlServerCluster {
        return new MdbSqlServerCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbSqlServerCluster:MdbSqlServerCluster';

    /**
     * Returns true if the given object is an instance of MdbSqlServerCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbSqlServerCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbSqlServerCluster.__pulumiType;
    }

    /**
     * Time to start the daily backup, in the UTC.
     */
    declare public readonly backupWindowStart: pulumi.Output<outputs.MdbSqlServerClusterBackupWindowStart>;
    /**
     * The creation timestamp of the resource.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * A database of the SQLServer cluster.
     */
    declare public readonly databases: pulumi.Output<outputs.MdbSqlServerClusterDatabase[]>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    declare public readonly deletionProtection: pulumi.Output<boolean>;
    /**
     * The resource description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
     */
    declare public readonly environment: pulumi.Output<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * Aggregated health of the cluster.
     */
    declare public /*out*/ readonly health: pulumi.Output<string>;
    /**
     * A list of IDs of the host groups hosting VMs of the cluster.
     */
    declare public readonly hostGroupIds: pulumi.Output<string[]>;
    /**
     * A host of the SQLServer cluster.
     */
    declare public readonly hosts: pulumi.Output<outputs.MdbSqlServerClusterHost[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * Resources allocated to hosts of the SQLServer cluster.
     */
    declare public readonly resources: pulumi.Output<outputs.MdbSqlServerClusterResources>;
    /**
     * The list of security groups applied to resource or their components.
     */
    declare public readonly securityGroupIds: pulumi.Output<string[] | undefined>;
    /**
     * SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
     */
    declare public readonly sqlcollation: pulumi.Output<string>;
    /**
     * SQLServer cluster config. Detail info in `SQLServer config` section.
     */
    declare public readonly sqlserverConfig: pulumi.Output<{[key: string]: string}>;
    /**
     * Status of the cluster.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * A user of the SQLServer cluster.
     */
    declare public readonly users: pulumi.Output<outputs.MdbSqlServerClusterUser[]>;
    /**
     * Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
     */
    declare public readonly version: pulumi.Output<string>;

    /**
     * Create a MdbSqlServerCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbSqlServerClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbSqlServerClusterArgs | MdbSqlServerClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbSqlServerClusterState | undefined;
            resourceInputs["backupWindowStart"] = state?.backupWindowStart;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["databases"] = state?.databases;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["health"] = state?.health;
            resourceInputs["hostGroupIds"] = state?.hostGroupIds;
            resourceInputs["hosts"] = state?.hosts;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["resources"] = state?.resources;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["sqlcollation"] = state?.sqlcollation;
            resourceInputs["sqlserverConfig"] = state?.sqlserverConfig;
            resourceInputs["status"] = state?.status;
            resourceInputs["users"] = state?.users;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as MdbSqlServerClusterArgs | undefined;
            if (args?.databases === undefined && !opts.urn) {
                throw new Error("Missing required property 'databases'");
            }
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if (args?.hosts === undefined && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.resources === undefined && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            if (args?.users === undefined && !opts.urn) {
                throw new Error("Missing required property 'users'");
            }
            if (args?.version === undefined && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["backupWindowStart"] = args?.backupWindowStart;
            resourceInputs["databases"] = args?.databases;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["hostGroupIds"] = args?.hostGroupIds;
            resourceInputs["hosts"] = args?.hosts;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["resources"] = args?.resources;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["sqlcollation"] = args?.sqlcollation;
            resourceInputs["sqlserverConfig"] = args?.sqlserverConfig;
            resourceInputs["users"] = args?.users;
            resourceInputs["version"] = args?.version;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MdbSqlServerCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbSqlServerCluster resources.
 */
export interface MdbSqlServerClusterState {
    /**
     * Time to start the daily backup, in the UTC.
     */
    backupWindowStart?: pulumi.Input<inputs.MdbSqlServerClusterBackupWindowStart>;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A database of the SQLServer cluster.
     */
    databases?: pulumi.Input<pulumi.Input<inputs.MdbSqlServerClusterDatabase>[]>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
     */
    environment?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Aggregated health of the cluster.
     */
    health?: pulumi.Input<string>;
    /**
     * A list of IDs of the host groups hosting VMs of the cluster.
     */
    hostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A host of the SQLServer cluster.
     */
    hosts?: pulumi.Input<pulumi.Input<inputs.MdbSqlServerClusterHost>[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId?: pulumi.Input<string>;
    /**
     * Resources allocated to hosts of the SQLServer cluster.
     */
    resources?: pulumi.Input<inputs.MdbSqlServerClusterResources>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
     */
    sqlcollation?: pulumi.Input<string>;
    /**
     * SQLServer cluster config. Detail info in `SQLServer config` section.
     */
    sqlserverConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Status of the cluster.
     */
    status?: pulumi.Input<string>;
    /**
     * A user of the SQLServer cluster.
     */
    users?: pulumi.Input<pulumi.Input<inputs.MdbSqlServerClusterUser>[]>;
    /**
     * Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MdbSqlServerCluster resource.
 */
export interface MdbSqlServerClusterArgs {
    /**
     * Time to start the daily backup, in the UTC.
     */
    backupWindowStart?: pulumi.Input<inputs.MdbSqlServerClusterBackupWindowStart>;
    /**
     * A database of the SQLServer cluster.
     */
    databases: pulumi.Input<pulumi.Input<inputs.MdbSqlServerClusterDatabase>[]>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
     */
    environment: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A list of IDs of the host groups hosting VMs of the cluster.
     */
    hostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A host of the SQLServer cluster.
     */
    hosts: pulumi.Input<pulumi.Input<inputs.MdbSqlServerClusterHost>[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId: pulumi.Input<string>;
    /**
     * Resources allocated to hosts of the SQLServer cluster.
     */
    resources: pulumi.Input<inputs.MdbSqlServerClusterResources>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
     */
    sqlcollation?: pulumi.Input<string>;
    /**
     * SQLServer cluster config. Detail info in `SQLServer config` section.
     */
    sqlserverConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A user of the SQLServer cluster.
     */
    users: pulumi.Input<pulumi.Input<inputs.MdbSqlServerClusterUser>[]>;
    /**
     * Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
     */
    version: pulumi.Input<string>;
}
