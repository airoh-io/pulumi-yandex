// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Monitoring dashboard.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * //
 * // Create a new Monitoring Dashboard.
 * //
 * const my_dashboard = new yandex.MonitoringDashboard("my-dashboard", {
 *     description: "Description",
 *     labels: {
 *         a: "b",
 *     },
 *     parametrizations: [{
 *         parameters: [
 *             {
 *                 custom: [{
 *                     defaultValues: [
 *                         "1",
 *                         "2",
 *                     ],
 *                     multiselectable: true,
 *                     values: [
 *                         "1",
 *                         "2",
 *                         "3",
 *                     ],
 *                 }],
 *                 description: "param1 description",
 *                 hidden: false,
 *                 id: "param1",
 *                 title: "title",
 *             },
 *             {
 *                 hidden: true,
 *                 id: "param2",
 *                 labelValues: [{
 *                     defaultValues: [
 *                         "1",
 *                         "2",
 *                     ],
 *                     labelKey: "key",
 *                     multiselectable: true,
 *                     selectors: "a=b",
 *                 }],
 *             },
 *             {
 *                 hidden: true,
 *                 id: "param3",
 *                 text: [{
 *                     defaultValue: "abc",
 *                 }],
 *             },
 *         ],
 *         selectors: "a=b",
 *     }],
 *     title: "My title",
 *     widgets: [
 *         {
 *             positions: [{
 *                 h: 1,
 *                 w: 1,
 *                 x: 4,
 *                 y: 4,
 *             }],
 *             texts: [{
 *                 text: "text here",
 *             }],
 *         },
 *         {
 *             charts: [{
 *                 chartId: "chart1id",
 *                 description: "chart description",
 *                 displayLegend: true,
 *                 freeze: "FREEZE_DURATION_HOUR",
 *                 nameHidingSettings: [{
 *                     names: [
 *                         "a",
 *                         "b",
 *                     ],
 *                     positive: true,
 *                 }],
 *                 queries: [{
 *                     downsampling: [{
 *                         disabled: false,
 *                         gapFilling: "GAP_FILLING_NULL",
 *                         gridAggregation: "GRID_AGGREGATION_COUNT",
 *                         maxPoints: 100,
 *                     }],
 *                     target: [{
 *                         hidden: true,
 *                         query: "{service=monitoring}",
 *                         textMode: true,
 *                     }],
 *                 }],
 *                 seriesOverrides: [{
 *                     name: "name",
 *                     settings: [{
 *                         color: "colorValue",
 *                         growDown: true,
 *                         name: "series_overrides name",
 *                         stackName: "stack name",
 *                         type: "SERIES_VISUALIZATION_TYPE_LINE",
 *                         yaxisPosition: "YAXIS_POSITION_LEFT",
 *                     }],
 *                 }],
 *                 title: "title for chart",
 *                 visualizationSettings: [{
 *                     aggregation: "SERIES_AGGREGATION_AVG",
 *                     colorSchemeSettings: [{
 *                         gradient: [{
 *                             greenValue: "11",
 *                             redValue: "22",
 *                             violetValue: "33",
 *                             yellowValue: "44",
 *                         }],
 *                     }],
 *                     heatmapSettings: [{
 *                         greenValue: "1",
 *                         redValue: "2",
 *                         violetValue: "3",
 *                         yellowValue: "4",
 *                     }],
 *                     interpolate: "INTERPOLATE_LEFT",
 *                     normalize: true,
 *                     showLabels: true,
 *                     title: "visualization_settings title",
 *                     type: "VISUALIZATION_TYPE_POINTS",
 *                     yaxisSettings: [{
 *                         left: [{
 *                             max: "111",
 *                             min: "11",
 *                             precision: 3,
 *                             title: "yaxis_settings left title",
 *                             type: "YAXIS_TYPE_LOGARITHMIC",
 *                             unitFormat: "UNIT_CELSIUS",
 *                         }],
 *                         right: [{
 *                             max: "22",
 *                             min: "2",
 *                             precision: 2,
 *                             title: "yaxis_settings right title",
 *                             type: "YAXIS_TYPE_LOGARITHMIC",
 *                             unitFormat: "UNIT_NONE",
 *                         }],
 *                     }],
 *                 }],
 *             }],
 *             positions: [{
 *                 h: 100,
 *                 w: 100,
 *                 x: 6,
 *                 y: 6,
 *             }],
 *         },
 *         {
 *             positions: [{
 *                 h: 1,
 *                 w: 1,
 *                 x: 1,
 *                 y: 1,
 *             }],
 *             titles: [{
 *                 size: "TITLE_SIZE_XS",
 *                 text: "title here",
 *             }],
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * ```sh
 * $ pulumi import yandex:index/monitoringDashboard:MonitoringDashboard <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/monitoringDashboard:MonitoringDashboard my-dashboard ...
 * ```
 */
export class MonitoringDashboard extends pulumi.CustomResource {
    /**
     * Get an existing MonitoringDashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitoringDashboardState, opts?: pulumi.CustomResourceOptions): MonitoringDashboard {
        return new MonitoringDashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/monitoringDashboard:MonitoringDashboard';

    /**
     * Returns true if the given object is an instance of MonitoringDashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitoringDashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitoringDashboard.__pulumiType;
    }

    /**
     * Dashboard ID.
     */
    declare public /*out*/ readonly dashboardId: pulumi.Output<string>;
    /**
     * The resource description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Dashboard parametrization.
     */
    declare public readonly parametrizations: pulumi.Output<outputs.MonitoringDashboardParametrization[]>;
    /**
     * Dashboard title.
     */
    declare public readonly title: pulumi.Output<string | undefined>;
    /**
     * Widgets.
     */
    declare public readonly widgets: pulumi.Output<outputs.MonitoringDashboardWidget[] | undefined>;

    /**
     * Create a MonitoringDashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MonitoringDashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitoringDashboardArgs | MonitoringDashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitoringDashboardState | undefined;
            resourceInputs["dashboardId"] = state?.dashboardId;
            resourceInputs["description"] = state?.description;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["parametrizations"] = state?.parametrizations;
            resourceInputs["title"] = state?.title;
            resourceInputs["widgets"] = state?.widgets;
        } else {
            const args = argsOrState as MonitoringDashboardArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["parametrizations"] = args?.parametrizations;
            resourceInputs["title"] = args?.title;
            resourceInputs["widgets"] = args?.widgets;
            resourceInputs["dashboardId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitoringDashboard.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MonitoringDashboard resources.
 */
export interface MonitoringDashboardState {
    /**
     * Dashboard ID.
     */
    dashboardId?: pulumi.Input<string>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Dashboard parametrization.
     */
    parametrizations?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardParametrization>[]>;
    /**
     * Dashboard title.
     */
    title?: pulumi.Input<string>;
    /**
     * Widgets.
     */
    widgets?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidget>[]>;
}

/**
 * The set of arguments for constructing a MonitoringDashboard resource.
 */
export interface MonitoringDashboardArgs {
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * Dashboard parametrization.
     */
    parametrizations?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardParametrization>[]>;
    /**
     * Dashboard title.
     */
    title?: pulumi.Input<string>;
    /**
     * Widgets.
     */
    widgets?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidget>[]>;
}
