// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * //
 * // Create a new OrganizationManager Group Mapping Item.
 * //
 * const groupMappingItem = new yandex.OrganizationmanagerGroupMappingItem("groupMappingItem", {
 *     federationId: "my-federation_id",
 *     internalGroupId: "my_internal_group_id",
 *     externalGroupId: "my_external_group_id",
 * }, {
 *     dependsOn: [yandex_organizationmanager_group_mapping.group_mapping],
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * ```sh
 * $ pulumi import yandex:index/organizationmanagerGroupMappingItem:OrganizationmanagerGroupMappingItem <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/organizationmanagerGroupMappingItem:OrganizationmanagerGroupMappingItem group_mapping_item .../.../...
 * ```
 */
export class OrganizationmanagerGroupMappingItem extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationmanagerGroupMappingItem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationmanagerGroupMappingItemState, opts?: pulumi.CustomResourceOptions): OrganizationmanagerGroupMappingItem {
        return new OrganizationmanagerGroupMappingItem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/organizationmanagerGroupMappingItem:OrganizationmanagerGroupMappingItem';

    /**
     * Returns true if the given object is an instance of OrganizationmanagerGroupMappingItem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationmanagerGroupMappingItem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationmanagerGroupMappingItem.__pulumiType;
    }

    /**
     * ID of the external group
     */
    declare public readonly externalGroupId: pulumi.Output<string>;
    /**
     * ID of the SAML Federation
     */
    declare public readonly federationId: pulumi.Output<string>;
    /**
     * ID of the internal group
     */
    declare public readonly internalGroupId: pulumi.Output<string>;

    /**
     * Create a OrganizationmanagerGroupMappingItem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationmanagerGroupMappingItemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationmanagerGroupMappingItemArgs | OrganizationmanagerGroupMappingItemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationmanagerGroupMappingItemState | undefined;
            resourceInputs["externalGroupId"] = state?.externalGroupId;
            resourceInputs["federationId"] = state?.federationId;
            resourceInputs["internalGroupId"] = state?.internalGroupId;
        } else {
            const args = argsOrState as OrganizationmanagerGroupMappingItemArgs | undefined;
            if (args?.externalGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalGroupId'");
            }
            if (args?.federationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'federationId'");
            }
            if (args?.internalGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'internalGroupId'");
            }
            resourceInputs["externalGroupId"] = args?.externalGroupId;
            resourceInputs["federationId"] = args?.federationId;
            resourceInputs["internalGroupId"] = args?.internalGroupId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationmanagerGroupMappingItem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrganizationmanagerGroupMappingItem resources.
 */
export interface OrganizationmanagerGroupMappingItemState {
    /**
     * ID of the external group
     */
    externalGroupId?: pulumi.Input<string>;
    /**
     * ID of the SAML Federation
     */
    federationId?: pulumi.Input<string>;
    /**
     * ID of the internal group
     */
    internalGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrganizationmanagerGroupMappingItem resource.
 */
export interface OrganizationmanagerGroupMappingItemArgs {
    /**
     * ID of the external group
     */
    externalGroupId: pulumi.Input<string>;
    /**
     * ID of the SAML Federation
     */
    federationId: pulumi.Input<string>;
    /**
     * ID of the internal group
     */
    internalGroupId: pulumi.Input<string>;
}
