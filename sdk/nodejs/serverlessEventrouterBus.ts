// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Allows management of a Yandex Cloud Serverless Event Router Bus.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * ```sh
 * $ pulumi import yandex:index/serverlessEventrouterBus:ServerlessEventrouterBus <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/serverlessEventrouterBus:ServerlessEventrouterBus evr_bus ...
 * ```
 */
export class ServerlessEventrouterBus extends pulumi.CustomResource {
    /**
     * Get an existing ServerlessEventrouterBus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerlessEventrouterBusState, opts?: pulumi.CustomResourceOptions): ServerlessEventrouterBus {
        return new ServerlessEventrouterBus(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/serverlessEventrouterBus:ServerlessEventrouterBus';

    /**
     * Returns true if the given object is an instance of ServerlessEventrouterBus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerlessEventrouterBus {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerlessEventrouterBus.__pulumiType;
    }

    /**
     * ID of the cloud that the bus resides in
     */
    declare public /*out*/ readonly cloudId: pulumi.Output<string>;
    /**
     * Creation timestamp
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Deletion protection
     */
    declare public readonly deletionProtection: pulumi.Output<boolean | undefined>;
    /**
     * Description of the bus
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * ID of the folder that the bus belongs to
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * Bus labels
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the bus
     */
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a ServerlessEventrouterBus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServerlessEventrouterBusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerlessEventrouterBusArgs | ServerlessEventrouterBusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerlessEventrouterBusState | undefined;
            resourceInputs["cloudId"] = state?.cloudId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as ServerlessEventrouterBusArgs | undefined;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["cloudId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerlessEventrouterBus.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerlessEventrouterBus resources.
 */
export interface ServerlessEventrouterBusState {
    /**
     * ID of the cloud that the bus resides in
     */
    cloudId?: pulumi.Input<string>;
    /**
     * Creation timestamp
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Deletion protection
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Description of the bus
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the folder that the bus belongs to
     */
    folderId?: pulumi.Input<string>;
    /**
     * Bus labels
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the bus
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerlessEventrouterBus resource.
 */
export interface ServerlessEventrouterBusArgs {
    /**
     * Deletion protection
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Description of the bus
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the folder that the bus belongs to
     */
    folderId?: pulumi.Input<string>;
    /**
     * Bus labels
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the bus
     */
    name?: pulumi.Input<string>;
}
