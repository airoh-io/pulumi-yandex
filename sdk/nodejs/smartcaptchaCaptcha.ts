// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates a Captcha in the specified folder. For more information, see [the official documentation](https://yandex.cloud/docs/smartcaptcha/).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * // 
 * // Simple SmartCaptcha example.
 * //
 * const demo_captcha_simple = new yandex.SmartcaptchaCaptcha("demo-captcha-simple", {
 *     allowedSites: [
 *         "example.com",
 *         "example.ru",
 *     ],
 *     challengeType: "IMAGE_TEXT",
 *     complexity: "HARD",
 *     deletionProtection: true,
 *     preCheckType: "SLIDER",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh/pulumi-yandex";
 *
 * //
 * // Advanced SmartCaptcha example.
 * //
 * const demo_captcha_advanced = new yandex.SmartcaptchaCaptcha("demo-captcha-advanced", {
 *     allowedSites: [
 *         "example.com",
 *         "example.ru",
 *     ],
 *     challengeType: "IMAGE_TEXT",
 *     complexity: "HARD",
 *     deletionProtection: true,
 *     overrideVariants: [
 *         {
 *             challengeType: "SILHOUETTES",
 *             complexity: "EASY",
 *             description: "override variant 1",
 *             preCheckType: "CHECKBOX",
 *             uuid: "xxx",
 *         },
 *         {
 *             challengeType: "KALEIDOSCOPE",
 *             complexity: "HARD",
 *             description: "override variant 2",
 *             preCheckType: "CHECKBOX",
 *             uuid: "yyy",
 *         },
 *     ],
 *     preCheckType: "SLIDER",
 *     securityRules: [
 *         {
 *             condition: {
 *                 headers: [
 *                     {
 *                         name: "User-Agent",
 *                         value: {
 *                             pireRegexMatch: ".*curl.*",
 *                         },
 *                     },
 *                     {
 *                         name: "Referer",
 *                         value: {
 *                             pireRegexNotMatch: ".*bot.*",
 *                         },
 *                     },
 *                 ],
 *                 host: {
 *                     hosts: [
 *                         {
 *                             exactMatch: "example.com",
 *                         },
 *                         {
 *                             exactMatch: "example.net",
 *                         },
 *                     ],
 *                 },
 *                 sourceIp: {
 *                     geoIpMatch: {
 *                         locations: [
 *                             "ru",
 *                             "es",
 *                         ],
 *                     },
 *                     geoIpNotMatch: {
 *                         locations: [
 *                             "us",
 *                             "fm",
 *                             "gb",
 *                         ],
 *                     },
 *                     ipRangesMatch: {
 *                         ipRanges: [
 *                             "1.2.33.44",
 *                             "2.3.4.56",
 *                         ],
 *                     },
 *                     ipRangesNotMatch: {
 *                         ipRanges: [
 *                             "8.8.0.0/16",
 *                             "10::1234:1abc:1/64",
 *                         ],
 *                     },
 *                 },
 *                 uri: {
 *                     path: {
 *                         prefixMatch: "/form",
 *                     },
 *                     queries: [
 *                         {
 *                             key: "firstname",
 *                             value: {
 *                                 pireRegexMatch: ".*ivan.*",
 *                             },
 *                         },
 *                         {
 *                             key: "lastname",
 *                             value: {
 *                                 pireRegexMatch: ".*petr.*",
 *                             },
 *                         },
 *                     ],
 *                 },
 *             },
 *             description: "My first security rule. This rule it's just example to show possibilities of configuration.",
 *             name: "rule1",
 *             overrideVariantUuid: "xxx",
 *             priority: 11,
 *         },
 *         {
 *             condition: {
 *                 uri: {
 *                     path: {
 *                         prefixMatch: "/form",
 *                     },
 *                 },
 *             },
 *             description: "Second rule",
 *             name: "rule2",
 *             overrideVariantUuid: "yyy",
 *             priority: 555,
 *         },
 *         {
 *             description: "Empty condition rule",
 *             name: "rule3",
 *             overrideVariantUuid: "yyy",
 *             priority: 99999,
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).
 *
 * ```sh
 * $ pulumi import yandex:index/smartcaptchaCaptcha:SmartcaptchaCaptcha <resource Name> <resource Id>
 * ```
 *
 * ```sh
 * $ pulumi import yandex:index/smartcaptchaCaptcha:SmartcaptchaCaptcha demo-captcha-simple ...
 * ```
 */
export class SmartcaptchaCaptcha extends pulumi.CustomResource {
    /**
     * Get an existing SmartcaptchaCaptcha resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SmartcaptchaCaptchaState, opts?: pulumi.CustomResourceOptions): SmartcaptchaCaptcha {
        return new SmartcaptchaCaptcha(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/smartcaptchaCaptcha:SmartcaptchaCaptcha';

    /**
     * Returns true if the given object is an instance of SmartcaptchaCaptcha.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SmartcaptchaCaptcha {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SmartcaptchaCaptcha.__pulumiType;
    }

    /**
     * List of allowed host names, see [Domain validation](https://yandex.cloud/docs/smartcaptcha/concepts/domain-validation).
     */
    declare public readonly allowedSites: pulumi.Output<string[] | undefined>;
    /**
     * Additional task type of the captcha. Possible values:
     */
    declare public readonly challengeType: pulumi.Output<string | undefined>;
    /**
     * Client key of the captcha, see [CAPTCHA keys](https://yandex.cloud/docs/smartcaptcha/concepts/keys).
     */
    declare public /*out*/ readonly clientKey: pulumi.Output<string>;
    /**
     * The `Cloud ID` which resource belongs to. If it is not provided, the default provider `cloud-id` is used.
     */
    declare public readonly cloudId: pulumi.Output<string>;
    /**
     * Complexity of the captcha. Possible values:
     */
    declare public readonly complexity: pulumi.Output<string | undefined>;
    /**
     * The creation timestamp of the resource.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    declare public readonly deletionProtection: pulumi.Output<boolean | undefined>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    declare public readonly folderId: pulumi.Output<string>;
    /**
     * The resource name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * List of variants to use in security*rules.
     */
    declare public readonly overrideVariants: pulumi.Output<outputs.SmartcaptchaCaptchaOverrideVariant[] | undefined>;
    /**
     * Basic check type of the captcha.Possible values:
     */
    declare public readonly preCheckType: pulumi.Output<string | undefined>;
    /**
     * List of security rules.
     */
    declare public readonly securityRules: pulumi.Output<outputs.SmartcaptchaCaptchaSecurityRule[] | undefined>;
    /**
     * JSON with variables to define the captcha appearance. For more details see generated JSON in cloud console.
     */
    declare public readonly styleJson: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly suspend: pulumi.Output<boolean>;
    /**
     * Turn off host name check, see [Domain validation](https://yandex.cloud/docs/smartcaptcha/concepts/domain-validation).
     */
    declare public readonly turnOffHostnameCheck: pulumi.Output<boolean | undefined>;

    /**
     * Create a SmartcaptchaCaptcha resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SmartcaptchaCaptchaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SmartcaptchaCaptchaArgs | SmartcaptchaCaptchaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SmartcaptchaCaptchaState | undefined;
            resourceInputs["allowedSites"] = state?.allowedSites;
            resourceInputs["challengeType"] = state?.challengeType;
            resourceInputs["clientKey"] = state?.clientKey;
            resourceInputs["cloudId"] = state?.cloudId;
            resourceInputs["complexity"] = state?.complexity;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["name"] = state?.name;
            resourceInputs["overrideVariants"] = state?.overrideVariants;
            resourceInputs["preCheckType"] = state?.preCheckType;
            resourceInputs["securityRules"] = state?.securityRules;
            resourceInputs["styleJson"] = state?.styleJson;
            resourceInputs["suspend"] = state?.suspend;
            resourceInputs["turnOffHostnameCheck"] = state?.turnOffHostnameCheck;
        } else {
            const args = argsOrState as SmartcaptchaCaptchaArgs | undefined;
            resourceInputs["allowedSites"] = args?.allowedSites;
            resourceInputs["challengeType"] = args?.challengeType;
            resourceInputs["cloudId"] = args?.cloudId;
            resourceInputs["complexity"] = args?.complexity;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["name"] = args?.name;
            resourceInputs["overrideVariants"] = args?.overrideVariants;
            resourceInputs["preCheckType"] = args?.preCheckType;
            resourceInputs["securityRules"] = args?.securityRules;
            resourceInputs["styleJson"] = args?.styleJson;
            resourceInputs["turnOffHostnameCheck"] = args?.turnOffHostnameCheck;
            resourceInputs["clientKey"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["suspend"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SmartcaptchaCaptcha.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SmartcaptchaCaptcha resources.
 */
export interface SmartcaptchaCaptchaState {
    /**
     * List of allowed host names, see [Domain validation](https://yandex.cloud/docs/smartcaptcha/concepts/domain-validation).
     */
    allowedSites?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Additional task type of the captcha. Possible values:
     */
    challengeType?: pulumi.Input<string>;
    /**
     * Client key of the captcha, see [CAPTCHA keys](https://yandex.cloud/docs/smartcaptcha/concepts/keys).
     */
    clientKey?: pulumi.Input<string>;
    /**
     * The `Cloud ID` which resource belongs to. If it is not provided, the default provider `cloud-id` is used.
     */
    cloudId?: pulumi.Input<string>;
    /**
     * Complexity of the captcha. Possible values:
     */
    complexity?: pulumi.Input<string>;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * List of variants to use in security*rules.
     */
    overrideVariants?: pulumi.Input<pulumi.Input<inputs.SmartcaptchaCaptchaOverrideVariant>[]>;
    /**
     * Basic check type of the captcha.Possible values:
     */
    preCheckType?: pulumi.Input<string>;
    /**
     * List of security rules.
     */
    securityRules?: pulumi.Input<pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRule>[]>;
    /**
     * JSON with variables to define the captcha appearance. For more details see generated JSON in cloud console.
     */
    styleJson?: pulumi.Input<string>;
    suspend?: pulumi.Input<boolean>;
    /**
     * Turn off host name check, see [Domain validation](https://yandex.cloud/docs/smartcaptcha/concepts/domain-validation).
     */
    turnOffHostnameCheck?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SmartcaptchaCaptcha resource.
 */
export interface SmartcaptchaCaptchaArgs {
    /**
     * List of allowed host names, see [Domain validation](https://yandex.cloud/docs/smartcaptcha/concepts/domain-validation).
     */
    allowedSites?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Additional task type of the captcha. Possible values:
     */
    challengeType?: pulumi.Input<string>;
    /**
     * The `Cloud ID` which resource belongs to. If it is not provided, the default provider `cloud-id` is used.
     */
    cloudId?: pulumi.Input<string>;
    /**
     * Complexity of the captcha. Possible values:
     */
    complexity?: pulumi.Input<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * List of variants to use in security*rules.
     */
    overrideVariants?: pulumi.Input<pulumi.Input<inputs.SmartcaptchaCaptchaOverrideVariant>[]>;
    /**
     * Basic check type of the captcha.Possible values:
     */
    preCheckType?: pulumi.Input<string>;
    /**
     * List of security rules.
     */
    securityRules?: pulumi.Input<pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRule>[]>;
    /**
     * JSON with variables to define the captcha appearance. For more details see generated JSON in cloud console.
     */
    styleJson?: pulumi.Input<string>;
    /**
     * Turn off host name check, see [Domain validation](https://yandex.cloud/docs/smartcaptcha/concepts/domain-validation).
     */
    turnOffHostnameCheck?: pulumi.Input<boolean>;
}
