// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Allows management of [Yandex Cloud Storage Object](https://yandex.cloud/docs/storage/concepts/object).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@airoh-io/pulumi-yandex";
 *
 * //
 * // Create a new Storage Object in Bucket.
 * //
 * const cute_cat_picture = new yandex.StorageObject("cute-cat-picture", {
 *     bucket: "cat-pictures",
 *     key: "cute-cat",
 *     source: "/images/cats/cute-cat.jpg",
 *     tags: {
 *         test: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ~> Import for this resource is not implemented yet.
 */
export class StorageObject extends pulumi.CustomResource {
    /**
     * Get an existing StorageObject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageObjectState, opts?: pulumi.CustomResourceOptions): StorageObject {
        return new StorageObject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/storageObject:StorageObject';

    /**
     * Returns true if the given object is an instance of StorageObject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageObject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageObject.__pulumiType;
    }

    /**
     * The access key to use when applying changes. This value can also be provided as `storageAccessKey` specified in provider config (explicitly or within `sharedCredentialsFile`) is used.
     */
    declare public readonly accessKey: pulumi.Output<string | undefined>;
    /**
     * The [predefined ACL](https://yandex.cloud/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`.
     */
    declare public readonly acl: pulumi.Output<string | undefined>;
    /**
     * The name of the containing bucket.
     */
    declare public readonly bucket: pulumi.Output<string>;
    /**
     * Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text. Conflicts with `source` and `contentBase64`.
     */
    declare public readonly content: pulumi.Output<string | undefined>;
    /**
     * Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file. Conflicts with `source` and `content`.
     */
    declare public readonly contentBase64: pulumi.Output<string | undefined>;
    /**
     * A standard MIME type describing the format of the object data, e.g. `application/octet-stream`. All Valid MIME Types are valid for this input.
     */
    declare public readonly contentType: pulumi.Output<string>;
    /**
     * The name of the object once it is in the bucket.
     */
    declare public readonly key: pulumi.Output<string>;
    /**
     * Specifies a [legal hold status](https://yandex.cloud/docs/storage/concepts/object-lock#types) of an object. Requires `objectLockConfiguration` to be enabled on a bucket.
     */
    declare public readonly objectLockLegalHoldStatus: pulumi.Output<string | undefined>;
    /**
     * Specifies a type of object lock. One of `["GOVERNANCE", "COMPLIANCE"]`. It must be set simultaneously with `objectLockRetainUntilDate`. Requires `objectLockConfiguration` to be enabled on a bucket.
     */
    declare public readonly objectLockMode: pulumi.Output<string | undefined>;
    /**
     * Specifies date and time in RTC3339 format until which an object is to be locked. It must be set simultaneously with `objectLockMode`. Requires `objectLockConfiguration` to be enabled on a bucket.
     */
    declare public readonly objectLockRetainUntilDate: pulumi.Output<string | undefined>;
    /**
     * The secret key to use when applying changes. This value can also be provided as `storageSecretKey` specified in provider config (explicitly or within `sharedCredentialsFile`) is used.
     */
    declare public readonly secretKey: pulumi.Output<string | undefined>;
    /**
     * The path to a file that will be read and uploaded as raw bytes for the object content. Conflicts with `content` and `contentBase64`.
     */
    declare public readonly source: pulumi.Output<string | undefined>;
    /**
     * Used to trigger object update when the source content changes. So the only meaningful value is `filemd5("path/to/source"). The value is only stored in state and not saved by Yandex Storage.
     */
    declare public readonly sourceHash: pulumi.Output<string | undefined>;
    /**
     * The `tags` object for setting tags (or labels) for bucket. See [Tags](https://yandex.cloud/docs/storage/concepts/tags) for more information.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a StorageObject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageObjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageObjectArgs | StorageObjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageObjectState | undefined;
            resourceInputs["accessKey"] = state?.accessKey;
            resourceInputs["acl"] = state?.acl;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["content"] = state?.content;
            resourceInputs["contentBase64"] = state?.contentBase64;
            resourceInputs["contentType"] = state?.contentType;
            resourceInputs["key"] = state?.key;
            resourceInputs["objectLockLegalHoldStatus"] = state?.objectLockLegalHoldStatus;
            resourceInputs["objectLockMode"] = state?.objectLockMode;
            resourceInputs["objectLockRetainUntilDate"] = state?.objectLockRetainUntilDate;
            resourceInputs["secretKey"] = state?.secretKey;
            resourceInputs["source"] = state?.source;
            resourceInputs["sourceHash"] = state?.sourceHash;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as StorageObjectArgs | undefined;
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["accessKey"] = args?.accessKey;
            resourceInputs["acl"] = args?.acl;
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["content"] = args?.content;
            resourceInputs["contentBase64"] = args?.contentBase64;
            resourceInputs["contentType"] = args?.contentType;
            resourceInputs["key"] = args?.key;
            resourceInputs["objectLockLegalHoldStatus"] = args?.objectLockLegalHoldStatus;
            resourceInputs["objectLockMode"] = args?.objectLockMode;
            resourceInputs["objectLockRetainUntilDate"] = args?.objectLockRetainUntilDate;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["source"] = args?.source;
            resourceInputs["sourceHash"] = args?.sourceHash;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StorageObject.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StorageObject resources.
 */
export interface StorageObjectState {
    /**
     * The access key to use when applying changes. This value can also be provided as `storageAccessKey` specified in provider config (explicitly or within `sharedCredentialsFile`) is used.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The [predefined ACL](https://yandex.cloud/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`.
     */
    acl?: pulumi.Input<string>;
    /**
     * The name of the containing bucket.
     */
    bucket?: pulumi.Input<string>;
    /**
     * Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text. Conflicts with `source` and `contentBase64`.
     */
    content?: pulumi.Input<string>;
    /**
     * Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file. Conflicts with `source` and `content`.
     */
    contentBase64?: pulumi.Input<string>;
    /**
     * A standard MIME type describing the format of the object data, e.g. `application/octet-stream`. All Valid MIME Types are valid for this input.
     */
    contentType?: pulumi.Input<string>;
    /**
     * The name of the object once it is in the bucket.
     */
    key?: pulumi.Input<string>;
    /**
     * Specifies a [legal hold status](https://yandex.cloud/docs/storage/concepts/object-lock#types) of an object. Requires `objectLockConfiguration` to be enabled on a bucket.
     */
    objectLockLegalHoldStatus?: pulumi.Input<string>;
    /**
     * Specifies a type of object lock. One of `["GOVERNANCE", "COMPLIANCE"]`. It must be set simultaneously with `objectLockRetainUntilDate`. Requires `objectLockConfiguration` to be enabled on a bucket.
     */
    objectLockMode?: pulumi.Input<string>;
    /**
     * Specifies date and time in RTC3339 format until which an object is to be locked. It must be set simultaneously with `objectLockMode`. Requires `objectLockConfiguration` to be enabled on a bucket.
     */
    objectLockRetainUntilDate?: pulumi.Input<string>;
    /**
     * The secret key to use when applying changes. This value can also be provided as `storageSecretKey` specified in provider config (explicitly or within `sharedCredentialsFile`) is used.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The path to a file that will be read and uploaded as raw bytes for the object content. Conflicts with `content` and `contentBase64`.
     */
    source?: pulumi.Input<string>;
    /**
     * Used to trigger object update when the source content changes. So the only meaningful value is `filemd5("path/to/source"). The value is only stored in state and not saved by Yandex Storage.
     */
    sourceHash?: pulumi.Input<string>;
    /**
     * The `tags` object for setting tags (or labels) for bucket. See [Tags](https://yandex.cloud/docs/storage/concepts/tags) for more information.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a StorageObject resource.
 */
export interface StorageObjectArgs {
    /**
     * The access key to use when applying changes. This value can also be provided as `storageAccessKey` specified in provider config (explicitly or within `sharedCredentialsFile`) is used.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The [predefined ACL](https://yandex.cloud/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`.
     */
    acl?: pulumi.Input<string>;
    /**
     * The name of the containing bucket.
     */
    bucket: pulumi.Input<string>;
    /**
     * Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text. Conflicts with `source` and `contentBase64`.
     */
    content?: pulumi.Input<string>;
    /**
     * Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file. Conflicts with `source` and `content`.
     */
    contentBase64?: pulumi.Input<string>;
    /**
     * A standard MIME type describing the format of the object data, e.g. `application/octet-stream`. All Valid MIME Types are valid for this input.
     */
    contentType?: pulumi.Input<string>;
    /**
     * The name of the object once it is in the bucket.
     */
    key: pulumi.Input<string>;
    /**
     * Specifies a [legal hold status](https://yandex.cloud/docs/storage/concepts/object-lock#types) of an object. Requires `objectLockConfiguration` to be enabled on a bucket.
     */
    objectLockLegalHoldStatus?: pulumi.Input<string>;
    /**
     * Specifies a type of object lock. One of `["GOVERNANCE", "COMPLIANCE"]`. It must be set simultaneously with `objectLockRetainUntilDate`. Requires `objectLockConfiguration` to be enabled on a bucket.
     */
    objectLockMode?: pulumi.Input<string>;
    /**
     * Specifies date and time in RTC3339 format until which an object is to be locked. It must be set simultaneously with `objectLockMode`. Requires `objectLockConfiguration` to be enabled on a bucket.
     */
    objectLockRetainUntilDate?: pulumi.Input<string>;
    /**
     * The secret key to use when applying changes. This value can also be provided as `storageSecretKey` specified in provider config (explicitly or within `sharedCredentialsFile`) is used.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The path to a file that will be read and uploaded as raw bytes for the object content. Conflicts with `content` and `contentBase64`.
     */
    source?: pulumi.Input<string>;
    /**
     * Used to trigger object update when the source content changes. So the only meaningful value is `filemd5("path/to/source"). The value is only stored in state and not saved by Yandex Storage.
     */
    sourceHash?: pulumi.Input<string>;
    /**
     * The `tags` object for setting tags (or labels) for bucket. See [Tags](https://yandex.cloud/docs/storage/concepts/tags) for more information.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
