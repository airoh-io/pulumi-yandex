# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MdbPostgresqlClusterArgs', 'MdbPostgresqlCluster']

@pulumi.input_type
class MdbPostgresqlClusterArgs:
    def __init__(__self__, *,
                 config: pulumi.Input['MdbPostgresqlClusterConfigArgs'],
                 databases: pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterDatabaseArgs']]],
                 environment: pulumi.Input[str],
                 hosts: pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterHostArgs']]],
                 network_id: pulumi.Input[str],
                 users: pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterUserArgs']]],
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 host_master_name: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 restore: Optional[pulumi.Input['MdbPostgresqlClusterRestoreArgs']] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a MdbPostgresqlCluster resource.
        :param pulumi.Input['MdbPostgresqlClusterConfigArgs'] config: Configuration of the PostgreSQL cluster. The structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterDatabaseArgs']]] databases: A database of the PostgreSQL cluster. The structure is documented below.
        :param pulumi.Input[str] environment: Deployment environment of the PostgreSQL cluster.
        :param pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterHostArgs']]] hosts: A host of the PostgreSQL cluster. The structure is documented below.
        :param pulumi.Input[str] network_id: ID of the network, to which the PostgreSQL cluster belongs.
        :param pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterUserArgs']]] users: A user of the PostgreSQL cluster. The structure is documented below.
        :param pulumi.Input[str] description: Description of the PostgreSQL cluster.
        :param pulumi.Input[str] folder_id: The ID of the folder that the resource belongs to. If it is unset, the default provider `folder_id` is used for create.
        :param pulumi.Input[str] host_master_name: It sets name of master host. It works only when `host.name` is set.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to the PostgreSQL cluster.
        :param pulumi.Input[str] name: Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replication_source_name` parameter.
               Also, this field is used to select which host will be selected as a master host. Please see `host_master_name` parameter.
        :param pulumi.Input['MdbPostgresqlClusterRestoreArgs'] restore: The cluster will be created from the specified backup. The structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: A set of ids of security groups assigned to hosts of the cluster.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "users", users)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if host_master_name is not None:
            pulumi.set(__self__, "host_master_name", host_master_name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if restore is not None:
            pulumi.set(__self__, "restore", restore)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Input['MdbPostgresqlClusterConfigArgs']:
        """
        Configuration of the PostgreSQL cluster. The structure is documented below.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input['MdbPostgresqlClusterConfigArgs']):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def databases(self) -> pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterDatabaseArgs']]]:
        """
        A database of the PostgreSQL cluster. The structure is documented below.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterDatabaseArgs']]]):
        pulumi.set(self, "databases", value)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input[str]:
        """
        Deployment environment of the PostgreSQL cluster.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterHostArgs']]]:
        """
        A host of the PostgreSQL cluster. The structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterHostArgs']]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[str]:
        """
        ID of the network, to which the PostgreSQL cluster belongs.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def users(self) -> pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterUserArgs']]]:
        """
        A user of the PostgreSQL cluster. The structure is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterUserArgs']]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the PostgreSQL cluster.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the folder that the resource belongs to. If it is unset, the default provider `folder_id` is used for create.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter(name="hostMasterName")
    def host_master_name(self) -> Optional[pulumi.Input[str]]:
        """
        It sets name of master host. It works only when `host.name` is set.
        """
        return pulumi.get(self, "host_master_name")

    @host_master_name.setter
    def host_master_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_master_name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A set of key/value label pairs to assign to the PostgreSQL cluster.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replication_source_name` parameter.
        Also, this field is used to select which host will be selected as a master host. Please see `host_master_name` parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def restore(self) -> Optional[pulumi.Input['MdbPostgresqlClusterRestoreArgs']]:
        """
        The cluster will be created from the specified backup. The structure is documented below.
        """
        return pulumi.get(self, "restore")

    @restore.setter
    def restore(self, value: Optional[pulumi.Input['MdbPostgresqlClusterRestoreArgs']]):
        pulumi.set(self, "restore", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of ids of security groups assigned to hosts of the cluster.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)


@pulumi.input_type
class _MdbPostgresqlClusterState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['MdbPostgresqlClusterConfigArgs']] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterDatabaseArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 health: Optional[pulumi.Input[str]] = None,
                 host_master_name: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterHostArgs']]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 restore: Optional[pulumi.Input['MdbPostgresqlClusterRestoreArgs']] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterUserArgs']]]] = None):
        """
        Input properties used for looking up and filtering MdbPostgresqlCluster resources.
        :param pulumi.Input['MdbPostgresqlClusterConfigArgs'] config: Configuration of the PostgreSQL cluster. The structure is documented below.
        :param pulumi.Input[str] created_at: Timestamp of cluster creation.
        :param pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterDatabaseArgs']]] databases: A database of the PostgreSQL cluster. The structure is documented below.
        :param pulumi.Input[str] description: Description of the PostgreSQL cluster.
        :param pulumi.Input[str] environment: Deployment environment of the PostgreSQL cluster.
        :param pulumi.Input[str] folder_id: The ID of the folder that the resource belongs to. If it is unset, the default provider `folder_id` is used for create.
        :param pulumi.Input[str] health: Aggregated health of the cluster.
        :param pulumi.Input[str] host_master_name: It sets name of master host. It works only when `host.name` is set.
        :param pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterHostArgs']]] hosts: A host of the PostgreSQL cluster. The structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to the PostgreSQL cluster.
        :param pulumi.Input[str] name: Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replication_source_name` parameter.
               Also, this field is used to select which host will be selected as a master host. Please see `host_master_name` parameter.
        :param pulumi.Input[str] network_id: ID of the network, to which the PostgreSQL cluster belongs.
        :param pulumi.Input['MdbPostgresqlClusterRestoreArgs'] restore: The cluster will be created from the specified backup. The structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: A set of ids of security groups assigned to hosts of the cluster.
        :param pulumi.Input[str] status: Status of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterUserArgs']]] users: A user of the PostgreSQL cluster. The structure is documented below.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if host_master_name is not None:
            pulumi.set(__self__, "host_master_name", host_master_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if restore is not None:
            pulumi.set(__self__, "restore", restore)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['MdbPostgresqlClusterConfigArgs']]:
        """
        Configuration of the PostgreSQL cluster. The structure is documented below.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['MdbPostgresqlClusterConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of cluster creation.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterDatabaseArgs']]]]:
        """
        A database of the PostgreSQL cluster. The structure is documented below.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterDatabaseArgs']]]]):
        pulumi.set(self, "databases", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the PostgreSQL cluster.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment environment of the PostgreSQL cluster.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the folder that the resource belongs to. If it is unset, the default provider `folder_id` is used for create.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregated health of the cluster.
        """
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health", value)

    @property
    @pulumi.getter(name="hostMasterName")
    def host_master_name(self) -> Optional[pulumi.Input[str]]:
        """
        It sets name of master host. It works only when `host.name` is set.
        """
        return pulumi.get(self, "host_master_name")

    @host_master_name.setter
    def host_master_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_master_name", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterHostArgs']]]]:
        """
        A host of the PostgreSQL cluster. The structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A set of key/value label pairs to assign to the PostgreSQL cluster.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replication_source_name` parameter.
        Also, this field is used to select which host will be selected as a master host. Please see `host_master_name` parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the network, to which the PostgreSQL cluster belongs.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def restore(self) -> Optional[pulumi.Input['MdbPostgresqlClusterRestoreArgs']]:
        """
        The cluster will be created from the specified backup. The structure is documented below.
        """
        return pulumi.get(self, "restore")

    @restore.setter
    def restore(self, value: Optional[pulumi.Input['MdbPostgresqlClusterRestoreArgs']]):
        pulumi.set(self, "restore", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of ids of security groups assigned to hosts of the cluster.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the cluster.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterUserArgs']]]]:
        """
        A user of the PostgreSQL cluster. The structure is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MdbPostgresqlClusterUserArgs']]]]):
        pulumi.set(self, "users", value)


class MdbPostgresqlCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterConfigArgs']]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterDatabaseArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 host_master_name: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterHostArgs']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 restore: Optional[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterRestoreArgs']]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterUserArgs']]]]] = None,
                 __props__=None):
        """
        Manages a PostgreSQL cluster within the Yandex.Cloud. For more information, see
        [the official documentation](https://cloud.yandex.com/docs/managed-postgresql/).

        ## Example Usage

        Example of creating a Single Node PostgreSQL.

        ```python
        import pulumi
        import pulumi_yandex as yandex

        foo_vpc_network = yandex.VpcNetwork("fooVpcNetwork")
        foo_vpc_subnet = yandex.VpcSubnet("fooVpcSubnet",
            zone="ru-central1-a",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.5.0.0/24"])
        foo_mdb_postgresql_cluster = yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster",
            environment="PRESTABLE",
            network_id=foo_vpc_network.id,
            config=yandex.MdbPostgresqlClusterConfigArgs(
                version="12",
                resources=yandex.MdbPostgresqlClusterConfigResourcesArgs(
                    resource_preset_id="s2.micro",
                    disk_type_id="network-ssd",
                    disk_size=16,
                ),
                postgresql_config={
                    "max_connections": "395",
                    "enable_parallel_hash": "true",
                    "vacuum_cleanup_index_scale_factor": "0.2",
                    "autovacuum_vacuum_scale_factor": "0.34",
                    "default_transaction_isolation": "TRANSACTION_ISOLATION_READ_COMMITTED",
                    "shared_preload_libraries": "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN",
                },
            ),
            databases=[yandex.MdbPostgresqlClusterDatabaseArgs(
                name="db_name",
                owner="user_name",
            )],
            users=[yandex.MdbPostgresqlClusterUserArgs(
                name="user_name",
                password="your_password",
                conn_limit=50,
                permissions=[yandex.MdbPostgresqlClusterUserPermissionArgs(
                    database_name="db_name",
                )],
                settings={
                    "default_transaction_isolation": "read committed",
                    "log_min_duration_statement": "5000",
                },
            )],
            hosts=[yandex.MdbPostgresqlClusterHostArgs(
                zone="ru-central1-a",
                subnet_id=foo_vpc_subnet.id,
            )])
        ```

        Example of creating a High-Availability (HA) PostgreSQL Cluster.

        ```python
        import pulumi
        import pulumi_yandex as yandex

        foo_vpc_network = yandex.VpcNetwork("fooVpcNetwork")
        foo_vpc_subnet = yandex.VpcSubnet("fooVpcSubnet",
            zone="ru-central1-a",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.1.0.0/24"])
        bar = yandex.VpcSubnet("bar",
            zone="ru-central1-b",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.2.0.0/24"])
        foo_mdb_postgresql_cluster = yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster",
            environment="PRESTABLE",
            network_id=foo_vpc_network.id,
            config=yandex.MdbPostgresqlClusterConfigArgs(
                version="12",
                resources=yandex.MdbPostgresqlClusterConfigResourcesArgs(
                    resource_preset_id="s2.micro",
                    disk_type_id="network-ssd",
                    disk_size=16,
                ),
            ),
            databases=[yandex.MdbPostgresqlClusterDatabaseArgs(
                name="db_name",
                owner="user_name",
            )],
            users=[yandex.MdbPostgresqlClusterUserArgs(
                name="user_name",
                password="password",
                permissions=[yandex.MdbPostgresqlClusterUserPermissionArgs(
                    database_name="db_name",
                )],
            )],
            hosts=[
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-a",
                    subnet_id=foo_vpc_subnet.id,
                ),
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-b",
                    subnet_id=bar.id,
                ),
            ])
        ```

        Example of creating a High-Availability (HA) PostgreSQL Cluster with priority and set master.

        ```python
        import pulumi
        import pulumi_yandex as yandex

        foo_vpc_network = yandex.VpcNetwork("fooVpcNetwork")
        vpc_subnet = yandex.VpcSubnet("vpcSubnet",
            zone="ru-central1-c",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.3.0.0/24"])
        foo_mdb_postgresql_cluster = yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster",
            description="test High-Availability (HA) PostgreSQL Cluster with priority and set master",
            environment="PRESTABLE",
            network_id=foo_vpc_network.id,
            host_master_name="host_name_c_2",
            config=yandex.MdbPostgresqlClusterConfigArgs(
                version="12",
                resources=yandex.MdbPostgresqlClusterConfigResourcesArgs(
                    resource_preset_id="s2.micro",
                    disk_size=10,
                    disk_type_id="network-ssd",
                ),
            ),
            users=[yandex.MdbPostgresqlClusterUserArgs(
                name="alice",
                password="mysecurepassword",
                permissions=[yandex.MdbPostgresqlClusterUserPermissionArgs(
                    database_name="testdb",
                )],
            )],
            hosts=[
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-a",
                    name="host_name_a",
                    priority=2,
                    subnet_id=index / vpc_subnet_vpc_subnet["id"],
                ),
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-b",
                    name="host_name_b",
                    replication_source_name="host_name_c",
                    subnet_id=yandex_index / vpc_subnet_vpc_subnet["id"],
                ),
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-c",
                    name="host_name_c",
                    subnet_id=vpc_subnet.id,
                ),
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-c",
                    name="host_name_c_2",
                    subnet_id=vpc_subnet.id,
                ),
            ],
            databases=[yandex.MdbPostgresqlClusterDatabaseArgs(
                owner="alice",
                name="testdb",
            )])
        index_vpc_subnet_vpc_subnet = yandex.VpcSubnet("index/vpcSubnetVpcSubnet",
            zone="ru-central1-a",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.1.0.0/24"])
        yandex_index_vpc_subnet_vpc_subnet = yandex.VpcSubnet("yandexIndex/vpcSubnetVpcSubnet",
            zone="ru-central1-b",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.2.0.0/24"])
        ```

        Example of creating a Single Node PostgreSQL from backup.

        ```python
        import pulumi
        import pulumi_yandex as yandex

        foo_vpc_network = yandex.VpcNetwork("fooVpcNetwork")
        foo_vpc_subnet = yandex.VpcSubnet("fooVpcSubnet",
            zone="ru-central1-a",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.5.0.0/24"])
        foo_mdb_postgresql_cluster = yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster",
            environment="PRESTABLE",
            network_id=foo_vpc_network.id,
            restore=yandex.MdbPostgresqlClusterRestoreArgs(
                backup_id="c9q99999999999999994cm:base_000000010000005F000000B4",
                time="2021-02-11T15:04:05",
            ),
            config=yandex.MdbPostgresqlClusterConfigArgs(
                version="12",
                resources=yandex.MdbPostgresqlClusterConfigResourcesArgs(
                    resource_preset_id="s2.micro",
                    disk_type_id="network-ssd",
                    disk_size=16,
                ),
                postgresql_config={
                    "max_connections": "395",
                    "enable_parallel_hash": "true",
                    "vacuum_cleanup_index_scale_factor": "0.2",
                    "autovacuum_vacuum_scale_factor": "0.34",
                    "default_transaction_isolation": "TRANSACTION_ISOLATION_READ_COMMITTED",
                    "shared_preload_libraries": "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN",
                },
            ),
            databases=[yandex.MdbPostgresqlClusterDatabaseArgs(
                name="db_name",
                owner="user_name",
            )],
            users=[yandex.MdbPostgresqlClusterUserArgs(
                name="user_name",
                password="your_password",
                conn_limit=50,
                permissions=[yandex.MdbPostgresqlClusterUserPermissionArgs(
                    database_name="db_name",
                )],
                settings={
                    "default_transaction_isolation": "read committed",
                    "log_min_duration_statement": "5000",
                },
            )],
            hosts=[yandex.MdbPostgresqlClusterHostArgs(
                zone="ru-central1-a",
                subnet_id=foo_vpc_subnet.id,
            )])
        ```

        Example of creating a High-Availability (HA) PostgreSQL cluster with multiple databases and users.
        ```python
        import pulumi
        import pulumi_random as random
        import pulumi_yandex as yandex

        passwords = []
        for range in [{"value": i} for i in range(0, 2)]:
            passwords.append(random.RandomPassword(f"passwords-{range['value']}",
                length=16,
                special=True))
        pulumi.export("dbInstanceAlicePassword", passwords[0].result)
        pulumi.export("dbInstanceBobPassword", passwords[1].result)
        foo_vpc_network = yandex.VpcNetwork("fooVpcNetwork")
        vpc_subnet = yandex.VpcSubnet("vpcSubnet",
            zone="ru-central1-a",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.1.0.0/24"])
        foo_mdb_postgresql_cluster = yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster",
            description="Example of multiple databases and users",
            environment="PRESTABLE",
            network_id=foo_vpc_network.id,
            folder_id="b1g24daaaddddffma52u",
            config=yandex.MdbPostgresqlClusterConfigArgs(
                version="13",
                resources=yandex.MdbPostgresqlClusterConfigResourcesArgs(
                    resource_preset_id="s2.micro",
                    disk_size=10,
                    disk_type_id="network-ssd",
                ),
                access=yandex.MdbPostgresqlClusterConfigAccessArgs(
                    web_sql=True,
                ),
                postgresql_config={
                    "max_connections": "395",
                    "enable_parallel_hash": "true",
                    "vacuum_cleanup_index_scale_factor": "0.2",
                    "autovacuum_vacuum_scale_factor": "0.32",
                    "default_transaction_isolation": "TRANSACTION_ISOLATION_READ_UNCOMMITTED",
                    "shared_preload_libraries": "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN",
                },
                pooler_config=yandex.MdbPostgresqlClusterConfigPoolerConfigArgs(
                    pool_discard=True,
                    pooling_mode="SESSION",
                ),
            ),
            users=[
                yandex.MdbPostgresqlClusterUserArgs(
                    name="alice",
                    password=passwords[0].result,
                    conn_limit=10,
                    permissions=[
                        yandex.MdbPostgresqlClusterUserPermissionArgs(
                            database_name="testdb",
                        ),
                        yandex.MdbPostgresqlClusterUserPermissionArgs(
                            database_name="testdb1",
                        ),
                        yandex.MdbPostgresqlClusterUserPermissionArgs(
                            database_name="testdb2",
                        ),
                    ],
                ),
                yandex.MdbPostgresqlClusterUserArgs(
                    name="bob",
                    password=passwords[1].result,
                    permissions=[
                        yandex.MdbPostgresqlClusterUserPermissionArgs(
                            database_name="testdb2",
                        ),
                        yandex.MdbPostgresqlClusterUserPermissionArgs(
                            database_name="testdb1",
                        ),
                    ],
                ),
                yandex.MdbPostgresqlClusterUserArgs(
                    name="chuck",
                    password="123456789",
                    permissions=[yandex.MdbPostgresqlClusterUserPermissionArgs(
                        database_name="testdb",
                    )],
                    grants=[
                        "bob",
                        "alice",
                    ],
                ),
            ],
            hosts=[
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-b",
                    subnet_id=index / vpc_subnet_vpc_subnet["id"],
                ),
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-a",
                    subnet_id=vpc_subnet.id,
                ),
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-c",
                    subnet_id=yandex_index / vpc_subnet_vpc_subnet["id"],
                ),
            ],
            databases=[
                yandex.MdbPostgresqlClusterDatabaseArgs(
                    owner="alice",
                    name="testdb",
                ),
                yandex.MdbPostgresqlClusterDatabaseArgs(
                    owner="alice",
                    name="testdb2",
                ),
                yandex.MdbPostgresqlClusterDatabaseArgs(
                    owner="bob",
                    name="testdb1",
                    extensions=[yandex.MdbPostgresqlClusterDatabaseExtensionArgs(
                        name="postgis",
                    )],
                ),
            ])
        index_vpc_subnet_vpc_subnet = yandex.VpcSubnet("index/vpcSubnetVpcSubnet",
            zone="ru-central1-b",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.2.0.0/24"])
        yandex_index_vpc_subnet_vpc_subnet = yandex.VpcSubnet("yandexIndex/vpcSubnetVpcSubnet",
            zone="ru-central1-c",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.3.0.0/24"])
        ```
        ## postresql config

        More information about config:
        * https://www.postgresql.org/docs/current/runtime-config-connection.html
        * https://www.postgresql.org/docs/current/runtime-config-resource.html
        * https://www.postgresql.org/docs/current/runtime-config-wal.html
        * https://www.postgresql.org/docs/current/runtime-config-query.html
        * https://www.postgresql.org/docs/current/runtime-config-logging.html
        * https://www.postgresql.org/docs/current/runtime-config-autovacuum.html
        * https://www.postgresql.org/docs/current/runtime-config-client.html
        * https://www.postgresql.org/docs/current/runtime-config-locks.html
        * https://www.postgresql.org/docs/current/runtime-config-compatible.html

        * `shared_preload_libraries` override if not set. One of:
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
        * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * NO value

        Other are not owweride if not set.

        ### Postgresql 13 config
        * `archive_timeout` integer

        * `array_nulls` boolean

        * `auto_explain_log_analyze` boolean

        * `auto_explain_log_buffers` boolean

        * `auto_explain_log_min_duration` integer

        * `auto_explain_log_nested_statements` boolean

        * `auto_explain_log_timing` boolean

        * `auto_explain_log_triggers` boolean

        * `auto_explain_log_verbose` boolean

        * `auto_explain_sample_rate` float

        * `autovacuum_analyze_scale_factor` float

        * `autovacuum_max_workers` integer

        * `autovacuum_naptime` integer

        * `autovacuum_vacuum_cost_delay` integer

        * `autovacuum_vacuum_cost_limit` integer

        * `autovacuum_vacuum_insert_scale_factor` float

        * `autovacuum_vacuum_insert_threshold` integer

        * `autovacuum_vacuum_scale_factor` float

        * `autovacuum_work_mem` integer

        * `backend_flush_after` integer

        * `backslash_quote` one of:
          - 0: "BACKSLASH_QUOTE_UNSPECIFIED"
          - 1: "BACKSLASH_QUOTE"
          - 2: "BACKSLASH_QUOTE_ON"
          - 3: "BACKSLASH_QUOTE_OFF"
          - 4: "BACKSLASH_QUOTE_SAFE_ENCODING"

        * `bgwriter_delay` integer

        * `bgwriter_flush_after` integer

        * `bgwriter_lru_maxpages` integer

        * `bgwriter_lru_multiplier` float

        * `bytea_output` one of:
          - 0: "BYTEA_OUTPUT_UNSPECIFIED"
          - 1: "BYTEA_OUTPUT_HEX"
          - 2: "BYTEA_OUTPUT_ESCAPED"

        * `checkpoint_completion_target` float

        * `checkpoint_flush_after` integer

        * `checkpoint_timeout` integer

        * `client_min_messages` one of:
          - 0: "LOG_LEVEL_UNSPECIFIED"
          - 1: "LOG_LEVEL_DEBUG5"
          - 2: "LOG_LEVEL_DEBUG4"
          - 3: "LOG_LEVEL_DEBUG3"
          - 4: "LOG_LEVEL_DEBUG2"
          - 5: "LOG_LEVEL_DEBUG1"
          - 6: "LOG_LEVEL_LOG"
          - 7: "LOG_LEVEL_NOTICE"
          - 8: "LOG_LEVEL_WARNING"
          - 9: "LOG_LEVEL_ERROR"
          - 10: "LOG_LEVEL_FATAL"
          - 11: "LOG_LEVEL_PANIC"

        * `constraint_exclusion` one of:
          - 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
          - 1: "CONSTRAINT_EXCLUSION_ON"
          - 2: "CONSTRAINT_EXCLUSION_OFF"
          - 3: "CONSTRAINT_EXCLUSION_PARTITION"

        * `cursor_tuple_fraction` float

        * `deadlock_timeout` integer

        * `default_statistics_target` integer

        * `default_transaction_isolation` one of:
          - 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
          - 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
          - 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
          - 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
          - 4: "TRANSACTION_ISOLATION_SERIALIZABLE"

        * `default_transaction_read_only` boolean

        * `default_with_oids` boolean

        * `effective_cache_size` integer

        * `effective_io_concurrency` integer

        * `enable_bitmapscan` boolean

        * `enable_hashagg` boolean

        * `enable_hashjoin` boolean

        * `enable_incremental_sort` boolean

        * `enable_indexonlyscan` boolean

        * `enable_indexscan` boolean

        * `enable_material` boolean

        * `enable_mergejoin` boolean

        * `enable_nestloop` boolean

        * `enable_parallel_append` boolean

        * `enable_parallel_hash` boolean

        * `enable_partition_pruning` boolean

        * `enable_partitionwise_aggregate` boolean

        * `enable_partitionwise_join` boolean

        * `enable_seqscan` boolean

        * `enable_sort` boolean

        * `enable_tidscan` boolean

        * `escape_string_warning` boolean

        * `exit_on_error` boolean

        * `force_parallel_mode` one of:
          - 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
          - 1: "FORCE_PARALLEL_MODE_ON"
          - 2: "FORCE_PARALLEL_MODE_OFF"
          - 3: "FORCE_PARALLEL_MODE_REGRESS"

        * `from_collapse_limit` integer

        * `gin_pending_list_limit` integer

        * `hash_mem_multiplier` float

        * `idle_in_transaction_session_timeout` integer

        * `jit` boolean

        * `join_collapse_limit` integer

        * `lo_compat_privileges` boolean

        * `lock_timeout` integer

        * `log_checkpoints` boolean

        * `log_connections` boolean

        * `log_disconnections` boolean

        * `log_duration` boolean

        * `log_error_verbosity` one of:
          - 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
          - 1: "LOG_ERROR_VERBOSITY_TERSE"
          - 2: "LOG_ERROR_VERBOSITY_DEFAULT"
          - 3: "LOG_ERROR_VERBOSITY_VERBOSE"

        * `log_lock_waits` boolean

        * `log_min_duration_sample` integer

        * `log_min_duration_statement` integer

        * `log_min_error_statement` one of:
          - 0: "LOG_LEVEL_UNSPECIFIED"
          - 1: "LOG_LEVEL_DEBUG5"
          - 2: "LOG_LEVEL_DEBUG4"
          - 3: "LOG_LEVEL_DEBUG3"
          - 4: "LOG_LEVEL_DEBUG2"
          - 5: "LOG_LEVEL_DEBUG1"
          - 6: "LOG_LEVEL_LOG"
          - 7: "LOG_LEVEL_NOTICE"
          - 8: "LOG_LEVEL_WARNING"
          - 9: "LOG_LEVEL_ERROR"
          - 10: "LOG_LEVEL_FATAL"
          - 11: "LOG_LEVEL_PANIC"

        * `log_min_messages` one of:
          - 0: "LOG_LEVEL_UNSPECIFIED"
          - 1: "LOG_LEVEL_DEBUG5"
          - 2: "LOG_LEVEL_DEBUG4"
          - 3: "LOG_LEVEL_DEBUG3"
          - 4: "LOG_LEVEL_DEBUG2"
          - 5: "LOG_LEVEL_DEBUG1"
          - 6: "LOG_LEVEL_LOG"
          - 7: "LOG_LEVEL_NOTICE"
          - 8: "LOG_LEVEL_WARNING"
          - 9: "LOG_LEVEL_ERROR"
          - 10: "LOG_LEVEL_FATAL"
          - 11: "LOG_LEVEL_PANIC"

        * `log_parameter_max_length` integer

        * `log_parameter_max_length_on_error` integer

        * `log_statement` one of:
          - 0: "LOG_STATEMENT_UNSPECIFIED"
          - 1: "LOG_STATEMENT_NONE"
          - 2: "LOG_STATEMENT_DDL"
          - 3: "LOG_STATEMENT_MOD"
          - 4: "LOG_STATEMENT_ALL"

        * `log_statement_sample_rate` float

        * `log_temp_files` integer

        * `log_transaction_sample_rate` float

        * `logical_decoding_work_mem` integer

        * `maintenance_io_concurrency` integer

        * `maintenance_work_mem` integer

        * `max_connections` integer

        * `max_locks_per_transaction` integer

        * `max_parallel_maintenance_workers` integer

        * `max_parallel_workers` integer

        * `max_parallel_workers_per_gather` integer

        * `max_pred_locks_per_transaction` integer

        * `max_prepared_transactions` integer

        * `max_slot_wal_keep_size` integer

        * `max_standby_streaming_delay` integer

        * `max_wal_size` integer

        * `max_worker_processes` integer

        * `min_wal_size` integer

        * `old_snapshot_threshold` integer

        * `operator_precedence_warning` boolean

        * `parallel_leader_participation` boolean

        * `pg_hint_plan_debug_print` one of:
          - 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
          - 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
          - 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
          - 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
          - 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"

        * `pg_hint_plan_enable_hint` boolean

        * `pg_hint_plan_enable_hint_table` boolean

        * `pg_hint_plan_message_level` one of:
          - 0: "LOG_LEVEL_UNSPECIFIED"
          - 1: "LOG_LEVEL_DEBUG5"
          - 2: "LOG_LEVEL_DEBUG4"
          - 3: "LOG_LEVEL_DEBUG3"
          - 4: "LOG_LEVEL_DEBUG2"
          - 5: "LOG_LEVEL_DEBUG1"
          - 6: "LOG_LEVEL_LOG"
          - 7: "LOG_LEVEL_NOTICE"
          - 8: "LOG_LEVEL_WARNING"
          - 9: "LOG_LEVEL_ERROR"
          - 10: "LOG_LEVEL_FATAL"
          - 11: "LOG_LEVEL_PANIC"

        * `plan_cache_mode` one of:
          - 0: "PLAN_CACHE_MODE_UNSPECIFIED"
          - 1: "PLAN_CACHE_MODE_AUTO"
          - 2: "PLAN_CACHE_MODE_FORCE_CUSTOM_PLAN"
          - 3: "PLAN_CACHE_MODE_FORCE_GENERIC_PLAN"

        * `quote_all_identifiers` boolean

        * `random_page_cost` float

        * `row_security` boolean

        * `search_path` text

        * `seq_page_cost` float

        * `shared_buffers` integer

        * `standard_conforming_strings` boolean

        * `statement_timeout` integer

        * `synchronize_seqscans` boolean

        * `synchronous_commit` one of:
          - 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
          - 1: "SYNCHRONOUS_COMMIT_ON"
          - 2: "SYNCHRONOUS_COMMIT_OFF"
          - 3: "SYNCHRONOUS_COMMIT_LOCAL"
          - 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
          - 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"

        * `temp_buffers` integer

        * `temp_file_limit` integer

        * `timezone` text

        * `track_activity_query_size` integer

        * `transform_null_equals` boolean

        * `vacuum_cleanup_index_scale_factor` float

        * `vacuum_cost_delay` integer

        * `vacuum_cost_limit` integer

        * `vacuum_cost_page_dirty` integer

        * `vacuum_cost_page_hit` integer

        * `vacuum_cost_page_miss` integer

        * `wal_keep_size` integer

        * `wal_level` one of:
          - 0: "WAL_LEVEL_UNSPECIFIED"
          - 1: "WAL_LEVEL_REPLICA"
          - 2: "WAL_LEVEL_LOGICAL"

        * `work_mem` integer

        * `xmlbinary` one of:
          - 0: "XML_BINARY_UNSPECIFIED"
          - 1: "XML_BINARY_BASE64"
          - 2: "XML_BINARY_HEX"

        * `xmloption` one of:
          - 0: "XML_OPTION_UNSPECIFIED"
          - 1: "XML_OPTION_DOCUMENT"
          - 2: "XML_OPTION_CONTENT"

        ### Postgresql 12 config

        * `archive_timeout` integer

        * `array_nulls` boolean

        * `auto_explain_log_analyze` boolean

        * `auto_explain_log_buffers` boolean

        * `auto_explain_log_min_duration` integer

        * `auto_explain_log_nested_statements` boolean

        * `auto_explain_log_timing` boolean

        * `auto_explain_log_triggers` boolean

        * `auto_explain_log_verbose` boolean

        * `auto_explain_sample_rate` float

        * `autovacuum_analyze_scale_factor` float

        * `autovacuum_max_workers` integer

        * `autovacuum_naptime` integer

        * `autovacuum_vacuum_cost_delay` integer

        * `autovacuum_vacuum_cost_limit` integer

        * `autovacuum_vacuum_scale_factor` float

        * `autovacuum_work_mem` integer

        * `backend_flush_after` integer

        * `backslash_quote` one of:
        * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
        * * 1: "BACKSLASH_QUOTE"
        * * 2: "BACKSLASH_QUOTE_ON"
        * * 3: "BACKSLASH_QUOTE_OFF"
        * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"

        * `bgwriter_delay` integer

        * `bgwriter_flush_after` integer

        * `bgwriter_lru_maxpages` integer

        * `bgwriter_lru_multiplier` float

        * `bytea_output` one of:
        * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
        * * 1: "BYTEA_OUTPUT_HEX"
        * * 2: "BYTEA_OUTPUT_ESCAPED"

        * `checkpoint_completion_target` float

        * `checkpoint_flush_after` integer

        * `checkpoint_timeout` integer

        * `client_min_messages` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `constraint_exclusion` one of:
        * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
        * * 1: "CONSTRAINT_EXCLUSION_ON"
        * * 2: "CONSTRAINT_EXCLUSION_OFF"
        * * 3: "CONSTRAINT_EXCLUSION_PARTITION"

        * `cursor_tuple_fraction` float

        * `deadlock_timeout` integer

        * `default_statistics_target` integer

        * `default_transaction_isolation` one of:
        * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
        * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
        * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
        * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
        * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"

        * `default_transaction_read_only` boolean

        * `default_with_oids` boolean

        * `effective_cache_size` integer

        * `effective_io_concurrency` integer

        * `enable_bitmapscan` boolean

        * `enable_hashagg` boolean

        * `enable_hashjoin` boolean

        * `enable_indexonlyscan` boolean

        * `enable_indexscan` boolean

        * `enable_material` boolean

        * `enable_mergejoin` boolean

        * `enable_nestloop` boolean

        * `enable_parallel_append` boolean

        * `enable_parallel_hash` boolean

        * `enable_partition_pruning` boolean

        * `enable_partitionwise_aggregate` boolean

        * `enable_partitionwise_join` boolean

        * `enable_seqscan` boolean

        * `enable_sort` boolean

        * `enable_tidscan` boolean

        * `escape_string_warning` boolean

        * `exit_on_error` boolean

        * `force_parallel_mode` one of:
        * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
        * * 1: "FORCE_PARALLEL_MODE_ON"
        * * 2: "FORCE_PARALLEL_MODE_OFF"
        * * 3: "FORCE_PARALLEL_MODE_REGRESS"

        * `from_collapse_limit` integer

        * `gin_pending_list_limit` integer

        * `idle_in_transaction_session_timeout` integer

        * `jit` boolean

        * `join_collapse_limit` integer

        * `lo_compat_privileges` boolean

        * `lock_timeout` integer

        * `log_checkpoints` boolean

        * `log_connections` boolean

        * `log_disconnections` boolean

        * `log_duration` boolean

        * `log_error_verbosity` one of:
        * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
        * * 1: "LOG_ERROR_VERBOSITY_TERSE"
        * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
        * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"

        * `log_lock_waits` boolean

        * `log_min_duration_statement` integer

        * `log_min_error_statement` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `log_min_messages` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `log_statement` one of:
        * * 0: "LOG_STATEMENT_UNSPECIFIED"
        * * 1: "LOG_STATEMENT_NONE"
        * * 2: "LOG_STATEMENT_DDL"
        * * 3: "LOG_STATEMENT_MOD"
        * * 4: "LOG_STATEMENT_ALL"

        * `log_temp_files` integer

        * `log_transaction_sample_rate` float

        * `maintenance_work_mem` integer

        * `max_connections` integer

        * `max_locks_per_transaction` integer

        * `max_parallel_maintenance_workers` integer

        * `max_parallel_workers` integer

        * `max_parallel_workers_per_gather` integer

        * `max_pred_locks_per_transaction` integer

        * `max_prepared_transactions` integer

        * `max_standby_streaming_delay` integer

        * `max_wal_size` integer

        * `max_worker_processes` integer

        * `min_wal_size` integer

        * `old_snapshot_threshold` integer

        * `operator_precedence_warning` boolean

        * `parallel_leader_participation` boolean

        * `pg_hint_plan_debug_print` one of:
        * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
        * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
        * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
        * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
        * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"

        * `pg_hint_plan_enable_hint` boolean

        * `pg_hint_plan_enable_hint_table` boolean

        * `pg_hint_plan_message_level` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `plan_cache_mode` one of:
        * * 0: "PLAN_CACHE_MODE_UNSPECIFIED"
        * * 1: "PLAN_CACHE_MODE_AUTO"
        * * 2: "PLAN_CACHE_MODE_FORCE_CUSTOM_PLAN"
        * * 3: "PLAN_CACHE_MODE_FORCE_GENERIC_PLAN"

        * `quote_all_identifiers` boolean

        * `random_page_cost` float

        * `row_security` boolean

        * `search_path` text

        * `seq_page_cost` float

        * `shared_buffers` integer

        * `shared_preload_libraries` override if not set. One of:
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
        * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * NO value

        * `standard_conforming_strings` boolean

        * `statement_timeout` integer

        * `synchronize_seqscans` boolean

        * `synchronous_commit` one of:
        * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
        * * 1: "SYNCHRONOUS_COMMIT_ON"
        * * 2: "SYNCHRONOUS_COMMIT_OFF"
        * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
        * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
        * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"

        * `temp_buffers` integer

        * `temp_file_limit` integer

        * `timezone` text

        * `track_activity_query_size` integer

        * `transform_null_equals` boolean

        * `vacuum_cleanup_index_scale_factor` float

        * `vacuum_cost_delay` integer

        * `vacuum_cost_limit` integer

        * `vacuum_cost_page_dirty` integer

        * `vacuum_cost_page_hit` integer

        * `vacuum_cost_page_miss` integer

        * `wal_level` one of:
        * * 0: "WAL_LEVEL_UNSPECIFIED"
        * * 1: "WAL_LEVEL_REPLICA"
        * * 2: "WAL_LEVEL_LOGICAL"

        * `work_mem` integer

        * `xmlbinary` one of:
        * * 0: "XML_BINARY_UNSPECIFIED"
        * * 1: "XML_BINARY_BASE64"
        * * 2: "XML_BINARY_HEX"

        * `xmloption` one of:
        * * 0: "XML_OPTION_UNSPECIFIED"
        * * 1: "XML_OPTION_DOCUMENT"
        * * 2: "XML_OPTION_CONTENT"

        ### Postgresql 11 config

        * `archive_timeout` integer

        * `array_nulls` boolean

        * `auto_explain_log_analyze` boolean

        * `auto_explain_log_buffers` boolean

        * `auto_explain_log_min_duration` integer

        * `auto_explain_log_nested_statements` boolean

        * `auto_explain_log_timing` boolean

        * `auto_explain_log_triggers` boolean

        * `auto_explain_log_verbose` boolean

        * `auto_explain_sample_rate` float

        * `autovacuum_analyze_scale_factor` float

        * `autovacuum_max_workers` integer

        * `autovacuum_naptime` integer

        * `autovacuum_vacuum_cost_delay` integer

        * `autovacuum_vacuum_cost_limit` integer

        * `autovacuum_vacuum_scale_factor` float

        * `autovacuum_work_mem` integer

        * `backend_flush_after` integer

        * `backslash_quote` one of:
        * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
        * * 1: "BACKSLASH_QUOTE"
        * * 2: "BACKSLASH_QUOTE_ON"
        * * 3: "BACKSLASH_QUOTE_OFF"
        * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"

        * `bgwriter_delay` integer

        * `bgwriter_flush_after` integer

        * `bgwriter_lru_maxpages` integer

        * `bgwriter_lru_multiplier` float

        * `bytea_output` one of:
        * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
        * * 1: "BYTEA_OUTPUT_HEX"
        * * 2: "BYTEA_OUTPUT_ESCAPED"

        * `checkpoint_completion_target` float

        * `checkpoint_flush_after` integer

        * `checkpoint_timeout` integer

        * `client_min_messages` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `constraint_exclusion` one of:
        * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
        * * 1: "CONSTRAINT_EXCLUSION_ON"
        * * 2: "CONSTRAINT_EXCLUSION_OFF"
        * * 3: "CONSTRAINT_EXCLUSION_PARTITION"

        * `cursor_tuple_fraction` float

        * `deadlock_timeout` integer

        * `default_statistics_target` integer

        * `default_transaction_isolation` one of:
        * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
        * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
        * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
        * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
        * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"

        * `default_transaction_read_only` boolean

        * `default_with_oids` boolean

        * `effective_cache_size` integer

        * `effective_io_concurrency` integer

        * `enable_bitmapscan` boolean

        * `enable_hashagg` boolean

        * `enable_hashjoin` boolean

        * `enable_indexonlyscan` boolean

        * `enable_indexscan` boolean

        * `enable_material` boolean

        * `enable_mergejoin` boolean

        * `enable_nestloop` boolean

        * `enable_parallel_append` boolean

        * `enable_parallel_hash` boolean

        * `enable_partition_pruning` boolean

        * `enable_partitionwise_aggregate` boolean

        * `enable_partitionwise_join` boolean

        * `enable_seqscan` boolean

        * `enable_sort` boolean

        * `enable_tidscan` boolean

        * `escape_string_warning` boolean

        * `exit_on_error` boolean

        * `force_parallel_mode` one of:
        * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
        * * 1: "FORCE_PARALLEL_MODE_ON"
        * * 2: "FORCE_PARALLEL_MODE_OFF"
        * * 3: "FORCE_PARALLEL_MODE_REGRESS"

        * `from_collapse_limit` integer

        * `gin_pending_list_limit` integer

        * `idle_in_transaction_session_timeout` integer

        * `jit` boolean

        * `join_collapse_limit` integer

        * `lo_compat_privileges` boolean

        * `lock_timeout` integer

        * `log_checkpoints` boolean

        * `log_connections` boolean

        * `log_disconnections` boolean

        * `log_duration` boolean

        * `log_error_verbosity` one of:
        * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
        * * 1: "LOG_ERROR_VERBOSITY_TERSE"
        * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
        * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"

        * `log_lock_waits` boolean

        * `log_min_duration_statement` integer

        * `log_min_error_statement` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `log_min_messages` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `log_statement` one of:
        * * 0: "LOG_STATEMENT_UNSPECIFIED"
        * * 1: "LOG_STATEMENT_NONE"
        * * 2: "LOG_STATEMENT_DDL"
        * * 3: "LOG_STATEMENT_MOD"
        * * 4: "LOG_STATEMENT_ALL"

        * `log_temp_files` integer

        * `maintenance_work_mem` integer

        * `max_connections` integer

        * `max_locks_per_transaction` integer

        * `max_parallel_maintenance_workers` integer

        * `max_parallel_workers` integer

        * `max_parallel_workers_per_gather` integer

        * `max_pred_locks_per_transaction` integer

        * `max_prepared_transactions` integer

        * `max_standby_streaming_delay` integer

        * `max_wal_size` integer

        * `max_worker_processes` integer

        * `min_wal_size` integer

        * `old_snapshot_threshold` integer

        * `operator_precedence_warning` boolean

        * `parallel_leader_participation` boolean

        * `pg_hint_plan_debug_print` one of:
        * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
        * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
        * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
        * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
        * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"

        * `pg_hint_plan_enable_hint` boolean

        * `pg_hint_plan_enable_hint_table` boolean

        * `pg_hint_plan_message_level` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `quote_all_identifiers` boolean

        * `random_page_cost` float

        * `row_security` boolean

        * `search_path` text

        * `seq_page_cost` float

        * `shared_buffers` integer

        * `shared_preload_libraries` override if not set. One of:
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
        * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * NO value

        * `standard_conforming_strings` boolean

        * `statement_timeout` integer

        * `synchronize_seqscans` boolean

        * `synchronous_commit` one of:
        * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
        * * 1: "SYNCHRONOUS_COMMIT_ON"
        * * 2: "SYNCHRONOUS_COMMIT_OFF"
        * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
        * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
        * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"

        * `temp_buffers` integer

        * `temp_file_limit` integer

        * `timezone` text

        * `track_activity_query_size` integer

        * `transform_null_equals` boolean

        * `vacuum_cleanup_index_scale_factor` float

        * `vacuum_cost_delay` integer

        * `vacuum_cost_limit` integer

        * `vacuum_cost_page_dirty` integer

        * `vacuum_cost_page_hit` integer

        * `vacuum_cost_page_miss` integer

        * `wal_level` one of:
        * * 0: "WAL_LEVEL_UNSPECIFIED"
        * * 1: "WAL_LEVEL_REPLICA"
        * * 2: "WAL_LEVEL_LOGICAL"

        * `work_mem` integer

        * `xmlbinary` one of:
        * * 0: "XML_BINARY_UNSPECIFIED"
        * * 1: "XML_BINARY_BASE64"
        * * 2: "XML_BINARY_HEX"

        * `xmloption` one of:
        * * 0: "XML_OPTION_UNSPECIFIED"
        * * 1: "XML_OPTION_DOCUMENT"
        * * 2: "XML_OPTION_CONTENT"

        ### Postgresql 10 config

        * `archive_timeout` integer

        * `array_nulls` boolean

        * `auto_explain_log_analyze` boolean

        * `auto_explain_log_buffers` boolean

        * `auto_explain_log_min_duration` integer

        * `auto_explain_log_nested_statements` boolean

        * `auto_explain_log_timing` boolean

        * `auto_explain_log_triggers` boolean

        * `auto_explain_log_verbose` boolean

        * `auto_explain_sample_rate` float

        * `autovacuum_analyze_scale_factor` float

        * `autovacuum_max_workers` integer

        * `autovacuum_naptime` integer

        * `autovacuum_vacuum_cost_delay` integer

        * `autovacuum_vacuum_cost_limit` integer

        * `autovacuum_vacuum_scale_factor` float

        * `autovacuum_work_mem` integer

        * `backend_flush_after` integer

        * `backslash_quote` one of:
        * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
        * * 1: "BACKSLASH_QUOTE"
        * * 2: "BACKSLASH_QUOTE_ON"
        * * 3: "BACKSLASH_QUOTE_OFF"
        * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"

        * `bgwriter_delay` integer

        * `bgwriter_flush_after` integer

        * `bgwriter_lru_maxpages` integer

        * `bgwriter_lru_multiplier` float

        * `bytea_output` one of:
        * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
        * * 1: "BYTEA_OUTPUT_HEX"
        * * 2: "BYTEA_OUTPUT_ESCAPED"

        * `checkpoint_completion_target` float

        * `checkpoint_flush_after` integer

        * `checkpoint_timeout` integer

        * `client_min_messages` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `constraint_exclusion` one of:
        * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
        * * 1: "CONSTRAINT_EXCLUSION_ON"
        * * 2: "CONSTRAINT_EXCLUSION_OFF"
        * * 3: "CONSTRAINT_EXCLUSION_PARTITION"

        * `cursor_tuple_fraction` float

        * `deadlock_timeout` integer

        * `default_statistics_target` integer

        * `default_transaction_isolation` one of:
        * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
        * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
        * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
        * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
        * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"

        * `default_transaction_read_only` boolean

        * `default_with_oids` boolean

        * `effective_cache_size` integer

        * `effective_io_concurrency` integer

        * `enable_bitmapscan` boolean

        * `enable_hashagg` boolean

        * `enable_hashjoin` boolean

        * `enable_indexonlyscan` boolean

        * `enable_indexscan` boolean

        * `enable_material` boolean

        * `enable_mergejoin` boolean

        * `enable_nestloop` boolean

        * `enable_seqscan` boolean

        * `enable_sort` boolean

        * `enable_tidscan` boolean

        * `escape_string_warning` boolean

        * `exit_on_error` boolean

        * `force_parallel_mode` one of:
        * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
        * * 1: "FORCE_PARALLEL_MODE_ON"
        * * 2: "FORCE_PARALLEL_MODE_OFF"
        * * 3: "FORCE_PARALLEL_MODE_REGRESS"

        * `from_collapse_limit` integer

        * `gin_pending_list_limit` integer

        * `idle_in_transaction_session_timeout` integer

        * `join_collapse_limit` integer

        * `lo_compat_privileges` boolean

        * `lock_timeout` integer

        * `log_checkpoints` boolean

        * `log_connections` boolean

        * `log_disconnections` boolean

        * `log_duration` boolean

        * `log_error_verbosity` one of:
        * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
        * * 1: "LOG_ERROR_VERBOSITY_TERSE"
        * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
        * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"

        * `log_lock_waits` boolean

        * `log_min_duration_statement` integer

        * `log_min_error_statement` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `log_min_messages` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `log_statement` one of:
        * * 0: "LOG_STATEMENT_UNSPECIFIED"
        * * 1: "LOG_STATEMENT_NONE"
        * * 2: "LOG_STATEMENT_DDL"
        * * 3: "LOG_STATEMENT_MOD"
        * * 4: "LOG_STATEMENT_ALL"

        * `log_temp_files` integer

        * `maintenance_work_mem` integer

        * `max_connections` integer

        * `max_locks_per_transaction` integer

        * `max_parallel_workers` integer

        * `max_parallel_workers_per_gather` integer

        * `max_pred_locks_per_transaction` integer

        * `max_prepared_transactions` integer

        * `max_standby_streaming_delay` integer

        * `max_wal_size` integer

        * `max_worker_processes` integer

        * `min_wal_size` integer

        * `old_snapshot_threshold` integer

        * `operator_precedence_warning` boolean

        * `pg_hint_plan_debug_print` one of:
        * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
        * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
        * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
        * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
        * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"

        * `pg_hint_plan_enable_hint` boolean

        * `pg_hint_plan_enable_hint_table` boolean

        * `pg_hint_plan_message_level` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `quote_all_identifiers` boolean

        * `random_page_cost` float

        * `replacement_sort_tuples` integer

        * `row_security` boolean

        * `search_path` text

        * `seq_page_cost` float

        * `shared_buffers` integer

        * `shared_preload_libraries` override if not set. One of:
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
        * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * NO value

        * `standard_conforming_strings` boolean

        * `statement_timeout` integer

        * `synchronize_seqscans` boolean

        * `synchronous_commit` one of:
        * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
        * * 1: "SYNCHRONOUS_COMMIT_ON"
        * * 2: "SYNCHRONOUS_COMMIT_OFF"
        * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
        * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
        * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"

        * `temp_buffers` integer

        * `temp_file_limit` integer

        * `timezone` text

        * `track_activity_query_size` integer

        * `transform_null_equals` boolean

        * `vacuum_cost_delay` integer

        * `vacuum_cost_limit` integer

        * `vacuum_cost_page_dirty` integer

        * `vacuum_cost_page_hit` integer

        * `vacuum_cost_page_miss` integer

        * `wal_level` one of:
        * * 0: "WAL_LEVEL_UNSPECIFIED"
        * * 1: "WAL_LEVEL_REPLICA"
        * * 2: "WAL_LEVEL_LOGICAL"

        * `work_mem` integer

        * `xmlbinary` one of:
        * * 0: "XML_BINARY_UNSPECIFIED"
        * * 1: "XML_BINARY_BASE64"
        * * 2: "XML_BINARY_HEX"

        * `xmloption` one of:
        * * 0: "XML_OPTION_UNSPECIFIED"
        * * 1: "XML_OPTION_DOCUMENT"
        * * 2: "XML_OPTION_CONTENT"

        ## Import

        A cluster can be imported using the `id` of the resource, e.g.

        ```sh
         $ pulumi import yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster foo cluster_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['MdbPostgresqlClusterConfigArgs']] config: Configuration of the PostgreSQL cluster. The structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterDatabaseArgs']]]] databases: A database of the PostgreSQL cluster. The structure is documented below.
        :param pulumi.Input[str] description: Description of the PostgreSQL cluster.
        :param pulumi.Input[str] environment: Deployment environment of the PostgreSQL cluster.
        :param pulumi.Input[str] folder_id: The ID of the folder that the resource belongs to. If it is unset, the default provider `folder_id` is used for create.
        :param pulumi.Input[str] host_master_name: It sets name of master host. It works only when `host.name` is set.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterHostArgs']]]] hosts: A host of the PostgreSQL cluster. The structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to the PostgreSQL cluster.
        :param pulumi.Input[str] name: Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replication_source_name` parameter.
               Also, this field is used to select which host will be selected as a master host. Please see `host_master_name` parameter.
        :param pulumi.Input[str] network_id: ID of the network, to which the PostgreSQL cluster belongs.
        :param pulumi.Input[pulumi.InputType['MdbPostgresqlClusterRestoreArgs']] restore: The cluster will be created from the specified backup. The structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: A set of ids of security groups assigned to hosts of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterUserArgs']]]] users: A user of the PostgreSQL cluster. The structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MdbPostgresqlClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a PostgreSQL cluster within the Yandex.Cloud. For more information, see
        [the official documentation](https://cloud.yandex.com/docs/managed-postgresql/).

        ## Example Usage

        Example of creating a Single Node PostgreSQL.

        ```python
        import pulumi
        import pulumi_yandex as yandex

        foo_vpc_network = yandex.VpcNetwork("fooVpcNetwork")
        foo_vpc_subnet = yandex.VpcSubnet("fooVpcSubnet",
            zone="ru-central1-a",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.5.0.0/24"])
        foo_mdb_postgresql_cluster = yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster",
            environment="PRESTABLE",
            network_id=foo_vpc_network.id,
            config=yandex.MdbPostgresqlClusterConfigArgs(
                version="12",
                resources=yandex.MdbPostgresqlClusterConfigResourcesArgs(
                    resource_preset_id="s2.micro",
                    disk_type_id="network-ssd",
                    disk_size=16,
                ),
                postgresql_config={
                    "max_connections": "395",
                    "enable_parallel_hash": "true",
                    "vacuum_cleanup_index_scale_factor": "0.2",
                    "autovacuum_vacuum_scale_factor": "0.34",
                    "default_transaction_isolation": "TRANSACTION_ISOLATION_READ_COMMITTED",
                    "shared_preload_libraries": "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN",
                },
            ),
            databases=[yandex.MdbPostgresqlClusterDatabaseArgs(
                name="db_name",
                owner="user_name",
            )],
            users=[yandex.MdbPostgresqlClusterUserArgs(
                name="user_name",
                password="your_password",
                conn_limit=50,
                permissions=[yandex.MdbPostgresqlClusterUserPermissionArgs(
                    database_name="db_name",
                )],
                settings={
                    "default_transaction_isolation": "read committed",
                    "log_min_duration_statement": "5000",
                },
            )],
            hosts=[yandex.MdbPostgresqlClusterHostArgs(
                zone="ru-central1-a",
                subnet_id=foo_vpc_subnet.id,
            )])
        ```

        Example of creating a High-Availability (HA) PostgreSQL Cluster.

        ```python
        import pulumi
        import pulumi_yandex as yandex

        foo_vpc_network = yandex.VpcNetwork("fooVpcNetwork")
        foo_vpc_subnet = yandex.VpcSubnet("fooVpcSubnet",
            zone="ru-central1-a",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.1.0.0/24"])
        bar = yandex.VpcSubnet("bar",
            zone="ru-central1-b",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.2.0.0/24"])
        foo_mdb_postgresql_cluster = yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster",
            environment="PRESTABLE",
            network_id=foo_vpc_network.id,
            config=yandex.MdbPostgresqlClusterConfigArgs(
                version="12",
                resources=yandex.MdbPostgresqlClusterConfigResourcesArgs(
                    resource_preset_id="s2.micro",
                    disk_type_id="network-ssd",
                    disk_size=16,
                ),
            ),
            databases=[yandex.MdbPostgresqlClusterDatabaseArgs(
                name="db_name",
                owner="user_name",
            )],
            users=[yandex.MdbPostgresqlClusterUserArgs(
                name="user_name",
                password="password",
                permissions=[yandex.MdbPostgresqlClusterUserPermissionArgs(
                    database_name="db_name",
                )],
            )],
            hosts=[
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-a",
                    subnet_id=foo_vpc_subnet.id,
                ),
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-b",
                    subnet_id=bar.id,
                ),
            ])
        ```

        Example of creating a High-Availability (HA) PostgreSQL Cluster with priority and set master.

        ```python
        import pulumi
        import pulumi_yandex as yandex

        foo_vpc_network = yandex.VpcNetwork("fooVpcNetwork")
        vpc_subnet = yandex.VpcSubnet("vpcSubnet",
            zone="ru-central1-c",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.3.0.0/24"])
        foo_mdb_postgresql_cluster = yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster",
            description="test High-Availability (HA) PostgreSQL Cluster with priority and set master",
            environment="PRESTABLE",
            network_id=foo_vpc_network.id,
            host_master_name="host_name_c_2",
            config=yandex.MdbPostgresqlClusterConfigArgs(
                version="12",
                resources=yandex.MdbPostgresqlClusterConfigResourcesArgs(
                    resource_preset_id="s2.micro",
                    disk_size=10,
                    disk_type_id="network-ssd",
                ),
            ),
            users=[yandex.MdbPostgresqlClusterUserArgs(
                name="alice",
                password="mysecurepassword",
                permissions=[yandex.MdbPostgresqlClusterUserPermissionArgs(
                    database_name="testdb",
                )],
            )],
            hosts=[
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-a",
                    name="host_name_a",
                    priority=2,
                    subnet_id=index / vpc_subnet_vpc_subnet["id"],
                ),
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-b",
                    name="host_name_b",
                    replication_source_name="host_name_c",
                    subnet_id=yandex_index / vpc_subnet_vpc_subnet["id"],
                ),
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-c",
                    name="host_name_c",
                    subnet_id=vpc_subnet.id,
                ),
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-c",
                    name="host_name_c_2",
                    subnet_id=vpc_subnet.id,
                ),
            ],
            databases=[yandex.MdbPostgresqlClusterDatabaseArgs(
                owner="alice",
                name="testdb",
            )])
        index_vpc_subnet_vpc_subnet = yandex.VpcSubnet("index/vpcSubnetVpcSubnet",
            zone="ru-central1-a",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.1.0.0/24"])
        yandex_index_vpc_subnet_vpc_subnet = yandex.VpcSubnet("yandexIndex/vpcSubnetVpcSubnet",
            zone="ru-central1-b",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.2.0.0/24"])
        ```

        Example of creating a Single Node PostgreSQL from backup.

        ```python
        import pulumi
        import pulumi_yandex as yandex

        foo_vpc_network = yandex.VpcNetwork("fooVpcNetwork")
        foo_vpc_subnet = yandex.VpcSubnet("fooVpcSubnet",
            zone="ru-central1-a",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.5.0.0/24"])
        foo_mdb_postgresql_cluster = yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster",
            environment="PRESTABLE",
            network_id=foo_vpc_network.id,
            restore=yandex.MdbPostgresqlClusterRestoreArgs(
                backup_id="c9q99999999999999994cm:base_000000010000005F000000B4",
                time="2021-02-11T15:04:05",
            ),
            config=yandex.MdbPostgresqlClusterConfigArgs(
                version="12",
                resources=yandex.MdbPostgresqlClusterConfigResourcesArgs(
                    resource_preset_id="s2.micro",
                    disk_type_id="network-ssd",
                    disk_size=16,
                ),
                postgresql_config={
                    "max_connections": "395",
                    "enable_parallel_hash": "true",
                    "vacuum_cleanup_index_scale_factor": "0.2",
                    "autovacuum_vacuum_scale_factor": "0.34",
                    "default_transaction_isolation": "TRANSACTION_ISOLATION_READ_COMMITTED",
                    "shared_preload_libraries": "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN",
                },
            ),
            databases=[yandex.MdbPostgresqlClusterDatabaseArgs(
                name="db_name",
                owner="user_name",
            )],
            users=[yandex.MdbPostgresqlClusterUserArgs(
                name="user_name",
                password="your_password",
                conn_limit=50,
                permissions=[yandex.MdbPostgresqlClusterUserPermissionArgs(
                    database_name="db_name",
                )],
                settings={
                    "default_transaction_isolation": "read committed",
                    "log_min_duration_statement": "5000",
                },
            )],
            hosts=[yandex.MdbPostgresqlClusterHostArgs(
                zone="ru-central1-a",
                subnet_id=foo_vpc_subnet.id,
            )])
        ```

        Example of creating a High-Availability (HA) PostgreSQL cluster with multiple databases and users.
        ```python
        import pulumi
        import pulumi_random as random
        import pulumi_yandex as yandex

        passwords = []
        for range in [{"value": i} for i in range(0, 2)]:
            passwords.append(random.RandomPassword(f"passwords-{range['value']}",
                length=16,
                special=True))
        pulumi.export("dbInstanceAlicePassword", passwords[0].result)
        pulumi.export("dbInstanceBobPassword", passwords[1].result)
        foo_vpc_network = yandex.VpcNetwork("fooVpcNetwork")
        vpc_subnet = yandex.VpcSubnet("vpcSubnet",
            zone="ru-central1-a",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.1.0.0/24"])
        foo_mdb_postgresql_cluster = yandex.MdbPostgresqlCluster("fooMdbPostgresqlCluster",
            description="Example of multiple databases and users",
            environment="PRESTABLE",
            network_id=foo_vpc_network.id,
            folder_id="b1g24daaaddddffma52u",
            config=yandex.MdbPostgresqlClusterConfigArgs(
                version="13",
                resources=yandex.MdbPostgresqlClusterConfigResourcesArgs(
                    resource_preset_id="s2.micro",
                    disk_size=10,
                    disk_type_id="network-ssd",
                ),
                access=yandex.MdbPostgresqlClusterConfigAccessArgs(
                    web_sql=True,
                ),
                postgresql_config={
                    "max_connections": "395",
                    "enable_parallel_hash": "true",
                    "vacuum_cleanup_index_scale_factor": "0.2",
                    "autovacuum_vacuum_scale_factor": "0.32",
                    "default_transaction_isolation": "TRANSACTION_ISOLATION_READ_UNCOMMITTED",
                    "shared_preload_libraries": "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN",
                },
                pooler_config=yandex.MdbPostgresqlClusterConfigPoolerConfigArgs(
                    pool_discard=True,
                    pooling_mode="SESSION",
                ),
            ),
            users=[
                yandex.MdbPostgresqlClusterUserArgs(
                    name="alice",
                    password=passwords[0].result,
                    conn_limit=10,
                    permissions=[
                        yandex.MdbPostgresqlClusterUserPermissionArgs(
                            database_name="testdb",
                        ),
                        yandex.MdbPostgresqlClusterUserPermissionArgs(
                            database_name="testdb1",
                        ),
                        yandex.MdbPostgresqlClusterUserPermissionArgs(
                            database_name="testdb2",
                        ),
                    ],
                ),
                yandex.MdbPostgresqlClusterUserArgs(
                    name="bob",
                    password=passwords[1].result,
                    permissions=[
                        yandex.MdbPostgresqlClusterUserPermissionArgs(
                            database_name="testdb2",
                        ),
                        yandex.MdbPostgresqlClusterUserPermissionArgs(
                            database_name="testdb1",
                        ),
                    ],
                ),
                yandex.MdbPostgresqlClusterUserArgs(
                    name="chuck",
                    password="123456789",
                    permissions=[yandex.MdbPostgresqlClusterUserPermissionArgs(
                        database_name="testdb",
                    )],
                    grants=[
                        "bob",
                        "alice",
                    ],
                ),
            ],
            hosts=[
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-b",
                    subnet_id=index / vpc_subnet_vpc_subnet["id"],
                ),
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-a",
                    subnet_id=vpc_subnet.id,
                ),
                yandex.MdbPostgresqlClusterHostArgs(
                    zone="ru-central1-c",
                    subnet_id=yandex_index / vpc_subnet_vpc_subnet["id"],
                ),
            ],
            databases=[
                yandex.MdbPostgresqlClusterDatabaseArgs(
                    owner="alice",
                    name="testdb",
                ),
                yandex.MdbPostgresqlClusterDatabaseArgs(
                    owner="alice",
                    name="testdb2",
                ),
                yandex.MdbPostgresqlClusterDatabaseArgs(
                    owner="bob",
                    name="testdb1",
                    extensions=[yandex.MdbPostgresqlClusterDatabaseExtensionArgs(
                        name="postgis",
                    )],
                ),
            ])
        index_vpc_subnet_vpc_subnet = yandex.VpcSubnet("index/vpcSubnetVpcSubnet",
            zone="ru-central1-b",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.2.0.0/24"])
        yandex_index_vpc_subnet_vpc_subnet = yandex.VpcSubnet("yandexIndex/vpcSubnetVpcSubnet",
            zone="ru-central1-c",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.3.0.0/24"])
        ```
        ## postresql config

        More information about config:
        * https://www.postgresql.org/docs/current/runtime-config-connection.html
        * https://www.postgresql.org/docs/current/runtime-config-resource.html
        * https://www.postgresql.org/docs/current/runtime-config-wal.html
        * https://www.postgresql.org/docs/current/runtime-config-query.html
        * https://www.postgresql.org/docs/current/runtime-config-logging.html
        * https://www.postgresql.org/docs/current/runtime-config-autovacuum.html
        * https://www.postgresql.org/docs/current/runtime-config-client.html
        * https://www.postgresql.org/docs/current/runtime-config-locks.html
        * https://www.postgresql.org/docs/current/runtime-config-compatible.html

        * `shared_preload_libraries` override if not set. One of:
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
        * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * NO value

        Other are not owweride if not set.

        ### Postgresql 13 config
        * `archive_timeout` integer

        * `array_nulls` boolean

        * `auto_explain_log_analyze` boolean

        * `auto_explain_log_buffers` boolean

        * `auto_explain_log_min_duration` integer

        * `auto_explain_log_nested_statements` boolean

        * `auto_explain_log_timing` boolean

        * `auto_explain_log_triggers` boolean

        * `auto_explain_log_verbose` boolean

        * `auto_explain_sample_rate` float

        * `autovacuum_analyze_scale_factor` float

        * `autovacuum_max_workers` integer

        * `autovacuum_naptime` integer

        * `autovacuum_vacuum_cost_delay` integer

        * `autovacuum_vacuum_cost_limit` integer

        * `autovacuum_vacuum_insert_scale_factor` float

        * `autovacuum_vacuum_insert_threshold` integer

        * `autovacuum_vacuum_scale_factor` float

        * `autovacuum_work_mem` integer

        * `backend_flush_after` integer

        * `backslash_quote` one of:
          - 0: "BACKSLASH_QUOTE_UNSPECIFIED"
          - 1: "BACKSLASH_QUOTE"
          - 2: "BACKSLASH_QUOTE_ON"
          - 3: "BACKSLASH_QUOTE_OFF"
          - 4: "BACKSLASH_QUOTE_SAFE_ENCODING"

        * `bgwriter_delay` integer

        * `bgwriter_flush_after` integer

        * `bgwriter_lru_maxpages` integer

        * `bgwriter_lru_multiplier` float

        * `bytea_output` one of:
          - 0: "BYTEA_OUTPUT_UNSPECIFIED"
          - 1: "BYTEA_OUTPUT_HEX"
          - 2: "BYTEA_OUTPUT_ESCAPED"

        * `checkpoint_completion_target` float

        * `checkpoint_flush_after` integer

        * `checkpoint_timeout` integer

        * `client_min_messages` one of:
          - 0: "LOG_LEVEL_UNSPECIFIED"
          - 1: "LOG_LEVEL_DEBUG5"
          - 2: "LOG_LEVEL_DEBUG4"
          - 3: "LOG_LEVEL_DEBUG3"
          - 4: "LOG_LEVEL_DEBUG2"
          - 5: "LOG_LEVEL_DEBUG1"
          - 6: "LOG_LEVEL_LOG"
          - 7: "LOG_LEVEL_NOTICE"
          - 8: "LOG_LEVEL_WARNING"
          - 9: "LOG_LEVEL_ERROR"
          - 10: "LOG_LEVEL_FATAL"
          - 11: "LOG_LEVEL_PANIC"

        * `constraint_exclusion` one of:
          - 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
          - 1: "CONSTRAINT_EXCLUSION_ON"
          - 2: "CONSTRAINT_EXCLUSION_OFF"
          - 3: "CONSTRAINT_EXCLUSION_PARTITION"

        * `cursor_tuple_fraction` float

        * `deadlock_timeout` integer

        * `default_statistics_target` integer

        * `default_transaction_isolation` one of:
          - 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
          - 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
          - 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
          - 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
          - 4: "TRANSACTION_ISOLATION_SERIALIZABLE"

        * `default_transaction_read_only` boolean

        * `default_with_oids` boolean

        * `effective_cache_size` integer

        * `effective_io_concurrency` integer

        * `enable_bitmapscan` boolean

        * `enable_hashagg` boolean

        * `enable_hashjoin` boolean

        * `enable_incremental_sort` boolean

        * `enable_indexonlyscan` boolean

        * `enable_indexscan` boolean

        * `enable_material` boolean

        * `enable_mergejoin` boolean

        * `enable_nestloop` boolean

        * `enable_parallel_append` boolean

        * `enable_parallel_hash` boolean

        * `enable_partition_pruning` boolean

        * `enable_partitionwise_aggregate` boolean

        * `enable_partitionwise_join` boolean

        * `enable_seqscan` boolean

        * `enable_sort` boolean

        * `enable_tidscan` boolean

        * `escape_string_warning` boolean

        * `exit_on_error` boolean

        * `force_parallel_mode` one of:
          - 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
          - 1: "FORCE_PARALLEL_MODE_ON"
          - 2: "FORCE_PARALLEL_MODE_OFF"
          - 3: "FORCE_PARALLEL_MODE_REGRESS"

        * `from_collapse_limit` integer

        * `gin_pending_list_limit` integer

        * `hash_mem_multiplier` float

        * `idle_in_transaction_session_timeout` integer

        * `jit` boolean

        * `join_collapse_limit` integer

        * `lo_compat_privileges` boolean

        * `lock_timeout` integer

        * `log_checkpoints` boolean

        * `log_connections` boolean

        * `log_disconnections` boolean

        * `log_duration` boolean

        * `log_error_verbosity` one of:
          - 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
          - 1: "LOG_ERROR_VERBOSITY_TERSE"
          - 2: "LOG_ERROR_VERBOSITY_DEFAULT"
          - 3: "LOG_ERROR_VERBOSITY_VERBOSE"

        * `log_lock_waits` boolean

        * `log_min_duration_sample` integer

        * `log_min_duration_statement` integer

        * `log_min_error_statement` one of:
          - 0: "LOG_LEVEL_UNSPECIFIED"
          - 1: "LOG_LEVEL_DEBUG5"
          - 2: "LOG_LEVEL_DEBUG4"
          - 3: "LOG_LEVEL_DEBUG3"
          - 4: "LOG_LEVEL_DEBUG2"
          - 5: "LOG_LEVEL_DEBUG1"
          - 6: "LOG_LEVEL_LOG"
          - 7: "LOG_LEVEL_NOTICE"
          - 8: "LOG_LEVEL_WARNING"
          - 9: "LOG_LEVEL_ERROR"
          - 10: "LOG_LEVEL_FATAL"
          - 11: "LOG_LEVEL_PANIC"

        * `log_min_messages` one of:
          - 0: "LOG_LEVEL_UNSPECIFIED"
          - 1: "LOG_LEVEL_DEBUG5"
          - 2: "LOG_LEVEL_DEBUG4"
          - 3: "LOG_LEVEL_DEBUG3"
          - 4: "LOG_LEVEL_DEBUG2"
          - 5: "LOG_LEVEL_DEBUG1"
          - 6: "LOG_LEVEL_LOG"
          - 7: "LOG_LEVEL_NOTICE"
          - 8: "LOG_LEVEL_WARNING"
          - 9: "LOG_LEVEL_ERROR"
          - 10: "LOG_LEVEL_FATAL"
          - 11: "LOG_LEVEL_PANIC"

        * `log_parameter_max_length` integer

        * `log_parameter_max_length_on_error` integer

        * `log_statement` one of:
          - 0: "LOG_STATEMENT_UNSPECIFIED"
          - 1: "LOG_STATEMENT_NONE"
          - 2: "LOG_STATEMENT_DDL"
          - 3: "LOG_STATEMENT_MOD"
          - 4: "LOG_STATEMENT_ALL"

        * `log_statement_sample_rate` float

        * `log_temp_files` integer

        * `log_transaction_sample_rate` float

        * `logical_decoding_work_mem` integer

        * `maintenance_io_concurrency` integer

        * `maintenance_work_mem` integer

        * `max_connections` integer

        * `max_locks_per_transaction` integer

        * `max_parallel_maintenance_workers` integer

        * `max_parallel_workers` integer

        * `max_parallel_workers_per_gather` integer

        * `max_pred_locks_per_transaction` integer

        * `max_prepared_transactions` integer

        * `max_slot_wal_keep_size` integer

        * `max_standby_streaming_delay` integer

        * `max_wal_size` integer

        * `max_worker_processes` integer

        * `min_wal_size` integer

        * `old_snapshot_threshold` integer

        * `operator_precedence_warning` boolean

        * `parallel_leader_participation` boolean

        * `pg_hint_plan_debug_print` one of:
          - 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
          - 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
          - 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
          - 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
          - 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"

        * `pg_hint_plan_enable_hint` boolean

        * `pg_hint_plan_enable_hint_table` boolean

        * `pg_hint_plan_message_level` one of:
          - 0: "LOG_LEVEL_UNSPECIFIED"
          - 1: "LOG_LEVEL_DEBUG5"
          - 2: "LOG_LEVEL_DEBUG4"
          - 3: "LOG_LEVEL_DEBUG3"
          - 4: "LOG_LEVEL_DEBUG2"
          - 5: "LOG_LEVEL_DEBUG1"
          - 6: "LOG_LEVEL_LOG"
          - 7: "LOG_LEVEL_NOTICE"
          - 8: "LOG_LEVEL_WARNING"
          - 9: "LOG_LEVEL_ERROR"
          - 10: "LOG_LEVEL_FATAL"
          - 11: "LOG_LEVEL_PANIC"

        * `plan_cache_mode` one of:
          - 0: "PLAN_CACHE_MODE_UNSPECIFIED"
          - 1: "PLAN_CACHE_MODE_AUTO"
          - 2: "PLAN_CACHE_MODE_FORCE_CUSTOM_PLAN"
          - 3: "PLAN_CACHE_MODE_FORCE_GENERIC_PLAN"

        * `quote_all_identifiers` boolean

        * `random_page_cost` float

        * `row_security` boolean

        * `search_path` text

        * `seq_page_cost` float

        * `shared_buffers` integer

        * `standard_conforming_strings` boolean

        * `statement_timeout` integer

        * `synchronize_seqscans` boolean

        * `synchronous_commit` one of:
          - 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
          - 1: "SYNCHRONOUS_COMMIT_ON"
          - 2: "SYNCHRONOUS_COMMIT_OFF"
          - 3: "SYNCHRONOUS_COMMIT_LOCAL"
          - 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
          - 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"

        * `temp_buffers` integer

        * `temp_file_limit` integer

        * `timezone` text

        * `track_activity_query_size` integer

        * `transform_null_equals` boolean

        * `vacuum_cleanup_index_scale_factor` float

        * `vacuum_cost_delay` integer

        * `vacuum_cost_limit` integer

        * `vacuum_cost_page_dirty` integer

        * `vacuum_cost_page_hit` integer

        * `vacuum_cost_page_miss` integer

        * `wal_keep_size` integer

        * `wal_level` one of:
          - 0: "WAL_LEVEL_UNSPECIFIED"
          - 1: "WAL_LEVEL_REPLICA"
          - 2: "WAL_LEVEL_LOGICAL"

        * `work_mem` integer

        * `xmlbinary` one of:
          - 0: "XML_BINARY_UNSPECIFIED"
          - 1: "XML_BINARY_BASE64"
          - 2: "XML_BINARY_HEX"

        * `xmloption` one of:
          - 0: "XML_OPTION_UNSPECIFIED"
          - 1: "XML_OPTION_DOCUMENT"
          - 2: "XML_OPTION_CONTENT"

        ### Postgresql 12 config

        * `archive_timeout` integer

        * `array_nulls` boolean

        * `auto_explain_log_analyze` boolean

        * `auto_explain_log_buffers` boolean

        * `auto_explain_log_min_duration` integer

        * `auto_explain_log_nested_statements` boolean

        * `auto_explain_log_timing` boolean

        * `auto_explain_log_triggers` boolean

        * `auto_explain_log_verbose` boolean

        * `auto_explain_sample_rate` float

        * `autovacuum_analyze_scale_factor` float

        * `autovacuum_max_workers` integer

        * `autovacuum_naptime` integer

        * `autovacuum_vacuum_cost_delay` integer

        * `autovacuum_vacuum_cost_limit` integer

        * `autovacuum_vacuum_scale_factor` float

        * `autovacuum_work_mem` integer

        * `backend_flush_after` integer

        * `backslash_quote` one of:
        * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
        * * 1: "BACKSLASH_QUOTE"
        * * 2: "BACKSLASH_QUOTE_ON"
        * * 3: "BACKSLASH_QUOTE_OFF"
        * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"

        * `bgwriter_delay` integer

        * `bgwriter_flush_after` integer

        * `bgwriter_lru_maxpages` integer

        * `bgwriter_lru_multiplier` float

        * `bytea_output` one of:
        * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
        * * 1: "BYTEA_OUTPUT_HEX"
        * * 2: "BYTEA_OUTPUT_ESCAPED"

        * `checkpoint_completion_target` float

        * `checkpoint_flush_after` integer

        * `checkpoint_timeout` integer

        * `client_min_messages` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `constraint_exclusion` one of:
        * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
        * * 1: "CONSTRAINT_EXCLUSION_ON"
        * * 2: "CONSTRAINT_EXCLUSION_OFF"
        * * 3: "CONSTRAINT_EXCLUSION_PARTITION"

        * `cursor_tuple_fraction` float

        * `deadlock_timeout` integer

        * `default_statistics_target` integer

        * `default_transaction_isolation` one of:
        * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
        * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
        * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
        * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
        * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"

        * `default_transaction_read_only` boolean

        * `default_with_oids` boolean

        * `effective_cache_size` integer

        * `effective_io_concurrency` integer

        * `enable_bitmapscan` boolean

        * `enable_hashagg` boolean

        * `enable_hashjoin` boolean

        * `enable_indexonlyscan` boolean

        * `enable_indexscan` boolean

        * `enable_material` boolean

        * `enable_mergejoin` boolean

        * `enable_nestloop` boolean

        * `enable_parallel_append` boolean

        * `enable_parallel_hash` boolean

        * `enable_partition_pruning` boolean

        * `enable_partitionwise_aggregate` boolean

        * `enable_partitionwise_join` boolean

        * `enable_seqscan` boolean

        * `enable_sort` boolean

        * `enable_tidscan` boolean

        * `escape_string_warning` boolean

        * `exit_on_error` boolean

        * `force_parallel_mode` one of:
        * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
        * * 1: "FORCE_PARALLEL_MODE_ON"
        * * 2: "FORCE_PARALLEL_MODE_OFF"
        * * 3: "FORCE_PARALLEL_MODE_REGRESS"

        * `from_collapse_limit` integer

        * `gin_pending_list_limit` integer

        * `idle_in_transaction_session_timeout` integer

        * `jit` boolean

        * `join_collapse_limit` integer

        * `lo_compat_privileges` boolean

        * `lock_timeout` integer

        * `log_checkpoints` boolean

        * `log_connections` boolean

        * `log_disconnections` boolean

        * `log_duration` boolean

        * `log_error_verbosity` one of:
        * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
        * * 1: "LOG_ERROR_VERBOSITY_TERSE"
        * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
        * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"

        * `log_lock_waits` boolean

        * `log_min_duration_statement` integer

        * `log_min_error_statement` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `log_min_messages` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `log_statement` one of:
        * * 0: "LOG_STATEMENT_UNSPECIFIED"
        * * 1: "LOG_STATEMENT_NONE"
        * * 2: "LOG_STATEMENT_DDL"
        * * 3: "LOG_STATEMENT_MOD"
        * * 4: "LOG_STATEMENT_ALL"

        * `log_temp_files` integer

        * `log_transaction_sample_rate` float

        * `maintenance_work_mem` integer

        * `max_connections` integer

        * `max_locks_per_transaction` integer

        * `max_parallel_maintenance_workers` integer

        * `max_parallel_workers` integer

        * `max_parallel_workers_per_gather` integer

        * `max_pred_locks_per_transaction` integer

        * `max_prepared_transactions` integer

        * `max_standby_streaming_delay` integer

        * `max_wal_size` integer

        * `max_worker_processes` integer

        * `min_wal_size` integer

        * `old_snapshot_threshold` integer

        * `operator_precedence_warning` boolean

        * `parallel_leader_participation` boolean

        * `pg_hint_plan_debug_print` one of:
        * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
        * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
        * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
        * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
        * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"

        * `pg_hint_plan_enable_hint` boolean

        * `pg_hint_plan_enable_hint_table` boolean

        * `pg_hint_plan_message_level` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `plan_cache_mode` one of:
        * * 0: "PLAN_CACHE_MODE_UNSPECIFIED"
        * * 1: "PLAN_CACHE_MODE_AUTO"
        * * 2: "PLAN_CACHE_MODE_FORCE_CUSTOM_PLAN"
        * * 3: "PLAN_CACHE_MODE_FORCE_GENERIC_PLAN"

        * `quote_all_identifiers` boolean

        * `random_page_cost` float

        * `row_security` boolean

        * `search_path` text

        * `seq_page_cost` float

        * `shared_buffers` integer

        * `shared_preload_libraries` override if not set. One of:
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
        * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * NO value

        * `standard_conforming_strings` boolean

        * `statement_timeout` integer

        * `synchronize_seqscans` boolean

        * `synchronous_commit` one of:
        * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
        * * 1: "SYNCHRONOUS_COMMIT_ON"
        * * 2: "SYNCHRONOUS_COMMIT_OFF"
        * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
        * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
        * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"

        * `temp_buffers` integer

        * `temp_file_limit` integer

        * `timezone` text

        * `track_activity_query_size` integer

        * `transform_null_equals` boolean

        * `vacuum_cleanup_index_scale_factor` float

        * `vacuum_cost_delay` integer

        * `vacuum_cost_limit` integer

        * `vacuum_cost_page_dirty` integer

        * `vacuum_cost_page_hit` integer

        * `vacuum_cost_page_miss` integer

        * `wal_level` one of:
        * * 0: "WAL_LEVEL_UNSPECIFIED"
        * * 1: "WAL_LEVEL_REPLICA"
        * * 2: "WAL_LEVEL_LOGICAL"

        * `work_mem` integer

        * `xmlbinary` one of:
        * * 0: "XML_BINARY_UNSPECIFIED"
        * * 1: "XML_BINARY_BASE64"
        * * 2: "XML_BINARY_HEX"

        * `xmloption` one of:
        * * 0: "XML_OPTION_UNSPECIFIED"
        * * 1: "XML_OPTION_DOCUMENT"
        * * 2: "XML_OPTION_CONTENT"

        ### Postgresql 11 config

        * `archive_timeout` integer

        * `array_nulls` boolean

        * `auto_explain_log_analyze` boolean

        * `auto_explain_log_buffers` boolean

        * `auto_explain_log_min_duration` integer

        * `auto_explain_log_nested_statements` boolean

        * `auto_explain_log_timing` boolean

        * `auto_explain_log_triggers` boolean

        * `auto_explain_log_verbose` boolean

        * `auto_explain_sample_rate` float

        * `autovacuum_analyze_scale_factor` float

        * `autovacuum_max_workers` integer

        * `autovacuum_naptime` integer

        * `autovacuum_vacuum_cost_delay` integer

        * `autovacuum_vacuum_cost_limit` integer

        * `autovacuum_vacuum_scale_factor` float

        * `autovacuum_work_mem` integer

        * `backend_flush_after` integer

        * `backslash_quote` one of:
        * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
        * * 1: "BACKSLASH_QUOTE"
        * * 2: "BACKSLASH_QUOTE_ON"
        * * 3: "BACKSLASH_QUOTE_OFF"
        * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"

        * `bgwriter_delay` integer

        * `bgwriter_flush_after` integer

        * `bgwriter_lru_maxpages` integer

        * `bgwriter_lru_multiplier` float

        * `bytea_output` one of:
        * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
        * * 1: "BYTEA_OUTPUT_HEX"
        * * 2: "BYTEA_OUTPUT_ESCAPED"

        * `checkpoint_completion_target` float

        * `checkpoint_flush_after` integer

        * `checkpoint_timeout` integer

        * `client_min_messages` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `constraint_exclusion` one of:
        * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
        * * 1: "CONSTRAINT_EXCLUSION_ON"
        * * 2: "CONSTRAINT_EXCLUSION_OFF"
        * * 3: "CONSTRAINT_EXCLUSION_PARTITION"

        * `cursor_tuple_fraction` float

        * `deadlock_timeout` integer

        * `default_statistics_target` integer

        * `default_transaction_isolation` one of:
        * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
        * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
        * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
        * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
        * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"

        * `default_transaction_read_only` boolean

        * `default_with_oids` boolean

        * `effective_cache_size` integer

        * `effective_io_concurrency` integer

        * `enable_bitmapscan` boolean

        * `enable_hashagg` boolean

        * `enable_hashjoin` boolean

        * `enable_indexonlyscan` boolean

        * `enable_indexscan` boolean

        * `enable_material` boolean

        * `enable_mergejoin` boolean

        * `enable_nestloop` boolean

        * `enable_parallel_append` boolean

        * `enable_parallel_hash` boolean

        * `enable_partition_pruning` boolean

        * `enable_partitionwise_aggregate` boolean

        * `enable_partitionwise_join` boolean

        * `enable_seqscan` boolean

        * `enable_sort` boolean

        * `enable_tidscan` boolean

        * `escape_string_warning` boolean

        * `exit_on_error` boolean

        * `force_parallel_mode` one of:
        * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
        * * 1: "FORCE_PARALLEL_MODE_ON"
        * * 2: "FORCE_PARALLEL_MODE_OFF"
        * * 3: "FORCE_PARALLEL_MODE_REGRESS"

        * `from_collapse_limit` integer

        * `gin_pending_list_limit` integer

        * `idle_in_transaction_session_timeout` integer

        * `jit` boolean

        * `join_collapse_limit` integer

        * `lo_compat_privileges` boolean

        * `lock_timeout` integer

        * `log_checkpoints` boolean

        * `log_connections` boolean

        * `log_disconnections` boolean

        * `log_duration` boolean

        * `log_error_verbosity` one of:
        * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
        * * 1: "LOG_ERROR_VERBOSITY_TERSE"
        * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
        * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"

        * `log_lock_waits` boolean

        * `log_min_duration_statement` integer

        * `log_min_error_statement` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `log_min_messages` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `log_statement` one of:
        * * 0: "LOG_STATEMENT_UNSPECIFIED"
        * * 1: "LOG_STATEMENT_NONE"
        * * 2: "LOG_STATEMENT_DDL"
        * * 3: "LOG_STATEMENT_MOD"
        * * 4: "LOG_STATEMENT_ALL"

        * `log_temp_files` integer

        * `maintenance_work_mem` integer

        * `max_connections` integer

        * `max_locks_per_transaction` integer

        * `max_parallel_maintenance_workers` integer

        * `max_parallel_workers` integer

        * `max_parallel_workers_per_gather` integer

        * `max_pred_locks_per_transaction` integer

        * `max_prepared_transactions` integer

        * `max_standby_streaming_delay` integer

        * `max_wal_size` integer

        * `max_worker_processes` integer

        * `min_wal_size` integer

        * `old_snapshot_threshold` integer

        * `operator_precedence_warning` boolean

        * `parallel_leader_participation` boolean

        * `pg_hint_plan_debug_print` one of:
        * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
        * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
        * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
        * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
        * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"

        * `pg_hint_plan_enable_hint` boolean

        * `pg_hint_plan_enable_hint_table` boolean

        * `pg_hint_plan_message_level` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `quote_all_identifiers` boolean

        * `random_page_cost` float

        * `row_security` boolean

        * `search_path` text

        * `seq_page_cost` float

        * `shared_buffers` integer

        * `shared_preload_libraries` override if not set. One of:
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
        * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * NO value

        * `standard_conforming_strings` boolean

        * `statement_timeout` integer

        * `synchronize_seqscans` boolean

        * `synchronous_commit` one of:
        * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
        * * 1: "SYNCHRONOUS_COMMIT_ON"
        * * 2: "SYNCHRONOUS_COMMIT_OFF"
        * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
        * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
        * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"

        * `temp_buffers` integer

        * `temp_file_limit` integer

        * `timezone` text

        * `track_activity_query_size` integer

        * `transform_null_equals` boolean

        * `vacuum_cleanup_index_scale_factor` float

        * `vacuum_cost_delay` integer

        * `vacuum_cost_limit` integer

        * `vacuum_cost_page_dirty` integer

        * `vacuum_cost_page_hit` integer

        * `vacuum_cost_page_miss` integer

        * `wal_level` one of:
        * * 0: "WAL_LEVEL_UNSPECIFIED"
        * * 1: "WAL_LEVEL_REPLICA"
        * * 2: "WAL_LEVEL_LOGICAL"

        * `work_mem` integer

        * `xmlbinary` one of:
        * * 0: "XML_BINARY_UNSPECIFIED"
        * * 1: "XML_BINARY_BASE64"
        * * 2: "XML_BINARY_HEX"

        * `xmloption` one of:
        * * 0: "XML_OPTION_UNSPECIFIED"
        * * 1: "XML_OPTION_DOCUMENT"
        * * 2: "XML_OPTION_CONTENT"

        ### Postgresql 10 config

        * `archive_timeout` integer

        * `array_nulls` boolean

        * `auto_explain_log_analyze` boolean

        * `auto_explain_log_buffers` boolean

        * `auto_explain_log_min_duration` integer

        * `auto_explain_log_nested_statements` boolean

        * `auto_explain_log_timing` boolean

        * `auto_explain_log_triggers` boolean

        * `auto_explain_log_verbose` boolean

        * `auto_explain_sample_rate` float

        * `autovacuum_analyze_scale_factor` float

        * `autovacuum_max_workers` integer

        * `autovacuum_naptime` integer

        * `autovacuum_vacuum_cost_delay` integer

        * `autovacuum_vacuum_cost_limit` integer

        * `autovacuum_vacuum_scale_factor` float

        * `autovacuum_work_mem` integer

        * `backend_flush_after` integer

        * `backslash_quote` one of:
        * * 0: "BACKSLASH_QUOTE_UNSPECIFIED"
        * * 1: "BACKSLASH_QUOTE"
        * * 2: "BACKSLASH_QUOTE_ON"
        * * 3: "BACKSLASH_QUOTE_OFF"
        * * 4: "BACKSLASH_QUOTE_SAFE_ENCODING"

        * `bgwriter_delay` integer

        * `bgwriter_flush_after` integer

        * `bgwriter_lru_maxpages` integer

        * `bgwriter_lru_multiplier` float

        * `bytea_output` one of:
        * * 0: "BYTEA_OUTPUT_UNSPECIFIED"
        * * 1: "BYTEA_OUTPUT_HEX"
        * * 2: "BYTEA_OUTPUT_ESCAPED"

        * `checkpoint_completion_target` float

        * `checkpoint_flush_after` integer

        * `checkpoint_timeout` integer

        * `client_min_messages` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `constraint_exclusion` one of:
        * * 0: "CONSTRAINT_EXCLUSION_UNSPECIFIED"
        * * 1: "CONSTRAINT_EXCLUSION_ON"
        * * 2: "CONSTRAINT_EXCLUSION_OFF"
        * * 3: "CONSTRAINT_EXCLUSION_PARTITION"

        * `cursor_tuple_fraction` float

        * `deadlock_timeout` integer

        * `default_statistics_target` integer

        * `default_transaction_isolation` one of:
        * * 0: "TRANSACTION_ISOLATION_UNSPECIFIED"
        * * 1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED"
        * * 2: "TRANSACTION_ISOLATION_READ_COMMITTED"
        * * 3: "TRANSACTION_ISOLATION_REPEATABLE_READ"
        * * 4: "TRANSACTION_ISOLATION_SERIALIZABLE"

        * `default_transaction_read_only` boolean

        * `default_with_oids` boolean

        * `effective_cache_size` integer

        * `effective_io_concurrency` integer

        * `enable_bitmapscan` boolean

        * `enable_hashagg` boolean

        * `enable_hashjoin` boolean

        * `enable_indexonlyscan` boolean

        * `enable_indexscan` boolean

        * `enable_material` boolean

        * `enable_mergejoin` boolean

        * `enable_nestloop` boolean

        * `enable_seqscan` boolean

        * `enable_sort` boolean

        * `enable_tidscan` boolean

        * `escape_string_warning` boolean

        * `exit_on_error` boolean

        * `force_parallel_mode` one of:
        * * 0: "FORCE_PARALLEL_MODE_UNSPECIFIED"
        * * 1: "FORCE_PARALLEL_MODE_ON"
        * * 2: "FORCE_PARALLEL_MODE_OFF"
        * * 3: "FORCE_PARALLEL_MODE_REGRESS"

        * `from_collapse_limit` integer

        * `gin_pending_list_limit` integer

        * `idle_in_transaction_session_timeout` integer

        * `join_collapse_limit` integer

        * `lo_compat_privileges` boolean

        * `lock_timeout` integer

        * `log_checkpoints` boolean

        * `log_connections` boolean

        * `log_disconnections` boolean

        * `log_duration` boolean

        * `log_error_verbosity` one of:
        * * 0: "LOG_ERROR_VERBOSITY_UNSPECIFIED"
        * * 1: "LOG_ERROR_VERBOSITY_TERSE"
        * * 2: "LOG_ERROR_VERBOSITY_DEFAULT"
        * * 3: "LOG_ERROR_VERBOSITY_VERBOSE"

        * `log_lock_waits` boolean

        * `log_min_duration_statement` integer

        * `log_min_error_statement` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `log_min_messages` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `log_statement` one of:
        * * 0: "LOG_STATEMENT_UNSPECIFIED"
        * * 1: "LOG_STATEMENT_NONE"
        * * 2: "LOG_STATEMENT_DDL"
        * * 3: "LOG_STATEMENT_MOD"
        * * 4: "LOG_STATEMENT_ALL"

        * `log_temp_files` integer

        * `maintenance_work_mem` integer

        * `max_connections` integer

        * `max_locks_per_transaction` integer

        * `max_parallel_workers` integer

        * `max_parallel_workers_per_gather` integer

        * `max_pred_locks_per_transaction` integer

        * `max_prepared_transactions` integer

        * `max_standby_streaming_delay` integer

        * `max_wal_size` integer

        * `max_worker_processes` integer

        * `min_wal_size` integer

        * `old_snapshot_threshold` integer

        * `operator_precedence_warning` boolean

        * `pg_hint_plan_debug_print` one of:
        * * 0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED"
        * * 1: "PG_HINT_PLAN_DEBUG_PRINT_OFF"
        * * 2: "PG_HINT_PLAN_DEBUG_PRINT_ON"
        * * 3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED"
        * * 4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE"

        * `pg_hint_plan_enable_hint` boolean

        * `pg_hint_plan_enable_hint_table` boolean

        * `pg_hint_plan_message_level` one of:
        * * 0: "LOG_LEVEL_UNSPECIFIED"
        * * 1: "LOG_LEVEL_DEBUG5"
        * * 2: "LOG_LEVEL_DEBUG4"
        * * 3: "LOG_LEVEL_DEBUG3"
        * * 4: "LOG_LEVEL_DEBUG2"
        * * 5: "LOG_LEVEL_DEBUG1"
        * * 6: "LOG_LEVEL_LOG"
        * * 7: "LOG_LEVEL_NOTICE"
        * * 8: "LOG_LEVEL_WARNING"
        * * 9: "LOG_LEVEL_ERROR"
        * * 10: "LOG_LEVEL_FATAL"
        * * 11: "LOG_LEVEL_PANIC"

        * `quote_all_identifiers` boolean

        * `random_page_cost` float

        * `replacement_sort_tuples` integer

        * `row_security` boolean

        * `search_path` text

        * `seq_page_cost` float

        * `shared_buffers` integer

        * `shared_preload_libraries` override if not set. One of:
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN,SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN"
        * * "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN"
        * * NO value

        * `standard_conforming_strings` boolean

        * `statement_timeout` integer

        * `synchronize_seqscans` boolean

        * `synchronous_commit` one of:
        * * 0: "SYNCHRONOUS_COMMIT_UNSPECIFIED"
        * * 1: "SYNCHRONOUS_COMMIT_ON"
        * * 2: "SYNCHRONOUS_COMMIT_OFF"
        * * 3: "SYNCHRONOUS_COMMIT_LOCAL"
        * * 4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE"
        * * 5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY"

        * `temp_buffers` integer

        * `temp_file_limit` integer

        * `timezone` text

        * `track_activity_query_size` integer

        * `transform_null_equals` boolean

        * `vacuum_cost_delay` integer

        * `vacuum_cost_limit` integer

        * `vacuum_cost_page_dirty` integer

        * `vacuum_cost_page_hit` integer

        * `vacuum_cost_page_miss` integer

        * `wal_level` one of:
        * * 0: "WAL_LEVEL_UNSPECIFIED"
        * * 1: "WAL_LEVEL_REPLICA"
        * * 2: "WAL_LEVEL_LOGICAL"

        * `work_mem` integer

        * `xmlbinary` one of:
        * * 0: "XML_BINARY_UNSPECIFIED"
        * * 1: "XML_BINARY_BASE64"
        * * 2: "XML_BINARY_HEX"

        * `xmloption` one of:
        * * 0: "XML_OPTION_UNSPECIFIED"
        * * 1: "XML_OPTION_DOCUMENT"
        * * 2: "XML_OPTION_CONTENT"

        ## Import

        A cluster can be imported using the `id` of the resource, e.g.

        ```sh
         $ pulumi import yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster foo cluster_id
        ```

        :param str resource_name: The name of the resource.
        :param MdbPostgresqlClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MdbPostgresqlClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterConfigArgs']]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterDatabaseArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 host_master_name: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterHostArgs']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 restore: Optional[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterRestoreArgs']]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterUserArgs']]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MdbPostgresqlClusterArgs.__new__(MdbPostgresqlClusterArgs)

            if config is None and not opts.urn:
                raise TypeError("Missing required property 'config'")
            __props__.__dict__["config"] = config
            if databases is None and not opts.urn:
                raise TypeError("Missing required property 'databases'")
            __props__.__dict__["databases"] = databases
            __props__.__dict__["description"] = description
            if environment is None and not opts.urn:
                raise TypeError("Missing required property 'environment'")
            __props__.__dict__["environment"] = environment
            __props__.__dict__["folder_id"] = folder_id
            __props__.__dict__["host_master_name"] = host_master_name
            if hosts is None and not opts.urn:
                raise TypeError("Missing required property 'hosts'")
            __props__.__dict__["hosts"] = hosts
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["restore"] = restore
            __props__.__dict__["security_group_ids"] = security_group_ids
            if users is None and not opts.urn:
                raise TypeError("Missing required property 'users'")
            __props__.__dict__["users"] = users
            __props__.__dict__["created_at"] = None
            __props__.__dict__["health"] = None
            __props__.__dict__["status"] = None
        super(MdbPostgresqlCluster, __self__).__init__(
            'yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterConfigArgs']]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterDatabaseArgs']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            environment: Optional[pulumi.Input[str]] = None,
            folder_id: Optional[pulumi.Input[str]] = None,
            health: Optional[pulumi.Input[str]] = None,
            host_master_name: Optional[pulumi.Input[str]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterHostArgs']]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_id: Optional[pulumi.Input[str]] = None,
            restore: Optional[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterRestoreArgs']]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterUserArgs']]]]] = None) -> 'MdbPostgresqlCluster':
        """
        Get an existing MdbPostgresqlCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['MdbPostgresqlClusterConfigArgs']] config: Configuration of the PostgreSQL cluster. The structure is documented below.
        :param pulumi.Input[str] created_at: Timestamp of cluster creation.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterDatabaseArgs']]]] databases: A database of the PostgreSQL cluster. The structure is documented below.
        :param pulumi.Input[str] description: Description of the PostgreSQL cluster.
        :param pulumi.Input[str] environment: Deployment environment of the PostgreSQL cluster.
        :param pulumi.Input[str] folder_id: The ID of the folder that the resource belongs to. If it is unset, the default provider `folder_id` is used for create.
        :param pulumi.Input[str] health: Aggregated health of the cluster.
        :param pulumi.Input[str] host_master_name: It sets name of master host. It works only when `host.name` is set.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterHostArgs']]]] hosts: A host of the PostgreSQL cluster. The structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to the PostgreSQL cluster.
        :param pulumi.Input[str] name: Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replication_source_name` parameter.
               Also, this field is used to select which host will be selected as a master host. Please see `host_master_name` parameter.
        :param pulumi.Input[str] network_id: ID of the network, to which the PostgreSQL cluster belongs.
        :param pulumi.Input[pulumi.InputType['MdbPostgresqlClusterRestoreArgs']] restore: The cluster will be created from the specified backup. The structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: A set of ids of security groups assigned to hosts of the cluster.
        :param pulumi.Input[str] status: Status of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbPostgresqlClusterUserArgs']]]] users: A user of the PostgreSQL cluster. The structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MdbPostgresqlClusterState.__new__(_MdbPostgresqlClusterState)

        __props__.__dict__["config"] = config
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["databases"] = databases
        __props__.__dict__["description"] = description
        __props__.__dict__["environment"] = environment
        __props__.__dict__["folder_id"] = folder_id
        __props__.__dict__["health"] = health
        __props__.__dict__["host_master_name"] = host_master_name
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["restore"] = restore
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["status"] = status
        __props__.__dict__["users"] = users
        return MdbPostgresqlCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output['outputs.MdbPostgresqlClusterConfig']:
        """
        Configuration of the PostgreSQL cluster. The structure is documented below.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Timestamp of cluster creation.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def databases(self) -> pulumi.Output[Sequence['outputs.MdbPostgresqlClusterDatabase']]:
        """
        A database of the PostgreSQL cluster. The structure is documented below.
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the PostgreSQL cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output[str]:
        """
        Deployment environment of the PostgreSQL cluster.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Output[str]:
        """
        The ID of the folder that the resource belongs to. If it is unset, the default provider `folder_id` is used for create.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def health(self) -> pulumi.Output[str]:
        """
        Aggregated health of the cluster.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter(name="hostMasterName")
    def host_master_name(self) -> pulumi.Output[str]:
        """
        It sets name of master host. It works only when `host.name` is set.
        """
        return pulumi.get(self, "host_master_name")

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Sequence['outputs.MdbPostgresqlClusterHost']]:
        """
        A host of the PostgreSQL cluster. The structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A set of key/value label pairs to assign to the PostgreSQL cluster.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Host state name. Is should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replication_source_name` parameter.
        Also, this field is used to select which host will be selected as a master host. Please see `host_master_name` parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[str]:
        """
        ID of the network, to which the PostgreSQL cluster belongs.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def restore(self) -> pulumi.Output[Optional['outputs.MdbPostgresqlClusterRestore']]:
        """
        The cluster will be created from the specified backup. The structure is documented below.
        """
        return pulumi.get(self, "restore")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A set of ids of security groups assigned to hosts of the cluster.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of the cluster.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Sequence['outputs.MdbPostgresqlClusterUser']]:
        """
        A user of the PostgreSQL cluster. The structure is documented below.
        """
        return pulumi.get(self, "users")

